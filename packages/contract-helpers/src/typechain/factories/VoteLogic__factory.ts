/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { VoteLogic, VoteLogicInterface } from "../VoteLogic";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "choice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "weight",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "salt",
        type: "string",
      },
    ],
    name: "commit",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "commit",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "choice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "weight",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "justification",
            type: "string",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.Vote",
        name: "newVote",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "commit",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "choice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "weight",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "justification",
            type: "string",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.Vote",
        name: "vote",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "minRange",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxRange",
        type: "uint256",
      },
    ],
    name: "isBetweenRange",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "commit",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "choice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "weight",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "justification",
            type: "string",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.Vote",
        name: "vote",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "winningChoice",
        type: "uint256",
      },
    ],
    name: "isVoteCorrect",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

export class VoteLogic__factory {
  static readonly abi = _abi;
  static createInterface(): VoteLogicInterface {
    return new utils.Interface(_abi) as VoteLogicInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VoteLogic {
    return new Contract(address, _abi, signerOrProvider) as VoteLogic;
  }
}
