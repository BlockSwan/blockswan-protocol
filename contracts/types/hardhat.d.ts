/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "IACLManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IACLManager__factory>;
    getContractFactory(
      name: "IAddressProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddressProvider__factory>;
    getContractFactory(
      name: "IBSWAN",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBSWAN__factory>;
    getContractFactory(
      name: "IProtocolConfigurator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocolConfigurator__factory>;
    getContractFactory(
      name: "IProviderContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProviderContract__factory>;
    getContractFactory(
      name: "IProviderRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProviderRegistry__factory>;
    getContractFactory(
      name: "IUser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUser__factory>;
    getContractFactory(
      name: "MUSDC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MUSDC__factory>;
    getContractFactory(
      name: "BSWAN",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BSWAN__factory>;
    getContractFactory(
      name: "ACLManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ACLManager__factory>;
    getContractFactory(
      name: "AddressProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressProvider__factory>;
    getContractFactory(
      name: "ProtocolConfigurator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProtocolConfigurator__factory>;
    getContractFactory(
      name: "ProviderContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProviderContract__factory>;
    getContractFactory(
      name: "ProviderRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProviderRegistry__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "InviterLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InviterLogic__factory>;
    getContractFactory(
      name: "User",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.User__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "IACLManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IACLManager>;
    getContractAt(
      name: "IAddressProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddressProvider>;
    getContractAt(
      name: "IBSWAN",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBSWAN>;
    getContractAt(
      name: "IProtocolConfigurator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProtocolConfigurator>;
    getContractAt(
      name: "IProviderContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProviderContract>;
    getContractAt(
      name: "IProviderRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProviderRegistry>;
    getContractAt(
      name: "IUser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUser>;
    getContractAt(
      name: "MUSDC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MUSDC>;
    getContractAt(
      name: "BSWAN",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BSWAN>;
    getContractAt(
      name: "ACLManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ACLManager>;
    getContractAt(
      name: "AddressProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressProvider>;
    getContractAt(
      name: "ProtocolConfigurator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProtocolConfigurator>;
    getContractAt(
      name: "ProviderContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProviderContract>;
    getContractAt(
      name: "ProviderRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProviderRegistry>;
    getContractAt(
      name: "Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "InviterLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InviterLogic>;
    getContractAt(
      name: "User",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.User>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
