/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ProviderContractInterface extends utils.Interface {
  functions: {
    "ACL_ADMIN()": FunctionFragment;
    "ACL_MANAGER()": FunctionFragment;
    "ADDRESSES_PROVIDER()": FunctionFragment;
    "ADDRESS_PROVIDER()": FunctionFragment;
    "BLACKLIST_ROLE()": FunctionFragment;
    "BUYER_ROLE()": FunctionFragment;
    "DAT()": FunctionFragment;
    "DATA_PROVIDER()": FunctionFragment;
    "GIG()": FunctionFragment;
    "JUDGE_ROLE()": FunctionFragment;
    "MAX_UINT()": FunctionFragment;
    "ORDER()": FunctionFragment;
    "PROTOCOL_ADMIN_ROLE()": FunctionFragment;
    "PROTOCOL_CONFIGURATOR()": FunctionFragment;
    "SELLER_ROLE()": FunctionFragment;
    "USER()": FunctionFragment;
    "WHITELIST_ROLE()": FunctionFragment;
    "approve(address)": FunctionFragment;
    "datCurrency()": FunctionFragment;
    "fetchContract(bytes32)": FunctionFragment;
    "hasProtocolRole(bytes32,address)": FunctionFragment;
    "isStillBuyer(address)": FunctionFragment;
    "kill()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setProvider(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ACL_ADMIN"
      | "ACL_MANAGER"
      | "ADDRESSES_PROVIDER"
      | "ADDRESS_PROVIDER"
      | "BLACKLIST_ROLE"
      | "BUYER_ROLE"
      | "DAT"
      | "DATA_PROVIDER"
      | "GIG"
      | "JUDGE_ROLE"
      | "MAX_UINT"
      | "ORDER"
      | "PROTOCOL_ADMIN_ROLE"
      | "PROTOCOL_CONFIGURATOR"
      | "SELLER_ROLE"
      | "USER"
      | "WHITELIST_ROLE"
      | "approve"
      | "datCurrency"
      | "fetchContract"
      | "hasProtocolRole"
      | "isStillBuyer"
      | "kill"
      | "owner"
      | "renounceOwnership"
      | "setProvider"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ACL_ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ACL_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ADDRESSES_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ADDRESS_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BLACKLIST_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BUYER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DAT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DATA_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "GIG", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "JUDGE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_UINT", values?: undefined): string;
  encodeFunctionData(functionFragment: "ORDER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_CONFIGURATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SELLER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "USER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WHITELIST_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "datCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchContract",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasProtocolRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isStillBuyer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "kill", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "ACL_ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ACL_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ADDRESSES_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ADDRESS_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BLACKLIST_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BUYER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DAT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DATA_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GIG", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "JUDGE_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_UINT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ORDER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_CONFIGURATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SELLER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WHITELIST_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "datCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasProtocolRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStillBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProviderContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProviderContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACL_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    ACL_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<[string]>;

    ADDRESS_PROVIDER(overrides?: CallOverrides): Promise<[string]>;

    BLACKLIST_ROLE(overrides?: CallOverrides): Promise<[string]>;

    BUYER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DAT(overrides?: CallOverrides): Promise<[string]>;

    DATA_PROVIDER(overrides?: CallOverrides): Promise<[string]>;

    GIG(overrides?: CallOverrides): Promise<[string]>;

    JUDGE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MAX_UINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    ORDER(overrides?: CallOverrides): Promise<[string]>;

    PROTOCOL_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PROTOCOL_CONFIGURATOR(overrides?: CallOverrides): Promise<[string]>;

    SELLER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    USER(overrides?: CallOverrides): Promise<[string]>;

    WHITELIST_ROLE(overrides?: CallOverrides): Promise<[string]>;

    approve(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    datCurrency(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fetchContract(
      _name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hasProtocolRole(
      _role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isStillBuyer(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    kill(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProvider(
      _providerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ACL_ADMIN(overrides?: CallOverrides): Promise<string>;

  ACL_MANAGER(overrides?: CallOverrides): Promise<string>;

  ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

  ADDRESS_PROVIDER(overrides?: CallOverrides): Promise<string>;

  BLACKLIST_ROLE(overrides?: CallOverrides): Promise<string>;

  BUYER_ROLE(overrides?: CallOverrides): Promise<string>;

  DAT(overrides?: CallOverrides): Promise<string>;

  DATA_PROVIDER(overrides?: CallOverrides): Promise<string>;

  GIG(overrides?: CallOverrides): Promise<string>;

  JUDGE_ROLE(overrides?: CallOverrides): Promise<string>;

  MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

  ORDER(overrides?: CallOverrides): Promise<string>;

  PROTOCOL_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  PROTOCOL_CONFIGURATOR(overrides?: CallOverrides): Promise<string>;

  SELLER_ROLE(overrides?: CallOverrides): Promise<string>;

  USER(overrides?: CallOverrides): Promise<string>;

  WHITELIST_ROLE(overrides?: CallOverrides): Promise<string>;

  approve(
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  datCurrency(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fetchContract(
    _name: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  hasProtocolRole(
    _role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isStillBuyer(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kill(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProvider(
    _providerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ACL_ADMIN(overrides?: CallOverrides): Promise<string>;

    ACL_MANAGER(overrides?: CallOverrides): Promise<string>;

    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

    ADDRESS_PROVIDER(overrides?: CallOverrides): Promise<string>;

    BLACKLIST_ROLE(overrides?: CallOverrides): Promise<string>;

    BUYER_ROLE(overrides?: CallOverrides): Promise<string>;

    DAT(overrides?: CallOverrides): Promise<string>;

    DATA_PROVIDER(overrides?: CallOverrides): Promise<string>;

    GIG(overrides?: CallOverrides): Promise<string>;

    JUDGE_ROLE(overrides?: CallOverrides): Promise<string>;

    MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

    ORDER(overrides?: CallOverrides): Promise<string>;

    PROTOCOL_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    PROTOCOL_CONFIGURATOR(overrides?: CallOverrides): Promise<string>;

    SELLER_ROLE(overrides?: CallOverrides): Promise<string>;

    USER(overrides?: CallOverrides): Promise<string>;

    WHITELIST_ROLE(overrides?: CallOverrides): Promise<string>;

    approve(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    datCurrency(overrides?: CallOverrides): Promise<string>;

    fetchContract(
      _name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    hasProtocolRole(
      _role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isStillBuyer(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kill(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setProvider(
      _providerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    ACL_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    ACL_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    ADDRESS_PROVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    BLACKLIST_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    BUYER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DAT(overrides?: CallOverrides): Promise<BigNumber>;

    DATA_PROVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    GIG(overrides?: CallOverrides): Promise<BigNumber>;

    JUDGE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

    ORDER(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_CONFIGURATOR(overrides?: CallOverrides): Promise<BigNumber>;

    SELLER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    USER(overrides?: CallOverrides): Promise<BigNumber>;

    WHITELIST_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    datCurrency(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fetchContract(
      _name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasProtocolRole(
      _role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStillBuyer(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kill(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProvider(
      _providerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACL_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ACL_MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ADDRESSES_PROVIDER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ADDRESS_PROVIDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BLACKLIST_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BUYER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DAT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DATA_PROVIDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GIG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    JUDGE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_UINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROTOCOL_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PROTOCOL_CONFIGURATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SELLER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WHITELIST_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    datCurrency(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fetchContract(
      _name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasProtocolRole(
      _role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStillBuyer(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kill(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProvider(
      _providerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
