/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { User, UserInterface } from "../../../protocol/user/User";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAddressProvider",
        name: "provider",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "userId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        components: [
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "inviterId",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct DataTypes.User",
        name: "userData",
        type: "tuple",
      },
    ],
    name: "UserAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "userId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        components: [
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "inviterId",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct DataTypes.User",
        name: "userData",
        type: "tuple",
      },
    ],
    name: "UserEdited",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "metadata",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "inviterId",
        type: "uint256",
      },
    ],
    name: "createUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "userId",
        type: "uint256",
      },
    ],
    name: "getAddressById",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pubKey",
        type: "address",
      },
    ],
    name: "getUserByAddress",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "inviterId",
            type: "uint256",
          },
        ],
        internalType: "struct DataTypes.User",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "userId",
        type: "uint256",
      },
    ],
    name: "getUserById",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "inviterId",
            type: "uint256",
          },
        ],
        internalType: "struct DataTypes.User",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUserList",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "inviterId",
            type: "uint256",
          },
        ],
        internalType: "struct DataTypes.User[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUsersCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "kill",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAddressProvider",
        name: "_providerAddress",
        type: "address",
      },
    ],
    name: "setProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610d1c380380610d1c83398101604081905261002f91610103565b61003f61003a6100ad565b6100b1565b6040805180820190915260018152603560f81b60208201526001600160a01b0382166100875760405162461bcd60e51b815260040161007e9190610131565b60405180910390fd5b50600480546001600160a01b0319166001600160a01b0392909216919091179055610184565b3390565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208284031215610114578081fd5b81516001600160a01b038116811461012a578182fd5b9392505050565b6000602080835283518082850152825b8181101561015d57858101830151858201604001528201610141565b8181111561016e5783604083870101525b50601f01601f1916929092016040019392505050565b610b89806101936000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638d80c922116100715780638d80c9221461010f5780638da5cb5b1461012f578063a4a1e26314610137578063b85220431461014c578063cfd8d6c014610161578063f2fde38b14610174576100a9565b8063121ef243146100ae57806341c0e1b5146100c357806369c212f6146100cb5780636ed6da9e146100f4578063715018a614610107575b600080fd5b6100c16100bc366004610796565b610187565b005b6100c16102a9565b6100de6100d936600461073e565b6102df565b6040516100eb9190610a88565b60405180910390f35b6100de61010236600461083d565b6103ab565b6100c16103fc565b61012261011d36600461083d565b610410565b6040516100eb91906108c9565b610122610424565b61013f610433565b6040516100eb9190610a9b565b610154610446565b6040516100eb91906108dd565b6100c161016f36600461073e565b610512565b6100c161018236600461073e565b6105fc565b6000610191610433565b905060006101a0826001610aa4565b60408051606081018252868152602081018690523381830152905163b1f5263d60e01b815291925060009173__$2fdc6bd74422c331d4350e08f48e4d7efc$__9163b1f5263d916101f991859160029190600401610a36565b60206040518083038186803b15801561021157600080fd5b505af4158015610225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102499190610776565b9050808015610260575061025d6000610636565b82145b604051806040016040528060018152602001600760fb1b815250906102a15760405162461bcd60e51b8152600401610298919061093d565b60405180910390fd5b505050505050565b6004546001600160a01b031633146102d157634e487b7160e01b600052600160045260246000fd5b6004546001600160a01b0316ff5b6102e7610724565b6001600160a01b03821660009081526002602052604090819020815180830190925280548290829061031890610abc565b80601f016020809104026020016040519081016040528092919081815260200182805461034490610abc565b80156103915780601f1061036657610100808354040283529160200191610391565b820191906000526020600020905b81548152906001019060200180831161037457829003601f168201915b505050505081526020016001820154815250509050919050565b6103b3610724565b600260006103c18185610647565b6001600160a01b03166001600160a01b0316815260200190815260200160002060405180604001604052908160008201805461031890610abc565b610404610653565b61040e6000610692565b565b60008061041d8184610647565b9392505050565b6003546001600160a01b031690565b6000806104406000610636565b91505090565b60606000610452610433565b905060008167ffffffffffffffff81111561047d57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156104b657816020015b6104a3610724565b81526020019060019003908161049b5790505b50905060005b8281101561050b576104cd816103ab565b8282815181106104ed57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061050390610af7565b9150506104bc565b5091505090565b6001600160a01b038116158061053257506004546001600160a01b031633145b806105be5750336001600160a01b0316306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561057b57600080fd5b505afa15801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b3919061075a565b6001600160a01b0316145b6105da5760405162461bcd60e51b815260040161029890610996565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610604610653565b6001600160a01b03811661062a5760405162461bcd60e51b815260040161029890610950565b61063381610692565b50565b6000610641826106e4565b92915050565b600061041d83836106e8565b61065b610720565b6001600160a01b031661066c610424565b6001600160a01b03161461040e5760405162461bcd60e51b815260040161029890610a01565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b5490565b600082600001828154811061070d57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b3390565b604051806040016040528060608152602001600081525090565b60006020828403121561074f578081fd5b813561041d81610b3e565b60006020828403121561076b578081fd5b815161041d81610b3e565b600060208284031215610787578081fd5b8151801515811461041d578182fd5b600080604083850312156107a8578081fd5b823567ffffffffffffffff808211156107bf578283fd5b818501915085601f8301126107d2578283fd5b81356020828211156107e6576107e6610b28565b604051601f8301601f191681018201848111828210171561080957610809610b28565b604052828152848301820189101561081f578586fd5b82828601838301379182018101949094529694909201359450505050565b60006020828403121561084e578081fd5b5035919050565b60008151808452815b8181101561087a5760208185018101518683018201520161085e565b8181111561088b5782602083870101525b50601f01601f19169290920160200192915050565b60008151604084526108b56040850182610855565b602093840151949093019390935250919050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561093057603f1988860301845261091e8583516108a0565b94509285019290850190600101610902565b5092979650505050505050565b60006020825261041d6020830184610855565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526045908201527f43616e206f6e6c792062652063616c6c6564206966206164647265737365735060408201527f726f766964657220697320656d7074792c206d73672e73656e646572206f722060608201526437bbb732b960d91b608082015260a00190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000848252836020830152606060408301528251606080840152610a5d60c0840182610855565b602085015160808501526040909401516001600160a01b031660a09093019290925250909392505050565b60006020825261041d60208301846108a0565b90815260200190565b60008219821115610ab757610ab7610b12565b500190565b600281046001821680610ad057607f821691505b60208210811415610af157634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415610b0b57610b0b610b12565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461063357600080fdfea2646970667358221220b454e73b45f8b923a58c87f56c52e87cd37dde6ad855ffa539c53151e125466264736f6c63430008000033";

type UserConstructorParams =
  | [linkLibraryAddresses: UserLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UserConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class User__factory extends ContractFactory {
  constructor(...args: UserConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, User__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: UserLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$2fdc6bd74422c331d4350e08f48e4d7efc\\$__", "g"),
      linkLibraryAddresses[
        "contracts/protocol/libraries/logics/UserLogic.sol:UserLogic"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<User> {
    return super.deploy(provider, overrides || {}) as Promise<User>;
  }
  override getDeployTransaction(
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(provider, overrides || {});
  }
  override attach(address: string): User {
    return super.attach(address) as User;
  }
  override connect(signer: Signer): User__factory {
    return super.connect(signer) as User__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UserInterface {
    return new utils.Interface(_abi) as UserInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): User {
    return new Contract(address, _abi, signerOrProvider) as User;
  }
}

export interface UserLibraryAddresses {
  ["contracts/protocol/libraries/logics/UserLogic.sol:UserLogic"]: string;
}
