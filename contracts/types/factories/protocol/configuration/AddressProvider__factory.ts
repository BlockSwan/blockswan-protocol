/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AddressProvider,
  AddressProviderInterface,
} from "../../../protocol/configuration/AddressProvider";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "marketplaceId",
        type: "string",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "_name",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "ContractAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "_name",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "ContractRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "_name",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_oldAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_newAddress",
        type: "address",
      },
    ],
    name: "ContractUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "oldMarketplaceId",
        type: "string",
      },
      {
        indexed: true,
        internalType: "string",
        name: "newMarketplaceId",
        type: "string",
      },
    ],
    name: "MarketplaceIdSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_name",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "addContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_name",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_version",
        type: "uint256",
      },
    ],
    name: "fetchContract",
    outputs: [
      {
        internalType: "address",
        name: "contractAddr",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_name",
        type: "bytes32",
      },
    ],
    name: "fetchContract",
    outputs: [
      {
        internalType: "address",
        name: "contractAddr",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_name",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_version",
        type: "uint256",
      },
    ],
    name: "getContract",
    outputs: [
      {
        internalType: "address",
        name: "contractAddr",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_name",
        type: "bytes32",
      },
    ],
    name: "getContract",
    outputs: [
      {
        internalType: "address",
        name: "contractAddr",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_name",
        type: "bytes32",
      },
    ],
    name: "getContractVersionCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMarketplaceId",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_name",
        type: "bytes32",
      },
    ],
    name: "removeContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "newMarketplaceId",
        type: "string",
      },
    ],
    name: "setMarketplaceId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_name",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_newAddress",
        type: "address",
      },
    ],
    name: "upgradeContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620024a5380380620024a58339818101604052810190620000379190620005b5565b620000576200004b6200010d60201b60201c565b6200011560201b60201c565b6200007367ddb1a3140da6bb8760c01b620001d960201b60201c565b6200008f67709be300f02de04b60c01b620001d960201b60201c565b620000ab672cd9faad1ed1d08e60c01b620001d960201b60201c565b620000bc82620001dc60201b60201c565b620000d8670b0db57154d248fe60c01b620001d960201b60201c565b620000f46728656ddfd1945aae60c01b620001d960201b60201c565b62000105816200039460201b60201c565b5050620007c9565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b620001f867489e45730bacfd8960c01b620001d960201b60201c565b6200021467d12b1d372ce48b8360c01b620001d960201b60201c565b62000230674f8dca64fad3a8fe60c01b620001d960201b60201c565b600060018054620002419062000772565b80601f01602080910402602001604051908101604052809291908181526020018280546200026f9062000772565b8015620002c05780601f106200029457610100808354040283529160200191620002c0565b820191906000526020600020905b815481529060010190602001808311620002a257829003601f168201915b50505050509050620002e367348d7b075c7b9c8860c01b620001d960201b60201c565b8160019080519060200190620002fb929190620004e5565b5062000318671714001309b62a0f60c01b620001d960201b60201c565b62000334674e11bf649e388fd060c01b620001d960201b60201c565b816040516200034491906200067b565b6040518091039020816040516200035c91906200067b565b60405180910390207fc8a4db255dfa968e314eb5d064b4ded5d2454ba98dcb6e40a161964326b11ee560405160405180910390a35050565b620003a46200042b60201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000417576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200040e906200069b565b60405180910390fd5b62000428816200011560201b60201c565b50565b6200043b6200010d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000461620004bc60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620004ba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004b190620006ff565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b828054620004f39062000772565b90600052602060002090601f01602090048101928262000517576000855562000563565b82601f106200053257805160ff191683800117855562000563565b8280016001018555821562000563579182015b828111156200056257825182559160200191906001019062000545565b5b50905062000572919062000576565b5090565b5b808211156200059157600081600090555060010162000577565b5090565b60008151905060018060a01b0381168114620005b057600080fd5b919050565b60008060408385031215620005c8578182fd5b825160018060401b0380821115620005de578384fd5b818501915085601f830112620005f2578384fd5b815181811115620006085762000607620007b3565b5b6040516020601f19601f840116820101818110848211171562000630576200062f620007b3565b5b80604052508181528760208386010111156200064a578586fd5b6200065d8260208301602087016200073c565b80955050505050620006726020840162000595565b90509250929050565b600082516200068f8184602087016200073c565b80830191505092915050565b600060208252602660208301527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408301527f64647265737300000000000000000000000000000000000000000000000000006060830152608082019050919050565b6000602082526020808301527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726040830152606082019050919050565b60005b838110156200075c5780820151818401526020810190506200073f565b838111156200076c576000848401525b50505050565b600060028204905060018216806200078b57607f821691505b60208210811415620007ad57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611ccc80620007d96000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063a43e04d811610066578063a43e04d8146101fe578063e16c7d981461021a578063efa6bc431461024a578063f2fde38b1461027a576100cf565b80638da5cb5b1461019457806396f27b29146101b25780639c44d17a146101e2576100cf565b806306a87c59146100d457806319872f76146101045780632ef3b9b6146101345780635188f996146101505780635fb0db5a1461016c578063715018a61461018a575b600080fd5b6100ee60048036038101906100e99190611997565b610296565b6040516100fb9190611a81565b60405180910390f35b61011e60048036038101906101199190611951565b61040d565b60405161012b9190611a81565b60405180910390f35b61014e600480360381019061014991906119bb565b610582565b005b61016a6004803603810190610165919061196c565b6105fa565b005b610174610a31565b6040516101819190611afe565b60405180910390f35b610192610aff565b005b61019c610b13565b6040516101a99190611a81565b60405180910390f35b6101cc60048036038101906101c79190611997565b610b3c565b6040516101d99190611a81565b60405180910390f35b6101fc60048036038101906101f7919061196c565b610ce6565b005b61021860048036038101906102139190611951565b611037565b005b610234600480360381019061022f9190611951565b6112f4565b6040516102419190611a81565b60405180910390f35b610264600480360381019061025f9190611951565b61136d565b6040516102719190611bd4565b60405180910390f35b610294600480360381019061028f919061192f565b6113c9565b005b60006102ac67a0c9a011d6ac596360c01b61144d565b6102c067a169ae277e4bc43660c01b61144d565b6102d467acf57104de3f326460c01b61144d565b60006102e08484610b3c565b90506102f667f9982bebbf8d7a8160c01b61144d565b61030a67ebf38f3d89655d6a60c01b61144d565b61031e67c3bc5f9410219de460c01b61144d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600181526020017f3500000000000000000000000000000000000000000000000000000000000000815250906103c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bd9190611afe565b60405180910390fd5b506103db6712e37f9e0452d21060c01b61144d565b6103ef676861bd95da5364cb60c01b61144d565b610403677b4a6ac4a17a205c60c01b61144d565b8091505092915050565b600061042367ce8b0b7b8b25adc160c01b61144d565b6104376773761ad9a1d48ef860c01b61144d565b61044b6792f42314bf3f90f560c01b61144d565b6000610456836112f4565b905061046c6734c81ebd8c7c069e60c01b61144d565b61048067a43d9844f1d766d360c01b61144d565b61049467e1638ecbcd2d091960c01b61144d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600181526020017f35000000000000000000000000000000000000000000000000000000000000008152509061053c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105339190611afe565b60405180910390fd5b5061055167c9e9ccde1878f7eb60c01b61144d565b61056567f6273a22efc30eac60c01b61144d565b610579672b7f0c9e26cb32ea60c01b61144d565b80915050919050565b610596670b00c24b38a3928260c01b61144d565b61059e611450565b6105b267cd86569cd0a00e6860c01b61144d565b6105c6672602b29fa2d1d59060c01b61144d565b6105da67ac157fbd26ad42d760c01b61144d565b6105ee674059fcccc45aa57760c01b61144d565b6105f7816114ce565b50565b61060e677f145867c289cc1260c01b61144d565b610616611450565b61062a67b23c114068bd4e6160c01b61144d565b61063e67a38baa64a2a2bc2a60c01b61144d565b6106526743ed28f3fc40063f60c01b61144d565b61066667f4a8929acf75eb0e60c01b61144d565b61067a67e7d62051b8e8a9b860c01b61144d565b600073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600181526020017f340000000000000000000000000000000000000000000000000000000000000081525090610754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074b9190611afe565b60405180910390fd5b506107696730ce1884dfd7fec860c01b61144d565b61077d67b20d72c4e14aa4b260c01b61144d565b6107906675a188d281eb8360c01b61144d565b6107a4674af4d1fa03d4743460c01b61144d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600181526020017f35000000000000000000000000000000000000000000000000000000000000008152509061084c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108439190611afe565b60405180910390fd5b50610861670876db89ddbe352560c01b61144d565b61087567eb74eb392e20adaa60c01b61144d565b61088967c2040f69236525a360c01b61144d565b6108a88173ffffffffffffffffffffffffffffffffffffffff16611648565b80156108d457507f44415400000000000000000000000000000000000000000000000000000000008214155b15610985576108ed67d8ea65f4af6976f560c01b61144d565b610901673aaefc3132f4401360c01b61144d565b61091567cdcb574b632fd28c60c01b61144d565b8073ffffffffffffffffffffffffffffffffffffffff1663cfd8d6c0306040518263ffffffff1660e01b815260040161094e9190611ae5565b600060405180830381600087803b15801561096857600080fd5b505af115801561097c573d6000803e3d6000fd5b5050505061099a565b61099967bcc604690f7a737860c01b61144d565b5b6109ae67fa840f214617852560c01b61144d565b6109c267dc3c1b0228461e9160c01b61144d565b6109cc8282611687565b6109e067939f8ad96cc4c26460c01b61144d565b6109f46706b427f679e3fd6f60c01b61144d565b7f643cefa5894755d9e02f78cb384977d4ee3a06c8394b062a290e19176e9c69de8282604051610a25929190611a9a565b60405180910390a15050565b6060610a4767a91fd37f202db2bb60c01b61144d565b610a5b67391f38e7a43c039c60c01b61144d565b610a6f6756cd4900b44eba5560c01b61144d565b60018054610a7c90611c41565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa890611c41565b8015610af55780601f10610aca57610100808354040283529160200191610af5565b820191906000526020600020905b815481529060010190602001808311610ad857829003601f168201915b5050505050905090565b610b07611450565b610b1160006117a1565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610b5267e00a4505833e16ea60c01b61144d565b610b6667368b250764cdcd6c60c01b61144d565b610b7a6730207b1b804b9f4660c01b61144d565b610b8e67accc7407dde6b5e760c01b61144d565b60036000848152602001908152602001600020805490508211156040518060400160405280600181526020017f360000000000000000000000000000000000000000000000000000000000000081525090610c1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c169190611afe565b60405180910390fd5b50610c34676a1fb9b704a916a360c01b61144d565b610c4867db4ba25813ff1c6f60c01b61144d565b610c5c67c671f5765f4fecd660c01b61144d565b60036000848152602001908152602001600020600183610c7c9190611be5565b81548110610cb3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b610cfa67034684599bc4af5960c01b61144d565b610d02611450565b610d166761bf4c3d0c126bd160c01b61144d565b610d2a6735ad4564fadbf66960c01b61144d565b610d3e6781a8f7b001f7005560c01b61144d565b610d5267a82c3740a0c95af960c01b61144d565b60006002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610d9e676262425a88d4737660c01b61144d565b610db267e7e295810a6a22c260c01b61144d565b610dc66712b8379b6730696f60c01b61144d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600181526020017f350000000000000000000000000000000000000000000000000000000000000081525090610e6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e659190611afe565b60405180910390fd5b50610e8367ecf01d177b2537a360c01b61144d565b610e97675808250e5c8d53ab60c01b61144d565b610eab675fe0665e86d3a84d60c01b61144d565b8073ffffffffffffffffffffffffffffffffffffffff166341c0e1b56040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ef357600080fd5b505af1158015610f07573d6000803e3d6000fd5b50505050610f1f679c9a5f13b5cc072560c01b61144d565b610f33678715e30f2d55d67760c01b61144d565b8173ffffffffffffffffffffffffffffffffffffffff1663cfd8d6c0306040518263ffffffff1660e01b8152600401610f6c9190611ae5565b600060405180830381600087803b158015610f8657600080fd5b505af1158015610f9a573d6000803e3d6000fd5b50505050610fb2677f26c0ba67f074ad60c01b61144d565b610fc56601436da52c059360c01b61144d565b610fcf8383611687565b610fe36776fc4a4c53d90d4660c01b61144d565b610ff7678e673e9c64ee524c60c01b61144d565b7f8b3c9342e23b53b74b0f760c251b1b6b5553d1c3d23239357405f70d5fe43d5583828460405161102a93929190611aba565b60405180910390a1505050565b61104b67663e60cdf56a834860c01b61144d565b611053611450565b61106767dc27b4f1e30e5e7d60c01b61144d565b61107b67165a69731c7b911660c01b61144d565b61108f6704b018f9b65ed0aa60c01b61144d565b6110a367fed9623379b7b51960c01b61144d565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506110ef67feb66e2661da3db660c01b61144d565b611103673138580b1b83915560c01b61144d565b61111767805d22fad07f10bb60c01b61144d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600181526020017f3500000000000000000000000000000000000000000000000000000000000000815250906111bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b69190611afe565b60405180910390fd5b506111d467b078dd3d1e6b3ab560c01b61144d565b6111e867533e10596805317e60c01b61144d565b6111fc67e01145a3c7f7bbc860c01b61144d565b8073ffffffffffffffffffffffffffffffffffffffff166341c0e1b56040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561124457600080fd5b505af1158015611258573d6000803e3d6000fd5b5050505061127067eab5fc309084576b60c01b61144d565b611284672f490de3fb7c7c9f60c01b61144d565b61128f826000611687565b6112a367ab2128cadfeada8660c01b61144d565b6112b767326e56e03ef134b060c01b61144d565b7f266f45300baf5abcdb8653dcec68c843b20fb984df2fae4cd1e3fecaf461995282826040516112e8929190611a9a565b60405180910390a15050565b600061130a672ac4d401bef256f060c01b61144d565b61131e67ded7886e41b7f05c60c01b61144d565b6113326796fc4de3640ff64c60c01b61144d565b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006113836724c748722c8732db60c01b61144d565b61139767cb08888e11731b0960c01b61144d565b6113ab67602def7c410cc58e60c01b61144d565b60036000838152602001908152602001600020805490509050919050565b6113d1611450565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143890611b33565b60405180910390fd5b61144a816117a1565b50565b50565b611458611865565b73ffffffffffffffffffffffffffffffffffffffff16611476610b13565b73ffffffffffffffffffffffffffffffffffffffff16146114cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c390611b97565b60405180910390fd5b565b6114e267489e45730bacfd8960c01b61144d565b6114f667d12b1d372ce48b8360c01b61144d565b61150a674f8dca64fad3a8fe60c01b61144d565b60006001805461151990611c41565b80601f016020809104026020016040519081016040528092919081815260200182805461154590611c41565b80156115925780601f1061156757610100808354040283529160200191611592565b820191906000526020600020905b81548152906001019060200180831161157557829003601f168201915b505050505090506115ad67348d7b075c7b9c8860c01b61144d565b81600190805190602001906115c392919061186d565b506115d8671714001309b62a0f60c01b61144d565b6115ec674e11bf649e388fd060c01b61144d565b816040516115fa9190611a63565b6040518091039020816040516116109190611a63565b60405180910390207fc8a4db255dfa968e314eb5d064b4ded5d2454ba98dcb6e40a161964326b11ee560405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff16803b806020016040519081016040528181526000908060200190933c51119050919050565b61169b679c8a82f8c6451ffa60c01b61144d565b6116af670f2bdf78626cf79c60c01b61144d565b806002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061171567d652d3a7c2d0ac0f60c01b61144d565b61172967f7ac45c49f70c9aa60c01b61144d565b60036000838152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b82805461187990611c41565b90600052602060002090601f01602090048101928261189b57600085556118e2565b82601f106118b457805160ff19168380011785556118e2565b828001600101855582156118e2579182015b828111156118e15782518255916020019190600101906118c6565b5b5090506118ef91906118f3565b5090565b5b8082111561190c5760008160009055506001016118f4565b5090565b60008135905060018060a01b038116811461192a57600080fd5b919050565b600060208284031215611940578081fd5b61194982611910565b905092915050565b600060208284031215611962578081fd5b8135905092915050565b6000806040838503121561197e578081fd5b8235915061198e60208401611910565b90509250929050565b600080604083850312156119a9578182fd5b82359150602083013590509250929050565b600060208083850312156119cd578182fd5b823567ffffffffffffffff808211156119e4578384fd5b818501915085601f8301126119f7578384fd5b813581811115611a0a57611a09611c80565b5b60405184601f19601f8401168201018181108482111715611a2e57611a2d611c80565b5b80604052508181528785838601011115611a46578586fd5b818585018683013785858383010152809550505050505092915050565b60008251611a75818460208701611c0e565b80830191505092915050565b600060208201905060018060a01b038316825292915050565b600060408201905083825260018060a01b03831660208301529392505050565b600060608201905084825260018060a01b038085166020840152808416604084015250949350505050565b600060208201905060018060a01b038316825292915050565b6000602082528251806020840152611b1d816040850160208701611c0e565b6040601f19601f83011684010191505092915050565b600060208252602660208301527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408301527f64647265737300000000000000000000000000000000000000000000000000006060830152608082019050919050565b6000602082526020808301527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726040830152606082019050919050565b600060208201905082825292915050565b600082821015611c0357634e487b7160e01b81526011600452602481fd5b828203905092915050565b60005b83811015611c2c578082015181840152602081019050611c11565b83811115611c3b576000848401525b50505050565b60006002820490506001821680611c5957607f821691505b60208210811415611c7a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220edda9486745405833b79a845b1eec38e53d9031481bfc2c383675ada301c1a7f64736f6c63430008000033";

type AddressProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AddressProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AddressProvider__factory extends ContractFactory {
  constructor(...args: AddressProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    marketplaceId: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AddressProvider> {
    return super.deploy(
      marketplaceId,
      owner,
      overrides || {}
    ) as Promise<AddressProvider>;
  }
  override getDeployTransaction(
    marketplaceId: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(marketplaceId, owner, overrides || {});
  }
  override attach(address: string): AddressProvider {
    return super.attach(address) as AddressProvider;
  }
  override connect(signer: Signer): AddressProvider__factory {
    return super.connect(signer) as AddressProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AddressProviderInterface {
    return new utils.Interface(_abi) as AddressProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AddressProvider {
    return new Contract(address, _abi, signerOrProvider) as AddressProvider;
  }
}
