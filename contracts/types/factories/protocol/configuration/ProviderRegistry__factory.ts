/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ProviderRegistry,
  ProviderRegistryInterface,
} from "../../../protocol/configuration/ProviderRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "addressProvider",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "AddressProviderRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "addressProvider",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "AddressProviderUnregistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getAddressProviderById",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addresses_provider",
        type: "address",
      },
    ],
    name: "getAddressProviderIdbyAddress",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAddressProvidersList",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "registerAddressProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    name: "unregisterAddressProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610a79380380610a7983398101604081905261002f91610135565b61003f61003a61004e565b610052565b610048816100a2565b506101de565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6100aa6100e5565b6001600160a01b0381166100d95760405162461bcd60e51b81526004016100d090610163565b60405180910390fd5b6100e281610052565b50565b6100ed61004e565b6001600160a01b03166100fe610126565b6001600160a01b0316146101245760405162461bcd60e51b81526004016100d0906101a9565b565b6000546001600160a01b031690565b600060208284031215610146578081fd5b81516001600160a01b038116811461015c578182fd5b9392505050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b61088c806101ed6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639219d4f51161005b5780639219d4f5146100e8578063c4ea1e0d146100fb578063f2e596b014610110578063f2fde38b1461012357610088565b8063389140b81461008d578063715018a6146100a25780637acb223a146100aa5780638da5cb5b146100d3575b600080fd5b6100a061009b366004610699565b610136565b005b6100a061021a565b6100bd6100b8366004610699565b61022e565b6040516100ca919061082a565b60405180910390f35b6100db61024d565b6040516100ca91906106fb565b6100a06100f63660046106ba565b61025c565b6101036103be565b6040516100ca919061070f565b6100db61011e3660046106e3565b610420565b6100a0610131366004610699565b61043b565b61013e610475565b6001600160a01b03811660009081526002602090815260409182902054825180840190935260018352603360f81b918301919091526101995760405162461bcd60e51b8152600401610190919061075c565b60405180910390fd5b506001600160a01b038116600081815260026020818152604080842080548086526003845291852080546001600160a01b031916905594845291905291556101e0826104b4565b60405181906001600160a01b038416907f3e06e57ffab5d06682097dfd2c8e17f93d2bbc7402a5c2f707aed83bac07524b90600090a35050565b610222610475565b61022c60006105ce565b565b6001600160a01b0381166000908152600260205260409020545b919050565b6000546001600160a01b031690565b610264610475565b6040805180820190915260018152603160f81b60208201528161029a5760405162461bcd60e51b8152600401610190919061075c565b5060008181526003602090815260409182902054825180840190935260018352603160f81b918301919091526001600160a01b0316156102ed5760405162461bcd60e51b8152600401610190919061075c565b506001600160a01b03821660009081526002602090815260409182902054825180840190935260018352603160f81b91830191909152156103415760405162461bcd60e51b8152600401610190919061075c565b506001600160a01b03821660008181526002602090815260408083208590558483526003909152902080546001600160a01b03191690911790556103848261061e565b60405181906001600160a01b038416907fa02a24d3ac97788fe126a9444ac70c0ec7f66c5021cec9f2c9d5682b142904cc90600090a35050565b6060600180548060200260200160405190810160405280929190818152602001828054801561041657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103f8575b5050505050905090565b6000908152600360205260409020546001600160a01b031690565b610443610475565b6001600160a01b0381166104695760405162461bcd60e51b8152600401610190906107af565b610472816105ce565b50565b61047d61067e565b6001600160a01b031661048e61024d565b6001600160a01b03161461022c5760405162461bcd60e51b8152600401610190906107f5565b6001600160a01b0381166000908152600460205260408120805490829055600180549192916104e39190610833565b9050808210156105885760006001828154811061051057634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600180546001600160a01b03909216925082918590811061054d57634e487b7160e01b600052603260045260246000fd5b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559290911681526004909152604090208290555b60018054806105a757634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600180546001600160a01b0390921660008181526004602052604081208490558383018355919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690910180546001600160a01b0319169091179055565b3390565b80356001600160a01b038116811461024857600080fd5b6000602082840312156106aa578081fd5b6106b382610682565b9392505050565b600080604083850312156106cc578081fd5b6106d583610682565b946020939093013593505050565b6000602082840312156106f4578081fd5b5035919050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156107505783516001600160a01b03168352928401929184019160010161072b565b50909695505050505050565b6000602080835283518082850152825b818110156107885785810183015185820160400152820161076c565b818111156107995783604083870101525b50601f01601f1916929092016040019392505050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b90815260200190565b60008282101561085157634e487b7160e01b81526011600452602481fd5b50039056fea2646970667358221220ea8d46fbc65ade7a376dde690df777283b92c2dc624fb857c899ab367ab8e05264736f6c63430008000033";

type ProviderRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProviderRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProviderRegistry__factory extends ContractFactory {
  constructor(...args: ProviderRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ProviderRegistry> {
    return super.deploy(owner, overrides || {}) as Promise<ProviderRegistry>;
  }
  override getDeployTransaction(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(owner, overrides || {});
  }
  override attach(address: string): ProviderRegistry {
    return super.attach(address) as ProviderRegistry;
  }
  override connect(signer: Signer): ProviderRegistry__factory {
    return super.connect(signer) as ProviderRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProviderRegistryInterface {
    return new utils.Interface(_abi) as ProviderRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProviderRegistry {
    return new Contract(address, _abi, signerOrProvider) as ProviderRegistry;
  }
}
