/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ProviderRegistry,
  ProviderRegistryInterface,
} from "../../../protocol/configuration/ProviderRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "addressProvider",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "AddressProviderRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "addressProvider",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "AddressProviderUnregistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getAddressProviderById",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addresses_provider",
        type: "address",
      },
    ],
    name: "getAddressProviderIdByAddress",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAddressProvidersList",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "registerAddressProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    name: "unregisterAddressProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620017d0380380620017d08339818101604052810190620000379190620002e3565b620000576200004b620000c360201b60201c565b620000cb60201b60201c565b620000736706165b42c499762b60c01b6200018f60201b60201c565b6200008f67ea26c8d04ddcdf5b60c01b6200018f60201b60201c565b620000ab6708c107331921c91b60c01b6200018f60201b60201c565b620000bc816200019260201b60201c565b50620003b6565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b620001a26200022960201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000215576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200020c9062000315565b60405180910390fd5b6200022681620000cb60201b60201c565b50565b62000239620000c360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166200025f620002ba60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620002b8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002af9062000379565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060208284031215620002f5578081fd5b815160018060a01b03811681146200030b578182fd5b8091505092915050565b600060208252602660208301527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408301527f64647265737300000000000000000000000000000000000000000000000000006060830152608082019050919050565b6000602082526020808301527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726040830152606082019050919050565b61140a80620003c66000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c4ea1e0d1161005b578063c4ea1e0d146100ed578063d1bb2da11461010b578063f2e596b01461013b578063f2fde38b1461016b57610088565b8063389140b81461008d578063715018a6146100a95780638da5cb5b146100b35780639219d4f5146100d1575b600080fd5b6100a760048036038101906100a291906111cc565b610187565b005b6100b16104a4565b005b6100bb6104b8565b6040516100c89190611234565b60405180910390f35b6100eb60048036038101906100e691906111ee565b6104e1565b005b6100f5610986565b604051610102919061124d565b60405180910390f35b610125600480360381019061012091906111cc565b610a50565b604051610132919061139a565b60405180910390f35b61015560048036038101906101509190611219565b610ad5565b6040516101629190611234565b60405180910390f35b610185600480360381019061018091906111cc565b610b4e565b005b61019b678162d518b333cb9e60c01b610bd2565b6101a3610bd5565b6101b767acb386807709707860c01b610bd2565b6101cb67d625022fb7572acd60c01b610bd2565b6101df679bebfe899b11d67260c01b610bd2565b6101f367dd45d2bf37a3a60f60c01b610bd2565b61020767a19d990f56bb157260c01b610bd2565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156040518060400160405280600181526020017f3300000000000000000000000000000000000000000000000000000000000000815250906102c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b991906112a1565b60405180910390fd5b506102d767775b5a86c3998d9e60c01b610bd2565b6102eb67689ca80cac14786660c01b610bd2565b6102ff674756065709196a6c60c01b610bd2565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610357678f50d1dabdba78bd60c01b610bd2565b60006003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506103be67f593d9e43d48cd4460c01b610bd2565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061041767a45a33dd25a62b3960c01b610bd2565b61042b67b6c7090d70bbc24e60c01b610bd2565b61043482610c53565b6104486796941b5cd611d79660c01b610bd2565b61045c67ae6c4b5953e8f50460c01b610bd2565b808273ffffffffffffffffffffffffffffffffffffffff167f3e06e57ffab5d06682097dfd2c8e17f93d2bbc7402a5c2f707aed83bac07524b60405160405180910390a35050565b6104ac610bd5565b6104b66000610fe2565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104f56748664b0ddfc60ae560c01b610bd2565b6104fd610bd5565b6105116796a7d00d6457f83560c01b610bd2565b61052466725711490a429760c01b610bd2565b610538674ca6ed807391479c60c01b610bd2565b61054c67f7ec13f8f6c7133360c01b610bd2565b610560672d983d81f94b356660c01b610bd2565b60008114156040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250906105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d391906112a1565b60405180910390fd5b506105f167b75d9c2e69d7fd6a60c01b610bd2565b61060567504aa996451d3d4a60c01b610bd2565b610619673867e3e3975da6e460c01b610bd2565b61062d67763f880ae27a8ec560c01b610bd2565b600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525090610707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fe91906112a1565b60405180910390fd5b5061071c67a63a0a71b6ffa34860c01b610bd2565b610730673deb7c42d5afafb660c01b610bd2565b61074467c585c18c43fd817660c01b610bd2565b61075867eab106402ce30a9e60c01b610bd2565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146040518060400160405280600181526020017f320000000000000000000000000000000000000000000000000000000000000081525090610812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080991906112a1565b60405180910390fd5b5061082767d3f10fa42817b2d860c01b610bd2565b61083b67d9523fc6e2c94fc860c01b610bd2565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061089367ce610ad587a4080c60c01b610bd2565b816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506108f96736fad7863d3beb7460c01b610bd2565b61090d672d9e3192c9211b7c60c01b610bd2565b610916826110a6565b61092a67917fbeaac075228460c01b610bd2565b61093e67ce7e3d41c9806e4f60c01b610bd2565b808273ffffffffffffffffffffffffffffffffffffffff167fa02a24d3ac97788fe126a9444ac70c0ec7f66c5021cec9f2c9d5682b142904cc60405160405180910390a35050565b606061099c674bb84eee309432a460c01b610bd2565b6109b067dd883e80fb3a33c560c01b610bd2565b6109c4676e95331a2196185a60c01b610bd2565b6001805480602002602001604051908101604052809291908181526020018280548015610a4657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116109fc575b5050505050905090565b6000610a66679974583052b11b9160c01b610bd2565b610a7a677946ead4801485d160c01b610bd2565b610a8e6730207065126c386860c01b610bd2565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610aeb67b38d48f081a7c2bc60c01b610bd2565b610aff67961a2d1cbe7f07dc60c01b610bd2565b610b1367aefc06d3ca7b775d60c01b610bd2565b6003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610b56610bd5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbd906112f9565b60405180910390fd5b610bcf81610fe2565b50565b50565b610bdd6111a5565b73ffffffffffffffffffffffffffffffffffffffff16610bfb6104b8565b73ffffffffffffffffffffffffffffffffffffffff1614610c51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c489061135d565b60405180910390fd5b565b610c6767eea54ebf40dfed9260c01b610bd2565b610c7b67946dd8e00b51fb4760c01b610bd2565b610c8f670e033970bf8d4a0860c01b610bd2565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610ce767a56708f045f8be2060c01b610bd2565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d40673acf95d67b0e000a60c01b610bd2565b610d54675f618ee1f2adf20b60c01b610bd2565b600060018080549050610d6791906113ab565b9050610d7d671dab5b060312db2c60c01b610bd2565b610d9167b26ca0b482d1d64160c01b610bd2565b80821015610f3357610dad6787a3dc40ba458b5b60c01b610bd2565b610dc167af926a12d3f4feb160c01b610bd2565b610dd56795de62ec014e132760c01b610bd2565b600060018281548110610e11577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610e526778487f69b752543060c01b610bd2565b8060018481548110610e8d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610ee9675f6b282152a8405860c01b610bd2565b82600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050610f48565b610f476767bf9b50c9c9fecb60c01b610bd2565b5b610f5c674b29c2a6cbdd3bb860c01b610bd2565b610f7067e745c6603c3673b760c01b610bd2565b6001805480610fa8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6110ba67516ed31a6980242360c01b610bd2565b6110ce676dbf4d13410811bb60c01b610bd2565b600180549050600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061112b67b48228a5dbe1d44860c01b610bd2565b61113f67469800c3936f070160c01b610bd2565b6001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b60008135905060018060a01b03811681146111c757600080fd5b919050565b6000602082840312156111dd578081fd5b6111e6826111ad565b905092915050565b60008060408385031215611200578081fd5b611209836111ad565b9150602083013590509250929050565b60006020828403121561122a578081fd5b8135905092915050565b600060208201905060018060a01b038316825292915050565b600060208083018184528085518083526040860191508387019250845b818110156112935760018060a01b0384511683528483019250848401935060018101905061126a565b505080935050505092915050565b6000602080835283518082850152825b818110156112d0578281870101516040828701015282810190506112b1565b818111156112e15783604083870101525b506040601f19601f8301168501019250505092915050565b600060208252602660208301527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408301527f64647265737300000000000000000000000000000000000000000000000000006060830152608082019050919050565b6000602082526020808301527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726040830152606082019050919050565b600060208201905082825292915050565b6000828210156113c957634e487b7160e01b81526011600452602481fd5b82820390509291505056fea26469706673582212203a8bfc647ad4d366c240d16725c2912e614a1b35ebbfeee30b7aede11db31dc264736f6c63430008000033";

type ProviderRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProviderRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProviderRegistry__factory extends ContractFactory {
  constructor(...args: ProviderRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ProviderRegistry> {
    return super.deploy(owner, overrides || {}) as Promise<ProviderRegistry>;
  }
  override getDeployTransaction(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(owner, overrides || {});
  }
  override attach(address: string): ProviderRegistry {
    return super.attach(address) as ProviderRegistry;
  }
  override connect(signer: Signer): ProviderRegistry__factory {
    return super.connect(signer) as ProviderRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProviderRegistryInterface {
    return new utils.Interface(_abi) as ProviderRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProviderRegistry {
    return new Contract(address, _abi, signerOrProvider) as ProviderRegistry;
  }
}
