/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ProviderContract,
  ProviderContractInterface,
} from "../../../protocol/configuration/ProviderContract";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "kill",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAddressProvider",
        name: "_providerAddress",
        type: "address",
      },
    ],
    name: "setProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002161001c610026565b61002a565b61007a565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61044f806100896000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806341c0e1b51461005c578063715018a6146100665780638da5cb5b1461006e578063cfd8d6c01461008c578063f2fde38b1461009f575b600080fd5b6100646100b2565b005b6100646100e8565b6100766100fc565b604051610083919061030a565b60405180910390f35b61006461009a3660046102cb565b61010b565b6100646100ad3660046102cb565b6101fe565b6001546001600160a01b031633146100da57634e487b7160e01b600052600160045260246000fd5b6001546001600160a01b0316ff5b6100f0610238565b6100fa6000610277565b565b6000546001600160a01b031690565b6001600160a01b038116158061012b57506001546001600160a01b031633145b806101b75750336001600160a01b0316306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561017457600080fd5b505afa158015610188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ac91906102ee565b6001600160a01b0316145b6101dc5760405162461bcd60e51b81526004016101d390610364565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610206610238565b6001600160a01b03811661022c5760405162461bcd60e51b81526004016101d39061031e565b61023581610277565b50565b6102406102c7565b6001600160a01b03166102516100fc565b6001600160a01b0316146100fa5760405162461bcd60e51b81526004016101d3906103cf565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3390565b6000602082840312156102dc578081fd5b81356102e781610404565b9392505050565b6000602082840312156102ff578081fd5b81516102e781610404565b6001600160a01b0391909116815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526045908201527f43616e206f6e6c792062652063616c6c6564206966206164647265737365735060408201527f726f766964657220697320656d7074792c206d73672e73656e646572206f722060608201526437bbb732b960d91b608082015260a00190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b038116811461023557600080fdfea2646970667358221220cf9eb2a3d0258d5c07e46064c32794ebafc252aa540dc10c81fef1acf12b71b464736f6c63430008000033";

type ProviderContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProviderContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProviderContract__factory extends ContractFactory {
  constructor(...args: ProviderContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ProviderContract> {
    return super.deploy(overrides || {}) as Promise<ProviderContract>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ProviderContract {
    return super.attach(address) as ProviderContract;
  }
  override connect(signer: Signer): ProviderContract__factory {
    return super.connect(signer) as ProviderContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProviderContractInterface {
    return new utils.Interface(_abi) as ProviderContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProviderContract {
    return new Contract(address, _abi, signerOrProvider) as ProviderContract;
  }
}
