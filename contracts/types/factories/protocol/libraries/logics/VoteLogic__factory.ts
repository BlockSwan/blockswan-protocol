/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  VoteLogic,
  VoteLogicInterface,
} from "../../../../protocol/libraries/logics/VoteLogic";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "choice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "weight",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "salt",
        type: "string",
      },
    ],
    name: "commit",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "commit",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "choice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "weight",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "justification",
            type: "string",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.Vote",
        name: "newVote",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "commit",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "choice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "weight",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "justification",
            type: "string",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.Vote",
        name: "vote",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "minRange",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxRange",
        type: "uint256",
      },
    ],
    name: "isBetweenRange",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "commit",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "choice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "weight",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "justification",
            type: "string",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.Vote",
        name: "vote",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "winningChoice",
        type: "uint256",
      },
    ],
    name: "isVoteCorrect",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x610d7d610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80630a6c668c1461005b5780630b97b4171461008b57806334d8dbe2146100c8578063e6de1c04146100f8575b600080fd5b61007560048036038101906100709190610ab7565b610128565b6040516100829190610c2d565b60405180910390f35b81801561009757600080fd5b506100b260048036038101906100ad9190610b4a565b610175565b6040516100bf9190610c2d565b60405180910390f35b6100e260048036038101906100dd9190610a58565b6104e7565b6040516100ef9190610c5b565b60405180910390f35b610112600480360381019061010d9190610afc565b610581565b60405161011f9190610c2d565b60405180910390f35b600061013e67bed46d31ab4d394c60c01b6105e0565b6101526785f5d389842b5a3260c01b6105e0565b61016667178086febb6baf8f60c01b6105e0565b81836040015114905092915050565b600061018b67a2783989e48ea10b60c01b6105e0565b836101a0679637a0c7e1956f7860c01b6105e0565b6101b46762093efe36adc30460c01b6105e0565b6101c8670f2ef4ad2338209860c01b6105e0565b6101dc67edd19c504fcea43060c01b6105e0565b600081101580156101ee5750600a8111155b6040518060400160405280600281526020017f353500000000000000000000000000000000000000000000000000000000000081525090610265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025c9190610c40565b60405180910390fd5b5061027a67c93c9b53d163471760c01b6105e0565b61028e673d18c9a1dd7776a260c01b6105e0565b6102a2676f428249c134521b60c01b6105e0565b6102b667cc081c6ae171f95d60c01b6105e0565b8585856102cd670c18a049656eab6a60c01b6105e0565b6102e1674b7de92cc13cc99060c01b6105e0565b6102f5676637b2c6a0c155e860c01b6105e0565b61030967ff91bafcab43f9f760c01b6105e0565b61033d8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838386600101546105e3565b6040518060400160405280600281526020017f3437000000000000000000000000000000000000000000000000000000000000815250906103b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ab9190610c40565b60405180910390fd5b506103c967906798695e5f310860c01b6105e0565b6103dd673d78b0089317e70a60c01b6105e0565b6103f167c8ac480b854f235c60c01b6105e0565b61040567f93454aee56608e460c01b6105e0565b61041967c2a354e264482d4460c01b6105e0565b61042d678540949e8239e9d860c01b6105e0565b610440888a61063890919063ffffffff16565b50610455676e83a0f4212b296b60c01b6105e0565b6104696792ecf2815ee7741b60c01b6105e0565b61047c868a61069d90919063ffffffff16565b5061049167c53f93e1e81cf79360c01b6105e0565b6104a567bac99889101b1c6f60c01b6105e0565b6104ae89610712565b506104c367cfa5f4ca0696fbaf60c01b6105e0565b6104d767b15f7d7e6074b3cf60c01b6105e0565b6001945050505050949350505050565b6104ef6107ff565b6105036719aff03896e404d360c01b6105e0565b6105176746dad9514e1b755f60c01b6105e0565b6040518060c001604052808673ffffffffffffffffffffffffffffffffffffffff16815260200161054987878661078a565b815260200160008152602001848152602001604051806020016040528060008152508152602001600015158152509050949350505050565b60006105976785710b53cb9b307460c01b6105e0565b6105ab674ec0cac92fd148b760c01b6105e0565b6105bf67af34aed78768251360c01b6105e0565b828460400151101580156105d7575081846040015111155b90509392505050565b50565b60006105f9679451da697df22bb960c01b6105e0565b61060d670b5042054eabb9d260c01b6105e0565b61062167c5c4a19bf86643cf60c01b6105e0565b8161062d86868661078a565b149050949350505050565b600061064e675f6f0f493214131a60c01b6107fc565b610662676d2f8f433c946ef160c01b6107fc565b81836002018190555061067f674fd65d866039482c60c01b6107fc565b6106936735f338c8b439c2eb60c01b6107fc565b6001905092915050565b60006106b367b6c01ded52c1500860c01b6107fc565b6106c7678acb1105c7a07ae860c01b6107fc565b818360040190805190602001906106df929190610850565b506106f4678540cde33b65e83960c01b6107fc565b61070867f0ec9e7df40510ce60c01b6107fc565b6001905092915050565b600061072867f7f3eaf6138b577060c01b6107fc565b61073c6726337bbf968accb460c01b6107fc565b60018260050160006101000a81548160ff02191690831515021790555061076d671c2646b0a2c6a5fc60c01b6107fc565b610781670b19e7411979dd3760c01b6107fc565b60019050919050565b60006107a0672a6431b36505990760c01b6105e0565b6107b467a2074052380d25e460c01b6105e0565b6107c867a5a8a45e0506881260c01b6105e0565b8383836040516020016107dd93929190610bec565b6040516020818303038152906040528051906020012090509392505050565b50565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681526020016000815260200160008152602001606081526020016000151581525090565b82805461085c90610cf2565b90600052602060002090601f01602090048101928261087e57600085556108c5565b82601f1061089757805160ff19168380011785556108c5565b828001600101855582156108c5579182015b828111156108c45782518255916020019190600101906108a9565b5b5090506108d291906108d6565b5090565b5b808211156108ef5760008160009055506001016108d7565b5090565b60008135905060018060a01b038116811461090d57600080fd5b919050565b600081359050801515811461092657600080fd5b919050565b600082601f83011261093b578081fd5b813567ffffffffffffffff8082111561095757610956610d31565b5b6040516020601f19601f850116820101818110838211171561097c5761097b610d31565b5b8060405250828152856020848701011115610995578384fd5b82602086016020830137836020848301015280935050505092915050565b600060c082840312156109c4578081fd5b60405160c0810167ffffffffffffffff82821081831117156109e9576109e8610d31565b5b816040528293506109f9856108f3565b83526020850135602084015260408501356040840152606085013560608401526080850135915080821115610a2d57600080fd5b50610a3a8582860161092b565b608083015250610a4c60a08401610912565b60a08201525092915050565b60008060008060808587031215610a6d578384fd5b610a76856108f3565b93506020850135925060408501359150606085013567ffffffffffffffff811115610a9f578182fd5b610aab8782880161092b565b91505092959194509250565b60008060408385031215610ac9578182fd5b823567ffffffffffffffff811115610adf578283fd5b610aeb858286016109b3565b925050602083013590509250929050565b600080600060608486031215610b10578283fd5b833567ffffffffffffffff811115610b26578384fd5b610b32868287016109b3565b93505060208401359150604084013590509250925092565b60008060008060808587031215610b5f578384fd5b8435935060208501359250604085013567ffffffffffffffff80821115610b84578384fd5b610b908883890161092b565b93506060870135915080821115610ba5578283fd5b50610bb28782880161092b565b91505092959194509250565b60008151808452610bd6816020860160208601610cbf565b6020601f19601f83011685010191505092915050565b60006bffffffffffffffffffffffff198560601b1682528360148301528251610c1c816034850160208701610cbf565b603481840101915050949350505050565b6000602082019050821515825292915050565b600060208252610c536020830184610bbe565b905092915050565b60006020825260018060a01b038351166020830152602083015160408301526040830151606083015260608301516080830152608083015160c060a0840152610ca760e0840182610bbe565b905060a0840151151560c08401528091505092915050565b60005b83811015610cdd578082015181840152602081019050610cc2565b83811115610cec576000848401525b50505050565b60006002820490506001821680610d0a57607f821691505b60208210811415610d2b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea264697066735822122088e621caeef8025951879f585006253f298ee61275dbdd8e193409f605d689ba64736f6c63430008000033";

type VoteLogicConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VoteLogicConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VoteLogic__factory extends ContractFactory {
  constructor(...args: VoteLogicConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VoteLogic> {
    return super.deploy(overrides || {}) as Promise<VoteLogic>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): VoteLogic {
    return super.attach(address) as VoteLogic;
  }
  override connect(signer: Signer): VoteLogic__factory {
    return super.connect(signer) as VoteLogic__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VoteLogicInterface {
    return new utils.Interface(_abi) as VoteLogicInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VoteLogic {
    return new Contract(address, _abi, signerOrProvider) as VoteLogic;
  }
}
