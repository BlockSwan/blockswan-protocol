/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  VoteLogic,
  VoteLogicInterface,
} from "../../../../protocol/libraries/logics/VoteLogic";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "choice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "weight",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "salt",
        type: "string",
      },
    ],
    name: "commit",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "commit",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "choice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "weight",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "justification",
            type: "string",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.Vote",
        name: "newVote",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "commit",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "choice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "weight",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "justification",
            type: "string",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.Vote",
        name: "vote",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "minRange",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxRange",
        type: "uint256",
      },
    ],
    name: "isBetweenRange",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "commit",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "choice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "weight",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "justification",
            type: "string",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.Vote",
        name: "vote",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "winningChoice",
        type: "uint256",
      },
    ],
    name: "isVoteCorrect",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6107f561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80630a6c668c1461005b5780630b97b4171461008457806334d8dbe2146100a4578063e6de1c04146100c4575b600080fd5b61006e610069366004610553565b6100d7565b60405161007b91906106b5565b60405180910390f35b81801561009057600080fd5b5061006e61009f3660046105e2565b6100e2565b6100b76100b23660046104f4565b6101c0565b60405161007b91906106da565b61006e6100d2366004610596565b610225565b604091909101511490565b600083600a81111560405180604001604052806002815260200161353560f01b8152509061012c5760405162461bcd60e51b815260040161012391906106c0565b60405180910390fd5b508585856101578360000160009054906101000a90046001600160a01b031683838660010154610247565b60405180604001604052806002815260200161343760f01b815250906101905760405162461bcd60e51b815260040161012391906106c0565b5061019b898961025f565b506101a6898761026b565b506101b08961028d565b5060019998505050505050505050565b6101c86102db565b6040518060c00160405280866001600160a01b031681526020016101ed8787866102a5565b815260200160008152602001848152602001604051806020016040528060008152508152602001600015158152509050949350505050565b60008284604001511015801561023f575081846040015111155b949350505050565b6000816102558686866102a5565b1495945050505050565b60029190910155600190565b8051600090610283906004850190602085019061030f565b5060019392505050565b60058101805460ff191660019081179091555b919050565b60008383836040516020016102bc93929190610676565b6040516020818303038152906040528051906020012090509392505050565b6040805160c0810182526000808252602082018190529181018290526060808201839052608082015260a081019190915290565b82805461031b9061076e565b90600052602060002090601f01602090048101928261033d5760008555610383565b82601f1061035657805160ff1916838001178555610383565b82800160010185558215610383579182015b82811115610383578251825591602001919060010190610368565b5061038f929150610393565b5090565b5b8082111561038f5760008155600101610394565b80356001600160a01b03811681146102a057600080fd5b803580151581146102a057600080fd5b600082601f8301126103df578081fd5b813567ffffffffffffffff808211156103fa576103fa6107a9565b604051601f8301601f19168101602001828111828210171561041e5761041e6107a9565b604052828152848301602001861015610435578384fd5b82602086016020830137918201602001929092529392505050565b600060c08284031215610461578081fd5b60405160c0810167ffffffffffffffff8282108183111715610485576104856107a9565b81604052829350610495856103a8565b835260208501356020840152604085013560408401526060850135606084015260808501359150808211156104c957600080fd5b506104d6858286016103cf565b6080830152506104e860a084016103bf565b60a08201525092915050565b60008060008060808587031215610509578384fd5b610512856103a8565b93506020850135925060408501359150606085013567ffffffffffffffff81111561053b578182fd5b610547878288016103cf565b91505092959194509250565b60008060408385031215610565578182fd5b823567ffffffffffffffff81111561057b578283fd5b61058785828601610450565b95602094909401359450505050565b6000806000606084860312156105aa578283fd5b833567ffffffffffffffff8111156105c0578384fd5b6105cc86828701610450565b9660208601359650604090950135949350505050565b600080600080608085870312156105f7578384fd5b8435935060208501359250604085013567ffffffffffffffff8082111561061c578384fd5b610628888389016103cf565b9350606087013591508082111561063d578283fd5b50610547878288016103cf565b6000815180845261066281602086016020860161073e565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff198560601b16825283601483015282516106a681603485016020870161073e565b91909101603401949350505050565b901515815260200190565b6000602082526106d3602083018461064a565b9392505050565b60006020825260018060a01b038351166020830152602083015160408301526040830151606083015260608301516080830152608083015160c060a084015261072660e084018261064a565b905060a0840151151560c08401528091505092915050565b60005b83811015610759578181015183820152602001610741565b83811115610768576000848401525b50505050565b60028104600182168061078257607f821691505b602082108114156107a357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220f8e8bec08d0cba7a1840fa49d6261a0f62ed6d823cfb2d328511cd473e34878964736f6c63430008000033";

type VoteLogicConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VoteLogicConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VoteLogic__factory extends ContractFactory {
  constructor(...args: VoteLogicConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VoteLogic> {
    return super.deploy(overrides || {}) as Promise<VoteLogic>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): VoteLogic {
    return super.attach(address) as VoteLogic;
  }
  override connect(signer: Signer): VoteLogic__factory {
    return super.connect(signer) as VoteLogic__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VoteLogicInterface {
    return new utils.Interface(_abi) as VoteLogicInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VoteLogic {
    return new Contract(address, _abi, signerOrProvider) as VoteLogic;
  }
}
