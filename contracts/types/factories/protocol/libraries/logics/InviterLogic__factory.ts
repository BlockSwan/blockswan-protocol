/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  InviterLogic,
  InviterLogicInterface,
} from "../../../../protocol/libraries/logics/InviterLogic";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currencyValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "affiliateShare",
        type: "uint256",
      },
    ],
    name: "calcInviterRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "currencyValue",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "affiliateShare",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lvl0AffiliateShare",
            type: "uint256",
          },
        ],
        internalType: "struct InputTypes.CalcInvitersRewardsInput",
        name: "params",
        type: "tuple",
      },
    ],
    name: "calcInvitersRewards",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "inviter0Rewards",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "inviter1Rewards",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "remainingRewards",
            type: "uint256",
          },
        ],
        internalType: "struct OutputTypes.CalcInvitersRewardsOutput",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61041161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c8063013a9d5b1461006657806301fdfdb61461008f5780636403c82c146100af5780639917612f146100d0578063db043c55146100fd575b600080fd5b610079610074366004610290565b61011d565b604051610086919061038e565b60405180910390f35b6100a261009d3660046102f7565b610196565b6040516100869190610355565b6100c26100bd366004610318565b6101b6565b604051610086929190610369565b8180156100dc57600080fd5b506100f06100eb366004610343565b6101f9565b6040516100869190610383565b61011061010b366004610343565b610202565b60405161008691906103af565b61012561026f565b600061013983600001518460200151610202565b9050600061015484604001518361020a90919063ffffffff16565b9050600061016282846103b8565b9050604051806060016040528083815260200182815260200184876000015161018b91906103b8565b905295945050505050565b60006101af83600101548361023090919063ffffffff16565b9392505050565b60008060006101c58686610196565b6001600160a01b0381166000908152602086905260408120919250906101eb9087610196565b919791965090945050505050565b60019182015590565b60006101af83835b60008115611388198390048411151761022257600080fd5b506127109102611388010490565b60006101af8383600082600001828154811061025c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60405180606001604052806000815260200160008152602001600081525090565b6000606082840312156102a1578081fd5b6040516060810181811067ffffffffffffffff821117156102d057634e487b7160e01b83526041600452602483fd5b80604052508235815260208301356020820152604083013560408201528091505092915050565b60008060408385031215610309578081fd5b50508035926020909101359150565b60008060006060848603121561032c578081fd5b505081359360208301359350604090920135919050565b60008060408385031215610309578182fd5b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b901515815260200190565b81518152602080830151908201526040918201519181019190915260600190565b90815260200190565b6000828210156103d657634e487b7160e01b81526011600452602481fd5b50039056fea26469706673582212207d3976c50563b223638dc934bd5d950d1e1288aa97720fc23a5b8dfa1d76e48464736f6c63430008000033";

type InviterLogicConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InviterLogicConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InviterLogic__factory extends ContractFactory {
  constructor(...args: InviterLogicConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<InviterLogic> {
    return super.deploy(overrides || {}) as Promise<InviterLogic>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): InviterLogic {
    return super.attach(address) as InviterLogic;
  }
  override connect(signer: Signer): InviterLogic__factory {
    return super.connect(signer) as InviterLogic__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InviterLogicInterface {
    return new utils.Interface(_abi) as InviterLogicInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InviterLogic {
    return new Contract(address, _abi, signerOrProvider) as InviterLogic;
  }
}
