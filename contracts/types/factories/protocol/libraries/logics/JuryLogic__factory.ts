/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  JuryLogic,
  JuryLogicInterface,
} from "../../../../protocol/libraries/logics/JuryLogic";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minStake",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "alpha",
        type: "uint256",
      },
    ],
    name: "calcTokenToFreeze",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61162b610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c806360b1276a1161006557806360b1276a14610129578063aeee99be14610166578063c818c634146101a3578063f4c811bc146101d357610087565b8063043abc961461008c5780633e8973e5146100c9578063425a03c4146100f9575b600080fd5b81801561009857600080fd5b506100b360048036038101906100ae9190611299565b610210565b6040516100c09190611455565b60405180910390f35b6100e360048036038101906100de91906113e1565b61037e565b6040516100f0919061151f565b60405180910390f35b610113600480360381019061010e9190611205565b6103ce565b604051610120919061143c565b60405180910390f35b81801561013557600080fd5b50610150600480360381019061014b919061124d565b610585565b60405161015d9190611455565b60405180910390f35b81801561017257600080fd5b5061018d600480360381019061018891906112ed565b6106a3565b60405161019a9190611455565b60405180910390f35b6101bd60048036038101906101b891906111d6565b610877565b6040516101ca91906114a6565b60405180910390f35b8180156101df57600080fd5b506101fa60048036038101906101f59190611299565b61090c565b6040516102079190611455565b60405180910390f35b6000610226679bcba4d4b671ddc860c01b610a70565b61023a674a452b66c951658f60c01b610a70565b61024e67b27919c00382f0d560c01b610a70565b6102618685610a7390919063ffffffff16565b6102ba576102796705dc5cf111895a4b60c01b610a70565b61028d673d48f05d4120d75b60c01b610a70565b6102a167bbeacecdf2ad4f4a60c01b610a70565b6102b48685610aa390919063ffffffff16565b506102cf565b6102ce6715ff1fd53a33d2d160c01b610a70565b5b6102e367b2742ecd0c12fe1b60c01b610a70565b6102f7677f2bd61787afbb8460c01b610a70565b60006103038785610ad3565b90506103196746c025ee107586e060c01b610a70565b61032d670100d53bda0b396160c01b610a70565b6103468789888685610b5790949392919063ffffffff16565b5061035b6772bbf4aa0db93a6f60c01b610a70565b61036f67c22f7f5e081077bf60c01b610a70565b60019150509695505050505050565b6000610394679c05137a9021663f60c01b610a70565b6103a867e9c0d83d90e9734e60c01b610a70565b6103bc67014c57801bbcd96460c01b610a70565b6103c68383610c09565b905092915050565b60006103e467feb2b7a18589be6e60c01b610a70565b6103f867e5d6c4361fb9711360c01b610a70565b61040c6720e865c77d715e6960c01b610a70565b600061041783610c36565b905061042d6768ae22e5c35bc9b060c01b610a70565b61044167ecf0d0190ebb699760c01b610a70565b60006104d7828773__$b1d473f7cf7b653a454669f58de072d057$__63b8c7740f9091896040518363ffffffff1660e01b81526004016104829291906114c2565b60206040518083038186803b15801561049a57600080fd5b505af41580156104ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d29190611232565b610cac565b90506104ed67905c6f860becc39260c01b610a70565b8573__$b1d473f7cf7b653a454669f58de072d057$__6388c1d467909187846040518463ffffffff1660e01b815260040161052a939291906114da565b60206040518083038186803b15801561054257600080fd5b505af4158015610556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057a91906111b0565b925050509392505050565b600061059b6758822428e3e58bd860c01b610a70565b6105af67e38e96b5d2d96a4560c01b610a70565b6105c3679718a918a1f0dc1b60c01b610a70565b60006105cf8685610ad3565b90506105e567f564676d96a74e9b60c01b610a70565b6105f9674f0a81d3bf56f91760c01b610a70565b600087826001015461060b919061154f565b905061062167b9ceb376b17f9c5b60c01b610a70565b80826001018190555061063e6727c1a5f10f36ff6a60c01b610a70565b610652671747f597e9cc208960c01b610a70565b61066b8789888786610b5790949392919063ffffffff16565b5061068067f5fd6186f566a42f60c01b610a70565b610694671cd1dfe826bc127760c01b610a70565b60019250505095945050505050565b60006106b96778cd992442d5659b60c01b610a70565b6106cd6771b2d56c7bab9ea660c01b610a70565b6106e167ef1a02d0591541c660c01b610a70565b60005b85518110156108415761070167e2ab114429b4f2e060c01b610a70565b61071567f09a9880e998ce0960c01b610a70565b6000868281518110610750577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905061076e675aca89dc22e6f39660c01b610a70565b610782675a5dc666e27b929c60c01b610a70565b600061078e8287610ad3565b90506107a46748a5ac9bd2f52b0460c01b610a70565b6107b8674dfbfe75e6f6f36d60c01b610a70565b60008982600101546107ca9190611530565b90506107e067f1ece490bc78853660c01b610a70565b8082600101819055506107fd6787c30a253feee38a60c01b610a70565b61081167e9ed65347ce3108360c01b610a70565b61082a838b8a8986610dba90949392919063ffffffff16565b5050505080806108399061156d565b9150506106e4565b506108566711bbcdcfe971596460c01b610a70565b61086a67fd922f9725a7fdf760c01b610a70565b6001905095945050505050565b61087f611182565b61089367e1568047fecd0d7260c01b610a70565b6108a767922e369397f3743860c01b610a70565b8160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905092915050565b600061092267eca388b47a4b450d60c01b610a70565b61093667788fbfa815b30a5f60c01b610a70565b61094a675a59fdb4b4ed389860c01b610a70565b60006109568785610ad3565b905061096c671b9b5f59ec9d588f60c01b610a70565b610980676a5fa283aab752e760c01b610a70565b6109998789888685610dba90949392919063ffffffff16565b506109ae6764882d6e0311e07d60c01b610a70565b6109c26779a406cecf2b84c460c01b610a70565b600081600001541415610a24576109e367eaffe92529d3bd7360c01b610a70565b6109f7678c6e78c3587a2fc760c01b610a70565b610a0b67d73d020083d2d0b460c01b610a70565b610a1e8786610e6c90919063ffffffff16565b50610a39565b610a3867f7b8139b6e5ebab960c01b610a70565b5b610a4d67f10572947aebe38460c01b610a70565b610a6167eb15190f328b929660c01b610a70565b60019150509695505050505050565b50565b6000610a9b836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610e9c565b905092915050565b6000610acb836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610ebf565b905092915050565b6000610ae967ad575f39c931cecb60c01b610a70565b610afd6710657cb5378f990f60c01b610a70565b610b11677b3e40c8489f52a860c01b610a70565b8160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905092915050565b6000610b6d67e6ab81da437c7c8a60c01b610f2f565b610b81677a286fa739dfe87c60c01b610f2f565b83866000016000828254610b959190611530565b92505081905550610bb067f8e43fe791bf375c60c01b610f2f565b610bc4675363c88fb828ab7a60c01b610f2f565b610bd48286858960000154610f32565b610be867ad9e5182e648e08b60c01b610f2f565b610bfc67f0077ec23c904bd160c01b610f2f565b6001905095945050505050565b6000816113886000190304831115821517610c2357600080fd5b6127106113888385020104905092915050565b6000610c4c6727b5942fd7b1143d60c01b610a70565b610c606704aa543c3e97573660c01b610a70565b610c746772eab8e7b942da6f60c01b610a70565b4442434084604051602001610c8c9493929190611416565b6040516020818303038152906040528051906020012060001c9050919050565b6000610cc267f3c83e79b9cc2c3d60c01b610a70565b610cd66763fe3091d8b7d29960c01b610a70565b610cea675adc65dd75d685b360c01b610a70565b610cfe67b8406f07c09d86ca60c01b610a70565b60008211610d41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3890611468565b60405180910390fd5b610d5567eaaf72847fe2a25760c01b610a70565b610d6967555c8ade3d9b8d9560c01b610a70565b610d7d671bf5169f476d8c1960c01b610a70565b8183604051602001610d8f9190611405565b6040516020818303038152906040528051906020012060001c610db2919061158c565b905092915050565b6000610dd067154fd3343d34d8d560c01b610f2f565b610de467384ac11d011f643c60c01b610f2f565b83866000016000828254610df8919061154f565b92505081905550610e13679ba69fc16608a74660c01b610f2f565b610e27671d142188f02cc8e760c01b610f2f565b610e378286858960000154610f32565b610e4b672d07eeb2a1e1733460c01b610f2f565b610e5f679fa93fc77ded127260c01b610f2f565b6001905095945050505050565b6000610e94836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610ffc565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000610ecb8383610e9c565b610f24578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050610f29565b600090505b92915050565b50565b610f46673b25a1d3f0d9f6b560c01b610f2f565b610f5a6719a0bf046e95e84660c01b610f2f565b610f6e67565d3b927b39b9b060c01b610f2f565b8373__$819dd864b9a28b29592cd77136582b47ce$__632e25c38a909184848773ffffffffffffffffffffffffffffffffffffffff1660001b6040518563ffffffff1660e01b8152600401610fc694939291906114f9565b60006040518083038186803b158015610fde57600080fd5b505af4158015610ff2573d6000803e3d6000fd5b5050505050505050565b6000808360010160008481526020019081526020016000205490506000811461117657600060018261102e919061154f565b9050600060018660000180549050611046919061154f565b905081811461110157600086600001828154811061108d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050808760000184815481106110d7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061113b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061117c565b60009150505b92915050565b604051806040016040528060008152602001600081525090565b6000813590506111ab816115de565b919050565b6000602082840312156111c1578081fd5b81516111cc816115de565b8091505092915050565b600080604083850312156111e8578081fd5b82356111f3816115de565b80925050602083013590509250929050565b600080600060608486031215611219578081fd5b8335925060208401359150604084013590509250925092565b600060208284031215611243578081fd5b8151905092915050565b600080600080600060a08688031215611264578081fd5b853594506020860135611276816115de565b809450506040860135925060608601359150608086013590509295509295909350565b60008060008060008060c087890312156112b1578081fd5b8635955060208701356112c3816115de565b8095505060408701359350606087013592506080870135915060a087013590509295509295509295565b600080600080600060a08688031215611304578081fd5b8535945060208087013567ffffffffffffffff80821115611323578384fd5b818901915089601f830112611336578384fd5b813581811115611349576113486115c8565b5b83810260405185828201018181108582111715611369576113686115c8565b5b806040525080935082815285810193508585018d8784880101111561138c578788fd5b8795505b838610156113b8576113a18161119c565b855286850194508681019050600186019550611390565b508099505050505050506040860135925060608601359150608086013590509295509295909350565b600080604083850312156113f3578182fd5b82359150602083013590509250929050565b600082825260208201905092915050565b600085825284602083015283604083015282606083015260808201905095945050505050565b600060208201905060018060a01b038316825292915050565b6000602082019050821515825292915050565b600060208252601a60208301527f6d6178206d7573742062652067726561746572207468616e20300000000000006040830152606082019050919050565b6000604082019050825182526020830151602083015292915050565b60006040820190508382528260208301529392505050565b6000606082019050848252836020830152826040830152949350505050565b600060808201905085825284602083015283604083015282606083015295945050505050565b600060208201905082825292915050565b60008219821115611544576115436115b2565b5b828201905092915050565b600082821015611562576115616115b2565b5b828203905092915050565b60008019821415611581576115806115b2565b5b600182019050919050565b6000826115a757634e487b7160e01b81526012600452602481fd5b828206905092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60018060a01b03811681146115f257600080fd5b5056fea264697066735822122073bda9e5b801a9ae3af499d1c51eaf01379119117ff3a7b72c1a3694af1a4f7d64736f6c63430008000033";

type JuryLogicConstructorParams =
  | [linkLibraryAddresses: JuryLogicLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: JuryLogicConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class JuryLogic__factory extends ContractFactory {
  constructor(...args: JuryLogicConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        JuryLogic__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(linkLibraryAddresses: JuryLogicLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$b1d473f7cf7b653a454669f58de072d057\\$__", "g"),
      linkLibraryAddresses[
        "contracts/protocol/libraries/logics/JuryDataLogic.sol:JuryDataLogic"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$819dd864b9a28b29592cd77136582b47ce\\$__", "g"),
      linkLibraryAddresses[
        "contracts/imports/kleros/contracts/SortitionSumTreeFactory.sol:SortitionSumTreeFactory"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<JuryLogic> {
    return super.deploy(overrides || {}) as Promise<JuryLogic>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): JuryLogic {
    return super.attach(address) as JuryLogic;
  }
  override connect(signer: Signer): JuryLogic__factory {
    return super.connect(signer) as JuryLogic__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): JuryLogicInterface {
    return new utils.Interface(_abi) as JuryLogicInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): JuryLogic {
    return new Contract(address, _abi, signerOrProvider) as JuryLogic;
  }
}

export interface JuryLogicLibraryAddresses {
  ["contracts/protocol/libraries/logics/JuryDataLogic.sol:JuryDataLogic"]: string;
  ["contracts/imports/kleros/contracts/SortitionSumTreeFactory.sol:SortitionSumTreeFactory"]: string;
}
