/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  XPKeys,
  XPKeysInterface,
} from "../../../../protocol/libraries/helpers/XPKeys";

const _abi = [
  {
    inputs: [],
    name: "BECOME_BUYER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BECOME_SELLER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "CREATE_GIG",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "CREATE_ORDER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PAY_ORDER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101f7610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c80630a1ff22614610066578063409784011461008457806388090a5d146100a2578063baf7e362146100c0578063d8ea86be146100de575b600080fd5b61006e6100fc565b60405161007b91906101b0565b60405180910390f35b61008c610120565b60405161009991906101b0565b60405180910390f35b6100aa610144565b6040516100b791906101b0565b60405180910390f35b6100c8610168565b6040516100d591906101b0565b60405180910390f35b6100e661018c565b6040516100f391906101b0565b60405180910390f35b7f4245434f4d455f53454c4c45520000000000000000000000000000000000000081565b7f5041595f4f52444552000000000000000000000000000000000000000000000081565b7f4352454154455f4f52444552000000000000000000000000000000000000000081565b7f4352454154455f4749470000000000000000000000000000000000000000000081565b7f4245434f4d455f4255594552000000000000000000000000000000000000000081565b60006020820190508282529291505056fea2646970667358221220830b35e9551d480696b64229373894da9dbb72e119f0baac0b7037b9f0688e8864736f6c63430008000033";

type XPKeysConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: XPKeysConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class XPKeys__factory extends ContractFactory {
  constructor(...args: XPKeysConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<XPKeys> {
    return super.deploy(overrides || {}) as Promise<XPKeys>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): XPKeys {
    return super.attach(address) as XPKeys;
  }
  override connect(signer: Signer): XPKeys__factory {
    return super.connect(signer) as XPKeys__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): XPKeysInterface {
    return new utils.Interface(_abi) as XPKeysInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): XPKeys {
    return new Contract(address, _abi, signerOrProvider) as XPKeys;
  }
}
