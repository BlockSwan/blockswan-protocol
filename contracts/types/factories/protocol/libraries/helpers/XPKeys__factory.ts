/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  XPKeys,
  XPKeysInterface,
} from "../../../../protocol/libraries/helpers/XPKeys";

const _abi = [
  {
    inputs: [],
    name: "BECOME_BUYER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BECOME_SELLER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "CREATE_GIG",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "CREATE_ORDER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PAY_ORDER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61012c61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610605b5760003560e01c80630a1ff2261460605780634097840114607a57806388090a5d146080578063baf7e362146086578063d8ea86be14608c575b600080fd5b60666092565b6040516071919060ed565b60405180910390f35b606660a6565b606660b6565b606660c9565b606660da565b6c2122a1a7a6a2afa9a2a62622a960991b81565b682820acafa7a92222a960b91b81565b6b21a922a0aa22afa7a92222a960a11b81565b694352454154455f47494760b01b81565b6b2122a1a7a6a2afa12aaca2a960a11b81565b9081526020019056fea26469706673582212209fa30a56b0fb8bda01ed80295cd2d0873b1eb502e96ee212b28a461c2e4aebf064736f6c63430008000033";

type XPKeysConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: XPKeysConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class XPKeys__factory extends ContractFactory {
  constructor(...args: XPKeysConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<XPKeys> {
    return super.deploy(overrides || {}) as Promise<XPKeys>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): XPKeys {
    return super.attach(address) as XPKeys;
  }
  override connect(signer: Signer): XPKeys__factory {
    return super.connect(signer) as XPKeys__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): XPKeysInterface {
    return new utils.Interface(_abi) as XPKeysInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): XPKeys {
    return new Contract(address, _abi, signerOrProvider) as XPKeys;
  }
}
