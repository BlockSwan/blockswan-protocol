/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  RegistryKeys,
  RegistryKeysInterface,
} from "../../../../protocol/libraries/helpers/RegistryKeys";

const _abi = [
  {
    inputs: [],
    name: "ACL_ADMIN",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ACL_MANAGER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DAT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DATA_PROVIDER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DISPUTE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GIG",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "JURY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ORDER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PROTOCOL_CONFIGURATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TREE_KEY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "XP",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x610422610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100be5760003560e01c80639359021b1161007b5780639359021b14610177578063a8a652eb14610195578063c396cbf4146101b3578063db7895e2146101d1578063e5a379dd146101ef578063fbfb816b1461020d576100be565b80633a21453b146100c35780634d5e07fb146100e15780635e209249146100ff578063742b12821461011d57806381e167cf1461013b5780639035d57b14610159575b600080fd5b6100cb61022b565b6040516100d891906103db565b60405180910390f35b6100e961024f565b6040516100f691906103db565b60405180910390f35b610107610273565b60405161011491906103db565b60405180910390f35b610125610297565b60405161013291906103db565b60405180910390f35b6101436102bb565b60405161015091906103db565b60405180910390f35b6101616102df565b60405161016e91906103db565b60405180910390f35b61017f610303565b60405161018c91906103db565b60405180910390f35b61019d610327565b6040516101aa91906103db565b60405180910390f35b6101bb61034b565b6040516101c891906103db565b60405180910390f35b6101d961036f565b6040516101e691906103db565b60405180910390f35b6101f7610393565b60405161020491906103db565b60405180910390f35b6102156103b7565b60405161022291906103db565b60405180910390f35b7f444953505554450000000000000000000000000000000000000000000000000081565b7f4f5244455200000000000000000000000000000000000000000000000000000081565b7f41434c5f41444d494e000000000000000000000000000000000000000000000081565b7f50524f544f434f4c5f434f4e464947555241544f52000000000000000000000081565b7f555345520000000000000000000000000000000000000000000000000000000081565b7f426c6f636b7377616e2f536f72746974696f6e53756d5472656573000000000081565b7f474947000000000000000000000000000000000000000000000000000000000081565b7f41434c5f4d414e4147455200000000000000000000000000000000000000000081565b7f444154415f50524f56494445520000000000000000000000000000000000000081565b7f4a5552590000000000000000000000000000000000000000000000000000000081565b7f585000000000000000000000000000000000000000000000000000000000000081565b7f444154000000000000000000000000000000000000000000000000000000000081565b60006020820190508282529291505056fea2646970667358221220b05bc4db981f45a9ea9399e285c39e7e93e48904d66a4fdf195a2bff12eb381164736f6c63430008000033";

type RegistryKeysConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistryKeysConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RegistryKeys__factory extends ContractFactory {
  constructor(...args: RegistryKeysConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RegistryKeys> {
    return super.deploy(overrides || {}) as Promise<RegistryKeys>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RegistryKeys {
    return super.attach(address) as RegistryKeys;
  }
  override connect(signer: Signer): RegistryKeys__factory {
    return super.connect(signer) as RegistryKeys__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryKeysInterface {
    return new utils.Interface(_abi) as RegistryKeysInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RegistryKeys {
    return new Contract(address, _abi, signerOrProvider) as RegistryKeys;
  }
}
