/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  RegistryKeys,
  RegistryKeysInterface,
} from "../../../../protocol/libraries/helpers/RegistryKeys";

const _abi = [
  {
    inputs: [],
    name: "ACL_ADMIN",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ACL_MANAGER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DAT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DATA_PROVIDER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DISPUTE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GIG",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ORDER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PROTOCOL_CONFIGURATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TREE_KEY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "XP",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61021d61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100b35760003560e01c80639035d57b1161007b5780639035d57b146100f65780639359021b146100fe578063a8a652eb14610106578063c396cbf41461010e578063e5a379dd14610116578063fbfb816b1461011e576100b3565b80633a21453b146100b85780634d5e07fb146100d65780635e209249146100de578063742b1282146100e657806381e167cf146100ee575b600080fd5b6100c0610126565b6040516100cd91906101de565b60405180910390f35b6100c0610134565b6100c0610140565b6100c0610150565b6100c061016c565b6100c0610177565b6100c061019b565b6100c06101a5565b6100c06101b7565b6100c06101cb565b6100c06101d4565b664449535055544560c81b81565b6427a92222a960d91b81565b6820a1a62fa0a226a4a760b91b81565b74282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b81565b632aa9a2a960e11b81565b7f426c6f636b7377616e2f536f72746974696f6e53756d5472656573000000000081565b6247494760e81b81565b6a20a1a62fa6a0a720a3a2a960a91b81565b6c2220aa20afa82927ab24a222a960991b81565b61058560f41b81565b6211105560ea1b81565b9081526020019056fea264697066735822122043591e20b93e8aa7a8c2daef00006082f95b1e9bbd6af47e3576436ebc57404364736f6c63430008000033";

type RegistryKeysConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistryKeysConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RegistryKeys__factory extends ContractFactory {
  constructor(...args: RegistryKeysConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RegistryKeys> {
    return super.deploy(overrides || {}) as Promise<RegistryKeys>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RegistryKeys {
    return super.attach(address) as RegistryKeys;
  }
  override connect(signer: Signer): RegistryKeys__factory {
    return super.connect(signer) as RegistryKeys__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryKeysInterface {
    return new utils.Interface(_abi) as RegistryKeysInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RegistryKeys {
    return new Contract(address, _abi, signerOrProvider) as RegistryKeys;
  }
}
