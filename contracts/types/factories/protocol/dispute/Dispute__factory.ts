/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Dispute,
  DisputeInterface,
} from "../../../protocol/dispute/Dispute";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAddressProvider",
        name: "provider",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "ADDRESSES_PROVIDER",
    outputs: [
      {
        internalType: "contract IAddressProvider",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ADDRESS_PROVIDER",
    outputs: [
      {
        internalType: "contract IAddressProvider",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_UINT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TREE_KEY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "erc20",
        type: "address",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "orderId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sellerId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "buyerId",
        type: "uint256",
      },
    ],
    name: "createDispute",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_name",
        type: "bytes32",
      },
    ],
    name: "fetchContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
    ],
    name: "getDisputeById",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "disputeId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "orderId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sellerId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "buyerId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ruling",
            type: "uint256",
          },
          {
            internalType: "enum DataTypes.DisputeState",
            name: "state",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "roundId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "tokensAtStakePerJuror",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalFeesForJurors",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxVotes",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "penalties",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "winningChoice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalRepartitions",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalVoted",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalCommited",
                type: "uint256",
              },
              {
                internalType: "uint256[]",
                name: "counts",
                type: "uint256[]",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "account",
                    type: "address",
                  },
                  {
                    internalType: "bytes32",
                    name: "commit",
                    type: "bytes32",
                  },
                  {
                    internalType: "uint256",
                    name: "choice",
                    type: "uint256",
                  },
                  {
                    internalType: "string",
                    name: "justification",
                    type: "string",
                  },
                  {
                    internalType: "bool",
                    name: "voted",
                    type: "bool",
                  },
                ],
                internalType: "struct DataTypes.Vote[]",
                name: "votes",
                type: "tuple[]",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "account",
                    type: "address",
                  },
                  {
                    internalType: "bytes32",
                    name: "role",
                    type: "bytes32",
                  },
                  {
                    internalType: "string",
                    name: "metadata",
                    type: "string",
                  },
                  {
                    internalType: "string",
                    name: "log",
                    type: "string",
                  },
                ],
                internalType: "struct DataTypes.Evidence[2]",
                name: "evidences",
                type: "tuple[2]",
              },
              {
                internalType: "address[]",
                name: "drawnJurors",
                type: "address[]",
              },
            ],
            internalType: "struct OutputTypes.RoundOutput[]",
            name: "rounds",
            type: "tuple[]",
          },
        ],
        internalType: "struct OutputTypes.DisputeOutput",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDisputeCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDisputeList",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "disputeId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "orderId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sellerId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "buyerId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ruling",
            type: "uint256",
          },
          {
            internalType: "enum DataTypes.DisputeState",
            name: "state",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "roundId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "tokensAtStakePerJuror",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalFeesForJurors",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxVotes",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "penalties",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "winningChoice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalRepartitions",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalVoted",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalCommited",
                type: "uint256",
              },
              {
                internalType: "uint256[]",
                name: "counts",
                type: "uint256[]",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "account",
                    type: "address",
                  },
                  {
                    internalType: "bytes32",
                    name: "commit",
                    type: "bytes32",
                  },
                  {
                    internalType: "uint256",
                    name: "choice",
                    type: "uint256",
                  },
                  {
                    internalType: "string",
                    name: "justification",
                    type: "string",
                  },
                  {
                    internalType: "bool",
                    name: "voted",
                    type: "bool",
                  },
                ],
                internalType: "struct DataTypes.Vote[]",
                name: "votes",
                type: "tuple[]",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "account",
                    type: "address",
                  },
                  {
                    internalType: "bytes32",
                    name: "role",
                    type: "bytes32",
                  },
                  {
                    internalType: "string",
                    name: "metadata",
                    type: "string",
                  },
                  {
                    internalType: "string",
                    name: "log",
                    type: "string",
                  },
                ],
                internalType: "struct DataTypes.Evidence[2]",
                name: "evidences",
                type: "tuple[2]",
              },
              {
                internalType: "address[]",
                name: "drawnJurors",
                type: "address[]",
              },
            ],
            internalType: "struct OutputTypes.RoundOutput[]",
            name: "rounds",
            type: "tuple[]",
          },
        ],
        internalType: "struct OutputTypes.DisputeOutput[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_role",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "hasProtocolRole",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "userId",
        type: "uint256",
      },
      {
        internalType: "contract IUser",
        name: "UserContract",
        type: "address",
      },
    ],
    name: "isCallerUser",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "userId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gigId",
        type: "uint256",
      },
      {
        internalType: "contract IUser",
        name: "UserContract",
        type: "address",
      },
    ],
    name: "isGigOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isStillBuyer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isStillSeller",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "kill",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAddressProvider",
        name: "_providerAddress",
        type: "address",
      },
    ],
    name: "setProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040527f426c6f636b7377616e2f536f72746974696f6e53756d54726565730000000000600055600019600a553480156200003b57600080fd5b5060405162001f9838038062001f988339810160408190526200005e91620001ce565b80620000736200006d62000178565b6200017c565b6040805180820190915260018152603560f81b60208201526001600160a01b038216620000be5760405162461bcd60e51b8152600401620000b59190620001fe565b60405180910390fd5b50600980546001600160a01b0319166001600160a01b039290921691909117905560405163483abc4f60e11b815273__$819dd864b9a28b29592cd77136582b47ce$__90639075789e906200013f906004907f426c6f636b7377616e2f536f72746974696f6e53756d54726565730000000000906204000090830162000254565b60006040518083038186803b1580156200015857600080fd5b505af41580156200016d573d6000803e3d6000fd5b50505050506200026a565b3390565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208284031215620001e0578081fd5b81516001600160a01b0381168114620001f7578182fd5b9392505050565b6000602080835283518082850152825b818110156200022c578581018301518582016040015282016200020e565b818111156200023e5783604083870101525b50601f01601f1916929092016040019392505050565b9283526020830191909152604082015260600190565b611d1e806200027a6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638da5cb5b116100ad578063cfd8d6c011610071578063cfd8d6c014610240578063daea85c514610253578063e5b5019a14610266578063ecccd0781461026e578063f2fde38b146102835761012c565b80638da5cb5b146101f75780639035d57b146101ff578063985fadc814610207578063b817bcf71461021a578063c7fb42bb1461022d5761012c565b806319872f76116100f457806319872f761461019f57806341c0e1b5146101b25780634516b756146101bc578063715018a6146101dc57806379a558e7146101e45761012c565b80630542975c1461013157806310987b771461014f57806311e0c07b146101645780631848effa1461018457806318f385181461018c575b600080fd5b610139610296565b6040516101469190611939565b60405180910390f35b6101576102a5565b60405161014691906119d1565b6101776101723660046115c5565b6102b8565b60405161014691906119c6565b610139610341565b61017761019a366004611237565b610350565b6101396101ad366004611292565b6103d8565b6101ba610461565b005b6101cf6101ca366004611292565b610497565b6040516101469190611b7f565b6101ba6105c3565b6101776101f23660046111ff565b6105d7565b61013961068d565b61015761069c565b6101776102153660046112aa565b6106a2565b6101776102283660046111ff565b6106e9565b61015761023b3660046115f2565b6107a0565b6101ba61024e3660046111ff565b6109b0565b6101ba6102613660046111ff565b610a9a565b610157610b70565b610276610b76565b6040516101469190611966565b6101ba6102913660046111ff565b610c42565b6009546001600160a01b031690565b6000806102b26001610c7c565b91505090565b60405163fbd2817f60e01b81526000906001600160a01b0383169063fbd2817f906102e99087908790600401611b92565b60206040518083038186803b15801561030157600080fd5b505afa158015610315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103399190611278565b949350505050565b6009546001600160a01b031681565b600082826001600160a01b031663dff3b497866040518263ffffffff1660e01b815260040161037f9190611939565b60206040518083038186803b15801561039757600080fd5b505afa1580156103ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cf91906113ec565b14949350505050565b600954604051630cc397bb60e11b81526000916001600160a01b0316906319872f76906104099085906004016119d1565b60206040518083038186803b15801561042157600080fd5b505afa158015610435573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610459919061121b565b90505b919050565b6009546001600160a01b0316331461048957634e487b7160e01b600052600160045260246000fd5b6009546001600160a01b0316ff5b61049f610d20565b60405163115e1e5f60e01b815260009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063115e1e5f906104dc908690600390600401611b92565b60206040518083038186803b1580156104f457600080fd5b505af4158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c91906113ec565b60405163a191f9b360e01b815290915073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063a191f9b3906105689084908790600401611b92565b60006040518083038186803b15801561058057600080fd5b505af4158015610594573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105bc91908101906112d9565b9392505050565b6105cb610c87565b6105d56000610cc6565b565b60006105eb64212aaca2a960d91b836106a2565b8015610459575042610603632aa9a2a960e11b6103d8565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b815260040161062e9190611939565b60006040518083038186803b15801561064657600080fd5b505afa15801561065a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106829190810190611404565b604001511192915050565b6008546001600160a01b031690565b60005481565b6000806106bc6a20a1a62fa6a0a720a3a2a960a91b6103d8565b6001600160a01b03166391d1485485856040518363ffffffff1660e01b81526004016102e99291906119da565b60006106fe6529a2a62622a960d11b836106a2565b8015610459575042610716632aa9a2a960e11b6103d8565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b81526004016107419190611939565b60006040518083038186803b15801561075957600080fd5b505afa15801561076d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107959190810190611404565b608001511192915050565b60006427a92222a960d91b6107b4816103d8565b6001600160a01b03166107c5610d18565b6001600160a01b0316146107f45760405162461bcd60e51b81526004016107eb90611b21565b60405180910390fd5b60006107fe6102a5565b9050600061082374282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b6103d8565b6001600160a01b03166382db8b076040518163ffffffff1660e01b815260040160806040518083038186803b15801561085b57600080fd5b505afa15801561086f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108939190611387565b9050600073__$499c06b2b29ab2ab1aba66b7d414a45a21$";

type DisputeConstructorParams =
  | [linkLibraryAddresses: DisputeLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DisputeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Dispute__factory extends ContractFactory {
  constructor(...args: DisputeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, Dispute__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: DisputeLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$819dd864b9a28b29592cd77136582b47ce\\$__", "g"),
      linkLibraryAddresses[
        "contracts/imports/kleros/contracts/SortitionSumTreeFactory.sol:SortitionSumTreeFactory"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$499c06b2b29ab2ab1aba66b7d414a45a21\\$__", "g"),
      linkLibraryAddresses[
        "contracts/protocol/libraries/logics/DisputeLogic.sol:DisputeLogic"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Dispute> {
    return super.deploy(provider, overrides || {}) as Promise<Dispute>;
  }
  override getDeployTransaction(
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(provider, overrides || {});
  }
  override attach(address: string): Dispute {
    return super.attach(address) as Dispute;
  }
  override connect(signer: Signer): Dispute__factory {
    return super.connect(signer) as Dispute__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DisputeInterface {
    return new utils.Interface(_abi) as DisputeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Dispute {
    return new Contract(address, _abi, signerOrProvider) as Dispute;
  }
}

export interface DisputeLibraryAddresses {
  ["contracts/imports/kleros/contracts/SortitionSumTreeFactory.sol:SortitionSumTreeFactory"]: string;
  ["contracts/protocol/libraries/logics/DisputeLogic.sol:DisputeLogic"]: string;
}
