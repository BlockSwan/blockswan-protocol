/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Dispute,
  DisputeInterface,
} from "../../../protocol/dispute/Dispute";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAddressProvider",
        name: "provider",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "ADDRESSES_PROVIDER",
    outputs: [
      {
        internalType: "contract IAddressProvider",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ADDRESS_PROVIDER",
    outputs: [
      {
        internalType: "contract IAddressProvider",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_UINT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "erc20",
        type: "address",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "orderId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "procecutorId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "defendantId",
        type: "uint256",
      },
    ],
    name: "createDispute",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_name",
        type: "bytes32",
      },
    ],
    name: "fetchContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
    ],
    name: "getDisputeById",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "disputeId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "orderId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "procecutorId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "defendantId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ruling",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "timestamps",
            type: "uint256[]",
          },
          {
            internalType: "enum DataTypes.DisputeState",
            name: "state",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "roundId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "tokensAtStakePerJuror",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalFeesForJurors",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxVotes",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "penalties",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "winningChoice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalRepartitions",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalVoted",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalCommited",
                type: "uint256",
              },
              {
                internalType: "uint256[]",
                name: "counts",
                type: "uint256[]",
              },
              {
                internalType: "uint256[]",
                name: "evidenceSubmitters",
                type: "uint256[]",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "account",
                    type: "address",
                  },
                  {
                    internalType: "bytes32",
                    name: "commit",
                    type: "bytes32",
                  },
                  {
                    internalType: "uint256",
                    name: "choice",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "weight",
                    type: "uint256",
                  },
                  {
                    internalType: "string",
                    name: "justification",
                    type: "string",
                  },
                  {
                    internalType: "bool",
                    name: "voted",
                    type: "bool",
                  },
                ],
                internalType: "struct DataTypes.Vote[]",
                name: "votes",
                type: "tuple[]",
              },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "userId",
                    type: "uint256",
                  },
                  {
                    internalType: "bytes32",
                    name: "role",
                    type: "bytes32",
                  },
                  {
                    internalType: "string",
                    name: "metadata",
                    type: "string",
                  },
                  {
                    internalType: "string",
                    name: "log",
                    type: "string",
                  },
                ],
                internalType: "struct DataTypes.Evidence[]",
                name: "evidences",
                type: "tuple[]",
              },
              {
                internalType: "address[]",
                name: "drawnJurors",
                type: "address[]",
              },
            ],
            internalType: "struct OutputTypes.RoundOutput[]",
            name: "rounds",
            type: "tuple[]",
          },
        ],
        internalType: "struct OutputTypes.DisputeOutput",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDisputeCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDisputeList",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "disputeId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "orderId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "procecutorId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "defendantId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ruling",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "timestamps",
            type: "uint256[]",
          },
          {
            internalType: "enum DataTypes.DisputeState",
            name: "state",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "roundId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "tokensAtStakePerJuror",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalFeesForJurors",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxVotes",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "penalties",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "winningChoice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalRepartitions",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalVoted",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalCommited",
                type: "uint256",
              },
              {
                internalType: "uint256[]",
                name: "counts",
                type: "uint256[]",
              },
              {
                internalType: "uint256[]",
                name: "evidenceSubmitters",
                type: "uint256[]",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "account",
                    type: "address",
                  },
                  {
                    internalType: "bytes32",
                    name: "commit",
                    type: "bytes32",
                  },
                  {
                    internalType: "uint256",
                    name: "choice",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "weight",
                    type: "uint256",
                  },
                  {
                    internalType: "string",
                    name: "justification",
                    type: "string",
                  },
                  {
                    internalType: "bool",
                    name: "voted",
                    type: "bool",
                  },
                ],
                internalType: "struct DataTypes.Vote[]",
                name: "votes",
                type: "tuple[]",
              },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "userId",
                    type: "uint256",
                  },
                  {
                    internalType: "bytes32",
                    name: "role",
                    type: "bytes32",
                  },
                  {
                    internalType: "string",
                    name: "metadata",
                    type: "string",
                  },
                  {
                    internalType: "string",
                    name: "log",
                    type: "string",
                  },
                ],
                internalType: "struct DataTypes.Evidence[]",
                name: "evidences",
                type: "tuple[]",
              },
              {
                internalType: "address[]",
                name: "drawnJurors",
                type: "address[]",
              },
            ],
            internalType: "struct OutputTypes.RoundOutput[]",
            name: "rounds",
            type: "tuple[]",
          },
        ],
        internalType: "struct OutputTypes.DisputeOutput[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IProtocolConfigurator",
        name: "protocolConfigurator",
        type: "address",
      },
    ],
    name: "getNewDelays",
    outputs: [
      {
        internalType: "uint256[]",
        name: "delays",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_role",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "hasProtocolRole",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "userId",
        type: "uint256",
      },
      {
        internalType: "contract IUser",
        name: "UserContract",
        type: "address",
      },
    ],
    name: "isCallerUser",
    outputs: [
      {
        internalType: "bool",
        name: "isAddressMatchingId",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "userId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gigId",
        type: "uint256",
      },
      {
        internalType: "contract IUser",
        name: "UserContract",
        type: "address",
      },
    ],
    name: "isGigOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isStillBuyer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isStillSeller",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "kill",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "userId",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "role",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            internalType: "string",
            name: "log",
            type: "string",
          },
        ],
        internalType: "struct DataTypes.Evidence",
        name: "evidence",
        type: "tuple",
      },
    ],
    name: "sendEvidence",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAddressProvider",
        name: "_providerAddress",
        type: "address",
      },
    ],
    name: "setProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000196005553480156200001757600080fd5b506040516200263f3803806200263f8339810160408190526200003a9162000118565b806200004f62000049620000c2565b620000c6565b6040805180820190915260018152603560f81b60208201526001600160a01b0382166200009a5760405162461bcd60e51b815260040162000091919062000148565b60405180910390fd5b50600480546001600160a01b0319166001600160a01b0392909216919091179055506200019e565b3390565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200012a578081fd5b81516001600160a01b038116811462000141578182fd5b9392505050565b6000602080835283518082850152825b81811015620001765785810183015185820160400152820162000158565b81811115620001885783604083870101525b50601f01601f1916929092016040019392505050565b61249180620001ae6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806379a558e7116100b8578063c7fb42bb1161007c578063c7fb42bb14610263578063cfd8d6c014610276578063daea85c514610289578063e5b5019a1461029c578063ecccd078146102a4578063f2fde38b146102b957610137565b806379a558e71461020f5780638da5cb5b14610222578063940d929b1461022a578063985fadc81461023d578063b817bcf71461025057610137565b806319872f76116100ff57806319872f76146101aa57806341c0e1b5146101bd5780634516b756146101c7578063715018a6146101e757806374ffa370146101ef57610137565b80630542975c1461013c57806310987b771461015a57806311e0c07b1461016f5780631848effa1461018f57806318f3851814610197575b600080fd5b6101446102cc565b6040516101519190611f9a565b60405180910390f35b6101626102db565b6040516101519190612045565b61018261017d366004611ae6565b6102ee565b604051610151919061203a565b610144610377565b6101826101a5366004611665565b610386565b6101446101b8366004611724565b61040e565b6101c5610498565b005b6101da6101d5366004611724565b6104ce565b604051610151919061222b565b6101c56105fa565b6102026101fd36600461162d565b61060e565b6040516101519190612027565b61018261021d36600461162d565b610726565b6101446107dc565b6101c5610238366004611b13565b6107eb565b61018261024b36600461173c565b6108dd565b61018261025e36600461162d565b610924565b610162610271366004611bdf565b6109db565b6101c561028436600461162d565b610c2c565b6101c561029736600461162d565b610d16565b610162610dec565b6102ac610df2565b6040516101519190611fc7565b6101c56102c736600461162d565b610ebd565b6004546001600160a01b031690565b6000806102e86000610ef7565b91505090565b60405163fbd2817f60e01b81526000906001600160a01b0383169063fbd2817f9061031f908790879060040161223e565b60206040518083038186803b15801561033757600080fd5b505afa15801561034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036f919061170a565b949350505050565b6004546001600160a01b031681565b600082826001600160a01b031663dff3b497866040518263ffffffff1660e01b81526004016103b59190611f9a565b60206040518083038186803b1580156103cd57600080fd5b505afa1580156103e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610405919061191f565b14949350505050565b60048054604051630cc397bb60e11b81526000926001600160a01b03909216916319872f769161044091869101612045565b60206040518083038186803b15801561045857600080fd5b505afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104909190611649565b90505b919050565b6004546001600160a01b031633146104c057634e487b7160e01b600052600160045260246000fd5b6004546001600160a01b0316ff5b6104d66110e2565b60405163115e1e5f60e01b815260009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063115e1e5f9061051390869060029060040161223e565b60206040518083038186803b15801561052b57600080fd5b505af415801561053f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610563919061191f565b60405163a191f9b360e01b815290915073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063a191f9b39061059f908490879060040161223e565b60006040518083038186803b1580156105b757600080fd5b505af41580156105cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105f391908101906117d9565b9392505050565b610602610f02565b61060c6000610f41565b565b60606000826001600160a01b0316631cb647056040518163ffffffff1660e01b815260040160a06040518083038186803b15801561064b57600080fd5b505afa15801561065f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610683919061176b565b905073__$499c06b2b29ab2ab1aba66b7d414a45a21$__634aac505282602001518360400151846060015185608001516040518563ffffffff1660e01b81526004016106d29493929190612326565b60006040518083038186803b1580156106ea57600080fd5b505af41580156106fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105f391908101906116d8565b600061073a64212aaca2a960d91b836108dd565b8015610490575042610752632aa9a2a960e11b61040e565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b815260040161077d9190611f9a565b60006040518083038186803b15801561079557600080fd5b505afa1580156107a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107d19190810190611937565b604001511192915050565b6003546001600160a01b031690565b600073__$499c06b2b29ab2ab1aba66b7d414a45a21$__63a5fc071c60026040518060600160405280888152602001878152602001868152506040518363ffffffff1660e01b8152600401610841929190612065565b60206040518083038186803b15801561085957600080fd5b505af415801561086d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610891919061170a565b90508060405180604001604052806002815260200161333160f01b815250906108d65760405162461bcd60e51b81526004016108cd91906120d9565b60405180910390fd5b5050505050565b6000806108f76a20a1a62fa6a0a720a3a2a960a91b61040e565b6001600160a01b03166391d1485485856040518363ffffffff1660e01b815260040161031f92919061204e565b60006109396529a2a62622a960d11b836108dd565b8015610490575042610951632aa9a2a960e11b61040e565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b815260040161097c9190611f9a565b60006040518083038186803b15801561099457600080fd5b505afa1580156109a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d09190810190611937565b608001511192915050565b60006427a92222a960d91b6109ef8161040e565b6001600160a01b0316610a00610f93565b6001600160a01b03161460405180604001604052806002815260200161199b60f11b81525090610a435760405162461bcd60e51b81526004016108cd91906120d9565b506000610a4e6102db565b90506000610a7374282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b61040e565b90506000816001600160a01b03166382db8b076040518163ffffffff1660e01b815260040160806040518083038186803b158015610ab057600080fd5b505afa158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae891906118bb565b9050600073__$499c06b2b29ab2ab1aba66b7d414a45a21$__639d403dc5600060026040518061010001604052808981526020018e81526020018d81526020018c81526020018760600151815260200187606001518860400151610b4c91906123b4565b8152602001610b5a8961060e565b8152602001610b6f88606001518b6001610f97565b8152506040518463ffffffff1660e01b8152600401610b909392919061224c565b60206040518083038186803b158015610ba857600080fd5b505af4158015610bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be0919061170a565b90508060405180604001604052806002815260200161191b60f11b81525090610c1c5760405162461bcd60e51b81526004016108cd91906120d9565b509294505050505b509392505050565b6001600160a01b0381161580610c4c57506004546001600160a01b031633145b80610cd85750336001600160a01b0316306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9557600080fd5b505afa158015610ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccd9190611649565b6001600160a01b0316145b610cf45760405162461bcd60e51b81526004016108cd90612154565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6d282927aa27a1a7a62fa0a226a4a760911b610d348161024b610f93565b610d505760405162461bcd60e51b81526004016108cd906121f4565b6000610d616211105560ea1b61040e565b60055460405163095ea7b360e01b81529192506001600160a01b0385169163095ea7b391610d9491859190600401611fae565b602060405180830381600087803b158015610dae57600080fd5b505af1158015610dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de6919061170a565b50505050565b60055481565b60606000610dfe6102db565b90506000816001600160401b03811115610e2857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e6157816020015b610e4e6110e2565b815260200190600190039081610e465790505b50905060005b82811015610eb657610e78816104ce565b828281518110610e9857634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610eae906123ff565b915050610e67565b5091505090565b610ec5610f02565b6001600160a01b038116610eeb5760405162461bcd60e51b81526004016108cd9061210e565b610ef481610f41565b50565b600061049082611074565b610f0a610f93565b6001600160a01b0316610f1b6107dc565b6001600160a01b03161461060c5760405162461bcd60e51b81526004016108cd906121bf565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b3390565b60606000610fab634a55525960e01b61040e565b6040516352d887ad60e11b81529091506001600160a01b0382169063a5b10f5a90610fde90889088908890600401612310565b60006040518083038186803b158015610ff657600080fd5b505afa15801561100a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261103291908101906116a6565b9150610c246040518060400160405280601781526020017f6a7572726f727320616464727373206c656e6774683a200000000000000000008152508351611078565b5490565b6110bd828260405160240161108e9291906120ec565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b1790526110c1565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b604051806101200160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081526020016000600481111561114057634e487b7160e01b600052602160045260246000fd5b8152602001606081525090565b805161049381612446565b600082601f830112611168578081fd5b8151602061117d6111788361236a565b612341565b8281528181019085830183850287018401881015611199578586fd5b855b858110156111c05781516111ae81612446565b8452928401929084019060010161119b565b5090979650505050505050565b600082601f8301126111dd578081fd5b815160206111ed6111788361236a565b82815281810190858301855b858110156111c05781518801608080601f19838d03011215611219578889fd5b604080518281016001600160401b03828210818311171561123c5761123c612430565b908352848a0151825284830151828b01526060850151908082111561125f578c8dfd5b61126d8f8c848901016115ea565b83850152938501519380851115611282578c8dfd5b50506112928d8a858701016115ea565b6060820152875250505092840192908401906001016111f9565b600082601f8301126112bc578081fd5b815160206112cc6111788361236a565b82815281810190858301855b858110156111c057815188016101c080601f19838d030112156112f9578889fd5b61130281612341565b878301518152604083015188820152606083015160408201526080830151606082015260a0830151608082015260c083015160a082015260e083015160c082015261010083015160e08201526101208301516101008201526101408301516001600160401b0380821115611374578b8cfd5b6113828e8b84880101611525565b61012084015261016085015191508082111561139c578b8cfd5b6113aa8e8b84880101611525565b6101408401526101808501519150808211156113c4578b8cfd5b6113d28e8b8488010161143a565b6101608401526101a0915081850151818111156113ed578c8dfd5b6113fb8f8c838901016111cd565b61018085015250928401519280841115611413578b8cfd5b506114228d8a85870101611158565b908201528652505092840192908401906001016112d8565b600082601f83011261144a578081fd5b8151602061145a6111788361236a565b82815281810190858301855b858110156111c0578151880160c080601f19838d03011215611486578889fd5b604080518281016001600160401b0382821081831117156114a9576114a9612430565b8184526114b78b870161114d565b8352838601518b8401526060860151848401526080860151606084015260a09350838601519150808211156114ea578c8dfd5b506114f98e8b838801016115ea565b60808301525061150a83850161157f565b91810191909152865250509284019290840190600101611466565b600082601f830112611535578081fd5b815160206115456111788361236a565b8281528181019085830183850287018401881015611561578586fd5b855b858110156111c057815184529284019290840190600101611563565b8051801515811461049357600080fd5b80516005811061049357600080fd5b600082601f8301126115ae578081fd5b81356115bc6111788261238d565b8181528460208386010111156115d0578283fd5b816020850160208301379081016020019190915292915050565b600082601f8301126115fa578081fd5b81516116086111788261238d565b81815284602083860101111561161c578283fd5b61036f8260208301602087016123d3565b60006020828403121561163e578081fd5b81356105f381612446565b60006020828403121561165a578081fd5b81516105f381612446565b600080600060608486031215611679578182fd5b833561168481612446565b925060208401359150604084013561169b81612446565b809150509250925092565b6000602082840312156116b7578081fd5b81516001600160401b038111156116cc578182fd5b61036f84828501611158565b6000602082840312156116e9578081fd5b81516001600160401b038111156116fe578182fd5b61036f84828501611525565b60006020828403121561171b578081fd5b6105f38261157f565b600060208284031215611735578081fd5b5035919050565b6000806040838503121561174e578182fd5b82359150602083013561176081612446565b809150509250929050565b600060a0828403121561177c578081fd5b60405160a081018181106001600160401b038211171561179e5761179e612430565b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b6000602082840312156117ea578081fd5b81516001600160401b0380821115611800578283fd5b8184019150610120808387031215611816578384fd5b61181f81612341565b9050825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015182811115611868578485fd5b61187487828601611525565b60c08301525061188660e0840161158f565b60e0820152610100808401518381111561189e578586fd5b6118aa888287016112ac565b918301919091525095945050505050565b6000608082840312156118cc578081fd5b604051608081018181106001600160401b03821117156118ee576118ee612430565b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b600060208284031215611930578081fd5b5051919050565b600060208284031215611948578081fd5b81516001600160401b038082111561195e578283fd5b81840191506101e0808387031215611974578384fd5b61197d81612341565b905082518281111561198d578485fd5b611999878286016115ea565b8252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201526119e460e0840161114d565b60e082015261010080840151838111156119fc578586fd5b611a0888828701611525565b8284015250506101208084015183811115611a21578586fd5b611a2d88828701611525565b8284015250506101408084015183811115611a46578586fd5b611a5288828701611525565b8284015250506101608084015183811115611a6b578586fd5b611a7788828701611525565b8284015250506101808084015183811115611a90578586fd5b611a9c88828701611525565b8284015250506101a08084015183811115611ab5578586fd5b611ac188828701611525565b8284015250506101c08084015183811115611ada578586fd5b6118aa88828701611525565b600080600060608486031215611afa578081fd5b8335925060208401359150604084013561169b81612446565b600080600060608486031215611b27578081fd5b833592506020840135915060408401356001600160401b0380821115611b4b578283fd5b9085019060808288031215611b5e578283fd5b604051608081018181108382111715611b7957611b79612430565b80604052508235815260208301356020820152604083013582811115611b9d578485fd5b611ba98982860161159e565b604083015250606083013582811115611bc0578485fd5b611bcc8982860161159e565b6060830152508093505050509250925092565b600080600060608486031215611bf3578081fd5b505081359360208301359350604090920135919050565b6000815180845260208085019450808401835b83811015611c425781516001600160a01b031687529582019590820190600101611c1d565b509495945050505050565b6000815180845260208085018081965082840281019150828601855b85811015611ccf578284038952815160808151865286820151878701526040808301518282890152611c9d83890182611ee4565b9250505060608083015192508682038188015250611cbb8183611ee4565b9a87019a9550505090840190600101611c69565b5091979650505050505050565b6000815180845260208085018081965082840281019150828601855b85811015611ccf578284038952815180518552858101518686015260408082015190860152606080820151908601526080808201519086015260a0808201519086015260c0808201519086015260e080820151908601526101008082015190860152610120808201516101c08288018190529190611d7883890182611e93565b925050506101408083015187830382890152611d948382611e93565b925050506101608083015187830382890152611db08382611dff565b925050506101808083015187830382890152611dcc8382611c4d565b925050506101a08083015192508682038188015250611deb8183611c0a565b9a87019a9550505090840190600101611cf8565b6000815180845260208085018081965082840281019150828601855b85811015611ccf578284038952815180516001600160a01b031685528581015186860152604080820151908601526060808201519086015260808082015160c08288018190529190611e6f83890182611ee4565b60a09485015115159890940197909752505098850198935090840190600101611e1b565b6000815180845260208085019450808401835b83811015611c4257815187529582019590820190600101611ea6565b60058110611ee057634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452611efc8160208601602086016123d3565b601f01601f19169290920160200192915050565b6000610120825184526020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015160a085015260c08301518160c0860152611f6282860182611e93565b91505060e0830151611f7760e0860182611ec2565b506101008084015185830382870152611f908382611cdc565b9695505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561201a57603f19888603018452612008858351611f10565b94509285019290850190600101611fec565b5092979650505050505050565b6000602082526105f36020830184611e93565b901515815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6000838252604060208301528251604083015260208301516060830152604083015160606080840152805160a0840152602081015160c08401526040810151608060e08501526120b9610120850182611ee4565b905060608201519150609f1984820301610100850152611f908183611ee4565b6000602082526105f36020830184611ee4565b6000604082526120ff6040830185611ee4565b90508260208301529392505050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526045908201527f43616e206f6e6c792062652063616c6c6564206966206164647265737365735060408201527f726f766964657220697320656d7074792c206d73672e73656e646572206f722060608201526437bbb732b960d91b608082015260a00190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601c908201527f5265717569726573206d73672e73656e6465722068617320726f6c6500000000604082015260600190565b6000602082526105f36020830184611f10565b918252602082015260400190565b60008482526020848184015260606040840152610160830184516060850152818501516080850152604085015160a0850152606085015160c0850152608085015160e085015260a0850151610100818187015260c0870151915080610120870152508181518084526101808701915084830193508592505b808310156122e457835182529284019260019290920191908401906122c4565b5060e0870151868203605f190161014088015293506123038185611c0a565b9998505050505050505050565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b6040518181016001600160401b038111828210171561236257612362612430565b604052919050565b60006001600160401b0382111561238357612383612430565b5060209081020190565b60006001600160401b038211156123a6576123a6612430565b50601f01601f191660200190565b60008160001904831182151516156123ce576123ce61241a565b500290565b60005b838110156123ee5781810151838201526020016123d6565b83811115610de65750506000910152565b60006000198214156124135761241361241a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ef457600080fdfea2646970667358221220d8f7b41d6248b89fb2ade9ee4ffb1c3025972b5f34947bb61e7e230962d09ab864736f6c63430008000033";

type DisputeConstructorParams =
  | [linkLibraryAddresses: DisputeLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DisputeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Dispute__factory extends ContractFactory {
  constructor(...args: DisputeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, Dispute__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: DisputeLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$499c06b2b29ab2ab1aba66b7d414a45a21\\$__", "g"),
      linkLibraryAddresses[
        "contracts/protocol/libraries/logics/DisputeLogic.sol:DisputeLogic"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Dispute> {
    return super.deploy(provider, overrides || {}) as Promise<Dispute>;
  }
  override getDeployTransaction(
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(provider, overrides || {});
  }
  override attach(address: string): Dispute {
    return super.attach(address) as Dispute;
  }
  override connect(signer: Signer): Dispute__factory {
    return super.connect(signer) as Dispute__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DisputeInterface {
    return new utils.Interface(_abi) as DisputeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Dispute {
    return new Contract(address, _abi, signerOrProvider) as Dispute;
  }
}

export interface DisputeLibraryAddresses {
  ["contracts/protocol/libraries/logics/DisputeLogic.sol:DisputeLogic"]: string;
}
