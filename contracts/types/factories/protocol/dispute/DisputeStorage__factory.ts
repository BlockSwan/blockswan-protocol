/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  DisputeStorage,
  DisputeStorageInterface,
} from "../../../protocol/dispute/DisputeStorage";

const _abi = [
  {
    inputs: [],
    name: "TREE_KEY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040527f426c6f636b7377616e2f536f72746974696f6e53756d54726565730000000000600055348015603357600080fd5b50608c806100426000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80639035d57b14602d575b600080fd5b60336047565b604051603e9190604d565b60405180910390f35b60005481565b9081526020019056fea264697066735822122000dca79b14625e2203ea5dc638b6d27b352537e30afe45f449e5ac5cee136f7764736f6c63430008000033";

type DisputeStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DisputeStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DisputeStorage__factory extends ContractFactory {
  constructor(...args: DisputeStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DisputeStorage> {
    return super.deploy(overrides || {}) as Promise<DisputeStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DisputeStorage {
    return super.attach(address) as DisputeStorage;
  }
  override connect(signer: Signer): DisputeStorage__factory {
    return super.connect(signer) as DisputeStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DisputeStorageInterface {
    return new utils.Interface(_abi) as DisputeStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DisputeStorage {
    return new Contract(address, _abi, signerOrProvider) as DisputeStorage;
  }
}
