/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IDispute, IDisputeInterface } from "../../interfaces/IDispute";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "orderId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
    ],
    name: "NewDispute",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "orderId",
        type: "uint256",
      },
    ],
    name: "createDispute",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
    ],
    name: "getDisputeById",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "gigId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "successSell",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "failedSell",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "reviewIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "orderIds",
            type: "uint256[]",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "price",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "timeDelivery",
                type: "uint256",
              },
            ],
            internalType: "struct DataTypes.Package[3]",
            name: "packages",
            type: "tuple[3]",
          },
        ],
        internalType: "struct OutputTypes.GigOutput",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDisputeList",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "disputeId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "orderId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sellerId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "buyerId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ruling",
            type: "uint256",
          },
          {
            internalType: "enum DataTypes.DisputeState",
            name: "state",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "roundId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "tokensAtStakePerJuror",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalFeesForJurors",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxVotes",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "penalties",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "winningChoice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalRepartitions",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalVoted",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "totalCommited",
                type: "uint256",
              },
              {
                internalType: "uint256[]",
                name: "counts",
                type: "uint256[]",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "account",
                    type: "address",
                  },
                  {
                    internalType: "bytes32",
                    name: "commit",
                    type: "bytes32",
                  },
                  {
                    internalType: "uint256",
                    name: "choice",
                    type: "uint256",
                  },
                  {
                    internalType: "string",
                    name: "justification",
                    type: "string",
                  },
                  {
                    internalType: "bool",
                    name: "voted",
                    type: "bool",
                  },
                ],
                internalType: "struct DataTypes.Vote[]",
                name: "votes",
                type: "tuple[]",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "account",
                    type: "address",
                  },
                  {
                    internalType: "bytes32",
                    name: "role",
                    type: "bytes32",
                  },
                  {
                    internalType: "string",
                    name: "metadata",
                    type: "string",
                  },
                  {
                    internalType: "string",
                    name: "log",
                    type: "string",
                  },
                ],
                internalType: "struct DataTypes.Evidence[2]",
                name: "evidences",
                type: "tuple[2]",
              },
              {
                internalType: "address[]",
                name: "drawnJurors",
                type: "address[]",
              },
            ],
            internalType: "struct OutputTypes.RoundOutput[]",
            name: "rounds",
            type: "tuple[]",
          },
        ],
        internalType: "struct OutputTypes.DisputeOutput[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDisputesCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IDispute__factory {
  static readonly abi = _abi;
  static createInterface(): IDisputeInterface {
    return new utils.Interface(_abi) as IDisputeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IDispute {
    return new Contract(address, _abi, signerOrProvider) as IDispute;
  }
}
