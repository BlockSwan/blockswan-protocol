{
  "language": "Solidity",
  "sources": {
    "contracts/imports/aave/contracts/PercentageMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\n/*^\n * @title PercentageMath library\n * @author Aave\n * @notice Provides functions to perform percentage calculations\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\n **/\nlibrary PercentageMath {\n    // Maximum percentage factor (100.00%)\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\n\n    // Half percentage factor (50.00%)\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\n\n    /**\n     * @notice Executes a percentage multiplication\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param value The value of which the percentage needs to be calculated\n     * @param percentage The percentage of the value to be calculated\n     * @return result value percentmul percentage\n     **/\n    function percentMul(\n        uint256 value,\n        uint256 percentage\n    ) internal pure returns (uint256 result) {\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\n        assembly {\n            if iszero(\n                or(\n                    iszero(percentage),\n                    iszero(\n                        gt(\n                            value,\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\n                        )\n                    )\n                )\n            ) {\n                revert(0, 0)\n            }\n\n            result := div(\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\n                PERCENTAGE_FACTOR\n            )\n        }\n    }\n\n    /**\n     * @notice Executes a percentage division\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param value The value of which the percentage needs to be calculated\n     * @param percentage The percentage of the value to be calculated\n     * @return result value percentdiv percentage\n     **/\n    function percentDiv(\n        uint256 value,\n        uint256 percentage\n    ) internal pure returns (uint256 result) {\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\n        assembly {\n            if or(\n                iszero(percentage),\n                iszero(\n                    iszero(\n                        gt(\n                            value,\n                            div(\n                                sub(not(0), div(percentage, 2)),\n                                PERCENTAGE_FACTOR\n                            )\n                        )\n                    )\n                )\n            ) {\n                revert(0, 0)\n            }\n\n            result := div(\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\n                percentage\n            )\n        }\n    }\n}\n"
    },
    "contracts/imports/gnosis/contracts/GPv2SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-or-later\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"../../openzeppelin/contracts/IERC20.sol\";\n\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\n/// @author Gnosis Developer^\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\nlibrary GPv2SafeERC20 {\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\n    /// also when the token returns `false`.\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        bytes4 selector_ = token.transfer.selector;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let freeMemoryPointer := mload(0x40)\n            mstore(freeMemoryPointer, selector_)\n            mstore(\n                add(freeMemoryPointer, 4),\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\n            )\n            mstore(add(freeMemoryPointer, 36), value)\n\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n        }\n\n        require(getLastTransferResult(token), \"GPv2: failed transfer\");\n    }\n\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\n    /// reverts also when the token returns `false`.\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        bytes4 selector_ = token.transferFrom.selector;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let freeMemoryPointer := mload(0x40)\n            mstore(freeMemoryPointer, selector_)\n            mstore(\n                add(freeMemoryPointer, 4),\n                and(from, 0xffffffffffffffffffffffffffffffffffffffff)\n            )\n            mstore(\n                add(freeMemoryPointer, 36),\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\n            )\n            mstore(add(freeMemoryPointer, 68), value)\n\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n        }\n\n        require(getLastTransferResult(token), \"GPv2: failed transferFrom\");\n    }\n\n    /// @dev Verifies that the last return was a successful `transfer*` call.\n    /// This is done by checking that the return data is either empty, or\n    /// is a valid ABI encoded boolean.\n    function getLastTransferResult(\n        IERC20 token\n    ) private view returns (bool success) {\n        // NOTE: Inspecting previous return data requires assembly. Note that\n        // we write the return data to memory 0 in the case where the return\n        // data size is 32, this is OK since the first 64 bytes of memory are\n        // reserved by Solidy as a scratch space that can be used within\n        // assembly blocks.\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            /// @dev Revert with an ABI encoded Solidity error with a message\n            /// that fits into 32-bytes.\n            ///\n            /// An ABI encoded Solidity error has the following memory layout:\n            ///\n            /// ------------+----------------------------------\n            ///  byte range | value\n            /// ------------+----------------------------------\n            ///  0x00..0x04 |        selector(\"Error(string)\")\n            ///  0x04..0x24 |      string offset (always 0x20)\n            ///  0x24..0x44 |                    string length\n            ///  0x44..0x64 | string value, padded to 32-bytes\n            function revertWithMessage(length, message) {\n                mstore(0x00, \"\\x08\\xc3\\x79\\xa0\")\n                mstore(0x04, 0x20)\n                mstore(0x24, length)\n                mstore(0x44, message)\n                revert(0x00, 0x64)\n            }\n\n            switch returndatasize()\n            // Non-standard ERC20 transfer without return.\n            case 0 {\n                // NOTE: When the return data size is 0, verify that there\n                // is code at the address. This is done in order to maintain\n                // compatibility with Solidity calling conventions.\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\n                if iszero(extcodesize(token)) {\n                    revertWithMessage(20, \"GPv2: not a contract\")\n                }\n\n                success := 1\n            }\n            // Standard ERC20 transfer returning boolean success value.\n            case 32 {\n                returndatacopy(0, 0, returndatasize())\n\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\n                // as `true` for a boolean. In order to stay compatible with\n                // OpenZeppelin's `SafeERC20` library which is known to work\n                // with the existing ERC20 implementation we care about,\n                // make sure we return success for any non-zero return value\n                // from the `transfer*` call.\n                success := iszero(iszero(mload(0)))\n            }\n            default {\n                revertWithMessage(31, \"GPv2: malformed transfer result\")\n            }\n        }\n    }\n}\n"
    },
    "contracts/imports/openzeppelin/contracts/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"./Context.sol\";\nimport \"./Strings.sol\";\nimport \"./ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}"
    },
    "contracts/imports/openzeppelin/contracts/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"./EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}"
    },
    "contracts/imports/openzeppelin/contracts/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    \n   \n   \n\n}"
    },
    "contracts/imports/openzeppelin/contracts/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/imports/openzeppelin/contracts/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}"
    },
    "contracts/imports/openzeppelin/contracts/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\n\npragma solidity ^0.8.0;\n\nimport \"./EnumerableSet.sol\";\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * The following map types are supported:\n *\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableMap.\n * ====\n */\nlibrary EnumerableMap {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct Bytes32ToBytes32Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        Bytes32ToBytes32Map storage map,\n        bytes32 key,\n        bytes32 value\n    ) internal returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\n        bytes32 key = map._keys.at(index);\n        return (key, map._values[key]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\n        bytes32 value = map._values[key];\n        if (value == bytes32(0)) {\n            return (contains(map, key), bytes32(0));\n        } else {\n            return (true, value);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || contains(map, key), \"EnumerableMap: nonexistent key\");\n        return value;\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        Bytes32ToBytes32Map storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || contains(map, key), errorMessage);\n        return value;\n    }\n\n    // UintToUintMap\n\n    struct UintToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        UintToUintMap storage map,\n        uint256 key,\n        uint256 value\n    ) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (uint256(key), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key)));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        UintToUintMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key), errorMessage));\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        UintToAddressMap storage map,\n        uint256 key,\n        address value\n    ) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        UintToAddressMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\n    }\n\n    // AddressToUintMap\n\n    struct AddressToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        AddressToUintMap storage map,\n        address key,\n        uint256 value\n    ) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (address(uint160(uint256(key))), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        AddressToUintMap storage map,\n        address key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\n    }\n\n    // Bytes32ToUintMap\n\n    struct Bytes32ToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        Bytes32ToUintMap storage map,\n        bytes32 key,\n        uint256 value\n    ) internal returns (bool) {\n        return set(map._inner, key, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\n        return remove(map._inner, key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\n        return contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (key, uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, key);\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\n        return uint256(get(map._inner, key));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        Bytes32ToUintMap storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, key, errorMessage));\n    }\n}"
    },
    "contracts/imports/openzeppelin/contracts/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}"
    },
    "contracts/imports/openzeppelin/contracts/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport './IERC165.sol';\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}"
    },
    "contracts/imports/openzeppelin/contracts/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"hardhat/console.sol\";\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    uint8 private _decimals;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(\n        address account\n    ) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(\n        address owner,\n        address spender\n    ) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(\n        address spender,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    ) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    ) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(\n            currentAllowance >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n\t\n\n        require(\n            fromBalance >= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n\n        if (currentAllowance != type(uint256).max) {\n            require(\n                currentAllowance >= amount,\n                \"ERC20: insufficient allowance\"\n            );\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/imports/openzeppelin/contracts/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}"
    },
    "contracts/imports/openzeppelin/contracts/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}"
    },
    "contracts/imports/openzeppelin/contracts/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}"
    },
    "contracts/imports/openzeppelin/contracts/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/imports/openzeppelin/contracts/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/imports/openzeppelin/contracts/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(\n        uint256 a,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return\n                result +\n                (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(\n        uint256 value,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return\n                result +\n                (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(\n        uint256 value,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return\n                result +\n                (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(\n        uint256 value,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return\n                result +\n                (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "contracts/imports/openzeppelin/contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/imports/openzeppelin/contracts/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/imports/openzeppelin/contracts/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}"
    },
    "contracts/interfaces/IACLManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IAddressProvider} from \"./IAddressProvider.sol\";\nimport {IAccessControlEnumerable} from \"../imports/openzeppelin/contracts/IAccessControlEnumerable.sol\";\n\n/**\n * @title IACLManager\n * @author Blockswan\n * @notice Defines the basic interface for the ACLManager\n **/\ninterface IACLManager is IAccessControlEnumerable {\n    /**\n     * @notice Set the role as admin of a specific role.\n     * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\n     * @param role The role to be managed by the admin role\n     * @param adminRole The admin role\n     */\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\n}\n"
    },
    "contracts/interfaces/IAddressProvider.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title The interface for contracts to interact with the Blockswan Address Provider contract\ninterface IAddressProvider {\n    /**\n     * @dev Emitted when a new marketplaceId is set.\n     * @param oldMarketplaceId The address of the old marketplaceId\n     * @param newMarketplaceId The address of the new marketplaceId\n     */\n    event MarketplaceIdSet(\n        string indexed oldMarketplaceId,\n        string indexed newMarketplaceId\n    );\n\n    /**\n     * @dev Emitted when a new contract is added to the AddressProvider.\n     * @param _name The name assigned in the AddressProvider.\n     * @param _address The address of the new contract\n     */\n    event ContractAdded(bytes32 _name, address _address);\n\n    /**\n     * @dev Emitted when a new contract is removed from the AddressProvider.\n     * @param _name The contract name removed in the AddressProvider.\n     * @param _address The address of the removed contract\n     */\n    event ContractRemoved(bytes32 _name, address _address);\n\n    /**\n     * @dev Emitted when a contract is upgraded in the AddressProvider.\n     * @param _name The contract name upraded in the AddressProvider.\n     * @param _oldAddress The old address prior upgrade\n     * @param _newAddress The new address after upgrade\n     */\n    event ContractUpgraded(\n        bytes32 _name,\n        address _oldAddress,\n        address _newAddress\n    );\n\n    /**\n     * @notice returns contract address registered under given provider key\n     * @param _name - registry key for lookup\n     * @return contractAddr - address of contract registered under given provider key\n     */\n    function getContract(bytes32 _name) external view returns (address);\n\n    /** @notice overloaded getContract to return explicit version of contract */\n    function getContract(\n        bytes32 _name,\n        uint _version\n    ) external view returns (address);\n\n    /** @notice requires returned address !== 0 */\n    function fetchContract(bytes32 _name) external view returns (address);\n\n    /** @notice requires returned address !== 0 */\n    function fetchContract(\n        bytes32 _name,\n        uint _version\n    ) external view returns (address);\n\n    function getContractVersionCount(\n        bytes32 _name\n    ) external view returns (uint);\n\n    /**\n     * @dev addContract does two things:\n     *      1.) registers the address of given ProviderContract in the registry\n     *      2.) sets the registry address in given ProviderContract so only\n     *          the registry can call functions on given contract\n     */\n    function addContract(bytes32 _name, address _address) external;\n\n    /**\n     * @dev removes contract address registered under given provider key\n     * @param _name - registry key for lookup\n     */\n    function removeContract(bytes32 _name) external;\n\n    /**\n     * @notice replaces contract address registered under given key with provided address\n     * @param _name - registry key for lookup\n     * @param _newAddress - new contract address to register under given key\n     */\n    function upgradeContract(bytes32 _name, address _newAddress) external;\n}\n"
    },
    "contracts/interfaces/IBSWAN.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"../imports/openzeppelin/contracts/IERC20.sol\";\n\n/**\n * @title IBSWAN\n * @author Blockswan\n * @notice Defines the basic interface for the Blockswan Trust\n **/\ninterface IBSWAN is IERC20 {\n    /**\n     * @notice Update the DAT config.\n     * @param _newOwner The new owner of the DAT\n     * @param _revenueCommitmentBasisPoints the share of revenues tranfered to the buyback reserve\n     * @param _minInvestment the min investment required in currency value\n     */\n    function updateConfig(\n        address payable _newOwner,\n        uint256 _revenueCommitmentBasisPoints,\n        uint256 _minInvestment\n    ) external;\n\n    /**\n     * @notice Update the DAT config.\n     * @param _currencyValue the quantity of currency to buy\n     * @return tokenValue the quantity of BSWAN bought for the _currencyValue\n     */\n    function estimateBuyValue(\n        uint256 _currencyValue\n    ) external view returns (uint256);\n\n    /** @notice Purchase BSWAN tokens with the given amount of currency.\n     * @param _to The account to receive the BSWAN tokens from this purchase.\n     * @param _currencyValue How much currency to spend in order to buy BSWAN.\n     * @param _minTokensBought Buy at least this many BSWAN tokens or the transaction reverts.\n     * @dev _minTokensBought is necessary as the price will change if some elses transaction mines after\n     * yours was submitted.\n     */\n    function buy(\n        address _to,\n        uint256 _currencyValue,\n        uint256 _minTokensBought\n    ) external payable;\n\n    /// Pay\n    function estimatePayValue(\n        uint256 _currencyValue\n    ) external view returns (uint256);\n\n    /**\n     * @dev Pay the organization on-chain.\n     * @param _to The account which receives tokens for the contribution. If this address\n     * is not authorized to receive tokens then they will be sent to the beneficiary account instead.\n     * @param _currencyValue How much currency which was paid.\n     */\n    function pay(address _to, uint _currencyValue) external payable;\n\n    /// @notice The address of the token used as reserve in the bonding curve\n    /// (e.g. the DAI contract)\n    function currency() external returns (IERC20);\n}\n"
    },
    "contracts/interfaces/IGig.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IAddressProvider} from \"./IAddressProvider.sol\";\nimport {DataTypes} from \"../protocol/libraries/types/DataTypes.sol\";\nimport {OutputTypes} from \"../protocol/libraries/types/OutputTypes.sol\";\nimport {InputTypes} from \"../protocol/libraries/types/InputTypes.sol\";\n\n/**\n * @title IGig\n * @author Blockswan\n * @notice Defines the basic interface for a blockswan gig contract.\n **/\ninterface IGig {\n    /**\n     * @dev Emitted when a new gig is created.\n     * @param gigId The id of the gig\n     * @param userId The user creating the gig\n     * @param metadata The gig metadata\n     * @param packages The gig packages\n     */\n    event GigAdded(\n        uint256 indexed gigId,\n        uint256 indexed userId,\n        string metadata,\n        DataTypes.Package[3] packages\n    );\n\n    /**\n     * @dev Emitted when a gig is edited.\n     * @param gigId The id of the gig\n     * @param userId The user creating the gig\n     * @param metadata The gig metadata\n     * @param packages The gig packages\n     */\n    event GigEdited(\n        uint256 indexed gigId,\n        uint256 indexed userId,\n        string metadata,\n        DataTypes.Package[3] packages\n    );\n\n    /**\n     * @notice Returns the gig data.\n     * @param gigId The id of the gig.\n     * @return The data associated to the gigId\n     **/\n    function getGigById(\n        uint256 gigId\n    ) external view returns (OutputTypes.GigOutput memory);\n\n    /**\n     * @notice Returns the list of all initialized gigs.\n     * @return A data array of the gigs.\n     **/\n    function getGigList()\n        external\n        view\n        returns (OutputTypes.UserOutput[] memory);\n\n    /**\n     * @notice Returns the current amount of gigs\n     * @return the current amount of gigs\n     **/\n    function getGigsCount() external view returns (uint256);\n\n    /**\n     * @notice Create a new gig with the msg.sender wallet\n     * @param metadata the gig related information\n     * @param packages the packages inside the gig\n     **/\n    function createGig(\n        string memory metadata,\n        DataTypes.Package[3] memory packages\n    ) external;\n\n    /**\n     * @notice retrieves the inviters wallet for a given wallet account\n     * @param account the wallet to get the inviters from\n     * @return address the pubkey of inviter0\n     * @return address the pubkey of inviter1\n     **/\n    function getInvitersByUserAddress(\n        address account\n    ) external view returns (address, address);\n\n    /**\n     * @notice retrieves the inviters wallet for a given userId\n     * @param userId the user id to get the inviters from\n     * @return address the pubkey of inviter0\n     * @return address the pubkey of inviter1\n     **/\n    function getInvitersById(\n        uint256 userId\n    ) external view returns (address, address);\n\n    /**\n     * @notice add the order id to the gig orderIds set.\n     * @param newOrderId the new orderId.\n     * @param gigId the new gig id.\n     * @param packageId the packages inside the gig\n     * @return success the relation has been addded.\n     * @return metadata the gig metadata\n     * @return packages the gig packages\n     **/\n    function createOrder(\n        uint256 newOrderId,\n        uint256 gigId,\n        uint256 packageId\n    ) external returns (bool, string memory, DataTypes.Package memory);\n}\n"
    },
    "contracts/interfaces/IProtocolConfigurator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IAddressProvider} from \"./IAddressProvider.sol\";\nimport {IAccessControlEnumerable} from \"../imports/openzeppelin/contracts/IAccessControlEnumerable.sol\";\nimport {DataTypes} from \"../protocol/libraries/types/DataTypes.sol\";\n\n/**\n * @title IProtocolConfigurator\n * @author Blockswan\n * @notice Defines the basic interface for the ProtocolConfigurator\n **/\ninterface IProtocolConfigurator {\n    /**\n     * @notice Retrieves the parameters when enterering the protocol as a buyer.\n     * @return parameters The paramaters  when accessing the role status\n     */\n    function getBuyerEntryParams()\n        external\n        view\n        returns (DataTypes.EntryParams memory);\n\n    // extends the above function specifying a version to retrieve\n    function getBuyerEntryParams(\n        uint256 version\n    ) external view returns (DataTypes.EntryParams memory);\n\n    /**\n     * @notice Update the  parameters when enterering the protocol as as buyer.\n     * @param newParams The new buyer entry paramaters\n     */\n    function updateBuyerEntryParams(\n        DataTypes.EntryParams memory newParams\n    ) external;\n\n    /**\n     * @notice Retrieves the parameters when enterering the protocol as a seller.\n     * @return parameters The paramaters  when accessing the role status\n     */\n    function getSellerEntryParams()\n        external\n        view\n        returns (DataTypes.EntryParams memory);\n\n    // extends the above function specifying a version to retrieve\n    function getSellerEntryParams(\n        uint256 version\n    ) external view returns (DataTypes.EntryParams memory);\n\n    /**\n     * @notice Update the  parameters when enterering the protocol as as seller.\n     * @param newParams The new buyer entry paramaters\n     */\n    function updateSellerEntryParams(\n        DataTypes.EntryParams memory newParams\n    ) external;\n\n    /**\n     * @notice Retrieves the retribution percentage values of the protocol.\n     * @return retributions The retribution percentage values of the protocol.\n     */\n    function getRetributionParams()\n        external\n        view\n        returns (DataTypes.RetributionParams memory);\n\n    // extends the above function specifying a version to retrieve\n    function getRetributionParams(\n        uint256 version\n    ) external view returns (DataTypes.RetributionParams memory);\n\n    /**\n     * @notice Update the retributin  parameters of the protocol.\n     * @param newParams The new retribution paramaters\n     */\n    function updateRetributionParams(\n        DataTypes.RetributionParams memory newParams\n    ) external;\n\n    /**\n     * @notice Retrieves the parameters when creating a gig.\n     * @return parameters The parameters when creating a gig\n     */\n    function getGigCreationParams()\n        external\n        view\n        returns (DataTypes.CreationParams memory);\n\n    // extends the above function specifying a version to retrieve\n    function getGigCreationParams(\n        uint256 version\n    ) external view returns (DataTypes.CreationParams memory);\n\n    /**\n     * @notice Update the gig creation parameters of the protocol.\n     * @param newParams The new gig creation paramaters\n     */\n    function updateGigCreationParams(\n        DataTypes.CreationParams memory newParams\n    ) external;\n\n    /**\n     * @notice Retrieves the parameters when creating an order.\n     * @return parameters The parameters when creating an order.\n     * @return sellerFeesParamsVersion The latest fee structur version that will be applied to the seller upon order completion.\n     */\n    function getOrderCreationParams()\n        external\n        view\n        returns (DataTypes.OrderPriceParams memory, uint256);\n\n    // extends the above function specifying a version to retrieve\n    function getOrderCreationParams(\n        uint256 version\n    ) external view returns (DataTypes.OrderPriceParams memory, uint256);\n\n    /**\n     * @notice Update the order creation parameters of the protocol.\n     * @param newParams The new order creation paramaters\n     */\n    function updateOrderCreationParams(\n        DataTypes.OrderPriceParams memory newParams\n    ) external;\n\n    /**\n     * @notice Retrieves the protocol delay timestamp.\n     * @return parameters The delay timestamp parametes\n     */\n    function getDelayTimestamp()\n        external\n        view\n        returns (DataTypes.DelayTimestamp memory);\n\n    // extends the above function specifying a version to retrieve\n    function getDelayTimestamp(\n        uint256 version\n    ) external view returns (DataTypes.DelayTimestamp memory);\n\n    /**\n     * @notice Update the delays timestamp parameters of the protocol.\n     * @param newParams The new order creation paramaters\n     */\n    function updateDelayTimestamp(\n        DataTypes.DelayTimestamp memory newParams\n    ) external;\n\n    // extends the above function specifying a version to retrieve\n    function getSellerOrderFees(\n        uint256 version\n    ) external view returns (DataTypes.OrderPriceParams memory);\n}\n"
    },
    "contracts/interfaces/IProviderContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IAddressProvider} from \"./IAddressProvider.sol\";\n\ninterface IProviderContract {\n    /**\n     * @notice set the provider address of the ProviderContract\n     * @param _providerAddress The address of the AddressProvider\n     */\n    function setProvider(IAddressProvider _providerAddress) external;\n\n    /**\n     * @notice fetch the contract address from the ADDRESSS_PROVIDER\n     * @notice throws error if address === 0\n     * @param _name the bytes32 name of the contract\n     */\n    function fetchContract(bytes32 _name) external view returns (address);\n\n    /**\n     * @notice kill the current address provider, only callable by the AddressProvider\n     */\n    function kill() external;\n\n    /**\n     * @notice Returns the contract address of the IAddressProvider\n     * @return The address of the AddressProvider\n     */\n    function ADDRESSES_PROVIDER() external view returns (IAddressProvider);\n\n    // /**\n    //  * @notice Returns the identifier of the protocol_admin role\n    //  * @return The id of the protocol_admin role\n    //  */\n    // function PROTOCOL_ADMIN_ROLE() external view returns (bytes32);\n\n    // /**\n    //  * @notice Returns the identifier of the buyer role\n    //  * @return The id of the buyer role\n    //  */\n    // function BUYER_ROLE() external view returns (bytes32);\n\n    // /**\n    //  * @notice Returns the identifier of the seller role\n    //  * @return The id of the seller role\n    //  */\n    // function SELLER_ROLE() external view returns (bytes32);\n\n    // /**\n    //  * @notice Returns the identifier of the judge role\n    //  * @return The id of the judge role\n    //  */\n    // function JUDGE_ROLE() external view returns (bytes32);\n\n    // /**\n    //  * @notice Returns the identifier of the Blacklist role\n    //  * @return The id of the Blacklist role\n    //  */\n    // function BLACKLIST_ROLE() external view returns (bytes32);\n\n    // /**\n    //  * @notice Returns the identifier of the whitelist role\n    //  * @return The id of the whitelist role\n    //  */\n    // function WHITELIST_ROLE() external view returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IProviderRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title IProviderRegistry\n * @author Blockswan\n * @notice Defines the basic interface for an Blockswan Protocol Provider Registry.\n **/\ninterface IProviderRegistry {\n    /**\n     * @dev Emitted when a new AddressProvider is registered.\n     * @param addressProvider The address of the registered AddressProvider\n     * @param id The id of the registered AddressProvider\n     */\n    event AddressProviderRegistered(\n        address indexed addressProvider,\n        uint256 indexed id\n    );\n\n    /**\n     * @dev Emitted when an addressProvider is unregistered.\n     * @param addressProvider The address of the unregistered AddressProvider\n     * @param id The id of the unregistered AddressProvider\n     */\n    event AddressProviderUnregistered(\n        address indexed addressProvider,\n        uint256 indexed id\n    );\n\n    /**\n     * @notice Returns the list of registered addresses providers\n     * @return The list of addresses providers\n     **/\n    function getAddressProvidersList() external view returns (address[] memory);\n\n    /**\n     * @notice Returns the id of a registered AddressProvider\n     * @param addressProvider The address of the AddressProvider\n     * @return The id of the AddressProvider or 0 if is not registered\n     */\n    function getAddressProviderIdByAddress(\n        address addressProvider\n    ) external view returns (uint256);\n\n    /**\n     * @notice Returns the address of a registered AddressProvider\n     * @param id The id of the marketplace\n     * @return The address of the AddressProvider with the given id or zero address if it is not registered\n     */\n    function getAddressProviderById(uint256 id) external view returns (address);\n\n    /**\n     * @notice Registers an addresses provider\n     * @dev The protocol AddressesProvider must not already be registered in the registry\n     * @dev The id must not be used by an already registered protocol AddressesProvider\n     * @param provider The address of the new protocol AddressesProvider\n     * @param id The id for the new AddressesProvider, referring to the marketplace it belongs to\n     **/\n    function registerAddressProvider(address provider, uint256 id) external;\n\n    /**\n     * @notice Removes an addresses provider from the list of registered addresses providers\n     * @param provider The protocol AddressesProvider address\n     **/\n    function unregisterAddressProvider(address provider) external;\n}\n"
    },
    "contracts/interfaces/IUser.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IAddressProvider} from \"./IAddressProvider.sol\";\nimport {DataTypes} from \"../protocol/libraries/types/DataTypes.sol\";\nimport {OutputTypes} from \"../protocol/libraries/types/OutputTypes.sol\";\nimport {InputTypes} from \"../protocol/libraries/types/InputTypes.sol\";\n\n/**\n * @title IUser\n * @author Blockswan\n * @notice Defines the basic interface for an blockswan user.\n **/\ninterface IUser {\n    /**\n     * @dev Emitted when a new user is created.\n     * @param userId The id of the user\n     * @param userAddress The wallet addresss of the user\n     * @param userData The data associated with the user\n     */\n    event UserAdded(\n        uint256 indexed userId,\n        address indexed userAddress,\n        InputTypes.CreateUserInput userData\n    );\n\n    /**\n     * @dev Emitted when an user is edited.\n     * @param userId The id of the user\n     * @param userAddress The wallet addresss of the user\n     * @param userData The data associated with the user\n     */\n    event UserEdited(\n        uint256 indexed userId,\n        address indexed userAddress,\n        OutputTypes.UserOutput userData\n    );\n\n    /**\n     * @notice Returns the user id from a given address.\n     * @param account The address of the user\n     * @return userId The userId associated to the account address\n     **/\n    function getIdByAddress(address account) external view returns (uint256);\n\n    /**\n     * @notice Returns the user data.\n     * @param userId The id of the user.\n     * @return User The data associated to the user it\n     **/\n    function getUserById(\n        uint256 userId\n    ) external view returns (OutputTypes.UserOutput memory);\n\n    /**\n     * @notice Returns the user for a given public key.\n     * @param pubKey The address as parameter.\n     * @return User the user linked to the public key\n     **/\n    function getUserByAddress(\n        address pubKey\n    ) external view returns (OutputTypes.UserOutput memory);\n\n    /**\n     * @notice Returns the list of all initialized users.\n     * @dev It does not include dropped users\n     * @return A data array of the underlying user.\n     **/\n    function getUserList()\n        external\n        view\n        returns (OutputTypes.UserOutput[] memory);\n\n    /**\n     * @notice Returns the current revision of the contract\n     * @return the current revision\n     **/\n    function getUsersCount() external view returns (uint256);\n\n    /**\n     * @notice Returns the user wallet address.\n     * @param userId The id of the user.\n     * @return userAddress the wallet of the user\n     **/\n    function getAddressById(uint256 userId) external view returns (address);\n\n    /**\n     * @notice Create a new users with the msg.sender wallet\n     * @param metadata the user related information\n     * @param inviterId the userID of whom invited the newUser\n     **/\n    function createUser(string memory metadata, uint256 inviterId) external;\n\n    /**\n     * @notice retrieves the inviters wallet for a given wallet account\n     * @param account the wallet to get the inviters from\n     * @return address the pubkey of inviter0\n     * @return address the pubkey of inviter1\n     **/\n    function getInvitersByUserAddress(\n        address account\n    ) external view returns (address, address);\n\n    /**\n     * @notice add the gig id to the user gigIds set.\n     * @param caller the wallet creating the gig.\n     * @param newGigId the new gig id.\n     * @return success the relation has been addded.\n     **/\n    function createGig(\n        address caller,\n        uint256 newGigId\n    ) external returns (bool);\n\n    /**\n     * @notice add the order id to the user buyerOrderIds set.\n     * @param buyerId the id of the buyer\n     * @param newOrderId the new gig orderId.\n     * @return success the relation has been addded.\n     **/\n    function createBuyerOrder(\n        uint256 buyerId,\n        uint256 newOrderId\n    ) external returns (bool);\n\n    /**\n     * @notice retrieves the inviters wallet for a given userId\n     * @param userId the user id to get the inviters from\n     * @return address the pubkey of inviter0\n     * @return address the pubkey of inviter1\n     **/\n    function getInvitersById(\n        uint256 userId\n    ) external view returns (address, address);\n\n    /**\n     * @notice return true if the gigId is owned by the given userId\n     * @param userId the user id to check if he own the gig\n     * @param gigId the gigId\n     * @return bool if the gigId is owned by the given userId\n     **/\n    function isGigOwner(\n        uint256 userId,\n        uint256 gigId\n    ) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IXP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"../imports/openzeppelin/contracts/IERC20.sol\";\n\n/**\n * @title IXP\n * @author Blockswan\n * @notice Defines the basic interface for the Experience\n **/\ninterface IXP is IERC20 {\n    /**\n     * @notice set the xp amount to earn for a bytes32 key action\n     * @param xpKey The key associated to the xp to earn\n     * @param xpToReceive the xp to earn for the key action\n     */\n    function setXpAmount(bytes32 xpKey, uint256 xpToReceive) external;\n\n    /**\n     * @notice get the xp amount to earn for a bytes32 key action\n     * @param xpKey The action key as bytes32\n     * @return success There is an action matching the key\n     * @return _amount the xp to earn for the key action\n     */\n    function getXpAmount(bytes32 xpKey) external returns (bool, uint256);\n\n    /**\n     * @notice mint the xp amount to earn for a bytes32 key action\n     * @param xpKey The action key as bytes32\n     * @param to the addres receiving the XP\n     */\n    function mint(bytes32 xpKey, address to) external;\n}\n"
    },
    "contracts/miscs/BlockswanDataProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title Blockswan Data Provider\n * @author Blockswan\n * @notice Peripheral contract to collect and pre-process information from the Protocol.\n\n **/\n\ncontract BlockswanDataProvider {\n    // get all users\n    // get all gigs\n    // get all orders for a buyer\n}\n"
    },
    "contracts/mocks/mUSDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\nimport {ERC20} from \"../imports/openzeppelin/contracts/ERC20.sol\";\nimport {Ownable} from \"../imports/openzeppelin/contracts/Ownable.sol\";\n\ncontract mUSDC is ERC20, Ownable {\n    constructor() ERC20(\"MockUSDC\", \"mUSDC\", 6) {}\n\n    function mint(uint256 amountToMint) public {\n        _mint(msg.sender, amountToMint);\n    }\n\n    function mintTo(address receiver, uint256 amountToMint) public {\n        _mint(receiver, amountToMint);\n    }\n}\n"
    },
    "contracts/periphery/trust/BSWAN.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\n//import \"hardhat/console.sol\";\n\nimport {IERC20} from \"../../imports/openzeppelin/contracts/IERC20.sol\";\nimport {ERC20} from \"../../imports/openzeppelin/contracts/ERC20.sol\";\nimport {Math} from \"../../imports/openzeppelin/contracts/Math.sol\";\nimport {Pausable} from \"../../imports/openzeppelin/contracts/Pausable.sol\";\nimport {Ownable} from \"../../imports/openzeppelin/contracts/Ownable.sol\";\nimport {GPv2SafeERC20} from \"../../imports/gnosis/contracts/GPv2SafeERC20.sol\";\nimport {PercentageMath} from \"../../imports/aave/contracts/PercentageMath.sol\";\nimport {IBSWAN} from \"../../interfaces/IBSWAN.sol\";\n\ncontract BSWAN is ERC20, Pausable, Ownable, IBSWAN {\n    using Math for uint256;\n    using PercentageMath for uint256;\n    using GPv2SafeERC20 for IERC20;\n\n    event Buy(\n        address indexed _from,\n        address indexed _to,\n        uint256 _currencyAmount,\n        uint256 _bswanAmount\n    );\n\n    event Sell(\n        address indexed _from,\n        address indexed _to,\n        uint256 _currencyAmount,\n        uint256 _bswanAmount\n    );\n\n    event Burn(address indexed _from, uint256 _bswanAmount);\n\n    event Pay(\n        address indexed _from,\n        address indexed _to,\n        uint256 _currencyAmount,\n        uint256 _bswanAmount\n    );\n\n    event UpdateConfig(\n        address indexed _owner,\n        uint256 _revenueCommitmentBasisPoints,\n        uint256 _minInvestment\n    );\n\n    // When multiplying 2 terms, the max value is 2^128-1\n    uint256 private constant MAX_BEFORE_SQUARE = 2 ** 128 - 1;\n\n    // The max `totalSupply() + burnedSupply`\n    // This limit ensures that the DAT's formulas do not overflow (<MAX_BEFORE_SQUARE/2)\n    uint256 private constant MAX_SUPPLY = 10 ** 38;\n\n    /// @notice The total number of burned BSWAN tokens, excluding tokens burned from a `Sell` action in the DAT.\n    uint256 public burnedSupply;\n\n    /// @notice The buy slope of the bonding curve.\n    /// Does not affect the financial model, only the granularity of BSWAN.\n    /// @dev This is the numerator component of the fractional value.\n    uint256 public buySlopeNum;\n\n    /// @notice The buy slope of the bonding curve.\n    /// Does not affect the financial model, only the granularity of COT.\n    /// @dev This is the denominator component of the fractional value.\n    uint256 public buySlopeDen;\n\n    /// @inheritdoc IBSWAN\n    IERC20 public override currency;\n\n    /// @notice The minimum amount of `currency` investment accepted.\n    uint256 public minInvestment;\n\n    /// @notice The revenue commitment of the organization. Defines the percentage of the value paid through the contract\n    /// that is automatically funneled and held into the buyback_reserve expressed in basis points.\n    uint256 public revenueCommitmentBasisPoints;\n\n    /// @notice The investment reserve of the bswan. Defines the percentage of the value invested that is\n    /// automatically funneled and held into the buyback_reserve expressed in basis points.\n    uint256 public investmentReserveBasisPoints;\n\n    /// @notice The total amount of currency value currently locked in the contract and available to sellers.\n    function buybackReserve() public view returns (uint256) {\n        uint256 reserve = address(this).balance;\n        if (address(currency) != address(0)) {\n            reserve = currency.balanceOf(address(this));\n        }\n        if (reserve > MAX_BEFORE_SQUARE) {\n            /// Math: If the reserve becomes excessive, cap the value to prevent overflowing in other formulas\n            return MAX_BEFORE_SQUARE;\n        }\n        return reserve;\n    }\n\n    /// @dev Removes tokens from the circulating supply.\n    function _burn(address _from, uint _amount, bool _isSell) internal {\n        super._burn(_from, _amount);\n\n        if (!_isSell) {\n            // SafeMath not required as we cap how high this value may get during mint\n            burnedSupply += _amount;\n            emit Burn(_from, _amount);\n        }\n    }\n\n    /// @notice Called to mint tokens on `buy`.\n    function _mint(address _to, uint256 _quantity) internal override {\n        super._mint(_to, _quantity);\n        require(totalSupply() + burnedSupply <= MAX_SUPPLY, \"EXCESSIVE_SUPPLY\");\n    }\n\n    /**\n     * Transaction Helpers\n     */\n\n    /// @notice Confirms the transfer of `_quantityToInvest` currency to the contract.\n    function _collectInvestment(uint256 _quantityToInvest) private {\n        currency.safeTransferFrom(msg.sender, address(this), _quantityToInvest);\n    }\n\n    /// @dev Send `_amount` currency from the contract to the `_to` account.\n    function _transferCurrency(address _to, uint256 _amount) private {\n        if (_amount > 0) {\n            currency.safeTransfer(_to, _amount);\n        }\n    }\n\n    constructor(\n        address _currencyAddress,\n        uint _buySlopeNum,\n        uint _buySlopeDen,\n        uint _investmentReserveBasisPoints,\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol, ERC20(_currencyAddress).decimals()) {\n        // Set initGoal, which in turn defines the initial state\n\n        require(_buySlopeNum > 0, \"INVALID_SLOPE_NUM\");\n        require(_buySlopeDen > 0, \"INVALID_SLOPE_DEN\");\n        require(_buySlopeNum < MAX_BEFORE_SQUARE, \"EXCESSIVE_SLOPE_NUM\");\n        require(_buySlopeDen < MAX_BEFORE_SQUARE, \"EXCESSIVE_SLOPE_DEN\");\n\n        buySlopeNum = _buySlopeNum;\n        buySlopeDen = _buySlopeDen;\n\n        // 100% or less\n        require(\n            _investmentReserveBasisPoints <= PercentageMath.PERCENTAGE_FACTOR,\n            \"INVALID_RESERVE\"\n        );\n        investmentReserveBasisPoints = _investmentReserveBasisPoints;\n\n        // Set default values (which may be updated using `updateConfig`)\n        minInvestment = 100 ** ERC20(_currencyAddress).decimals();\n\n        // Save currency\n        currency = IERC20(_currencyAddress);\n    }\n\n    /// @inheritdoc IBSWAN\n    function updateConfig(\n        address payable _newOwner,\n        uint256 _revenueCommitmentBasisPoints,\n        uint256 _minInvestment\n    ) public override {\n        require(\n            _revenueCommitmentBasisPoints <= PercentageMath.PERCENTAGE_FACTOR,\n            \"INVALID_COMMITMENT\"\n        );\n        require(\n            _revenueCommitmentBasisPoints >= revenueCommitmentBasisPoints,\n            \"COMMITMENT_MAY_NOT_BE_REDUCED\"\n        );\n        revenueCommitmentBasisPoints = _revenueCommitmentBasisPoints;\n\n        require(_minInvestment > 0, \"INVALID_MIN_INVESTMENT\");\n        minInvestment = _minInvestment;\n\n        if (_newOwner != owner()) {\n            require(_newOwner != address(0), \"INVALID_ADDRESS\");\n            uint256 tokens = balanceOf(_newOwner);\n            if (tokens > 0) {\n                _transfer(owner(), _newOwner, tokens);\n            }\n            _transferOwnership(_newOwner);\n        }\n\n        emit UpdateConfig(\n            _newOwner,\n            _revenueCommitmentBasisPoints,\n            _minInvestment\n        );\n    }\n\n    /**\n     * Functions for our business logic\n     */\n\n    /// @notice Burn the amount of tokens from the address msg.sender if authorized.\n    /// @dev Note that this is not the same as a `sell` via the DAT.\n    function burn(uint256 _amount) public {\n        _burn(msg.sender, _amount, false);\n    }\n\n    /// @dev Distributes _value currency between the buybackReserve and beneficiary\n    function _distributeInvestment(uint256 _value) private {\n        // Rounding favors buybackReserve, then beneficiary, and feeCollector is last priority.\n\n        // Math: if investment value is < (2^256 - 1) / 10000 this will never overflow.\n        // Except maybe with a huge single investment, but they can try again with multiple smaller investments.\n        uint256 reserve = investmentReserveBasisPoints * _value;\n        reserve /= PercentageMath.PERCENTAGE_FACTOR;\n        reserve = _value - reserve;\n\n        _transferCurrency(owner(), reserve);\n    }\n\n    /// @inheritdoc IBSWAN\n    function estimateBuyValue(\n        uint256 _currencyValue\n    ) public view override returns (uint256) {\n        if (_currencyValue < minInvestment) {\n            return 0;\n        }\n        uint256 tokenValue;\n        // initReserve is reduced on sell as necessary to ensure that this line will not overflow\n        uint256 supply = totalSupply() + burnedSupply;\n\n        // Math: worst case\n        // MAX * 2 * MAX_BEFORE_SQUARE\n        // / MAX_BEFORE_SQUARE\n        tokenValue = Math.mulDiv(_currencyValue, 2 * buySlopeDen, buySlopeNum);\n\n        // Math: worst case MAX + (MAX_BEFORE_SQUARE * MAX_BEFORE_SQUARE)\n        tokenValue += (supply * supply);\n        tokenValue = tokenValue.sqrt();\n\n        // Math: small chance of underflow due to possible rounding in sqrt\n        tokenValue -= supply;\n\n        return tokenValue;\n    }\n\n    /// @inheritdoc IBSWAN\n    function buy(\n        address _to,\n        uint256 _currencyValue,\n        uint256 _minTokensBought\n    ) public payable override {\n        require(_to != address(0), \"INVALID_ADDRESS\");\n        require(_minTokensBought > 0, \"MUST_BUY_AT_LEAST_1\");\n\n        // Calculate the tokenValue for this investment\n        uint256 tokenValue = estimateBuyValue(_currencyValue);\n        require(tokenValue >= _minTokensBought, \"PRICE_SLIPPAGE\");\n\n        emit Buy(msg.sender, _to, _currencyValue, tokenValue);\n\n        _collectInvestment(_currencyValue);\n\n        if (_to != owner()) {\n            _distributeInvestment(_currencyValue);\n        }\n        _mint(_to, tokenValue);\n    }\n\n    /// Sell\n\n    function estimateSellValue(\n        uint256 _quantityToSell\n    ) public view returns (uint256) {\n        uint256 reserve = buybackReserve();\n\n        // Calculate currencyValue for this sale\n        uint256 currencyValue;\n        uint256 supply = totalSupply() + burnedSupply;\n\n        // buyback_reserve = r\n        // total_supply = t\n        // burnt_supply = b\n        // amount = a\n        // source: (t+b)*a*(2*r)/((t+b)^2)-(((2*r)/((t+b)^2)*a^2)/2)+((2*r)/((t+b)^2)*a*b^2)/(2*(t))\n        // imp: (a b^2 r)/(t (b + t)^2) + (2 a r)/(b + t) - (a^2 r)/(b + t)^2\n\n        // Math: burnedSupply is capped in COT such that the square will never overflow\n        // Math worst case:\n        // MAX * MAX_BEFORE_SQUARE * MAX_BEFORE_SQUARE/2 * MAX_BEFORE_SQUARE/2\n        // / MAX_BEFORE_SQUARE/2 * MAX_BEFORE_SQUARE/2 * MAX_BEFORE_SQUARE/2\n        currencyValue = Math.mulDiv(\n            _quantityToSell * reserve,\n            burnedSupply * burnedSupply,\n            totalSupply() * (supply * supply)\n        );\n\n        // Math: worst case currencyValue is MAX_BEFORE_SQUARE (max reserve, 1 supply)\n        // Math worst case:\n        // MAX * 2 * MAX_BEFORE_SQUARE\n        uint256 temp = _quantityToSell * (2 * reserve);\n        temp /= supply;\n\n        // Math: worst-case temp is MAX_BEFORE_SQUARE (max reserve, 1 supply)\n        // Math: considering the worst-case for currencyValue and temp, this can never overflow\n        currencyValue += temp;\n\n        // Math: worst case\n        // MAX * MAX * MAX_BEFORE_SQUARE\n        // / MAX_BEFORE_SQUARE/2 * MAX_BEFORE_SQUARE/2\n        currencyValue -= Math.mulDiv(\n            _quantityToSell * _quantityToSell,\n            reserve,\n            supply * supply,\n            Math.Rounding.Up\n        );\n\n        return currencyValue;\n    }\n\n    /// @notice Sell BSWAN tokens for at least the given amount of currency.\n    /// @param _to The account to receive the currency from this sale.\n    /// @param _quantityToSell How many BSWAN tokens to sell for currency value.\n    /// @param _minCurrencyReturned Get at least this many currency tokens or the transaction reverts.\n    /// @dev _minCurrencyReturned is necessary as the price will change if some elses transaction mines after\n    /// yours was submitted.\n\n    function sell(\n        address payable _to,\n        uint256 _quantityToSell,\n        uint256 _minCurrencyReturned\n    ) public {\n        require(msg.sender != owner(), \"BENEFICIARY_CANT_SELL\");\n        require(_minCurrencyReturned > 0, \"MUST_SELL_AT_LEAST_1\");\n\n        uint256 currencyValue = estimateSellValue(_quantityToSell);\n        require(currencyValue >= _minCurrencyReturned, \"PRICE_SLIPPAGE\");\n\n        _burn(msg.sender, _quantityToSell, true);\n        _transferCurrency(_to, currencyValue);\n        emit Sell(msg.sender, _to, currencyValue, _quantityToSell);\n    }\n\n    /// @inheritdoc IBSWAN\n    function estimatePayValue(\n        uint256 _currencyValue\n    ) public view override returns (uint256) {\n        // buy_slope = n/d\n        // revenue_commitment = c/g\n        // sqrt(\n        //  (2 a c d)\n        //  /\n        //  (g n)\n        //  + s^2\n        // ) - s\n\n        uint256 supply = totalSupply() + burnedSupply;\n\n        // Math: worst case\n        // MAX * 2 * 10000 * MAX_BEFORE_SQUARE\n        // / 10000 * MAX_BEFORE_SQUARE\n        uint256 tokenValue = Math.mulDiv(\n            _currencyValue * (2 * revenueCommitmentBasisPoints),\n            buySlopeDen,\n            PercentageMath.PERCENTAGE_FACTOR * buySlopeNum\n        );\n\n        tokenValue += (supply * supply);\n        tokenValue = tokenValue.sqrt();\n\n        if (tokenValue > supply) {\n            tokenValue -= supply;\n        } else {\n            tokenValue = 0;\n        }\n\n        return tokenValue;\n    }\n\n    /// @dev Pay the organization on-chain.\n    /// @param _to The account which receives tokens for the contribution.\n    /// @param _currencyValue How much currency which was paid.\n    function _pay(address _to, uint256 _currencyValue) private {\n        require(_currencyValue > 0, \"MISSING_CURRENCY\");\n\n        // Send a portion of the funds to the beneficiary, the rest is added to the buybackReserve\n        // Math: if _currencyValue is < (2^256 - 1) / 10000 this will not overflow\n        uint256 reserve = _currencyValue * investmentReserveBasisPoints;\n        reserve /= PercentageMath.PERCENTAGE_FACTOR;\n\n        uint256 tokenValue = estimatePayValue(_currencyValue);\n\n        // Update the to address to the beneficiary if the currency value would fail\n        address to = _to;\n        if (to == address(0)) {\n            to = owner();\n        }\n        // Math: this will never underflow since investmentReserveBasisPoints is capped to BASIS_POINTS_DEN\n        _transferCurrency(owner(), _currencyValue - reserve);\n\n        // Distribute tokens\n        if (tokenValue > 0) {\n            _mint(to, tokenValue);\n        }\n\n        emit Pay(msg.sender, _to, _currencyValue, tokenValue);\n    }\n\n    /// @inheritdoc IBSWAN\n    function pay(address _to, uint _currencyValue) public payable override {\n        _collectInvestment(_currencyValue);\n        _pay(_to, _currencyValue);\n    }\n}\n"
    },
    "contracts/protocol/configuration/ACLManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"hardhat/console.sol\";\n\nimport {AccessControlEnumerable} from \"../../imports/openzeppelin/contracts/AccessControlEnumerable.sol\";\nimport {Strings} from \"../../imports/openzeppelin/contracts/Strings.sol\";\nimport {IAddressProvider} from \"../../interfaces/IAddressProvider.sol\";\nimport {IACLManager} from \"../../interfaces/IACLManager.sol\";\nimport {Errors} from \"../libraries/helpers/Errors.sol\";\nimport {RegistryKeys} from \"../libraries/helpers/RegistryKeys.sol\";\nimport {RoleKeys} from \"../libraries/helpers/RoleKeys.sol\";\nimport {ProviderContract} from \"./ProviderContract.sol\";\n\n/**\n * @title ACLManager\n * @author Blockswan\n * @notice Access Control List Manager. Main registry of system roles and permissions.\n */\ncontract ACLManager is AccessControlEnumerable, IACLManager, ProviderContract {\n    /**\n     * @dev Constructor\n     * @dev The ACL_ADMIN should be initialized at the addresses provider beforehand\n     * @param provider The address of the AddressProvider\n     */\n\n    constructor(IAddressProvider provider) ProviderContract(provider) {\n        address aclAdmin = ADDRESS_PROVIDER.fetchContract(\n            RegistryKeys.ACL_ADMIN\n        );\n        require(aclAdmin != address(0), Errors.ZERO_ADDRESS_IS_INVALID);\n        _setupRole(DEFAULT_ADMIN_ROLE, aclAdmin);\n    }\n\n    /// @inheritdoc IACLManager\n    function setRoleAdmin(\n        bytes32 role,\n        bytes32 adminRole\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        _setRoleAdmin(role, adminRole);\n    }\n}\n"
    },
    "contracts/protocol/configuration/AddressProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"hardhat/console.sol\";\n\nimport {Ownable} from \"../../imports/openzeppelin/contracts/Ownable.sol\";\nimport {IProviderContract} from \"../../interfaces/IProviderContract.sol\";\nimport {Errors} from \"../libraries/helpers/Errors.sol\";\nimport {IAddressProvider} from \"../../interfaces/IAddressProvider.sol\";\nimport {Address} from \"../../imports/openzeppelin/contracts/Address.sol\";\n\n/**\n * @title Central hub for ProvidersContracts that stores all contract addresses\n *    and facilitates inter-contract communication\n * @dev The provider acts as the central hub for all ProviderContracts.\n *    It stores the addresses for all contracts so when one contract wants to\n *    communicate with with another, it must go:\n *      Calling Contract -> AddressProvider -> Destination Contract\n *    It also serves as a communication hub and a version manager that can\n *    upgrade existing contracts and remove contracts\n * @dev for simplicity, this is the only contract that does not have de-coupled storage\n */\n\ncontract AddressProvider is Ownable, IAddressProvider {\n    using Address for address;\n    // Identifier of the Blockswan MarketPlace\n    string private _marketplaceId;\n\n    /**\n     * @dev addressStorage mapping allows efficient lookup of current contract version\n     *     \taddressStorageHistory maintains record of all contract versions\n     */\n    mapping(bytes32 => address) private addressStorage;\n    mapping(bytes32 => address[]) private addressStorageHistory;\n\n    /**\n     * @dev Constructor.\n     * @param marketplaceId The identifier of the marketplace.\n     * @param owner The owner address of this contract.\n     */\n    constructor(string memory marketplaceId, address owner) {\n        _setMarketplaceId(marketplaceId);\n        transferOwnership(owner);\n    }\n\n    function getMarketplaceId() external view returns (string memory) {\n        return _marketplaceId;\n    }\n\n    function setMarketplaceId(\n        string memory newMarketplaceId\n    ) external onlyOwner {\n        _setMarketplaceId(newMarketplaceId);\n    }\n\n    /// @inheritdoc IAddressProvider\n    function addContract(\n        bytes32 _name,\n        address _address\n    ) external override onlyOwner {\n        require(\n            addressStorage[_name] == address(0x00),\n            Errors.CONTRACT_NAME_ALREADY_USED\n        );\n        require(_address != address(0x00), Errors.ZERO_ADDRESS_IS_INVALID);\n        if (_address.isContract() && _name != bytes32(\"DAT\")) {\n            IProviderContract(_address).setProvider(this);\n        }\n        setAddress(_name, _address);\n        emit ContractAdded(_name, _address);\n    }\n\n    /// @inheritdoc IAddressProvider\n    function getContract(\n        bytes32 _name\n    ) public view override returns (address contractAddr) {\n        return addressStorage[_name];\n    }\n\n    /// @inheritdoc IAddressProvider\n    function getContract(\n        bytes32 _name,\n        uint _version\n    ) public view override returns (address contractAddr) {\n        // array length for key implies version number\n        require(\n            _version <= addressStorageHistory[_name].length,\n            Errors.INDEX_OUT_OF_RANGE\n        );\n        return addressStorageHistory[_name][_version - 1];\n    }\n\n    /// @inheritdoc IAddressProvider\n    function fetchContract(\n        bytes32 _name\n    ) external view override returns (address contractAddr) {\n        address fetched = getContract(_name);\n        require(fetched != address(0), Errors.ZERO_ADDRESS_IS_INVALID);\n        return fetched;\n    }\n\n    /// @inheritdoc IAddressProvider\n    function fetchContract(\n        bytes32 _name,\n        uint _version\n    ) external view override returns (address contractAddr) {\n        address fetched = getContract(_name, _version);\n        require(fetched != address(0), Errors.ZERO_ADDRESS_IS_INVALID);\n        return fetched;\n    }\n\n    /// @inheritdoc IAddressProvider\n    function getContractVersionCount(\n        bytes32 _name\n    ) external view override returns (uint) {\n        return addressStorageHistory[_name].length;\n    }\n\n    /// @inheritdoc IAddressProvider\n    function removeContract(bytes32 _name) external override onlyOwner {\n        address contractAddress = addressStorage[_name];\n        require(\n            contractAddress != address(0x00),\n            Errors.ZERO_ADDRESS_IS_INVALID\n        );\n        IProviderContract(contractAddress).kill();\n        setAddress(_name, address(0x00));\n        emit ContractRemoved(_name, contractAddress);\n    }\n\n    /// @inheritdoc IAddressProvider\n    function upgradeContract(\n        bytes32 _name,\n        address _newAddress\n    ) external override onlyOwner {\n        address oldAddress = addressStorage[_name];\n        require(oldAddress != address(0x00), Errors.ZERO_ADDRESS_IS_INVALID);\n        IProviderContract(oldAddress).kill();\n        IProviderContract(_newAddress).setProvider(this);\n        setAddress(_name, _newAddress);\n        emit ContractUpgraded(_name, oldAddress, _newAddress);\n    }\n\n    /**\n     * @param _key the key for the contract address\n     * @param _value the contract address\n     */\n    function setAddress(bytes32 _key, address _value) private {\n        // main map for cheap lookup\n        addressStorage[_key] = _value;\n        // keep track of contract address history\n        addressStorageHistory[_key].push(_value);\n    }\n\n    /**\n     * @notice Updates the identifier of the Blockswan marketplace.\n     * @param newMarketplaceId The new id of the marketplace\n     **/\n    function _setMarketplaceId(string memory newMarketplaceId) internal {\n        string memory oldMarketplaceId = _marketplaceId;\n        _marketplaceId = newMarketplaceId;\n        emit MarketplaceIdSet(oldMarketplaceId, newMarketplaceId);\n    }\n}\n"
    },
    "contracts/protocol/configuration/ProtocolConfigurator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"hardhat/console.sol\";\n\nimport {Ownable} from \"../../imports/openzeppelin/contracts/Ownable.sol\";\nimport {Errors} from \"../libraries/helpers/Errors.sol\";\nimport {EnumerableSet} from \"../../imports/openzeppelin/contracts/EnumerableSet.sol\";\nimport {DataTypes} from \"../libraries/types/DataTypes.sol\";\nimport {RegistryKeys} from \"../libraries/helpers/RegistryKeys.sol\";\nimport {RoleKeys} from \"../libraries/helpers/RoleKeys.sol\";\nimport {IProviderRegistry} from \"../../interfaces/IProviderRegistry.sol\";\nimport {IProtocolConfigurator} from \"../../interfaces/IProtocolConfigurator.sol\";\nimport {IAddressProvider} from \"../../interfaces/IAddressProvider.sol\";\n\nimport {ProviderContract} from \"./ProviderContract.sol\";\nimport {ParamsLogic} from \"../libraries/logics/ParamsLogic.sol\";\n\n/**\n * @title Protocol Configurator\n * @author Blockswan\n * @notice Contains all the protocol configuration\n **/\n\ncontract ProtocolConfigurator is ProviderContract, IProtocolConfigurator {\n    using EnumerableSet for EnumerableSet.UintSet;\n    using ParamsLogic for EnumerableSet.UintSet;\n\n    EnumerableSet.UintSet private _buyerEntryParamsVersions;\n    mapping(uint256 => DataTypes.EntryParams) private _buyerEntryParamsHistory;\n\n    EnumerableSet.UintSet private _sellerEntryParamsVersions;\n    mapping(uint256 => DataTypes.EntryParams) private _sellerEntryParamsHistory;\n\n    EnumerableSet.UintSet private _retributionParamsVersions;\n    mapping(uint256 => DataTypes.RetributionParams)\n        private _retributionParamsHistory;\n\n    EnumerableSet.UintSet private _gigCreationParamsVersions;\n    mapping(uint256 => DataTypes.CreationParams)\n        private _gigCreationParamsHistory;\n\n    EnumerableSet.UintSet private _orderCreationParamsVersions;\n    mapping(uint256 => DataTypes.OrderPriceParams)\n        private _orderCreationParamsHistory;\n\n    EnumerableSet.UintSet private _sellerOrderFeesParamsVersions;\n    mapping(uint256 => DataTypes.OrderPriceParams)\n        private _sellerOrderFeesParamsHistory;\n\n    EnumerableSet.UintSet private _delayTimestampVersions;\n    mapping(uint256 => DataTypes.DelayTimestamp) private _delayTimestampHistory;\n\n    constructor(IAddressProvider provider) ProviderContract(provider) {}\n\n    /// @inheritdoc IProtocolConfigurator\n    function getBuyerEntryParams()\n        external\n        view\n        override\n        returns (DataTypes.EntryParams memory)\n    {\n        return\n            _buyerEntryParamsVersions.getEntryParams(_buyerEntryParamsHistory);\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function getBuyerEntryParams(\n        uint256 version\n    ) external view override returns (DataTypes.EntryParams memory) {\n        return\n            _buyerEntryParamsVersions.getEntryParams(\n                _buyerEntryParamsHistory,\n                version\n            );\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function updateBuyerEntryParams(\n        DataTypes.EntryParams memory newParams\n    ) external override onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\n        _buyerEntryParamsVersions.updateEntryParams(\n            _buyerEntryParamsHistory,\n            newParams\n        );\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function getSellerEntryParams()\n        external\n        view\n        override\n        returns (DataTypes.EntryParams memory)\n    {\n        return\n            _sellerEntryParamsVersions.getEntryParams(\n                _sellerEntryParamsHistory\n            );\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function getSellerEntryParams(\n        uint256 version\n    ) external view override returns (DataTypes.EntryParams memory) {\n        return\n            _sellerEntryParamsVersions.getEntryParams(\n                _sellerEntryParamsHistory,\n                version\n            );\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function updateSellerEntryParams(\n        DataTypes.EntryParams memory newParams\n    ) external override onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\n        _sellerEntryParamsVersions.updateEntryParams(\n            _sellerEntryParamsHistory,\n            newParams\n        );\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function getRetributionParams()\n        external\n        view\n        override\n        returns (DataTypes.RetributionParams memory)\n    {\n        return\n            _retributionParamsVersions.getRetributionParams(\n                _retributionParamsHistory\n            );\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function getRetributionParams(\n        uint256 version\n    ) external view override returns (DataTypes.RetributionParams memory) {\n        return\n            _retributionParamsVersions.getRetributionParams(\n                _retributionParamsHistory,\n                version\n            );\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function updateRetributionParams(\n        DataTypes.RetributionParams memory newParams\n    ) external override onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\n        _retributionParamsVersions.updateRetributionParams(\n            _retributionParamsHistory,\n            newParams\n        );\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function getGigCreationParams()\n        external\n        view\n        override\n        returns (DataTypes.CreationParams memory)\n    {\n        return\n            _gigCreationParamsVersions.getCreationParams(\n                _gigCreationParamsHistory\n            );\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function getGigCreationParams(\n        uint256 version\n    ) external view override returns (DataTypes.CreationParams memory) {\n        return\n            _gigCreationParamsVersions.getCreationParams(\n                _gigCreationParamsHistory,\n                version\n            );\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function updateGigCreationParams(\n        DataTypes.CreationParams memory newParams\n    ) external override onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\n        _gigCreationParamsVersions.updateCreationParams(\n            _gigCreationParamsHistory,\n            newParams\n        );\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function getOrderCreationParams()\n        external\n        view\n        override\n        returns (DataTypes.OrderPriceParams memory, uint256)\n    {\n        return (\n            _orderCreationParamsVersions.getPriceParams(\n                _orderCreationParamsHistory\n            ),\n            _sellerOrderFeesParamsVersions.getLatestVersion()\n        );\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function getOrderCreationParams(\n        uint256 version\n    )\n        external\n        view\n        override\n        returns (DataTypes.OrderPriceParams memory, uint256)\n    {\n        return (\n            _orderCreationParamsVersions.getPriceParams(\n                _orderCreationParamsHistory,\n                version\n            ),\n            _sellerOrderFeesParamsVersions.getLatestVersion()\n        );\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function updateOrderCreationParams(\n        DataTypes.OrderPriceParams memory newParams\n    ) external override onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\n        _orderCreationParamsVersions.updatePriceParams(\n            _orderCreationParamsHistory,\n            newParams\n        );\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function getDelayTimestamp()\n        external\n        view\n        override\n        returns (DataTypes.DelayTimestamp memory)\n    {\n        return\n            _delayTimestampVersions.getDelayTimestamp(_delayTimestampHistory);\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function getDelayTimestamp(\n        uint256 version\n    ) external view override returns (DataTypes.DelayTimestamp memory) {\n        return\n            _delayTimestampVersions.getDelayTimestamp(\n                _delayTimestampHistory,\n                version\n            );\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function updateDelayTimestamp(\n        DataTypes.DelayTimestamp memory newParams\n    ) external override onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\n        _delayTimestampVersions.updateDelayTimestamp(\n            _delayTimestampHistory,\n            newParams\n        );\n    }\n\n    /// @inheritdoc IProtocolConfigurator\n    function getSellerOrderFees(\n        uint256 version\n    ) external view override returns (DataTypes.OrderPriceParams memory) {\n        return\n            _sellerOrderFeesParamsVersions.getPriceParams(\n                _sellerOrderFeesParamsHistory,\n                version\n            );\n    }\n}\n"
    },
    "contracts/protocol/configuration/ProviderContract.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"hardhat/console.sol\";\n\nimport {Ownable} from \"../../imports/openzeppelin/contracts/Ownable.sol\";\nimport {IERC20} from \"../../imports/openzeppelin/contracts/IERC20.sol\";\nimport {GPv2SafeERC20} from \"../../imports/gnosis/contracts/GPv2SafeERC20.sol\";\nimport {Errors} from \"../libraries/helpers/Errors.sol\";\nimport {IAddressProvider} from \"../../interfaces/IAddressProvider.sol\";\nimport {IProtocolConfigurator} from \"../../interfaces/IProtocolConfigurator.sol\";\n\nimport {IProviderContract} from \"../../interfaces/IProviderContract.sol\";\nimport {IACLManager} from \"../../interfaces/IACLManager.sol\";\nimport {IBSWAN} from \"../../interfaces/IBSWAN.sol\";\nimport {IXP} from \"../../interfaces/IXP.sol\";\nimport {IUser} from \"../../interfaces/IUser.sol\";\nimport {InputTypes} from \"../libraries/types/InputTypes.sol\";\nimport {DataTypes} from \"../libraries/types/DataTypes.sol\";\nimport {RegistryKeys} from \"../libraries/helpers/RegistryKeys.sol\";\nimport {RoleKeys} from \"../libraries/helpers/RoleKeys.sol\";\n\n/**\n * @title Parent class to all contracts used to check that a contract is registerable\n * @notice ProviderContract is Ownable so the deployer can re-register it against new registries\n * @dev The Provider uses this to talk to all contracts that inherit from this contract.\n */\n\ncontract ProviderContract is Ownable, IProviderContract {\n    using GPv2SafeERC20 for IERC20;\n    IAddressProvider public ADDRESS_PROVIDER;\n\n    uint256 public MAX_UINT = 2 ** 256 - 1;\n\n    /// @notice all contracts that inherit from ProviderContract are automatically Ownable()\n    /// @dev internal constructor makes ProviderContract abstract\n    constructor(IAddressProvider provider) Ownable() {\n        require(\n            address(provider) != address(0x00),\n            Errors.ZERO_ADDRESS_IS_INVALID\n        );\n\n        ADDRESS_PROVIDER = IAddressProvider(provider);\n    }\n\n    /// @notice only allow  contracts to be called by the respective agent.\n    ///     i.e. GigStorage methods can only be invoked by GigFactory.\n    modifier onlyProvider(bytes32 _name) {\n        require(\n            _msgSender() == fetchContract(_name),\n            \"Requires msg.sender is from contract address registered to _name\"\n        );\n        _;\n    }\n\n    /// @notice only allow function contracts to be called by the respective role.\n    ///     i.e. GigStorage methods can only be invoked by BUYER_ROLE.\n    modifier onlyProtocolRole(bytes32 _role) {\n        require(\n            hasProtocolRole(_role, _msgSender()),\n            \"Requires msg.sender has role\"\n        );\n        _;\n    }\n\n    modifier onlyStillBuyer() {\n        require(isStillBuyer(_msgSender()), \"buyer time elapsed\");\n        _;\n    }\n\n    modifier onlyStillSeller() {\n        require(isStillSeller(_msgSender()), Errors.ONLY_SELLER);\n        _;\n    }\n\n    function hasProtocolRole(\n        bytes32 _role,\n        address account\n    ) public view returns (bool) {\n        bool hasRole = IACLManager(fetchContract(RegistryKeys.ACL_MANAGER))\n            .hasRole(_role, account);\n        return hasRole;\n    }\n\n    // function hasProtocolRoles(\n    //     bytes32[] memory _roles,\n    //     address account\n    // ) public view returns (bool) {\n    //     for (uint256 i; i < _roles.length; i++) {\n    //         bool hasRole = IACLManager(fetchContract(RegistryKeys.ACL_MANAGER))\n    //             .hasRole(_roles[i], account);\n    //         if (hasRole) {\n    //             return true;\n    //         }\n    //     }\n    //     return false;\n    // }\n\n    function isStillBuyer(address account) public view returns (bool) {\n        return\n            hasProtocolRole(RoleKeys.BUYER_ROLE, account) &&\n            IUser(fetchContract(RegistryKeys.USER))\n                .getUserByAddress(account)\n                .buyerUntil >\n            block.timestamp;\n    }\n\n    function isStillSeller(address account) public view returns (bool) {\n        return\n            hasProtocolRole(RoleKeys.SELLER_ROLE, account) &&\n            IUser(fetchContract(RegistryKeys.USER))\n                .getUserByAddress(account)\n                .sellerUntil >\n            block.timestamp;\n    }\n\n    /// @inheritdoc IProviderContract\n    function setProvider(IAddressProvider _providerAddress) public override {\n        require(\n            address(_providerAddress) == address(0x00) ||\n                address(ADDRESS_PROVIDER) == msg.sender ||\n                this.owner() == msg.sender,\n            \"Can only be called if addressesProvider is empty, msg.sender or owner\"\n        );\n        ADDRESS_PROVIDER = _providerAddress;\n    }\n\n    function fetchContract(\n        bytes32 _name\n    ) public view override returns (address) {\n        return address(IAddressProvider(ADDRESS_PROVIDER).fetchContract(_name));\n    }\n\n    /// @inheritdoc IProviderContract\n    function kill() external override {\n        assert(msg.sender == address(ADDRESS_PROVIDER));\n        selfdestruct(payable(address(ADDRESS_PROVIDER)));\n    }\n\n    /// @inheritdoc IProviderContract\n    function ADDRESSES_PROVIDER()\n        external\n        view\n        override\n        returns (IAddressProvider)\n    {\n        return ADDRESS_PROVIDER;\n    }\n\n    function grantProtocolRole(bytes32 _role, address account) internal {\n        IACLManager(fetchContract(RegistryKeys.ACL_MANAGER)).grantRole(\n            _role,\n            account\n        );\n    }\n\n    function approve(\n        address erc20\n    ) public onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\n        address dat = fetchContract(RegistryKeys.DAT);\n        IERC20(erc20).approve(dat, MAX_UINT);\n    }\n\n    function _processPayment(\n        InputTypes.ProcessPaymentInput memory params\n    ) internal {\n        IBSWAN dat = IBSWAN(fetchContract(RegistryKeys.DAT));\n        uint256 total = params.inviter0Rewards +\n            params.inviter1Rewards +\n            params.remainingRewards;\n        IERC20(dat.currency()).safeTransferFrom(\n            params.caller,\n            address(this),\n            total\n        );\n        dat.pay(params.inviter0, params.inviter0Rewards);\n        dat.pay(params.inviter1, params.inviter1Rewards);\n        dat.pay(address(0), params.remainingRewards);\n    }\n\n    function _giveXP(bytes32 _key, address _to) internal {\n        IXP(fetchContract(RegistryKeys.XP)).mint(_key, _to);\n    }\n\n    function getProtocolRetributionParams()\n        internal\n        view\n        returns (DataTypes.RetributionParams memory)\n    {\n        return\n            IProtocolConfigurator(\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\n            ).getRetributionParams();\n    }\n\n    function getProtocolDelayTimestamp()\n        internal\n        view\n        returns (DataTypes.DelayTimestamp memory)\n    {\n        return\n            IProtocolConfigurator(\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\n            ).getDelayTimestamp();\n    }\n\n    function isGigOwner(\n        uint256 userId,\n        uint256 gigId,\n        IUser UserContract\n    ) public view returns (bool) {\n        return UserContract.isGigOwner(userId, gigId);\n    }\n}\n"
    },
    "contracts/protocol/configuration/ProviderRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"../../imports/openzeppelin/contracts/Ownable.sol\";\nimport {Errors} from \"../libraries/helpers/Errors.sol\";\nimport {IProviderRegistry} from \"../../interfaces/IProviderRegistry.sol\";\n\n/**\n * @title Provider Registry\n * @author Blockswan\n * @notice Main registry of Addresses_provider of Blockswan marketplaces.\n * @dev Used for indexing purposes of Blockswan protocol's marketplaces. The id assigned to an AddressesProvider refers to the\n * market it is connected with, for example with `1` for the Blockswan main market and `2` for the next created.\n **/\n\ncontract ProviderRegistry is Ownable, IProviderRegistry {\n    // List of addresses providers\n    address[] private _addressProvidersList;\n    // Map of address provider ids (addressProvider => id)\n    mapping(address => uint256) private _addressProviderToId;\n    // Map of id to address provider (id => addressProvider)\n    mapping(uint256 => address) private _idToAddressProvider;\n    // Map of address provider list indexes (addressProvider => indexInList)\n    mapping(address => uint256) private _addressProvidersIndexes;\n\n    /**\n     * @dev Constructor.\n     * @param owner The owner address of this contract.\n     */\n    constructor(address owner) {\n        transferOwnership(owner);\n    }\n\n    /// @inheritdoc IProviderRegistry\n    function getAddressProvidersList()\n        external\n        view\n        override\n        returns (address[] memory)\n    {\n        return _addressProvidersList;\n    }\n\n    /// @inheritdoc IProviderRegistry\n    function registerAddressProvider(\n        address provider,\n        uint256 id\n    ) external override onlyOwner {\n        require(id != 0, Errors.INVALID_ADDRESS_PROVIDER_ID);\n        require(\n            _idToAddressProvider[id] == address(0),\n            Errors.INVALID_ADDRESS_PROVIDER_ID\n        );\n        require(\n            _addressProviderToId[provider] == 0,\n            Errors.ADDRESS_PROVIDER_ALREADY_ADDED\n        );\n\n        _addressProviderToId[provider] = id;\n        _idToAddressProvider[id] = provider;\n\n        _addToAddressProviderslist(provider);\n        emit AddressProviderRegistered(provider, id);\n    }\n\n    /// @inheritdoc IProviderRegistry\n    function unregisterAddressProvider(\n        address provider\n    ) external override onlyOwner {\n        require(\n            _addressProviderToId[provider] != 0,\n            Errors.ADDRESS_PROVIDER_NOT_REGISTERED\n        );\n        uint256 old_id = _addressProviderToId[provider];\n        _idToAddressProvider[old_id] = address(0);\n        _addressProviderToId[provider] = 0;\n\n        _removeFromAddressProvidersList(provider);\n\n        emit AddressProviderUnregistered(provider, old_id);\n    }\n\n    /// @inheritdoc IProviderRegistry\n    function getAddressProviderIdByAddress(\n        address addresses_provider\n    ) external view override returns (uint256) {\n        return _addressProviderToId[addresses_provider];\n    }\n\n    /// @inheritdoc IProviderRegistry\n    function getAddressProviderById(\n        uint256 id\n    ) external view override returns (address) {\n        return _idToAddressProvider[id];\n    }\n\n    /**\n     * @notice Adds the addresses provider address to the list.\n     * @param provider The address of the protocol AddressesProvider\n     */\n    function _addToAddressProviderslist(address provider) internal {\n        _addressProvidersIndexes[provider] = _addressProvidersList.length;\n        _addressProvidersList.push(provider);\n    }\n\n    /**\n     * @notice Removes the addresses provider address from the list.\n     * @param provider The address of the AddressesProvider\n     */\n    function _removeFromAddressProvidersList(address provider) internal {\n        uint256 index = _addressProvidersIndexes[provider];\n\n        _addressProvidersIndexes[provider] = 0;\n\n        // Swap the index of the last addresses provider in the list with the index of the provider to remove\n        uint256 last_index = _addressProvidersList.length - 1;\n        if (index < last_index) {\n            address last_provider = _addressProvidersList[last_index];\n            _addressProvidersList[index] = last_provider;\n            _addressProvidersIndexes[last_provider] = index;\n        }\n        _addressProvidersList.pop();\n    }\n}\n"
    },
    "contracts/protocol/gig/Gig.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Counters} from \"../../imports/openzeppelin/contracts/Counters.sol\";\nimport {EnumerableSet} from \"../../imports/openzeppelin/contracts/EnumerableSet.sol\";\nimport {EnumerableMap} from \"../../imports/openzeppelin/contracts/EnumerableMap.sol\";\nimport {DataTypes} from \"../libraries/types/DataTypes.sol\";\nimport {InputTypes} from \"../libraries/types/InputTypes.sol\";\nimport {OutputTypes} from \"../libraries/types/OutputTypes.sol\";\nimport {GigLogic} from \"../libraries/logics/GigLogic.sol\";\nimport {InviterLogic} from \"../libraries/logics/InviterLogic.sol\";\nimport {GigStorage} from \"./GigStorage.sol\";\nimport {ProviderContract} from \"../configuration/ProviderContract.sol\";\nimport {IAddressProvider} from \"../../interfaces/IAddressProvider.sol\";\nimport {IUser} from \"../../interfaces/IUser.sol\";\nimport {IBSWAN} from \"../../interfaces/IBSWAN.sol\";\n\nimport {IProtocolConfigurator} from \"../../interfaces/IProtocolConfigurator.sol\";\nimport {XPKeys} from \"../libraries/helpers/XPKeys.sol\";\nimport {RegistryKeys} from \"../libraries/helpers/RegistryKeys.sol\";\n\n/**\n * @title Gig contract\n * @author Blockswan\n * @notice  User data within an Blockswan protocol's marketplace\n * - Users can:\n *   # create gigs\n *   # edit gigs\n *   # invite users\n *   # choose affiliates\n * @dev To be covered by a proxy contract, owned by the addressProvider of the specific marketplace\n * @dev All admin functions are callable by the protocolConfigurator contract defined also in the\n *   addressProvider\n **/\ncontract Gig is GigStorage, ProviderContract {\n    using EnumerableSet for EnumerableSet.UintSet;\n    using GigLogic for DataTypes.Gig;\n    using Counters for Counters.Counter;\n\n    /**\n     * @dev Constructor.\n     * @param provider The address of the AddressProvider\n     */\n    constructor(IAddressProvider provider) ProviderContract(provider) {}\n\n    function getGigsCount() public view virtual returns (uint256) {\n        uint256 count = _gigIds.length();\n        return count;\n    }\n\n    function getGigById(\n        uint256 gigId\n    ) public view virtual returns (OutputTypes.GigOutput memory) {\n        DataTypes.Gig storage gig = GigLogic.getGigById(gigId, _gigs);\n        return gig.format(gigId);\n    }\n\n    function getGigList()\n        external\n        view\n        virtual\n        returns (OutputTypes.GigOutput[] memory)\n    {\n        uint256 len = getGigsCount();\n        OutputTypes.GigOutput[] memory gigList = new OutputTypes.GigOutput[](\n            len\n        );\n        for (uint256 i = 0; i < len; i++) {\n            gigList[i] = getGigById(i);\n        }\n        return gigList;\n    }\n\n    function createGig(\n        string memory metadata,\n        DataTypes.Package[3] memory packages\n    ) external onlyStillSeller {\n        address caller = _msgSender();\n        uint256 newId = getGigsCount();\n        bool isCreated = GigLogic.executeCreateGig(\n            _gigIds,\n            _gigs,\n            InputTypes.CreateGigInput({\n                newId: newId,\n                packages: packages,\n                metadata: metadata\n            })\n        );\n        bool relationSuccess = IUser(fetchContract(RegistryKeys.USER))\n            .createGig(caller, newId);\n        require(isCreated && relationSuccess, \"failed to create gig\");\n        _giveXP(XPKeys.CREATE_GIG, caller);\n        (address inviter0, address inviter1) = getInvitersAddresses(caller);\n        DataTypes.RetributionParams\n            memory retributionParams = getProtocolRetributionParams();\n        DataTypes.CreationParams\n            memory gigCreationParams = getGigCreationParams();\n        OutputTypes.CalcInvitersRewardsOutput memory rewards = InviterLogic\n            .calcInvitersRewards(\n                InputTypes.CalcInvitersRewardsInput({\n                    currencyValue: gigCreationParams.currencyValue,\n                    affiliateShare: retributionParams.affiliate,\n                    lvl0AffiliateShare: retributionParams.lvl0AffiliateShare\n                })\n            );\n        _processPayment(\n            InputTypes.ProcessPaymentInput({\n                caller: caller,\n                inviter0: inviter0,\n                inviter1: inviter1,\n                inviter0Rewards: rewards.inviter0Rewards,\n                inviter1Rewards: rewards.inviter1Rewards,\n                remainingRewards: rewards.remainingRewards\n            })\n        );\n    }\n\n    function getInvitersAddresses(\n        address account\n    ) public view returns (address, address) {\n        return\n            IUser(fetchContract(RegistryKeys.USER)).getInvitersByUserAddress(\n                account\n            );\n    }\n\n    function getGigCreationParams()\n        internal\n        view\n        returns (DataTypes.CreationParams memory)\n    {\n        return\n            IProtocolConfigurator(\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\n            ).getGigCreationParams();\n    }\n\n    function createOrder(\n        uint256 newOrderId,\n        uint256 gigId,\n        uint256 packageId\n    )\n        external\n        onlyProvider(RegistryKeys.ORDER)\n        returns (bool, string memory, DataTypes.Package memory)\n    {\n        DataTypes.Gig storage gig = GigLogic.getGigById(gigId, _gigs);\n        require(_isCorrectPackage(gig.packages[packageId]), \"Invalid Package\");\n        bool success = gig.executeCreateOrder(newOrderId);\n        return (success, gig.metadata, gig.packages[packageId]);\n    }\n\n    function _isCorrectPackage(\n        DataTypes.Package memory package\n    ) internal pure returns (bool) {\n        return package.price > 0 && package.timeDelivery > 0;\n    }\n}\n"
    },
    "contracts/protocol/gig/GigStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {EnumerableSet} from \"../../imports/openzeppelin/contracts/EnumerableSet.sol\";\nimport {EnumerableMap} from \"../../imports/openzeppelin/contracts/EnumerableMap.sol\";\nimport {DataTypes} from \"../libraries/types/DataTypes.sol\";\n\n/**\n * @title GigStorage\n * @author Blockswan\n * @notice Contract used as storage of the gig contract.\n * @dev It defines the storage layout of the gig contract.\n */\ncontract GigStorage {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    // set of gig Ids\n    EnumerableSet.UintSet internal _gigIds;\n\n    // Map of the gig id to the gig data (gigId => Gig)\n    mapping(uint256 => DataTypes.Gig) internal _gigs;\n}\n"
    },
    "contracts/protocol/libraries/helpers/Errors.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\n/**\n * @title Errors  library\n * @author Blockswan\n * @notice Defines the error messages emitted by the different contracts of the Blockswan protocol\n */\nlibrary Errors {\n    // REGISTRY\n    string public constant INVALID_ADDRESS_PROVIDER_ID = \"1\"; // The addresses provider is not valid\n    string public constant ADDRESS_PROVIDER_ALREADY_ADDED = \"2\"; // This addresses provider already exists\n    string public constant ADDRESS_PROVIDER_NOT_REGISTERED = \"3\"; // 'This addresses provider is not registered'\n\n    // ADDRESSSES PROVIDER\n    string public constant CONTRACT_NAME_ALREADY_USED = \"4\"; // 'Requires that given _name does not already have non-zero registered contract address'\n    string public constant ZERO_ADDRESS_IS_INVALID = \"5\"; // the address provided is 0x00\n    string public constant INDEX_OUT_OF_RANGE = \"6\"; // the index provided is out of range\n\n    // USER\n    string public constant ADDRESS_ALREADY_USED = \"7\"; // 'The address provided has already been unsed to initialise an account'\n    string public constant INVALID_USER_ID = \"8\"; // 'The userId is incorrect'\n    string public constant RESTRICTED_TO_BUYER = \"9\"; // this function can't  be called by buyers\n    string public constant INVALID_INVITER_ID = \"10\"; // The inviter ID provided is incorrect\n    string public constant FAILED_BECOMING_BUYER = \"11\"; // The execution to becomeBuyer failed\n    string public constant RESTRICTED_TO_SELLER = \"12\"; // this function can't  be called by sellers\n    string public constant FAILED_BECOMING_SELLER = \"13\"; // The execution to becomeSeller failed\n\n    //XP\n    string public constant NO_MATCHING_XP_KEY = \"14\"; // There is no xp value to give for this byte32\n\n    // GIG\n    string public constant GIG_ID_ALREADY_EXISING = \"15\"; // There is already an id for this gig.\n\n    // modifiers\n    string public constant ONLY_SELLER = \"16\"; // Only account with the seller role can call the functions\n}\n"
    },
    "contracts/protocol/libraries/helpers/RegistryKeys.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary RegistryKeys {\n    /// REGISTRY\n    //  ----  CONTRACT ------\n    bytes32 public constant GIG = \"GIG\";\n    bytes32 public constant ORDER = \"ORDER\";\n    bytes32 public constant USER = \"USER\";\n    bytes32 public constant PROTOCOL_CONFIGURATOR = \"PROTOCOL_CONFIGURATOR\";\n    bytes32 public constant DAT = \"DAT\";\n    bytes32 public constant ACL_MANAGER = \"ACL_MANAGER\";\n    bytes32 public constant DATA_PROVIDER = \"DATA_PROVIDER\";\n    bytes32 public constant XP = \"XP\";\n    // ---- NON CONTRACT ------\n    bytes32 public constant ACL_ADMIN = \"ACL_ADMIN\";\n}\n"
    },
    "contracts/protocol/libraries/helpers/RoleKeys.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary RoleKeys {\n    // ---- ADMIN ROLES  ------\n    bytes32 public constant PROTOCOL_ADMIN_ROLE = \"PROTOCOL_ADMIN\";\n    bytes32 public constant BUYER_ADMIN_ROLE = \"BUYER_ADMIN\";\n    bytes32 public constant SELLER_ADMIN_ROLE = \"SELLER_ADMIN\";\n    // ----  ROLES  ------\n    bytes32 public constant BUYER_ROLE = \"BUYER\";\n    bytes32 public constant SELLER_ROLE = \"SELLER\";\n    bytes32 public constant JUDGE_ROLE = \"JUDGE\";\n    bytes32 public constant BLACKLIST_ROLE = \"BLACKLIST\";\n    bytes32 public constant WHITELIST_ROLE = \"WHITELIST\";\n    bytes32 public constant XP_GIVER_ROLE = \"XP_GIVER\";\n}\n"
    },
    "contracts/protocol/libraries/helpers/XPKeys.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary XPKeys {\n    bytes32 public constant BECOME_BUYER = \"BECOME_BUYER\";\n    bytes32 public constant BECOME_SELLER = \"BECOME_SELLER\";\n    bytes32 public constant CREATE_GIG = \"CREATE_GIG\";\n    bytes32 public constant CREATE_ORDER = \"CREATE_ORDER\";\n    bytes32 public constant PAY_ORDER = \"PAY_ORDER\";\n}\n"
    },
    "contracts/protocol/libraries/logics/GigDataLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"hardhat/console.sol\";\n\nimport {Errors} from \"../helpers/Errors.sol\";\nimport {InputTypes} from \"../types/InputTypes.sol\";\nimport {DataTypes} from \"../types/DataTypes.sol\";\nimport {Counters} from \"../../../imports/openzeppelin/contracts/Counters.sol\";\nimport {EnumerableSet} from \"../../../imports/openzeppelin/contracts/EnumerableSet.sol\";\n\n/**\n * @title GigData logic library\n * @author Blockswan\n * @notice Implements the logic for gig data specific functions\n */\nlibrary GigDataLogic {\n    using Counters for Counters.Counter;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    function updateMetadata(\n        DataTypes.Gig storage gig,\n        string memory metadata\n    ) external returns (bool) {\n        gig.metadata = metadata;\n        return true;\n    }\n\n    function setCreatedAt(DataTypes.Gig storage gig) external returns (bool) {\n        gig.createdAt = block.timestamp;\n        return true;\n    }\n\n    function addReview(\n        DataTypes.Gig storage gig,\n        uint256 reviewId\n    ) external returns (bool) {\n        gig.reviewIds.add(reviewId);\n        return true;\n    }\n\n    function removeReview(\n        DataTypes.Gig storage gig,\n        uint256 reviewId\n    ) external returns (bool) {\n        gig.reviewIds.remove(reviewId);\n        return true;\n    }\n\n    function addOrder(\n        DataTypes.Gig storage gig,\n        uint256 orderId\n    ) external returns (bool) {\n        gig.orderIds.add(orderId);\n        return true;\n    }\n\n    function removeOrder(\n        DataTypes.Gig storage gig,\n        uint256 orderId\n    ) external returns (bool) {\n        gig.orderIds.remove(orderId);\n        return true;\n    }\n\n    function incrSuccessSell(\n        DataTypes.Gig storage gig\n    ) external returns (bool) {\n        gig.successSell.increment();\n        return true;\n    }\n\n    function incrFailedSell(DataTypes.Gig storage gig) external returns (bool) {\n        gig.failedSell.increment();\n        return true;\n    }\n\n    function updatePackages(\n        DataTypes.Gig storage gig,\n        DataTypes.Package[3] memory packages\n    ) external returns (bool) {\n        for (uint256 i = 0; i < 3; i++) {\n            gig.packages[i] = packages[i];\n        }\n        return true;\n    }\n}\n"
    },
    "contracts/protocol/libraries/logics/GigLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"hardhat/console.sol\";\nimport {EnumerableSet} from \"../../../imports/openzeppelin/contracts/EnumerableSet.sol\";\nimport {Counters} from \"../../../imports/openzeppelin/contracts/Counters.sol\";\nimport {InputTypes} from \"../types/InputTypes.sol\";\nimport {DataTypes} from \"../types/DataTypes.sol\";\nimport {OutputTypes} from \"../types/OutputTypes.sol\";\n\nimport {Errors} from \"../helpers/Errors.sol\";\n\nimport {GigDataLogic} from \"./GigDataLogic.sol\";\n\n/**\n * @title Gig logic library\n * @author Blockswan\n * @notice Implements the logic for gig specific functions\n */\nlibrary GigLogic {\n    using EnumerableSet for EnumerableSet.UintSet;\n    using GigDataLogic for DataTypes.Gig;\n    using Counters for Counters.Counter;\n\n    function getGigById(\n        uint256 gigId,\n        mapping(uint256 => DataTypes.Gig) storage gigs\n    ) public view returns (DataTypes.Gig storage) {\n        return gigs[gigId];\n    }\n\n    function executeCreateGig(\n        EnumerableSet.UintSet storage gigIds,\n        mapping(uint256 => DataTypes.Gig) storage gigs,\n        InputTypes.CreateGigInput memory params\n    ) external returns (bool) {\n        bool added = gigIds.add(params.newId);\n        DataTypes.Gig storage newGig = getGigById(params.newId, gigs);\n        newGig.setCreatedAt();\n        newGig.updateMetadata(params.metadata);\n        newGig.updatePackages(params.packages);\n        require(added, Errors.GIG_ID_ALREADY_EXISING);\n        return true;\n    }\n\n    function executeCreateOrder(\n        DataTypes.Gig storage gig,\n        uint256 orderId\n    ) external returns (bool) {\n        gig.addOrder(orderId);\n        return true;\n    }\n\n    function format(\n        DataTypes.Gig storage gig,\n        uint256 id\n    ) external view returns (OutputTypes.GigOutput memory) {\n        return (\n            OutputTypes.GigOutput({\n                gigId: id,\n                metadata: gig.metadata,\n                createdAt: gig.createdAt,\n                successSell: gig.successSell.current(),\n                failedSell: gig.failedSell.current(),\n                reviewIds: gig.reviewIds.values(),\n                orderIds: gig.orderIds.values(),\n                packages: [gig.packages[0], gig.packages[1], gig.packages[2]]\n            })\n        );\n    }\n}\n"
    },
    "contracts/protocol/libraries/logics/InviterLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {EnumerableSet} from \"../../../imports/openzeppelin/contracts/EnumerableSet.sol\";\nimport {PercentageMath} from \"../../../imports/aave/contracts/PercentageMath.sol\";\n\nimport {Errors} from \"../helpers/Errors.sol\";\nimport {InputTypes} from \"../types/InputTypes.sol\";\nimport {OutputTypes} from \"../types/OutputTypes.sol\";\nimport {DataTypes} from \"../types/DataTypes.sol\";\n\n/**\n * @title Inviter logic library\n * @author Blockswan\n * @notice Implements the logic for inviter specific functions\n */\nlibrary InviterLogic {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using PercentageMath for uint256;\n\n    function addInviter(\n        DataTypes.User storage user,\n        uint256 inviterId\n    ) external returns (bool) {\n        user.inviterId = inviterId;\n        return (true);\n    }\n\n    function getInviterAddress(\n        DataTypes.User storage user,\n        EnumerableSet.AddressSet storage userIdToAddress\n    ) public view returns (address) {\n        return (userIdToAddress.at(user.inviterId));\n    }\n\n    function getInvitersAddresses(\n        DataTypes.User storage user,\n        EnumerableSet.AddressSet storage userIdToAddress,\n        mapping(address => DataTypes.User) storage users\n    ) public view returns (address, address) {\n        address inviter0 = getInviterAddress(user, userIdToAddress);\n        address inviter1 = getInviterAddress(users[inviter0], userIdToAddress);\n        return (inviter0, inviter1);\n    }\n\n    function calcInviterRewards(\n        uint256 currencyValue,\n        uint256 affiliateShare\n    ) public pure returns (uint256) {\n        return currencyValue.percentMul(affiliateShare);\n    }\n\n    function calcInvitersRewards(\n        InputTypes.CalcInvitersRewardsInput memory params\n    ) external pure returns (OutputTypes.CalcInvitersRewardsOutput memory) {\n        uint256 totalRewards = calcInviterRewards(\n            params.currencyValue,\n            params.affiliateShare\n        );\n        uint256 inviter0Rewards = totalRewards.percentMul(\n            params.lvl0AffiliateShare\n        );\n        uint256 inviter1Rewards = totalRewards - inviter0Rewards;\n\n        return (\n            OutputTypes.CalcInvitersRewardsOutput({\n                inviter0Rewards: inviter0Rewards,\n                inviter1Rewards: inviter1Rewards,\n                remainingRewards: params.currencyValue - totalRewards\n            })\n        );\n    }\n}\n"
    },
    "contracts/protocol/libraries/logics/OrderDataLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"hardhat/console.sol\";\n\nimport {Errors} from \"../helpers/Errors.sol\";\nimport {InputTypes} from \"../types/InputTypes.sol\";\nimport {DataTypes} from \"../types/DataTypes.sol\";\nimport {Counters} from \"../../../imports/openzeppelin/contracts/Counters.sol\";\nimport {EnumerableSet} from \"../../../imports/openzeppelin/contracts/EnumerableSet.sol\";\nimport {IERC20} from \"../../../imports/openzeppelin/contracts/IERC20.sol\";\n\n/**\n * @title OrderData logic library\n * @author Blockswan\n * @notice Implements the logic for order data specific functions\n */\nlibrary OrderDataLogic {\n    using Counters for Counters.Counter;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    function setMetadata(\n        DataTypes.Order storage order,\n        string memory metadata\n    ) external returns (bool) {\n        order.metadata = metadata;\n        return true;\n    }\n\n    function setBrief(\n        DataTypes.Order storage order,\n        string memory brief\n    ) external returns (bool) {\n        order.brief = brief;\n        return true;\n    }\n\n    function setSellerFeesVersion(\n        DataTypes.Order storage order,\n        uint256 sellerFeesVersion\n    ) external returns (bool) {\n        order.sellerFeesVersion = sellerFeesVersion;\n        return true;\n    }\n\n    function setToTrial(\n        DataTypes.Order storage order,\n        uint256 toTrial\n    ) external returns (bool) {\n        order.toTrial = toTrial;\n        return true;\n    }\n\n    function setToProceed(\n        DataTypes.Order storage order,\n        uint256 toProceed\n    ) external returns (bool) {\n        order.toProceed = toProceed;\n        return true;\n    }\n\n    function setCreatedAt(\n        DataTypes.Order storage order\n    ) external returns (bool) {\n        order.createdAt = block.timestamp;\n        return true;\n    }\n\n    function setBuyerId(\n        DataTypes.Order storage order,\n        uint256 buyerId\n    ) external returns (bool) {\n        order.buyerId = buyerId;\n        return true;\n    }\n\n    function setSellerId(\n        DataTypes.Order storage order,\n        uint256 sellerId\n    ) external returns (bool) {\n        order.sellerId = sellerId;\n        return true;\n    }\n\n    function setGigId(\n        DataTypes.Order storage order,\n        uint256 gigId\n    ) external returns (bool) {\n        order.gigId = gigId;\n        return true;\n    }\n\n    function setPackage(\n        DataTypes.Order storage order,\n        DataTypes.Package memory package\n    ) external returns (bool) {\n        order.package = package;\n        return true;\n    }\n\n    function setState(\n        DataTypes.Order storage order,\n        DataTypes.OrderState state\n    ) external returns (bool) {\n        order.state = state;\n        return true;\n    }\n\n    function addReview(\n        DataTypes.Order storage order,\n        uint256 reviewId\n    ) external returns (bool) {\n        order.reviewIds.add(reviewId);\n        return true;\n    }\n\n    function removeReview(\n        DataTypes.Order storage order,\n        uint256 reviewId\n    ) external returns (bool) {\n        order.reviewIds.remove(reviewId);\n        return true;\n    }\n\n    function setCurrency(\n        DataTypes.Order storage order,\n        IERC20 currency\n    ) external {\n        order.currency = currency;\n    }\n}\n"
    },
    "contracts/protocol/libraries/logics/OrderLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"hardhat/console.sol\";\n\nimport {EnumerableSet} from \"../../../imports/openzeppelin/contracts/EnumerableSet.sol\";\nimport {IERC20} from \"../../../imports/openzeppelin/contracts/IERC20.sol\";\nimport {Counters} from \"../../../imports/openzeppelin/contracts/Counters.sol\";\nimport {InputTypes} from \"../types/InputTypes.sol\";\nimport {DataTypes} from \"../types/DataTypes.sol\";\nimport {OutputTypes} from \"../types/OutputTypes.sol\";\nimport {Errors} from \"../helpers/Errors.sol\";\nimport {OrderDataLogic} from \"./OrderDataLogic.sol\";\nimport {PercentageMath} from \"../../../imports/aave/contracts/PercentageMath.sol\";\n\n/**\n * @title Order logic library\n * @author Blockswan\n * @notice Implements the logic for order specific functions\n */\nlibrary OrderLogic {\n    using EnumerableSet for EnumerableSet.UintSet;\n    using OrderDataLogic for DataTypes.Order;\n    using Counters for Counters.Counter;\n    using PercentageMath for uint256;\n\n    function getOrderById(\n        uint256 orderId,\n        mapping(uint256 => DataTypes.Order) storage orders\n    ) public view returns (DataTypes.Order storage) {\n        return orders[orderId];\n    }\n\n    function executeCreateOrder(\n        EnumerableSet.UintSet storage orderIds,\n        mapping(uint256 => DataTypes.Order) storage orders,\n        InputTypes.ExecuteCreateOrderInput memory params\n    ) external returns (bool) {\n        bool added = orderIds.add(params.relations.newId);\n        DataTypes.Order storage order = getOrderById(\n            params.relations.newId,\n            orders\n        );\n        order.setMetadata(params.metadata);\n        order.setBrief(params.brief);\n        order.setCreatedAt();\n        order.setBuyerId(params.relations.buyerId);\n        order.setSellerId(params.relations.sellerId);\n        order.setGigId(params.relations.gigId);\n        order.setPackage(params.package);\n        order.setToProceed(params.fees.toProceed);\n        order.setToTrial(params.fees.toTrial);\n        order.setSellerFeesVersion(params.fees.sellerFeesVersion);\n        order.setCurrency(params.currency);\n        return (added);\n    }\n\n    function executeConfirmOrder(\n        uint256 orderId,\n        uint256 sellerId,\n        mapping(uint256 => DataTypes.Order) storage orders\n    ) external {\n        DataTypes.Order storage order = getOrderById(orderId, orders);\n        require(isOrderSeller(sellerId, order), \"not order seller\");\n        require(order.state == DataTypes.OrderState.UNCONFIRMED);\n        order.setState(DataTypes.OrderState.CONFIRMED);\n    }\n\n    function executeAutoRefund(\n        uint256 orderId,\n        uint256 buyerId,\n        uint256 selfRefundDelay,\n        mapping(uint256 => DataTypes.Order) storage orders\n    ) external returns (uint256, IERC20) {\n        DataTypes.Order storage order = getOrderById(orderId, orders);\n        require(isOrderBuyer(buyerId, order), \"not order seller\");\n        require(order.state == DataTypes.OrderState.UNCONFIRMED);\n        require(order.createdAt + selfRefundDelay >= block.timestamp);\n        order.setState(DataTypes.OrderState.DONE);\n        return (\n            order.package.price + order.toTrial + order.toProceed,\n            order.currency\n        );\n    }\n\n    function executePayOrder(\n        uint256 orderId,\n        uint256 buyerId,\n        mapping(uint256 => DataTypes.Order) storage orders\n    )\n        external\n        returns (uint256, uint256, uint256, uint256, uint256, IERC20 currency)\n    {\n        DataTypes.Order storage order = getOrderById(orderId, orders);\n        require(isOrderBuyer(buyerId, order), \"not order buyer\");\n        require(order.state == DataTypes.OrderState.CONFIRMED);\n        order.setState(DataTypes.OrderState.DONE);\n        return (\n            order.package.price,\n            order.toTrial,\n            order.toProceed,\n            order.sellerId,\n            order.sellerFeesVersion,\n            order.currency\n        );\n    }\n\n    function calcOrderPrice(\n        DataTypes.OrderPriceParams memory params,\n        uint256 orderPrice\n    ) external pure returns (uint256, uint256, uint256) {\n        uint256 toTrial = orderPrice.percentMul(params.trialPercent) +\n            params.trialFlat;\n        uint256 toProceed = orderPrice.percentMul(params.trialPercent) +\n            params.trialFlat;\n        return (toTrial, toProceed, orderPrice + toTrial + toProceed);\n    }\n\n    function format(\n        DataTypes.Order storage order,\n        uint256 id\n    ) external view returns (OutputTypes.OrderOutput memory) {\n        return (\n            OutputTypes.OrderOutput({\n                metadata: order.metadata,\n                brief: order.brief,\n                sellerFeesVersion: order.sellerFeesVersion,\n                toTrial: order.toTrial,\n                toProceed: order.toProceed,\n                orderId: id,\n                createdAt: order.createdAt,\n                buyerId: order.buyerId,\n                sellerId: order.sellerId,\n                gigId: order.gigId,\n                reviewIds: order.reviewIds.values(),\n                package: order.package,\n                state: order.state,\n                currency: order.currency\n            })\n        );\n    }\n\n    function isOrderBuyer(\n        uint256 userId,\n        DataTypes.Order storage order\n    ) public view returns (bool) {\n        return (order.buyerId == userId);\n    }\n\n    function isOrderSeller(\n        uint256 userId,\n        DataTypes.Order storage order\n    ) public view returns (bool) {\n        return (order.sellerId == userId);\n    }\n}\n"
    },
    "contracts/protocol/libraries/logics/ParamsLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"hardhat/console.sol\";\n\nimport {EnumerableSet} from \"../../../imports/openzeppelin/contracts/EnumerableSet.sol\";\nimport {Errors} from \"../helpers/Errors.sol\";\nimport {InputTypes} from \"../types/InputTypes.sol\";\nimport {DataTypes} from \"../types/DataTypes.sol\";\n\n/**\n * @title  Params logic library\n * @author Blockswan\n * @notice Implements the logic for protocol params functions\n */\nlibrary ParamsLogic {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    function getEntryParams(\n        EnumerableSet.UintSet storage params,\n        mapping(uint256 => DataTypes.EntryParams) storage history\n    ) external view returns (DataTypes.EntryParams memory) {\n        return history[params.at(params.length() - 1)];\n    }\n\n    function getEntryParams(\n        EnumerableSet.UintSet storage params,\n        mapping(uint256 => DataTypes.EntryParams) storage history,\n        uint256 version\n    ) external view returns (DataTypes.EntryParams memory) {\n        return history[params.at(version)];\n    }\n\n    function updateEntryParams(\n        EnumerableSet.UintSet storage params,\n        mapping(uint256 => DataTypes.EntryParams) storage history,\n        DataTypes.EntryParams memory newParams\n    ) external {\n        uint256 newParamId = params.length();\n        params.add(newParamId);\n        history[newParamId] = newParams;\n    }\n\n    function getRetributionParams(\n        EnumerableSet.UintSet storage params,\n        mapping(uint256 => DataTypes.RetributionParams) storage history\n    ) external view returns (DataTypes.RetributionParams memory) {\n        return history[params.at(params.length() - 1)];\n    }\n\n    function getRetributionParams(\n        EnumerableSet.UintSet storage params,\n        mapping(uint256 => DataTypes.RetributionParams) storage history,\n        uint256 version\n    ) external view returns (DataTypes.RetributionParams memory) {\n        return history[params.at(version)];\n    }\n\n    function updateRetributionParams(\n        EnumerableSet.UintSet storage params,\n        mapping(uint256 => DataTypes.RetributionParams) storage history,\n        DataTypes.RetributionParams memory newParams\n    ) external {\n        uint256 newParamId = params.length();\n        params.add(newParamId);\n        history[newParamId] = newParams;\n    }\n\n    function getCreationParams(\n        EnumerableSet.UintSet storage params,\n        mapping(uint256 => DataTypes.CreationParams) storage history\n    ) external view returns (DataTypes.CreationParams memory) {\n        return history[params.at(params.length() - 1)];\n    }\n\n    function getCreationParams(\n        EnumerableSet.UintSet storage params,\n        mapping(uint256 => DataTypes.CreationParams) storage history,\n        uint256 version\n    ) external view returns (DataTypes.CreationParams memory) {\n        return history[params.at(version)];\n    }\n\n    function updateCreationParams(\n        EnumerableSet.UintSet storage params,\n        mapping(uint256 => DataTypes.CreationParams) storage history,\n        DataTypes.CreationParams memory newParams\n    ) external {\n        uint256 newParamId = params.length();\n        params.add(newParamId);\n        history[newParamId] = newParams;\n    }\n\n    function getPriceParams(\n        EnumerableSet.UintSet storage params,\n        mapping(uint256 => DataTypes.OrderPriceParams) storage history\n    ) external view returns (DataTypes.OrderPriceParams memory) {\n        return history[params.at(params.length() - 1)];\n    }\n\n    function getPriceParams(\n        EnumerableSet.UintSet storage params,\n        mapping(uint256 => DataTypes.OrderPriceParams) storage history,\n        uint256 version\n    ) external view returns (DataTypes.OrderPriceParams memory) {\n        return history[params.at(version)];\n    }\n\n    function updatePriceParams(\n        EnumerableSet.UintSet storage params,\n        mapping(uint256 => DataTypes.OrderPriceParams) storage history,\n        DataTypes.OrderPriceParams memory newParams\n    ) external {\n        uint256 newParamId = params.length();\n        params.add(newParamId);\n        history[newParamId] = newParams;\n    }\n\n    function getLatestVersion(\n        EnumerableSet.UintSet storage versions\n    ) external view returns (uint256) {\n        return versions.length() - 1;\n    }\n\n    function getDelayTimestamp(\n        EnumerableSet.UintSet storage params,\n        mapping(uint256 => DataTypes.DelayTimestamp) storage history\n    ) external view returns (DataTypes.DelayTimestamp memory) {\n        return history[params.at(params.length() - 1)];\n    }\n\n    function getDelayTimestamp(\n        EnumerableSet.UintSet storage params,\n        mapping(uint256 => DataTypes.DelayTimestamp) storage history,\n        uint256 version\n    ) external view returns (DataTypes.DelayTimestamp memory) {\n        return history[params.at(version)];\n    }\n\n    function updateDelayTimestamp(\n        EnumerableSet.UintSet storage params,\n        mapping(uint256 => DataTypes.DelayTimestamp) storage history,\n        DataTypes.DelayTimestamp memory newParams\n    ) external {\n        uint256 newParamId = params.length();\n        params.add(newParamId);\n        history[newParamId] = newParams;\n    }\n}\n"
    },
    "contracts/protocol/libraries/logics/UserDataLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Errors} from \"../helpers/Errors.sol\";\nimport {InputTypes} from \"../types/InputTypes.sol\";\nimport {DataTypes} from \"../types/DataTypes.sol\";\nimport {EnumerableSet} from \"../../../imports/openzeppelin/contracts/EnumerableSet.sol\";\n\n/**\n * @title UserData logic library\n * @author Blockswan\n * @notice Implements the logic for user data specific functions\n */\nlibrary UserDataLogic {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    function updateMetadata(\n        DataTypes.User storage user,\n        string memory metadata\n    ) external returns (bool) {\n        user.metadata = metadata;\n        return true;\n    }\n\n    function updateBuyerUntil(\n        DataTypes.User storage user,\n        uint256 buyerTimeAdded\n    ) external returns (bool) {\n        user.buyerUntil = block.timestamp + buyerTimeAdded;\n        return true;\n    }\n\n    function addBuyerInvites(\n        DataTypes.User storage user,\n        uint8 invitesAdded\n    ) external returns (bool) {\n        user.buyerInvites += invitesAdded;\n        return true;\n    }\n\n    function updateSellerUntil(\n        DataTypes.User storage user,\n        uint256 sellerTimeAdded\n    ) external returns (bool) {\n        user.sellerUntil = block.timestamp + sellerTimeAdded;\n        return true;\n    }\n\n    function addSellerInvites(\n        DataTypes.User storage user,\n        uint8 invitesAdded\n    ) external returns (bool) {\n        user.sellerInvites += invitesAdded;\n        return true;\n    }\n\n    function addGig(\n        DataTypes.User storage user,\n        uint256 newGigId\n    ) external returns (bool) {\n        user.gigIds.add(newGigId);\n        return true;\n    }\n\n    function addBuyerOrder(\n        DataTypes.User storage user,\n        uint256 newOrderId\n    ) external returns (bool) {\n        user.buyerOrderIds.add(newOrderId);\n        return true;\n    }\n}\n"
    },
    "contracts/protocol/libraries/logics/UserLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"hardhat/console.sol\";\n\nimport {EnumerableSet} from \"../../../imports/openzeppelin/contracts/EnumerableSet.sol\";\nimport {EnumerableMap} from \"../../../imports/openzeppelin/contracts/EnumerableMap.sol\";\nimport {Errors} from \"../helpers/Errors.sol\";\nimport {InputTypes} from \"../types/InputTypes.sol\";\nimport {OutputTypes} from \"../types/OutputTypes.sol\";\n\nimport {DataTypes} from \"../types/DataTypes.sol\";\nimport {InviterLogic} from \"./InviterLogic.sol\";\nimport {UserDataLogic} from \"./UserDataLogic.sol\";\n\nimport {IACLManager} from \"../../../interfaces/IACLManager.sol\";\n\n/**\n * @title User logic library\n * @author Blockswan\n * @notice Implements the logic for user specific functions\n */\nlibrary UserLogic {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\n    using InviterLogic for DataTypes.User;\n    using UserDataLogic for DataTypes.User;\n\n    function executeCreateUser(\n        EnumerableSet.AddressSet storage userIdToAddress,\n        EnumerableMap.AddressToUintMap storage userAddressToId,\n        mapping(address => DataTypes.User) storage users,\n        InputTypes.CreateUserInput memory params\n    ) external returns (bool) {\n        bool added = userIdToAddress.add(params.wallet);\n        userAddressToId.set(params.wallet, params.newId);\n        DataTypes.User storage newUser = users[params.wallet];\n        newUser.addInviter(params.inviterId);\n        newUser.updateMetadata(params.metadata);\n        require(added, Errors.ADDRESS_ALREADY_USED);\n\n        return true;\n    }\n\n    function executeBecomeBuyer(\n        EnumerableMap.AddressToUintMap storage userAddressToId,\n        mapping(address => DataTypes.User) storage users,\n        EnumerableSet.AddressSet storage userIdToAddress,\n        InputTypes.BecomeBuyerInput memory inputParams\n    ) external returns (bool) {\n        DataTypes.User storage user = getUserByAddress(\n            inputParams.account,\n            userAddressToId,\n            userIdToAddress,\n            users\n        );\n        user.updateBuyerUntil(inputParams.buyerTimeAdded);\n        user.addBuyerInvites(inputParams.invitationEarned);\n        return true;\n    }\n\n    function executeBecomeSeller(\n        EnumerableMap.AddressToUintMap storage userAddressToId,\n        mapping(address => DataTypes.User) storage users,\n        EnumerableSet.AddressSet storage userIdToAddress,\n        InputTypes.BecomeSellerInput memory inputParams\n    ) external returns (bool) {\n        DataTypes.User storage user = getUserByAddress(\n            inputParams.account,\n            userAddressToId,\n            userIdToAddress,\n            users\n        );\n        user.updateSellerUntil(inputParams.sellerTimeAdded);\n        user.addSellerInvites(inputParams.invitationEarned);\n        return true;\n    }\n\n    function getUserById(\n        uint256 userId,\n        EnumerableSet.AddressSet storage userIdToAddress,\n        mapping(address => DataTypes.User) storage users\n    ) public view returns (DataTypes.User storage) {\n        return (users[userIdToAddress.at(userId)]);\n    }\n\n    function getUserByAddress(\n        address account,\n        EnumerableMap.AddressToUintMap storage userAddressToId,\n        EnumerableSet.AddressSet storage userIdToAddress,\n        mapping(address => DataTypes.User) storage users\n    ) public view returns (DataTypes.User storage) {\n        require(isUserExisting(userAddressToId, account), \"No such userId\");\n\n        DataTypes.User storage user = getUserById(\n            userAddressToId.get(account),\n            userIdToAddress,\n            users\n        );\n        return user;\n    }\n\n    function isUserExisting(\n        EnumerableMap.AddressToUintMap storage userAddressToId,\n        address account\n    ) public view returns (bool) {\n        return (userAddressToId.contains(account));\n    }\n\n    function format(\n        DataTypes.User storage user,\n        uint256 id,\n        address wallet\n    ) external view returns (OutputTypes.UserOutput memory) {\n        return (\n            OutputTypes.UserOutput({\n                metadata: user.metadata,\n                inviterId: user.inviterId,\n                buyerUntil: user.buyerUntil,\n                buyerInvites: user.buyerInvites,\n                sellerUntil: user.sellerUntil,\n                sellerInvites: user.sellerInvites,\n                userId: id,\n                wallet: wallet,\n                gigIds: user.gigIds.values(),\n                offerIds: user.offerIds.values(),\n                bidIds: user.bidIds.values(),\n                buyerOrderIds: user.buyerOrderIds.values(),\n                gigReviewsIds: user.gigReviewsIds.values(),\n                userReviewsIds: user.userReviewsIds.values(),\n                reviewsIds: user.reviewsIds.values()\n            })\n        );\n    }\n\n    function executeAddGig(\n        uint256 gigId,\n        uint256 userId,\n        EnumerableSet.AddressSet storage userIdToAddress,\n        mapping(address => DataTypes.User) storage users\n    ) external returns (bool) {\n        bool success = getUserById(userId, userIdToAddress, users).addGig(\n            gigId\n        );\n        return success;\n    }\n\n    function isGigOwner(\n        uint256 userId,\n        uint256 gigId,\n        EnumerableSet.AddressSet storage userIdToAddress,\n        mapping(address => DataTypes.User) storage users\n    ) public view returns (bool) {\n        return\n            getUserById(userId, userIdToAddress, users).gigIds.contains(gigId);\n    }\n\n    function executeAddBuyerOrder(\n        uint256 orderId,\n        uint256 buyerId,\n        EnumerableSet.AddressSet storage userIdToAddress,\n        mapping(address => DataTypes.User) storage users\n    ) external returns (bool) {\n        bool success = getUserById(buyerId, userIdToAddress, users)\n            .addBuyerOrder(orderId);\n        return success;\n    }\n}\n"
    },
    "contracts/protocol/libraries/types/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Counters} from \"../../../imports/openzeppelin/contracts/Counters.sol\";\nimport {IERC20} from \"../../../imports/openzeppelin/contracts/IERC20.sol\";\nimport {GPv2SafeERC20} from \"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\";\nimport {EnumerableSet} from \"../../../imports/openzeppelin/contracts/EnumerableSet.sol\";\n\nlibrary DataTypes {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    enum OrderState {\n        UNCONFIRMED,\n        CONFIRMED,\n        TRIAL,\n        PENDING,\n        DONE\n        // UPDATING\n    }\n\n    struct DelayTimestamp {\n        uint256 selfRefund;\n        uint256 closeTrial;\n        uint256 endTrial;\n    }\n\n    struct User {\n        string metadata;\n        uint256 inviterId;\n        uint256 buyerUntil;\n        uint256 buyerInvites;\n        uint256 sellerUntil;\n        uint256 sellerInvites;\n        EnumerableSet.UintSet gigIds;\n        EnumerableSet.UintSet offerIds;\n        EnumerableSet.UintSet bidIds;\n        EnumerableSet.UintSet buyerOrderIds;\n        EnumerableSet.UintSet gigReviewsIds;\n        EnumerableSet.UintSet userReviewsIds;\n        EnumerableSet.UintSet reviewsIds;\n    }\n\n    struct Package {\n        uint256 price;\n        uint256 timeDelivery;\n    }\n\n    struct Gig {\n        string metadata;\n        uint256 createdAt;\n        bool isPaused;\n        EnumerableSet.UintSet reviewIds;\n        EnumerableSet.UintSet orderIds;\n        Counters.Counter successSell;\n        Counters.Counter failedSell;\n        Package[3] packages;\n    }\n\n    struct Order {\n        string metadata;\n        string brief;\n        uint256 sellerFeesVersion;\n        uint256 toTrial;\n        uint256 toProceed;\n        uint256 createdAt;\n        uint256 buyerId;\n        uint256 sellerId;\n        uint256 gigId;\n        Package package;\n        OrderState state;\n        IERC20 currency;\n        EnumerableSet.UintSet reviewIds;\n    }\n\n    struct Review {\n        uint256 authorId;\n        string metadata;\n    }\n\n    struct ServiceProvider {\n        address wallet;\n        string endpoint;\n    }\n\n    struct EntryParams {\n        uint256 currencyValue;\n        uint256 timeAdded;\n        uint256 xpEarned;\n        uint8 invitationEarned;\n    }\n\n    struct CreationParams {\n        uint256 currencyValue;\n        uint256 xpEarned;\n    }\n\n    struct OrderPriceParams {\n        uint256 trialFlat;\n        uint256 trialPercent;\n        uint256 proceedFlat;\n        uint256 proceedPercent;\n    }\n\n    struct RetributionParams {\n        uint256 affiliate;\n        uint256 lvl0AffiliateShare;\n    }\n}\n"
    },
    "contracts/protocol/libraries/types/InputTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n//import {Counters} from \"../../../imports/openzeppelin/contracts/Counters.sol\";\nimport {IERC20} from \"../../../imports/openzeppelin/contracts/IERC20.sol\";\nimport {GPv2SafeERC20} from \"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\";\nimport {DataTypes} from \"./DataTypes.sol\";\n\nlibrary InputTypes {\n    struct CreateUserInput {\n        uint256 newId;\n        string metadata;\n        uint256 inviterId;\n        address wallet;\n    }\n\n    struct CreateGigInput {\n        uint256 newId;\n        DataTypes.Package[3] packages;\n        string metadata;\n    }\n\n    struct OrderFeesInput {\n        uint256 sellerFeesVersion;\n        uint256 toTrial;\n        uint256 toProceed;\n    }\n\n    struct OrderRelationInput {\n        uint256 newId;\n        uint256 buyerId;\n        uint256 sellerId;\n        uint256 gigId;\n    }\n\n    struct CreateOrderInput {\n        uint256 sellerId;\n        uint256 buyerId;\n        uint256 gigId;\n        uint256 packageId;\n        string brief;\n    }\n\n    struct ExecuteCreateOrderInput {\n        string metadata;\n        string brief;\n        OrderFeesInput fees;\n        OrderRelationInput relations;\n        DataTypes.Package package;\n        IERC20 currency;\n    }\n\n    struct BecomeBuyerInput {\n        address account;\n        uint256 buyerTimeAdded;\n        uint8 invitationEarned;\n    }\n\n    struct BecomeSellerInput {\n        address account;\n        uint256 sellerTimeAdded;\n        uint8 invitationEarned;\n    }\n\n    struct CalcInvitersRewardsInput {\n        uint256 currencyValue;\n        uint256 affiliateShare;\n        uint256 lvl0AffiliateShare;\n    }\n\n    struct ProcessPaymentInput {\n        address caller;\n        address inviter0;\n        address inviter1;\n        uint256 inviter0Rewards;\n        uint256 inviter1Rewards;\n        uint256 remainingRewards;\n    }\n}\n"
    },
    "contracts/protocol/libraries/types/OutputTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n//import {Counters} from \"../../../imports/openzeppelin/contracts/Counters.sol\";\nimport {IERC20} from \"../../../imports/openzeppelin/contracts/IERC20.sol\";\nimport {GPv2SafeERC20} from \"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\";\nimport {DataTypes} from \"./DataTypes.sol\";\n\nlibrary OutputTypes {\n    struct CalcInvitersRewardsOutput {\n        uint256 inviter0Rewards;\n        uint256 inviter1Rewards;\n        uint256 remainingRewards;\n    }\n\n    struct PrepareBecomeRoleOutput {\n        address inviter0;\n        address inviter1;\n        DataTypes.EntryParams entryParams;\n        DataTypes.RetributionParams retributionParams;\n        CalcInvitersRewardsOutput rewards;\n    }\n\n    struct GigOutput {\n        uint256 gigId;\n        string metadata;\n        uint256 createdAt;\n        uint256 successSell;\n        uint256 failedSell;\n        uint256[] reviewIds;\n        uint256[] orderIds;\n        DataTypes.Package[3] packages;\n    }\n\n    struct UserOutput {\n        string metadata;\n        uint256 inviterId;\n        uint256 buyerUntil;\n        uint256 buyerInvites;\n        uint256 sellerUntil;\n        uint256 sellerInvites;\n        uint256 userId;\n        address wallet;\n        uint256[] gigIds;\n        uint256[] offerIds;\n        uint256[] bidIds;\n        uint256[] buyerOrderIds;\n        uint256[] gigReviewsIds;\n        uint256[] userReviewsIds;\n        uint256[] reviewsIds;\n    }\n\n    struct OrderOutput {\n        string metadata;\n        string brief;\n        uint256 sellerFeesVersion;\n        uint256 toTrial;\n        uint256 toProceed;\n        uint256 orderId;\n        uint256 createdAt;\n        uint256 buyerId;\n        uint256 sellerId;\n        uint256 gigId;\n        uint256[] reviewIds;\n        DataTypes.Package package;\n        DataTypes.OrderState state;\n        IERC20 currency;\n    }\n\n    struct PopulatedGig {\n        uint256 gigId;\n        string metadata;\n        uint256 createdAt;\n        uint256 successSell;\n        uint256 failedSell;\n        DataTypes.Review[] reviews;\n        DataTypes.Package[] packages;\n    }\n\n    struct PopulatedUser {\n        uint256 userId;\n        uint256 buyerUntil;\n        uint256 buyerInvites;\n        uint256 sellerUntil;\n        uint256 sellerInvites;\n        uint256 bswanBalance;\n        uint256 usdcBalance;\n        uint256 xpBalance;\n        uint256[] gigIds;\n        address wallet;\n        bool isBuyer;\n        bool isSeller;\n        bool isJudge;\n        UserOutput[] inviters;\n    }\n}\n"
    },
    "contracts/protocol/order/Order.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {GPv2SafeERC20} from \"../../imports/gnosis/contracts/GPv2SafeERC20.sol\";\nimport {EnumerableSet} from \"../../imports/openzeppelin/contracts/EnumerableSet.sol\";\nimport {EnumerableMap} from \"../../imports/openzeppelin/contracts/EnumerableMap.sol\";\nimport {DataTypes} from \"../libraries/types/DataTypes.sol\";\nimport {OutputTypes} from \"../libraries/types/OutputTypes.sol\";\nimport {InputTypes} from \"../libraries/types/InputTypes.sol\";\nimport {IERC20} from \"../../imports/openzeppelin/contracts/IERC20.sol\";\nimport {OrderLogic} from \"../libraries/logics/OrderLogic.sol\";\nimport {InviterLogic} from \"../libraries/logics/InviterLogic.sol\";\n\nimport {RegistryKeys} from \"../libraries/helpers/RegistryKeys.sol\";\nimport {XPKeys} from \"../libraries/helpers/XPKeys.sol\";\nimport {OrderStorage} from \"./OrderStorage.sol\";\nimport {ProviderContract} from \"../configuration/ProviderContract.sol\";\nimport {IProtocolConfigurator} from \"../../interfaces/IProtocolConfigurator.sol\";\nimport {IAddressProvider} from \"../../interfaces/IAddressProvider.sol\";\nimport {IUser} from \"../../interfaces/IUser.sol\";\nimport {IBSWAN} from \"../../interfaces/IBSWAN.sol\";\nimport {IGig} from \"../../interfaces/IGig.sol\";\n\n/**\n * @title\tOrder contract\n * @author\tBlockswan\n * @notice  Order data within an Blockswan protocol's marketplace\n * - Users can:\n *   # create new orders\n *   # manage their orders\n * @dev To be covered by a proxy contract, owned by the addressProvider of the specific marketplace\n * @dev All admin functions are callable by the protocolConfigurator contract defined also in the\n *   addressProvider\n **/\n\ncontract Order is OrderStorage, ProviderContract {\n    using EnumerableSet for EnumerableSet.UintSet;\n    using OrderLogic for DataTypes.Order;\n    using GPv2SafeERC20 for IERC20;\n\n    /**\n     * @dev Constructor.\n     * @param provider The address of the AddressProvider\n     */\n    constructor(IAddressProvider provider) ProviderContract(provider) {}\n\n    function getOrderCount() public view virtual returns (uint256) {\n        uint256 count = _orderIds.length();\n        return count;\n    }\n\n    function getOrderById(\n        uint256 orderId\n    ) public view virtual returns (OutputTypes.OrderOutput memory) {\n        DataTypes.Order storage order = OrderLogic.getOrderById(\n            orderId,\n            _orders\n        );\n        return order.format(orderId);\n    }\n\n    function getOrderList()\n        external\n        view\n        virtual\n        returns (OutputTypes.OrderOutput[] memory)\n    {\n        uint256 len = getOrderCount();\n        OutputTypes.OrderOutput[]\n            memory orderList = new OutputTypes.OrderOutput[](len);\n        for (uint256 i = 0; i < len; i++) {\n            orderList[i] = getOrderById(i);\n        }\n        return orderList;\n    }\n\n    function createOrder(\n        InputTypes.CreateOrderInput memory input\n    ) external onlyStillBuyer {\n        IUser UserContract = IUser(fetchContract(RegistryKeys.USER));\n        require(\n            isGigOwner(input.sellerId, input.gigId, UserContract),\n            \"the gigId is not owned by this sellerId\"\n        );\n        require(\n            isStillSeller(UserContract.getAddressById(input.sellerId)),\n            \"can only conntract with a seller\"\n        );\n        address caller = _msgSender();\n        uint256 newId = getOrderCount();\n        // add the relation to the seller gig and get the packages/metadata\n        (, string memory metadata, DataTypes.Package memory package) = IGig(\n            fetchContract(RegistryKeys.GIG)\n        ).createOrder(newId, input.gigId, input.packageId);\n        // add the relation to the buyer orders\n        UserContract.createBuyerOrder(input.buyerId, newId);\n\n        // save the order\n        _createOrder(\n            caller,\n            metadata,\n            package,\n            InputTypes.OrderRelationInput({\n                newId: newId,\n                buyerId: input.buyerId,\n                sellerId: input.sellerId,\n                gigId: input.gigId\n            }),\n            input\n        );\n        // give xp\n        _giveXP(XPKeys.CREATE_ORDER, caller);\n    }\n\n    function confirmOrder(uint256 orderId, uint256 sellerId) external {\n        address caller = _msgSender();\n        IUser UserContract = IUser(fetchContract(RegistryKeys.USER));\n        require(\n            isCallerUser(caller, sellerId, UserContract),\n            \"invalid sellerId\"\n        );\n        OrderLogic.executeConfirmOrder(orderId, sellerId, _orders);\n    }\n\n    function autoRefund(uint256 orderId, uint256 buyerId) external {\n        address caller = _msgSender();\n        IUser UserContract = IUser(fetchContract(RegistryKeys.USER));\n        require(\n            isCallerUser(caller, buyerId, UserContract),\n            \"invalid buyerId \"\n        );\n        DataTypes.DelayTimestamp memory delays = getProtocolDelayTimestamp();\n        (uint256 paidByBuyer, IERC20 currency) = OrderLogic.executeAutoRefund(\n            orderId,\n            buyerId,\n            delays.selfRefund,\n            _orders\n        );\n        _transfer(paidByBuyer, caller, currency);\n    }\n\n    function payOrder(uint256 orderId, uint256 buyerId) external {\n        address buyer = _msgSender();\n        IUser UserContract = IUser(fetchContract(RegistryKeys.USER));\n        require(isCallerUser(buyer, buyerId, UserContract), \"invalid buyerId \");\n        (\n            uint256 orderPrice,\n            uint256 trialRefund,\n            uint256 proceedFees,\n            uint256 sellerId,\n            uint256 sellerFeesVersion,\n            IERC20 currency\n        ) = OrderLogic.executePayOrder(orderId, buyerId, _orders);\n        _transfer(trialRefund, buyer, currency);\n        // get the retribution params\n        DataTypes.RetributionParams\n            memory retributionParams = getProtocolRetributionParams();\n        // process payment for buyer proceed fees\n        _processOrderPayment(\n            proceedFees,\n            buyer,\n            retributionParams,\n            UserContract\n        );\n        (, uint256 toProceed, ) = OrderLogic.calcOrderPrice(\n            IProtocolConfigurator(\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\n            ).getSellerOrderFees(sellerFeesVersion),\n            orderPrice\n        );\n        address sellerAccount = UserContract.getAddressById(sellerId);\n        _transfer(orderPrice - toProceed, sellerAccount, currency);\n        _processOrderPayment(\n            toProceed,\n            sellerAccount,\n            retributionParams,\n            UserContract\n        );\n    }\n\n    function _processOrderPayment(\n        uint256 currencyValue,\n        address account,\n        DataTypes.RetributionParams memory retributionParams,\n        IUser UserContract\n    ) internal {\n        (address inviter0, address inviter1) = getInvitersByAddress(\n            account,\n            UserContract\n        );\n        OutputTypes.CalcInvitersRewardsOutput memory rewards = InviterLogic\n            .calcInvitersRewards(\n                InputTypes.CalcInvitersRewardsInput({\n                    currencyValue: currencyValue,\n                    affiliateShare: retributionParams.affiliate,\n                    lvl0AffiliateShare: retributionParams.lvl0AffiliateShare\n                })\n            );\n        _processPayment(\n            InputTypes.ProcessPaymentInput({\n                caller: address(this),\n                inviter0: inviter0,\n                inviter1: inviter1,\n                inviter0Rewards: rewards.inviter0Rewards,\n                inviter1Rewards: rewards.inviter1Rewards,\n                remainingRewards: rewards.remainingRewards\n            })\n        );\n        _giveXP(XPKeys.PAY_ORDER, account);\n    }\n\n    function getInvitersByAddress(\n        address account,\n        IUser UserContract\n    ) public view returns (address, address) {\n        return UserContract.getInvitersByUserAddress(account);\n    }\n\n    function getInvitersById(\n        uint256 userId\n    ) public view returns (address, address) {\n        return IUser(fetchContract(RegistryKeys.USER)).getInvitersById(userId);\n    }\n\n    function _createOrder(\n        address caller,\n        string memory metadata,\n        DataTypes.Package memory package,\n        InputTypes.OrderRelationInput memory relations,\n        InputTypes.CreateOrderInput memory input\n    ) internal {\n        // get the order creation params\n        (\n            DataTypes.OrderPriceParams memory orderParams,\n            uint256 sellerFeesVersion\n        ) = IProtocolConfigurator(\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\n            ).getOrderCreationParams();\n\n        (uint256 toTrial, uint256 toProceed, uint256 total) = OrderLogic\n            .calcOrderPrice(orderParams, package.price);\n\n        IERC20 currency = IERC20(\n            IBSWAN(fetchContract(RegistryKeys.DAT)).currency()\n        );\n\n        OrderLogic.executeCreateOrder(\n            _orderIds,\n            _orders,\n            InputTypes.ExecuteCreateOrderInput({\n                metadata: metadata,\n                brief: input.brief,\n                fees: InputTypes.OrderFeesInput({\n                    sellerFeesVersion: sellerFeesVersion,\n                    toTrial: toTrial,\n                    toProceed: toProceed\n                }),\n                relations: relations,\n                package: package,\n                currency: currency\n            })\n        );\n        // send fund to contract\n        _sendFundToContract(total, caller, currency);\n    }\n\n    function _sendFundToContract(\n        uint256 amount,\n        address caller,\n        IERC20 currency\n    ) internal {\n        currency.safeTransferFrom(caller, address(this), amount);\n    }\n\n    function _transfer(uint256 amount, address _to, IERC20 currency) internal {\n        currency.safeTransfer(_to, amount);\n    }\n\n    function isCallerUser(\n        address caller,\n        uint256 userId,\n        IUser UserContract\n    ) public view returns (bool) {\n        return UserContract.getIdByAddress(caller) == userId;\n    }\n}\n"
    },
    "contracts/protocol/order/OrderStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {EnumerableSet} from \"../../imports/openzeppelin/contracts/EnumerableSet.sol\";\nimport {EnumerableMap} from \"../../imports/openzeppelin/contracts/EnumerableMap.sol\";\nimport {DataTypes} from \"../libraries/types/DataTypes.sol\";\n\n/**\n * @title OrderStorage\n * @author Blockswan\n * @notice Contract used as storage of the order contract.\n * @dev It defines the storage layout of the order contract.\n */\ncontract OrderStorage {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    // set of order Ids\n    EnumerableSet.UintSet internal _orderIds;\n\n    // Map of the order id to the order data (orderId => Order)\n    mapping(uint256 => DataTypes.Order) internal _orders;\n}\n"
    },
    "contracts/protocol/user/User.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"hardhat/console.sol\";\n\nimport {UserStorage} from \"./UserStorage.sol\";\nimport {IUser} from \"../../interfaces/IUser.sol\";\nimport {IAddressProvider} from \"../../interfaces/IAddressProvider.sol\";\nimport {IProtocolConfigurator} from \"../../interfaces/IProtocolConfigurator.sol\";\nimport {IACLManager} from \"../../interfaces/IACLManager.sol\";\nimport {IBSWAN} from \"../../interfaces/IBSWAN.sol\";\n\nimport {InputTypes} from \"../libraries/types/InputTypes.sol\";\nimport {OutputTypes} from \"../libraries/types/OutputTypes.sol\";\n\nimport {UserLogic} from \"../libraries/logics/UserLogic.sol\";\nimport {InviterLogic} from \"../libraries/logics/InviterLogic.sol\";\n\nimport {Errors} from \"../libraries/helpers/Errors.sol\";\nimport {RegistryKeys} from \"../libraries/helpers/RegistryKeys.sol\";\nimport {RoleKeys} from \"../libraries/helpers/RoleKeys.sol\";\nimport {XPKeys} from \"../libraries/helpers/XPKeys.sol\";\n\nimport {DataTypes} from \"../libraries/types/DataTypes.sol\";\nimport {ProviderContract} from \"../configuration/ProviderContract.sol\";\n\nimport {EnumerableSet} from \"../../imports/openzeppelin/contracts/EnumerableSet.sol\";\nimport {EnumerableMap} from \"../../imports/openzeppelin/contracts/EnumerableMap.sol\";\n\n/**\n * @title\tUser contract\n * @author\tBlockswan\n * @notice  User data within an Blockswan protocol's marketplace\n * - Users can:\n *   # login\n *   # edit profile\n *   # invite users\n *   # choose affiliates\n *   # get the access rights to the protocol\n * @dev To be covered by a proxy contract, owned by the addressProvider of the specific marketplace\n * @dev All admin functions are callable by the protocolConfigurator contract defined also in the\n *   addressProvider\n **/\n\ncontract User is UserStorage, IUser, ProviderContract {\n    using UserLogic for DataTypes.User;\n    using UserLogic for EnumerableMap.AddressToUintMap;\n    using InviterLogic for DataTypes.User;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\n\n    /**\n     * @dev Constructor.\n     * @param provider The address of the AddressProvider\n     */\n    constructor(IAddressProvider provider) ProviderContract(provider) {}\n\n    modifier onlyUser() {\n        require(\n            _userAddressToId.isUserExisting(_msgSender()),\n            \"must have created an account\"\n        );\n        _;\n    }\n\n    /// @inheritdoc IUser\n    function getUsersCount() public view virtual override returns (uint256) {\n        uint256 count = _userIdToAddress.length();\n        return count;\n    }\n\n    /// @inheritdoc IUser\n    function getIdByAddress(\n        address account\n    ) public view override returns (uint256) {\n        return (_userAddressToId.get(account));\n    }\n\n    /// @inheritdoc IUser\n    function getAddressById(\n        uint256 userId\n    ) public view virtual override returns (address) {\n        address userAddress = _userIdToAddress.at(userId);\n        return userAddress;\n    }\n\n    /// @inheritdoc IUser\n    function getUserById(\n        uint256 userId\n    ) public view virtual override returns (OutputTypes.UserOutput memory) {\n        DataTypes.User storage user = _users[_userIdToAddress.at(userId)];\n        return user.format(userId, getAddressById(userId));\n    }\n\n    /// @inheritdoc IUser\n    function getUserByAddress(\n        address pubKey\n    ) public view virtual override returns (OutputTypes.UserOutput memory) {\n        DataTypes.User storage user = _users[pubKey];\n        return user.format(_userAddressToId.get(pubKey), pubKey);\n    }\n\n    /// @inheritdoc IUser\n    function getUserList()\n        external\n        view\n        virtual\n        override\n        returns (OutputTypes.UserOutput[] memory)\n    {\n        uint256 len = getUsersCount();\n        OutputTypes.UserOutput[] memory userList = new OutputTypes.UserOutput[](\n            len\n        );\n        for (uint256 i = 0; i < len; i++) {\n            userList[i] = getUserById(i);\n        }\n        return userList;\n    }\n\n    /// @inheritdoc IUser\n    function createUser(\n        string memory metadata,\n        uint256 inviterId\n    ) external override {\n        uint256 totalUser = getUsersCount();\n        require(\n            totalUser == 0 ? inviterId == 0 : inviterId < totalUser,\n            Errors.INVALID_INVITER_ID\n        );\n\n        uint256 newId = totalUser;\n        InputTypes.CreateUserInput memory userInput = InputTypes\n            .CreateUserInput({\n                newId: newId,\n                metadata: metadata,\n                inviterId: inviterId,\n                wallet: _msgSender()\n            });\n        bool isCreated = UserLogic.executeCreateUser(\n            _userIdToAddress,\n            _userAddressToId,\n            _users,\n            userInput\n        );\n        require(\n            isCreated && newId == getUsersCount() - 1,\n            Errors.INVALID_USER_ID\n        );\n        emit UserAdded(newId, _msgSender(), userInput);\n    }\n\n    function becomeBuyer() external {\n        address caller = _msgSender();\n        bool isBuyer = hasProtocolRole(RoleKeys.BUYER_ROLE, caller);\n        require(!isBuyer, Errors.RESTRICTED_TO_BUYER);\n\n        OutputTypes.PrepareBecomeRoleOutput\n            memory becomeBuyerParams = _prepareRoleParams(\n                RoleKeys.BUYER_ROLE,\n                caller\n            );\n        grantProtocolRole(RoleKeys.BUYER_ROLE, caller);\n        bool isBecomeBuyer = _userAddressToId.executeBecomeBuyer(\n            _users,\n            _userIdToAddress,\n            InputTypes.BecomeBuyerInput({\n                account: caller,\n                buyerTimeAdded: becomeBuyerParams.entryParams.timeAdded,\n                invitationEarned: becomeBuyerParams.entryParams.invitationEarned\n            })\n        );\n        require(isBecomeBuyer, Errors.FAILED_BECOMING_BUYER);\n        _giveXP(XPKeys.BECOME_BUYER, caller);\n        _processPayment(\n            InputTypes.ProcessPaymentInput({\n                caller: caller,\n                inviter0: becomeBuyerParams.inviter0,\n                inviter1: becomeBuyerParams.inviter1,\n                inviter0Rewards: becomeBuyerParams.rewards.inviter0Rewards,\n                inviter1Rewards: becomeBuyerParams.rewards.inviter1Rewards,\n                remainingRewards: becomeBuyerParams.rewards.remainingRewards\n            })\n        );\n    }\n\n    function becomeSeller() external {\n        address caller = _msgSender();\n        bool isSeller = hasProtocolRole(RoleKeys.SELLER_ROLE, caller);\n        require(!isSeller, Errors.RESTRICTED_TO_SELLER);\n\n        OutputTypes.PrepareBecomeRoleOutput\n            memory becomeSellerParams = _prepareRoleParams(\n                RoleKeys.SELLER_ROLE,\n                caller\n            );\n        grantProtocolRole(RoleKeys.SELLER_ROLE, caller);\n        bool isBecomeSeller = _userAddressToId.executeBecomeSeller(\n            _users,\n            _userIdToAddress,\n            InputTypes.BecomeSellerInput({\n                account: caller,\n                sellerTimeAdded: becomeSellerParams.entryParams.timeAdded,\n                invitationEarned: becomeSellerParams\n                    .entryParams\n                    .invitationEarned\n            })\n        );\n        require(isBecomeSeller, Errors.FAILED_BECOMING_SELLER);\n        _giveXP(XPKeys.BECOME_SELLER, caller);\n        _processPayment(\n            InputTypes.ProcessPaymentInput({\n                caller: caller,\n                inviter0: becomeSellerParams.inviter0,\n                inviter1: becomeSellerParams.inviter1,\n                inviter0Rewards: becomeSellerParams.rewards.inviter0Rewards,\n                inviter1Rewards: becomeSellerParams.rewards.inviter1Rewards,\n                remainingRewards: becomeSellerParams.rewards.remainingRewards\n            })\n        );\n    }\n\n    /// @inheritdoc IUser\n    function getInvitersById(\n        uint256 userId\n    ) public view override returns (address, address) {\n        DataTypes.User storage user = UserLogic.getUserById(\n            userId,\n            _userIdToAddress,\n            _users\n        );\n        return user.getInvitersAddresses(_userIdToAddress, _users);\n    }\n\n    /// @inheritdoc IUser\n    function getInvitersByUserAddress(\n        address account\n    ) public view override returns (address, address) {\n        DataTypes.User storage user = UserLogic.getUserByAddress(\n            account,\n            _userAddressToId,\n            _userIdToAddress,\n            _users\n        );\n        return user.getInvitersAddresses(_userIdToAddress, _users);\n    }\n\n    function getBecomeBuyerParams()\n        internal\n        view\n        returns (DataTypes.EntryParams memory)\n    {\n        return\n            IProtocolConfigurator(\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\n            ).getBuyerEntryParams();\n    }\n\n    function getBecomeSellerParams()\n        internal\n        view\n        returns (DataTypes.EntryParams memory)\n    {\n        return\n            IProtocolConfigurator(\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\n            ).getSellerEntryParams();\n    }\n\n    function getGigCreationParams()\n        internal\n        view\n        returns (DataTypes.CreationParams memory)\n    {\n        return\n            IProtocolConfigurator(\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\n            ).getGigCreationParams();\n    }\n\n    function _prepareRoleParams(\n        bytes32 role,\n        address caller\n    ) internal view returns (OutputTypes.PrepareBecomeRoleOutput memory) {\n        DataTypes.EntryParams memory entryParams;\n        if (role == RoleKeys.BUYER_ROLE) {\n            entryParams = getBecomeBuyerParams();\n        } else {\n            entryParams = getBecomeSellerParams();\n        }\n        (address inviter0, address inviter1) = getInvitersByUserAddress(caller);\n        DataTypes.RetributionParams\n            memory retributionParams = getProtocolRetributionParams();\n        OutputTypes.CalcInvitersRewardsOutput memory rewards = InviterLogic\n            .calcInvitersRewards(\n                InputTypes.CalcInvitersRewardsInput({\n                    currencyValue: entryParams.currencyValue,\n                    affiliateShare: retributionParams.affiliate,\n                    lvl0AffiliateShare: retributionParams.lvl0AffiliateShare\n                })\n            );\n        return (\n            OutputTypes.PrepareBecomeRoleOutput({\n                inviter0: inviter0,\n                inviter1: inviter1,\n                entryParams: entryParams,\n                retributionParams: retributionParams,\n                rewards: rewards\n            })\n        );\n    }\n\n    /// @inheritdoc IUser\n    function createGig(\n        address caller,\n        uint256 newGigId\n    ) external override onlyProvider(RegistryKeys.GIG) returns (bool) {\n        bool success = UserLogic.executeAddGig(\n            newGigId,\n            getIdByAddress(caller),\n            _userIdToAddress,\n            _users\n        );\n        return success;\n    }\n\n    /// @inheritdoc IUser\n    function createBuyerOrder(\n        uint256 buyerId,\n        uint256 newOrderId\n    ) external override onlyProvider(RegistryKeys.ORDER) returns (bool) {\n        bool success = UserLogic.executeAddBuyerOrder(\n            newOrderId,\n            buyerId,\n            _userIdToAddress,\n            _users\n        );\n        return success;\n    }\n\n    /// @inheritdoc IUser\n    function isGigOwner(\n        uint256 userId,\n        uint256 gigId\n    ) public view override returns (bool) {\n        return UserLogic.isGigOwner(userId, gigId, _userIdToAddress, _users);\n    }\n}\n"
    },
    "contracts/protocol/user/UserStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {EnumerableSet} from \"../../imports/openzeppelin/contracts/EnumerableSet.sol\";\nimport {EnumerableMap} from \"../../imports/openzeppelin/contracts/EnumerableMap.sol\";\nimport {DataTypes} from \"../libraries/types/DataTypes.sol\";\n\n/**\n * @title UserStorage\n * @author Blockswan\n * @notice Contract used as storage of the user contract.\n * @dev It defines the storage layout of the user contract.\n */\ncontract UserStorage {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\n\n    //using l_account_logic for l_data_types.s_escrow;\n\n    // set of address by userId  (userId => address)\n    EnumerableSet.AddressSet internal _userIdToAddress;\n\n    // Map of address and their userId (address => userId)\n    EnumerableMap.AddressToUintMap internal _userAddressToId;\n\n    // Map of the public key used and their user data (address => User)\n    mapping(address => DataTypes.User) internal _users;\n}\n"
    },
    "contracts/protocol/xp/XP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ERC20} from \"../../imports/openzeppelin/contracts/ERC20.sol\";\nimport {EnumerableMap} from \"../../imports/openzeppelin/contracts/EnumerableMap.sol\";\nimport {ProviderContract} from \"../configuration/ProviderContract.sol\";\nimport {RegistryKeys} from \"../libraries/helpers/RegistryKeys.sol\";\nimport {RoleKeys} from \"../libraries/helpers/RoleKeys.sol\";\nimport {Errors} from \"../libraries/helpers/Errors.sol\";\nimport {IAddressProvider} from \"../../interfaces/IAddressProvider.sol\";\nimport {IXP} from \"../../interfaces/IXP.sol\";\n\ncontract XP is ERC20, ProviderContract, IXP {\n    using EnumerableMap for EnumerableMap.Bytes32ToUintMap;\n\n    EnumerableMap.Bytes32ToUintMap internal xpAmounts;\n\n    constructor(\n        IAddressProvider provider\n    ) ProviderContract(provider) ERC20(\"Experience\", \"XP\", 0) {}\n\n    /// @inheritdoc IXP\n    function setXpAmount(\n        bytes32 xpKey,\n        uint256 xpToReceive\n    ) external override onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\n        xpAmounts.set(xpKey, xpToReceive);\n    }\n\n    /// @inheritdoc IXP\n    function getXpAmount(\n        bytes32 xpKey\n    ) public view override returns (bool, uint256) {\n        (bool success, uint256 _amount) = xpAmounts.tryGet(xpKey);\n        return (success, _amount);\n    }\n\n    /// @inheritdoc IXP\n    function mint(\n        bytes32 xpKey,\n        address to\n    ) external override onlyProtocolRole(RoleKeys.XP_GIVER_ROLE) {\n        (bool success, uint256 _amount) = getXpAmount(xpKey);\n        require(success, Errors.NO_MATCHING_XP_KEY);\n        _mint(to, _amount);\n    }\n\n    function burn(address account, uint256 amount) external {\n        _burn(account, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override onlyProtocolRole(RoleKeys.XP_GIVER_ROLE) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n\n    // The following functions are overrides required by Solidity.\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override(ERC20) {\n        super._afterTokenTransfer(from, to, amount);\n    }\n\n    function _mint(address to, uint256 amount) internal override(ERC20) {\n        super._mint(to, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal override(ERC20) {\n        super._burn(account, amount);\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}