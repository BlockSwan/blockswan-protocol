{
    "address": "0x5F6CaC05CDF893f029b29F44d368eAeD40e573B6",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "contract IAddressProvider",
                    "name": "provider",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "userId",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "userAddress",
                    "type": "address"
                },
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "newId",
                            "type": "uint256"
                        },
                        {
                            "internalType": "string",
                            "name": "metadata",
                            "type": "string"
                        },
                        {
                            "internalType": "uint256",
                            "name": "inviterId",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address",
                            "name": "wallet",
                            "type": "address"
                        }
                    ],
                    "indexed": false,
                    "internalType": "struct InputTypes.CreateUserInput",
                    "name": "userData",
                    "type": "tuple"
                }
            ],
            "name": "UserAdded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "userId",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "userAddress",
                    "type": "address"
                },
                {
                    "components": [
                        {
                            "internalType": "string",
                            "name": "metadata",
                            "type": "string"
                        },
                        {
                            "internalType": "uint256",
                            "name": "inviterId",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "buyerUntil",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "buyerInvites",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "sellerUntil",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "sellerInvites",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "userId",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address",
                            "name": "wallet",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "gigIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "offerIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "bidIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "buyerOrderIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "gigReviewsIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "userReviewsIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "reviewsIds",
                            "type": "uint256[]"
                        }
                    ],
                    "indexed": false,
                    "internalType": "struct OutputTypes.UserOutput",
                    "name": "userData",
                    "type": "tuple"
                }
            ],
            "name": "UserEdited",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "ADDRESSES_PROVIDER",
            "outputs": [
                {
                    "internalType": "contract IAddressProvider",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "ADDRESS_PROVIDER",
            "outputs": [
                {
                    "internalType": "contract IAddressProvider",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "MAX_UINT",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "erc20",
                    "type": "address"
                }
            ],
            "name": "approve",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "becomeBuyer",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "becomeSeller",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "buyerId",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "newOrderId",
                    "type": "uint256"
                }
            ],
            "name": "createBuyerOrder",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "caller",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "newGigId",
                    "type": "uint256"
                }
            ],
            "name": "createGig",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "string",
                    "name": "metadata",
                    "type": "string"
                },
                {
                    "internalType": "uint256",
                    "name": "inviterId",
                    "type": "uint256"
                }
            ],
            "name": "createUser",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "_name",
                    "type": "bytes32"
                }
            ],
            "name": "fetchContract",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "userId",
                    "type": "uint256"
                }
            ],
            "name": "getAddressById",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "getIdByAddress",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "userId",
                    "type": "uint256"
                }
            ],
            "name": "getInvitersById",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "getInvitersByUserAddress",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "pubKey",
                    "type": "address"
                }
            ],
            "name": "getUserByAddress",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "string",
                            "name": "metadata",
                            "type": "string"
                        },
                        {
                            "internalType": "uint256",
                            "name": "inviterId",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "buyerUntil",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "buyerInvites",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "sellerUntil",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "sellerInvites",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "userId",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address",
                            "name": "wallet",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "gigIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "offerIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "bidIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "buyerOrderIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "gigReviewsIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "userReviewsIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "reviewsIds",
                            "type": "uint256[]"
                        }
                    ],
                    "internalType": "struct OutputTypes.UserOutput",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "userId",
                    "type": "uint256"
                }
            ],
            "name": "getUserById",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "string",
                            "name": "metadata",
                            "type": "string"
                        },
                        {
                            "internalType": "uint256",
                            "name": "inviterId",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "buyerUntil",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "buyerInvites",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "sellerUntil",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "sellerInvites",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "userId",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address",
                            "name": "wallet",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "gigIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "offerIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "bidIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "buyerOrderIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "gigReviewsIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "userReviewsIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "reviewsIds",
                            "type": "uint256[]"
                        }
                    ],
                    "internalType": "struct OutputTypes.UserOutput",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getUserList",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "string",
                            "name": "metadata",
                            "type": "string"
                        },
                        {
                            "internalType": "uint256",
                            "name": "inviterId",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "buyerUntil",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "buyerInvites",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "sellerUntil",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "sellerInvites",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "userId",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address",
                            "name": "wallet",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "gigIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "offerIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "bidIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "buyerOrderIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "gigReviewsIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "userReviewsIds",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "reviewsIds",
                            "type": "uint256[]"
                        }
                    ],
                    "internalType": "struct OutputTypes.UserOutput[]",
                    "name": "",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getUsersCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "_role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "hasProtocolRole",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "userId",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "gigId",
                    "type": "uint256"
                },
                {
                    "internalType": "contract IUser",
                    "name": "UserContract",
                    "type": "address"
                }
            ],
            "name": "isGigOwner",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "userId",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "gigId",
                    "type": "uint256"
                }
            ],
            "name": "isGigOwner",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "isStillBuyer",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "isStillSeller",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "kill",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract IAddressProvider",
                    "name": "_providerAddress",
                    "type": "address"
                }
            ],
            "name": "setProvider",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0x47e31d202b5e8d69c56a787f0c99edb67e831b886662bcb5453752b64829f582",
    "receipt": {
        "to": null,
        "from": "0xc783df8a850f42e7F7e57013759C285caa701eB6",
        "contractAddress": "0x5F6CaC05CDF893f029b29F44d368eAeD40e573B6",
        "transactionIndex": 0,
        "gasUsed": "2465269",
        "logsBloom": "0x
        "blockHash": "0xed52de55ff8b14082248b082996c8b6c07859dd707e9b543db6b3477ee062db8",
        "transactionHash": "0x47e31d202b5e8d69c56a787f0c99edb67e831b886662bcb5453752b64829f582",
        "logs": [
            {
                "transactionIndex": 0,
                "blockNumber": 33,
                "transactionHash": "0x47e31d202b5e8d69c56a787f0c99edb67e831b886662bcb5453752b64829f582",
                "address": "0x5F6CaC05CDF893f029b29F44d368eAeD40e573B6",
                "topics": [
                    "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x000000000000000000000000c783df8a850f42e7f7e57013759c285caa701eb6"
                ],
                "data": "0x",
                "logIndex": 0,
                "blockHash": "0xed52de55ff8b14082248b082996c8b6c07859dd707e9b543db6b3477ee062db8"
            }
        ],
        "blockNumber": 33,
        "cumulativeGasUsed": "2465269",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x20Ce94F404343aD2752A2D01b43fa407db9E0D00"],
    "numDeployments": 1,
    "solcInputHash": "11b40aac2c6ba2dcd5f594f6e6f90e03",
    "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"newId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inviterId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct InputTypes.CreateUserInput\",\"name\":\"userData\",\"type\":\"tuple\"}],\"name\":\"UserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inviterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerInvites\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerInvites\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"gigIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"offerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bidIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyerOrderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gigReviewsIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"userReviewsIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"reviewsIds\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct OutputTypes.UserOutput\",\"name\":\"userData\",\"type\":\"tuple\"}],\"name\":\"UserEdited\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"becomeBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"becomeSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newOrderId\",\"type\":\"uint256\"}],\"name\":\"createBuyerOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newGigId\",\"type\":\"uint256\"}],\"name\":\"createGig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inviterId\",\"type\":\"uint256\"}],\"name\":\"createUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"fetchContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"getAddressById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getIdByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"getInvitersById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getInvitersByUserAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pubKey\",\"type\":\"address\"}],\"name\":\"getUserByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inviterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerInvites\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerInvites\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"gigIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"offerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bidIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyerOrderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gigReviewsIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"userReviewsIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"reviewsIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct OutputTypes.UserOutput\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"getUserById\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inviterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerInvites\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerInvites\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"gigIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"offerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bidIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyerOrderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gigReviewsIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"userReviewsIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"reviewsIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct OutputTypes.UserOutput\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserList\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inviterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerInvites\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerInvites\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"gigIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"offerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bidIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyerOrderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gigReviewsIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"userReviewsIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"reviewsIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct OutputTypes.UserOutput[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasProtocolRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gigId\",\"type\":\"uint256\"},{\"internalType\":\"contract IUser\",\"name\":\"UserContract\",\"type\":\"address\"}],\"name\":\"isGigOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gigId\",\"type\":\"uint256\"}],\"name\":\"isGigOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isStillBuyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isStillSeller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"_providerAddress\",\"type\":\"address\"}],\"name\":\"setProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Blockswan\",\"details\":\"To be covered by a proxy contract, owned by the addressProvider of the specific marketplaceAll admin functions are callable by the protocolConfigurator contract defined also in the   addressProvider*\",\"kind\":\"dev\",\"methods\":{\"ADDRESSES_PROVIDER()\":{\"returns\":{\"_0\":\"The address of the AddressProvider\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"provider\":\"The address of the AddressProvider\"}},\"createBuyerOrder(uint256,uint256)\":{\"params\":{\"buyerId\":\"the id of the buyer\",\"newOrderId\":\"the new gig orderId.\"},\"returns\":{\"_0\":\"success the relation has been addded.*\"}},\"createGig(address,uint256)\":{\"params\":{\"caller\":\"the wallet creating the gig.\",\"newGigId\":\"the new gig id.\"},\"returns\":{\"_0\":\"success the relation has been addded.*\"}},\"createUser(string,uint256)\":{\"params\":{\"inviterId\":\"the userID of whom invited the newUser*\",\"metadata\":\"the user related information\"}},\"fetchContract(bytes32)\":{\"params\":{\"_name\":\"the bytes32 name of the contract\"}},\"getAddressById(uint256)\":{\"params\":{\"userId\":\"The id of the user.\"},\"returns\":{\"_0\":\"userAddress the wallet of the user*\"}},\"getIdByAddress(address)\":{\"params\":{\"account\":\"The address of the user\"},\"returns\":{\"_0\":\"userId The userId associated to the account address*\"}},\"getInvitersById(uint256)\":{\"params\":{\"userId\":\"the user id to get the inviters from\"},\"returns\":{\"_0\":\"address the pubkey of inviter0\",\"_1\":\"address the pubkey of inviter1*\"}},\"getInvitersByUserAddress(address)\":{\"params\":{\"account\":\"the wallet to get the inviters from\"},\"returns\":{\"_0\":\"address the pubkey of inviter0\",\"_1\":\"address the pubkey of inviter1*\"}},\"getUserByAddress(address)\":{\"params\":{\"pubKey\":\"The address as parameter.\"},\"returns\":{\"_0\":\"User the user linked to the public key*\"}},\"getUserById(uint256)\":{\"params\":{\"userId\":\"The id of the user.\"},\"returns\":{\"_0\":\"User The data associated to the user it*\"}},\"getUserList()\":{\"details\":\"It does not include dropped users\",\"returns\":{\"_0\":\"A data array of the underlying user.*\"}},\"getUsersCount()\":{\"returns\":{\"_0\":\"the current revision*\"}},\"isGigOwner(uint256,uint256)\":{\"params\":{\"gigId\":\"the gigId\",\"userId\":\"the user id to check if he own the gig\"},\"returns\":{\"_0\":\"bool if the gigId is owned by the given userId*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setProvider(address)\":{\"params\":{\"_providerAddress\":\"The address of the AddressProvider\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"User contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ADDRESSES_PROVIDER()\":{\"notice\":\"Returns the contract address of the IAddressProvider\"},\"createBuyerOrder(uint256,uint256)\":{\"notice\":\"add the order id to the user buyerOrderIds set.\"},\"createGig(address,uint256)\":{\"notice\":\"add the gig id to the user gigIds set.\"},\"createUser(string,uint256)\":{\"notice\":\"Create a new users with the msg.sender wallet\"},\"fetchContract(bytes32)\":{\"notice\":\"fetch the contract address from the ADDRESSS_PROVIDERthrows error if address === 0\"},\"getAddressById(uint256)\":{\"notice\":\"Returns the user wallet address.\"},\"getIdByAddress(address)\":{\"notice\":\"Returns the user id from a given address.\"},\"getInvitersById(uint256)\":{\"notice\":\"retrieves the inviters wallet for a given userId\"},\"getInvitersByUserAddress(address)\":{\"notice\":\"retrieves the inviters wallet for a given wallet account\"},\"getUserByAddress(address)\":{\"notice\":\"Returns the user for a given public key.\"},\"getUserById(uint256)\":{\"notice\":\"Returns the user data.\"},\"getUserList()\":{\"notice\":\"Returns the list of all initialized users.\"},\"getUsersCount()\":{\"notice\":\"Returns the current revision of the contract\"},\"isGigOwner(uint256,uint256)\":{\"notice\":\"return true if the gigId is owned by the given userId\"},\"kill()\":{\"notice\":\"kill the current address provider, only callable by the AddressProvider\"},\"setProvider(address)\":{\"notice\":\"set the provider address of the ProviderContract\"}},\"notice\":\"User data within an Blockswan protocol's marketplace - Users can:   # login   # edit profile   # invite users   # choose affiliates   # get the access rights to the protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/user/User.sol\":\"User\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/imports/aave/contracts/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/*^\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary PercentageMath {\\n    // Maximum percentage factor (100.00%)\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     **/\\n    function percentMul(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        assembly {\\n            if iszero(\\n                or(\\n                    iszero(percentage),\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\\n                PERCENTAGE_FACTOR\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     **/\\n    function percentDiv(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(\\n                                sub(not(0), div(percentage, 2)),\\n                                PERCENTAGE_FACTOR\\n                            )\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\\n                percentage\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x25d639d6a4c8aca57f987e5d94d761273dff9df8dcdeb7c8cefbb6250ecec927\",\"license\":\"BUSL-1.1\"},\"contracts/imports/gnosis/contracts/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../../openzeppelin/contracts/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developer^\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(from, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(freeMemoryPointer, 36),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTransferResult(\\n        IERC20 token\\n    ) private view returns (bool success) {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n            // Non-standard ERC20 transfer without return.\\n            case 0 {\\n                // NOTE: When the return data size is 0, verify that there\\n                // is code at the address. This is done in order to maintain\\n                // compatibility with Solidity calling conventions.\\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                if iszero(extcodesize(token)) {\\n                    revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                }\\n\\n                success := 1\\n            }\\n            // Standard ERC20 transfer returning boolean success value.\\n            case 32 {\\n                returndatacopy(0, 0, returndatasize())\\n\\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                // as `true` for a boolean. In order to stay compatible with\\n                // OpenZeppelin's `SafeERC20` library which is known to work\\n                // with the existing ERC20 implementation we care about,\\n                // make sure we return success for any non-zero return value\\n                // from the `transfer*` call.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            default {\\n                revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16a97de85622232442771b5974e025bbac9d4bb56fde737f58f3b363ac09ef5\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/imports/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\",\"keccak256\":\"0x632d89cfbd5134bb48ab9f27f8acb3ef6230858240a06c01860523508cce9502\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\",\"keccak256\":\"0x71f91e7829f04d6f5a39dd10258cc648427b2b542313622f782d39149d5e750d\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\",\"keccak256\":\"0xbe08f54c573afa66d30bddd5781ad651fa0ac388458375e4c4c3f04cf2baf6b1\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\",\"keccak256\":\"0x6edba116c3de120257f96a0e2cf286645d5b3317a06a20cbf933f1fa2166d7f6\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\",\"keccak256\":\"0x9f78e6c3f521399028621916f4fb097a485c053041141af27c978b67e6fb769a\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbe7e8c250bbebe46299f337b29c535ce00d67fe289eb03d84ebbd74934eec19f\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x3e3b5b4dd5f5483461605d0fa56c249517effc2500a4f6da288d6baabf01ed4d\",\"license\":\"MIT\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {IAccessControlEnumerable} from \\\"../imports/openzeppelin/contracts/IAccessControlEnumerable.sol\\\";\\n\\n/**\\n * @title IACLManager\\n * @author Blockswan\\n * @notice Defines the basic interface for the ACLManager\\n **/\\ninterface IACLManager is IAccessControlEnumerable {\\n    /**\\n     * @notice Set the role as admin of a specific role.\\n     * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\\n     * @param role The role to be managed by the admin role\\n     * @param adminRole The admin role\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0xd78c8b8344352eda17c37b4474398fcf7c2f08c6855c87de8d6e9439e4e1ca16\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressProvider.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title The interface for contracts to interact with the Blockswan Address Provider contract\\ninterface IAddressProvider {\\n    /**\\n     * @dev Emitted when a new marketplaceId is set.\\n     * @param oldMarketplaceId The address of the old marketplaceId\\n     * @param newMarketplaceId The address of the new marketplaceId\\n     */\\n    event MarketplaceIdSet(\\n        string indexed oldMarketplaceId,\\n        string indexed newMarketplaceId\\n    );\\n\\n    /**\\n     * @dev Emitted when a new contract is added to the AddressProvider.\\n     * @param _name The name assigned in the AddressProvider.\\n     * @param _address The address of the new contract\\n     */\\n    event ContractAdded(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a new contract is removed from the AddressProvider.\\n     * @param _name The contract name removed in the AddressProvider.\\n     * @param _address The address of the removed contract\\n     */\\n    event ContractRemoved(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a contract is upgraded in the AddressProvider.\\n     * @param _name The contract name upraded in the AddressProvider.\\n     * @param _oldAddress The old address prior upgrade\\n     * @param _newAddress The new address after upgrade\\n     */\\n    event ContractUpgraded(\\n        bytes32 _name,\\n        address _oldAddress,\\n        address _newAddress\\n    );\\n\\n    /**\\n     * @notice returns contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     * @return contractAddr - address of contract registered under given provider key\\n     */\\n    function getContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice overloaded getContract to return explicit version of contract */\\n    function getContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    function getContractVersionCount(\\n        bytes32 _name\\n    ) external view returns (uint);\\n\\n    /**\\n     * @dev addContract does two things:\\n     *      1.) registers the address of given ProviderContract in the registry\\n     *      2.) sets the registry address in given ProviderContract so only\\n     *          the registry can call functions on given contract\\n     */\\n    function addContract(bytes32 _name, address _address) external;\\n\\n    /**\\n     * @dev removes contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     */\\n    function removeContract(bytes32 _name) external;\\n\\n    /**\\n     * @notice replaces contract address registered under given key with provided address\\n     * @param _name - registry key for lookup\\n     * @param _newAddress - new contract address to register under given key\\n     */\\n    function upgradeContract(bytes32 _name, address _newAddress) external;\\n}\\n\",\"keccak256\":\"0x46fd1f2889b6a5fbd60209f90b44ced918175d5ef3b05e7d8dd526a4afd77bdc\",\"license\":\"MIT\"},\"contracts/interfaces/IBSWAN.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IBSWAN\\n * @author Blockswan\\n * @notice Defines the basic interface for the Blockswan Trust\\n **/\\ninterface IBSWAN is IERC20 {\\n    /**\\n     * @notice Update the DAT config.\\n     * @param _newOwner The new owner of the DAT\\n     * @param _revenueCommitmentBasisPoints the share of revenues tranfered to the buyback reserve\\n     * @param _minInvestment the min investment required in currency value\\n     */\\n    function updateConfig(\\n        address payable _newOwner,\\n        uint256 _revenueCommitmentBasisPoints,\\n        uint256 _minInvestment\\n    ) external;\\n\\n    /**\\n     * @notice Update the DAT config.\\n     * @param _currencyValue the quantity of currency to buy\\n     * @return tokenValue the quantity of BSWAN bought for the _currencyValue\\n     */\\n    function estimateBuyValue(\\n        uint256 _currencyValue\\n    ) external view returns (uint256);\\n\\n    /** @notice Purchase BSWAN tokens with the given amount of currency.\\n     * @param _to The account to receive the BSWAN tokens from this purchase.\\n     * @param _currencyValue How much currency to spend in order to buy BSWAN.\\n     * @param _minTokensBought Buy at least this many BSWAN tokens or the transaction reverts.\\n     * @dev _minTokensBought is necessary as the price will change if some elses transaction mines after\\n     * yours was submitted.\\n     */\\n    function buy(\\n        address _to,\\n        uint256 _currencyValue,\\n        uint256 _minTokensBought\\n    ) external payable;\\n\\n    /// Pay\\n    function estimatePayValue(\\n        uint256 _currencyValue\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Pay the organization on-chain.\\n     * @param _to The account which receives tokens for the contribution. If this address\\n     * is not authorized to receive tokens then they will be sent to the beneficiary account instead.\\n     * @param _currencyValue How much currency which was paid.\\n     */\\n    function pay(address _to, uint _currencyValue) external payable;\\n\\n    /// @notice The address of the token used as reserve in the bonding curve\\n    /// (e.g. the DAI contract)\\n    function currency() external returns (IERC20);\\n}\\n\",\"keccak256\":\"0xb07e5fcfdebb6b3f050ad1f172eb7923d06ce3727af5528f4acc236f87d9b146\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {IAccessControlEnumerable} from \\\"../imports/openzeppelin/contracts/IAccessControlEnumerable.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IProtocolConfigurator\\n * @author Blockswan\\n * @notice Defines the basic interface for the ProtocolConfigurator\\n **/\\ninterface IProtocolConfigurator {\\n    /**\\n     * @notice Retrieves the parameters when enterering the protocol as a buyer.\\n     * @return parameters The paramaters  when accessing the role status\\n     */\\n    function getBuyerEntryParams()\\n        external\\n        view\\n        returns (DataTypes.EntryParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getBuyerEntryParams(\\n        uint256 version\\n    ) external view returns (DataTypes.EntryParams memory);\\n\\n    /**\\n     * @notice Update the  parameters when enterering the protocol as as buyer.\\n     * @param newParams The new buyer entry paramaters\\n     */\\n    function updateBuyerEntryParams(\\n        DataTypes.EntryParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when enterering the protocol as a seller.\\n     * @return parameters The paramaters  when accessing the role status\\n     */\\n    function getSellerEntryParams()\\n        external\\n        view\\n        returns (DataTypes.EntryParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getSellerEntryParams(\\n        uint256 version\\n    ) external view returns (DataTypes.EntryParams memory);\\n\\n    /**\\n     * @notice Update the  parameters when enterering the protocol as as seller.\\n     * @param newParams The new buyer entry paramaters\\n     */\\n    function updateSellerEntryParams(\\n        DataTypes.EntryParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the retribution percentage values of the protocol.\\n     * @return retributions The retribution percentage values of the protocol.\\n     */\\n    function getRetributionParams()\\n        external\\n        view\\n        returns (DataTypes.RetributionParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getRetributionParams(\\n        uint256 version\\n    ) external view returns (DataTypes.RetributionParams memory);\\n\\n    /**\\n     * @notice Update the retributin  parameters of the protocol.\\n     * @param newParams The new retribution paramaters\\n     */\\n    function updateRetributionParams(\\n        DataTypes.RetributionParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when creating a gig.\\n     * @return parameters The parameters when creating a gig\\n     */\\n    function getGigCreationParams()\\n        external\\n        view\\n        returns (DataTypes.CreationParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getGigCreationParams(\\n        uint256 version\\n    ) external view returns (DataTypes.CreationParams memory);\\n\\n    /**\\n     * @notice Update the gig creation parameters of the protocol.\\n     * @param newParams The new gig creation paramaters\\n     */\\n    function updateGigCreationParams(\\n        DataTypes.CreationParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when creating an order.\\n     * @return parameters The parameters when creating an order.\\n     * @return sellerFeesParamsVersion The latest fee structur version that will be applied to the seller upon order completion.\\n     */\\n    function getOrderCreationParams()\\n        external\\n        view\\n        returns (DataTypes.OrderPriceParams memory, uint256);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getOrderCreationParams(\\n        uint256 version\\n    ) external view returns (DataTypes.OrderPriceParams memory, uint256);\\n\\n    /**\\n     * @notice Update the order creation parameters of the protocol.\\n     * @param newParams The new order creation paramaters\\n     */\\n    function updateOrderCreationParams(\\n        DataTypes.OrderPriceParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the protocol delay timestamp.\\n     * @return parameters The delay timestamp parametes\\n     */\\n    function getDelayTimestamp()\\n        external\\n        view\\n        returns (DataTypes.DelayTimestamp memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getDelayTimestamp(\\n        uint256 version\\n    ) external view returns (DataTypes.DelayTimestamp memory);\\n\\n    /**\\n     * @notice Update the delays timestamp parameters of the protocol.\\n     * @param newParams The new order creation paramaters\\n     */\\n    function updateDelayTimestamp(\\n        DataTypes.DelayTimestamp memory newParams\\n    ) external;\\n\\n    // extends the above function specifying a version to retrieve\\n    function getSellerOrderFees(\\n        uint256 version\\n    ) external view returns (DataTypes.OrderPriceParams memory);\\n}\\n\",\"keccak256\":\"0xdb9b99f681e942af09270c411de9cb7a0cebe3779f4efaa03436097e26705f8f\",\"license\":\"MIT\"},\"contracts/interfaces/IProviderContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\n\\ninterface IProviderContract {\\n    /**\\n     * @notice set the provider address of the ProviderContract\\n     * @param _providerAddress The address of the AddressProvider\\n     */\\n    function setProvider(IAddressProvider _providerAddress) external;\\n\\n    /**\\n     * @notice fetch the contract address from the ADDRESSS_PROVIDER\\n     * @notice throws error if address === 0\\n     * @param _name the bytes32 name of the contract\\n     */\\n    function fetchContract(bytes32 _name) external view returns (address);\\n\\n    /**\\n     * @notice kill the current address provider, only callable by the AddressProvider\\n     */\\n    function kill() external;\\n\\n    /**\\n     * @notice Returns the contract address of the IAddressProvider\\n     * @return The address of the AddressProvider\\n     */\\n    function ADDRESSES_PROVIDER() external view returns (IAddressProvider);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the protocol_admin role\\n    //  * @return The id of the protocol_admin role\\n    //  */\\n    // function PROTOCOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the buyer role\\n    //  * @return The id of the buyer role\\n    //  */\\n    // function BUYER_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the seller role\\n    //  * @return The id of the seller role\\n    //  */\\n    // function SELLER_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the judge role\\n    //  * @return The id of the judge role\\n    //  */\\n    // function JUDGE_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the Blacklist role\\n    //  * @return The id of the Blacklist role\\n    //  */\\n    // function BLACKLIST_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the whitelist role\\n    //  * @return The id of the whitelist role\\n    //  */\\n    // function WHITELIST_ROLE() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xebb668acafab498b830a453d31cb524d4472e8f73905a214c27228f75e7a955d\",\"license\":\"MIT\"},\"contracts/interfaces/IUser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../protocol/libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../protocol/libraries/types/InputTypes.sol\\\";\\n\\n/**\\n * @title IUser\\n * @author Blockswan\\n * @notice Defines the basic interface for an blockswan user.\\n **/\\ninterface IUser {\\n    /**\\n     * @dev Emitted when a new user is created.\\n     * @param userId The id of the user\\n     * @param userAddress The wallet addresss of the user\\n     * @param userData The data associated with the user\\n     */\\n    event UserAdded(\\n        uint256 indexed userId,\\n        address indexed userAddress,\\n        InputTypes.CreateUserInput userData\\n    );\\n\\n    /**\\n     * @dev Emitted when an user is edited.\\n     * @param userId The id of the user\\n     * @param userAddress The wallet addresss of the user\\n     * @param userData The data associated with the user\\n     */\\n    event UserEdited(\\n        uint256 indexed userId,\\n        address indexed userAddress,\\n        OutputTypes.UserOutput userData\\n    );\\n\\n    /**\\n     * @notice Returns the user id from a given address.\\n     * @param account The address of the user\\n     * @return userId The userId associated to the account address\\n     **/\\n    function getIdByAddress(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user data.\\n     * @param userId The id of the user.\\n     * @return User The data associated to the user it\\n     **/\\n    function getUserById(\\n        uint256 userId\\n    ) external view returns (OutputTypes.UserOutput memory);\\n\\n    /**\\n     * @notice Returns the user for a given public key.\\n     * @param pubKey The address as parameter.\\n     * @return User the user linked to the public key\\n     **/\\n    function getUserByAddress(\\n        address pubKey\\n    ) external view returns (OutputTypes.UserOutput memory);\\n\\n    /**\\n     * @notice Returns the list of all initialized users.\\n     * @dev It does not include dropped users\\n     * @return A data array of the underlying user.\\n     **/\\n    function getUserList()\\n        external\\n        view\\n        returns (OutputTypes.UserOutput[] memory);\\n\\n    /**\\n     * @notice Returns the current revision of the contract\\n     * @return the current revision\\n     **/\\n    function getUsersCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user wallet address.\\n     * @param userId The id of the user.\\n     * @return userAddress the wallet of the user\\n     **/\\n    function getAddressById(uint256 userId) external view returns (address);\\n\\n    /**\\n     * @notice Create a new users with the msg.sender wallet\\n     * @param metadata the user related information\\n     * @param inviterId the userID of whom invited the newUser\\n     **/\\n    function createUser(string memory metadata, uint256 inviterId) external;\\n\\n    /**\\n     * @notice retrieves the inviters wallet for a given wallet account\\n     * @param account the wallet to get the inviters from\\n     * @return address the pubkey of inviter0\\n     * @return address the pubkey of inviter1\\n     **/\\n    function getInvitersByUserAddress(\\n        address account\\n    ) external view returns (address, address);\\n\\n    /**\\n     * @notice add the gig id to the user gigIds set.\\n     * @param caller the wallet creating the gig.\\n     * @param newGigId the new gig id.\\n     * @return success the relation has been addded.\\n     **/\\n    function createGig(\\n        address caller,\\n        uint256 newGigId\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice add the order id to the user buyerOrderIds set.\\n     * @param buyerId the id of the buyer\\n     * @param newOrderId the new gig orderId.\\n     * @return success the relation has been addded.\\n     **/\\n    function createBuyerOrder(\\n        uint256 buyerId,\\n        uint256 newOrderId\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice retrieves the inviters wallet for a given userId\\n     * @param userId the user id to get the inviters from\\n     * @return address the pubkey of inviter0\\n     * @return address the pubkey of inviter1\\n     **/\\n    function getInvitersById(\\n        uint256 userId\\n    ) external view returns (address, address);\\n\\n    /**\\n     * @notice return true if the gigId is owned by the given userId\\n     * @param userId the user id to check if he own the gig\\n     * @param gigId the gigId\\n     * @return bool if the gigId is owned by the given userId\\n     **/\\n    function isGigOwner(\\n        uint256 userId,\\n        uint256 gigId\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x628d9f386d3ecb2d8de7171eba630317a4e9a90fe531f228438cb00a31dbb59b\",\"license\":\"MIT\"},\"contracts/interfaces/IXP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IXP\\n * @author Blockswan\\n * @notice Defines the basic interface for the Experience\\n **/\\ninterface IXP is IERC20 {\\n    /**\\n     * @notice set the xp amount to earn for a bytes32 key action\\n     * @param xpKey The key associated to the xp to earn\\n     * @param xpToReceive the xp to earn for the key action\\n     */\\n    function setXpAmount(bytes32 xpKey, uint256 xpToReceive) external;\\n\\n    /**\\n     * @notice get the xp amount to earn for a bytes32 key action\\n     * @param xpKey The action key as bytes32\\n     * @return success There is an action matching the key\\n     * @return _amount the xp to earn for the key action\\n     */\\n    function getXpAmount(bytes32 xpKey) external returns (bool, uint256);\\n\\n    /**\\n     * @notice mint the xp amount to earn for a bytes32 key action\\n     * @param xpKey The action key as bytes32\\n     * @param to the addres receiving the XP\\n     */\\n    function mint(bytes32 xpKey, address to) external;\\n}\\n\",\"keccak256\":\"0xb8822f9fc46596a40318b26aaef973805c016c364ddfaadc338e36fa1d93dad9\",\"license\":\"MIT\"},\"contracts/protocol/configuration/ProviderContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {Ownable} from \\\"../../imports/openzeppelin/contracts/Ownable.sol\\\";\\nimport {IERC20} from \\\"../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {IAddressProvider} from \\\"../../interfaces/IAddressProvider.sol\\\";\\nimport {IProtocolConfigurator} from \\\"../../interfaces/IProtocolConfigurator.sol\\\";\\n\\nimport {IProviderContract} from \\\"../../interfaces/IProviderContract.sol\\\";\\nimport {IACLManager} from \\\"../../interfaces/IACLManager.sol\\\";\\nimport {IBSWAN} from \\\"../../interfaces/IBSWAN.sol\\\";\\nimport {IXP} from \\\"../../interfaces/IXP.sol\\\";\\nimport {IUser} from \\\"../../interfaces/IUser.sol\\\";\\nimport {InputTypes} from \\\"../libraries/types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {RegistryKeys} from \\\"../libraries/helpers/RegistryKeys.sol\\\";\\nimport {RoleKeys} from \\\"../libraries/helpers/RoleKeys.sol\\\";\\n\\n/**\\n * @title Parent class to all contracts used to check that a contract is registerable\\n * @notice ProviderContract is Ownable so the deployer can re-register it against new registries\\n * @dev The Provider uses this to talk to all contracts that inherit from this contract.\\n */\\n\\ncontract ProviderContract is Ownable, IProviderContract {\\n    using GPv2SafeERC20 for IERC20;\\n    IAddressProvider public ADDRESS_PROVIDER;\\n\\n    uint256 public MAX_UINT = 2 ** 256 - 1;\\n\\n    /// @notice all contracts that inherit from ProviderContract are automatically Ownable()\\n    /// @dev internal constructor makes ProviderContract abstract\\n    constructor(IAddressProvider provider) Ownable() {\\n        require(\\n            address(provider) != address(0x00),\\n            Errors.ZERO_ADDRESS_IS_INVALID\\n        );\\n\\n        ADDRESS_PROVIDER = IAddressProvider(provider);\\n    }\\n\\n    /// @notice only allow  contracts to be called by the respective agent.\\n    ///     i.e. GigStorage methods can only be invoked by GigFactory.\\n    modifier onlyProvider(bytes32 _name) {\\n        require(\\n            _msgSender() == fetchContract(_name),\\n            \\\"Requires msg.sender is from contract address registered to _name\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice only allow function contracts to be called by the respective role.\\n    ///     i.e. GigStorage methods can only be invoked by BUYER_ROLE.\\n    modifier onlyProtocolRole(bytes32 _role) {\\n        require(\\n            hasProtocolRole(_role, _msgSender()),\\n            \\\"Requires msg.sender has role\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyStillBuyer() {\\n        require(isStillBuyer(_msgSender()), \\\"buyer time elapsed\\\");\\n        _;\\n    }\\n\\n    modifier onlyStillSeller() {\\n        require(isStillSeller(_msgSender()), Errors.ONLY_SELLER);\\n        _;\\n    }\\n\\n    function hasProtocolRole(\\n        bytes32 _role,\\n        address account\\n    ) public view returns (bool) {\\n        bool hasRole = IACLManager(fetchContract(RegistryKeys.ACL_MANAGER))\\n            .hasRole(_role, account);\\n        return hasRole;\\n    }\\n\\n    // function hasProtocolRoles(\\n    //     bytes32[] memory _roles,\\n    //     address account\\n    // ) public view returns (bool) {\\n    //     for (uint256 i; i < _roles.length; i++) {\\n    //         bool hasRole = IACLManager(fetchContract(RegistryKeys.ACL_MANAGER))\\n    //             .hasRole(_roles[i], account);\\n    //         if (hasRole) {\\n    //             return true;\\n    //         }\\n    //     }\\n    //     return false;\\n    // }\\n\\n    function isStillBuyer(address account) public view returns (bool) {\\n        return\\n            hasProtocolRole(RoleKeys.BUYER_ROLE, account) &&\\n            IUser(fetchContract(RegistryKeys.USER))\\n                .getUserByAddress(account)\\n                .buyerUntil >\\n            block.timestamp;\\n    }\\n\\n    function isStillSeller(address account) public view returns (bool) {\\n        return\\n            hasProtocolRole(RoleKeys.SELLER_ROLE, account) &&\\n            IUser(fetchContract(RegistryKeys.USER))\\n                .getUserByAddress(account)\\n                .sellerUntil >\\n            block.timestamp;\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function setProvider(IAddressProvider _providerAddress) public override {\\n        require(\\n            address(_providerAddress) == address(0x00) ||\\n                address(ADDRESS_PROVIDER) == msg.sender ||\\n                this.owner() == msg.sender,\\n            \\\"Can only be called if addressesProvider is empty, msg.sender or owner\\\"\\n        );\\n        ADDRESS_PROVIDER = _providerAddress;\\n    }\\n\\n    function fetchContract(\\n        bytes32 _name\\n    ) public view override returns (address) {\\n        return address(IAddressProvider(ADDRESS_PROVIDER).fetchContract(_name));\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function kill() external override {\\n        assert(msg.sender == address(ADDRESS_PROVIDER));\\n        selfdestruct(payable(address(ADDRESS_PROVIDER)));\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        override\\n        returns (IAddressProvider)\\n    {\\n        return ADDRESS_PROVIDER;\\n    }\\n\\n    function grantProtocolRole(bytes32 _role, address account) internal {\\n        IACLManager(fetchContract(RegistryKeys.ACL_MANAGER)).grantRole(\\n            _role,\\n            account\\n        );\\n    }\\n\\n    function approve(\\n        address erc20\\n    ) public onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        address dat = fetchContract(RegistryKeys.DAT);\\n        IERC20(erc20).approve(dat, MAX_UINT);\\n    }\\n\\n    function _processPayment(\\n        InputTypes.ProcessPaymentInput memory params\\n    ) internal {\\n        IBSWAN dat = IBSWAN(fetchContract(RegistryKeys.DAT));\\n        uint256 total = params.inviter0Rewards +\\n            params.inviter1Rewards +\\n            params.remainingRewards;\\n        IERC20(dat.currency()).safeTransferFrom(\\n            params.caller,\\n            address(this),\\n            total\\n        );\\n        dat.pay(params.inviter0, params.inviter0Rewards);\\n        dat.pay(params.inviter1, params.inviter1Rewards);\\n        dat.pay(address(0), params.remainingRewards);\\n    }\\n\\n    function _giveXP(bytes32 _key, address _to) internal {\\n        IXP(fetchContract(RegistryKeys.XP)).mint(_key, _to);\\n    }\\n\\n    function getProtocolRetributionParams()\\n        internal\\n        view\\n        returns (DataTypes.RetributionParams memory)\\n    {\\n        return\\n            IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            ).getRetributionParams();\\n    }\\n\\n    function getProtocolDelayTimestamp()\\n        internal\\n        view\\n        returns (DataTypes.DelayTimestamp memory)\\n    {\\n        return\\n            IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            ).getDelayTimestamp();\\n    }\\n\\n    function isGigOwner(\\n        uint256 userId,\\n        uint256 gigId,\\n        IUser UserContract\\n    ) public view returns (bool) {\\n        return UserContract.isGigOwner(userId, gigId);\\n    }\\n}\\n\",\"keccak256\":\"0x0169fd3dcbf1210a873e7228a75d5074d79e0d0e6a5e989732084cb472c4dbeb\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors  library\\n * @author Blockswan\\n * @notice Defines the error messages emitted by the different contracts of the Blockswan protocol\\n */\\nlibrary Errors {\\n    // REGISTRY\\n    string public constant INVALID_ADDRESS_PROVIDER_ID = \\\"1\\\"; // The addresses provider is not valid\\n    string public constant ADDRESS_PROVIDER_ALREADY_ADDED = \\\"2\\\"; // This addresses provider already exists\\n    string public constant ADDRESS_PROVIDER_NOT_REGISTERED = \\\"3\\\"; // 'This addresses provider is not registered'\\n\\n    // ADDRESSSES PROVIDER\\n    string public constant CONTRACT_NAME_ALREADY_USED = \\\"4\\\"; // 'Requires that given _name does not already have non-zero registered contract address'\\n    string public constant ZERO_ADDRESS_IS_INVALID = \\\"5\\\"; // the address provided is 0x00\\n    string public constant INDEX_OUT_OF_RANGE = \\\"6\\\"; // the index provided is out of range\\n\\n    // USER\\n    string public constant ADDRESS_ALREADY_USED = \\\"7\\\"; // 'The address provided has already been unsed to initialise an account'\\n    string public constant INVALID_USER_ID = \\\"8\\\"; // 'The userId is incorrect'\\n    string public constant RESTRICTED_TO_BUYER = \\\"9\\\"; // this function can't  be called by buyers\\n    string public constant INVALID_INVITER_ID = \\\"10\\\"; // The inviter ID provided is incorrect\\n    string public constant FAILED_BECOMING_BUYER = \\\"11\\\"; // The execution to becomeBuyer failed\\n    string public constant RESTRICTED_TO_SELLER = \\\"12\\\"; // this function can't  be called by sellers\\n    string public constant FAILED_BECOMING_SELLER = \\\"13\\\"; // The execution to becomeSeller failed\\n\\n    //XP\\n    string public constant NO_MATCHING_XP_KEY = \\\"14\\\"; // There is no xp value to give for this byte32\\n\\n    // GIG\\n    string public constant GIG_ID_ALREADY_EXISING = \\\"15\\\"; // There is already an id for this gig.\\n\\n    // modifiers\\n    string public constant ONLY_SELLER = \\\"16\\\"; // Only account with the seller role can call the functions\\n}\\n\",\"keccak256\":\"0x748ec2c302520ae868fc975301db95bd0b95ccd622ab162b0791302dca55d824\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/helpers/RegistryKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary RegistryKeys {\\n    /// REGISTRY\\n    //  ----  CONTRACT ------\\n    bytes32 public constant GIG = \\\"GIG\\\";\\n    bytes32 public constant ORDER = \\\"ORDER\\\";\\n    bytes32 public constant USER = \\\"USER\\\";\\n    bytes32 public constant PROTOCOL_CONFIGURATOR = \\\"PROTOCOL_CONFIGURATOR\\\";\\n    bytes32 public constant DAT = \\\"DAT\\\";\\n    bytes32 public constant ACL_MANAGER = \\\"ACL_MANAGER\\\";\\n    bytes32 public constant DATA_PROVIDER = \\\"DATA_PROVIDER\\\";\\n    bytes32 public constant XP = \\\"XP\\\";\\n    // ---- NON CONTRACT ------\\n    bytes32 public constant ACL_ADMIN = \\\"ACL_ADMIN\\\";\\n}\\n\",\"keccak256\":\"0xc2517afba6cab6fad869d0967d7b5f2ca9f85ddedbedb0b989e615ac2c2ea851\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/RoleKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary RoleKeys {\\n    // ---- ADMIN ROLES  ------\\n    bytes32 public constant PROTOCOL_ADMIN_ROLE = \\\"PROTOCOL_ADMIN\\\";\\n    bytes32 public constant BUYER_ADMIN_ROLE = \\\"BUYER_ADMIN\\\";\\n    bytes32 public constant SELLER_ADMIN_ROLE = \\\"SELLER_ADMIN\\\";\\n    // ----  ROLES  ------\\n    bytes32 public constant BUYER_ROLE = \\\"BUYER\\\";\\n    bytes32 public constant SELLER_ROLE = \\\"SELLER\\\";\\n    bytes32 public constant JUDGE_ROLE = \\\"JUDGE\\\";\\n    bytes32 public constant BLACKLIST_ROLE = \\\"BLACKLIST\\\";\\n    bytes32 public constant WHITELIST_ROLE = \\\"WHITELIST\\\";\\n    bytes32 public constant XP_GIVER_ROLE = \\\"XP_GIVER\\\";\\n}\\n\",\"keccak256\":\"0x96ba28ef5c4c14bc1ef86a62e3a2bb1ea859abda8a57d053e2d25a335c58aeae\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/XPKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary XPKeys {\\n    bytes32 public constant BECOME_BUYER = \\\"BECOME_BUYER\\\";\\n    bytes32 public constant BECOME_SELLER = \\\"BECOME_SELLER\\\";\\n    bytes32 public constant CREATE_GIG = \\\"CREATE_GIG\\\";\\n    bytes32 public constant CREATE_ORDER = \\\"CREATE_ORDER\\\";\\n    bytes32 public constant PAY_ORDER = \\\"PAY_ORDER\\\";\\n}\\n\",\"keccak256\":\"0xb289d8aee389335698fe40c35b798c8537f15defc239fc539c9a82907065e07e\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/InviterLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {PercentageMath} from \\\"../../../imports/aave/contracts/PercentageMath.sol\\\";\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title Inviter logic library\\n * @author Blockswan\\n * @notice Implements the logic for inviter specific functions\\n */\\nlibrary InviterLogic {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using PercentageMath for uint256;\\n\\n    function addInviter(\\n        DataTypes.User storage user,\\n        uint256 inviterId\\n    ) external returns (bool) {\\n        user.inviterId = inviterId;\\n        return (true);\\n    }\\n\\n    function getInviterAddress(\\n        DataTypes.User storage user,\\n        EnumerableSet.AddressSet storage userIdToAddress\\n    ) public view returns (address) {\\n        return (userIdToAddress.at(user.inviterId));\\n    }\\n\\n    function getInvitersAddresses(\\n        DataTypes.User storage user,\\n        EnumerableSet.AddressSet storage userIdToAddress,\\n        mapping(address => DataTypes.User) storage users\\n    ) public view returns (address, address) {\\n        address inviter0 = getInviterAddress(user, userIdToAddress);\\n        address inviter1 = getInviterAddress(users[inviter0], userIdToAddress);\\n        return (inviter0, inviter1);\\n    }\\n\\n    function calcInviterRewards(\\n        uint256 currencyValue,\\n        uint256 affiliateShare\\n    ) public pure returns (uint256) {\\n        return currencyValue.percentMul(affiliateShare);\\n    }\\n\\n    function calcInvitersRewards(\\n        InputTypes.CalcInvitersRewardsInput memory params\\n    ) external pure returns (OutputTypes.CalcInvitersRewardsOutput memory) {\\n        uint256 totalRewards = calcInviterRewards(\\n            params.currencyValue,\\n            params.affiliateShare\\n        );\\n        uint256 inviter0Rewards = totalRewards.percentMul(\\n            params.lvl0AffiliateShare\\n        );\\n        uint256 inviter1Rewards = totalRewards - inviter0Rewards;\\n\\n        return (\\n            OutputTypes.CalcInvitersRewardsOutput({\\n                inviter0Rewards: inviter0Rewards,\\n                inviter1Rewards: inviter1Rewards,\\n                remainingRewards: params.currencyValue - totalRewards\\n            })\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3ea5d8ab2ffdc0349f99bea7a352b577eb42ac8508598c93e9f4213b70d38ce3\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/UserDataLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\n\\n/**\\n * @title UserData logic library\\n * @author Blockswan\\n * @notice Implements the logic for user data specific functions\\n */\\nlibrary UserDataLogic {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function updateMetadata(\\n        DataTypes.User storage user,\\n        string memory metadata\\n    ) external returns (bool) {\\n        user.metadata = metadata;\\n        return true;\\n    }\\n\\n    function updateBuyerUntil(\\n        DataTypes.User storage user,\\n        uint256 buyerTimeAdded\\n    ) external returns (bool) {\\n        user.buyerUntil = block.timestamp + buyerTimeAdded;\\n        return true;\\n    }\\n\\n    function addBuyerInvites(\\n        DataTypes.User storage user,\\n        uint8 invitesAdded\\n    ) external returns (bool) {\\n        user.buyerInvites += invitesAdded;\\n        return true;\\n    }\\n\\n    function updateSellerUntil(\\n        DataTypes.User storage user,\\n        uint256 sellerTimeAdded\\n    ) external returns (bool) {\\n        user.sellerUntil = block.timestamp + sellerTimeAdded;\\n        return true;\\n    }\\n\\n    function addSellerInvites(\\n        DataTypes.User storage user,\\n        uint8 invitesAdded\\n    ) external returns (bool) {\\n        user.sellerInvites += invitesAdded;\\n        return true;\\n    }\\n\\n    function addGig(\\n        DataTypes.User storage user,\\n        uint256 newGigId\\n    ) external returns (bool) {\\n        user.gigIds.add(newGigId);\\n        return true;\\n    }\\n\\n    function addBuyerOrder(\\n        DataTypes.User storage user,\\n        uint256 newOrderId\\n    ) external returns (bool) {\\n        user.buyerOrderIds.add(newOrderId);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xf150650486a0f5d408302995a0ade7bf128c810a51b765e381591323030afb3b\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/UserLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\n\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {InviterLogic} from \\\"./InviterLogic.sol\\\";\\nimport {UserDataLogic} from \\\"./UserDataLogic.sol\\\";\\n\\nimport {IACLManager} from \\\"../../../interfaces/IACLManager.sol\\\";\\n\\n/**\\n * @title User logic library\\n * @author Blockswan\\n * @notice Implements the logic for user specific functions\\n */\\nlibrary UserLogic {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n    using InviterLogic for DataTypes.User;\\n    using UserDataLogic for DataTypes.User;\\n\\n    function executeCreateUser(\\n        EnumerableSet.AddressSet storage userIdToAddress,\\n        EnumerableMap.AddressToUintMap storage userAddressToId,\\n        mapping(address => DataTypes.User) storage users,\\n        InputTypes.CreateUserInput memory params\\n    ) external returns (bool) {\\n        bool added = userIdToAddress.add(params.wallet);\\n        userAddressToId.set(params.wallet, params.newId);\\n        DataTypes.User storage newUser = users[params.wallet];\\n        newUser.addInviter(params.inviterId);\\n        newUser.updateMetadata(params.metadata);\\n        require(added, Errors.ADDRESS_ALREADY_USED);\\n\\n        return true;\\n    }\\n\\n    function executeBecomeBuyer(\\n        EnumerableMap.AddressToUintMap storage userAddressToId,\\n        mapping(address => DataTypes.User) storage users,\\n        EnumerableSet.AddressSet storage userIdToAddress,\\n        InputTypes.BecomeBuyerInput memory inputParams\\n    ) external returns (bool) {\\n        DataTypes.User storage user = getUserByAddress(\\n            inputParams.account,\\n            userAddressToId,\\n            userIdToAddress,\\n            users\\n        );\\n        user.updateBuyerUntil(inputParams.buyerTimeAdded);\\n        user.addBuyerInvites(inputParams.invitationEarned);\\n        return true;\\n    }\\n\\n    function executeBecomeSeller(\\n        EnumerableMap.AddressToUintMap storage userAddressToId,\\n        mapping(address => DataTypes.User) storage users,\\n        EnumerableSet.AddressSet storage userIdToAddress,\\n        InputTypes.BecomeSellerInput memory inputParams\\n    ) external returns (bool) {\\n        DataTypes.User storage user = getUserByAddress(\\n            inputParams.account,\\n            userAddressToId,\\n            userIdToAddress,\\n            users\\n        );\\n        user.updateSellerUntil(inputParams.sellerTimeAdded);\\n        user.addSellerInvites(inputParams.invitationEarned);\\n        return true;\\n    }\\n\\n    function getUserById(\\n        uint256 userId,\\n        EnumerableSet.AddressSet storage userIdToAddress,\\n        mapping(address => DataTypes.User) storage users\\n    ) public view returns (DataTypes.User storage) {\\n        return (users[userIdToAddress.at(userId)]);\\n    }\\n\\n    function getUserByAddress(\\n        address account,\\n        EnumerableMap.AddressToUintMap storage userAddressToId,\\n        EnumerableSet.AddressSet storage userIdToAddress,\\n        mapping(address => DataTypes.User) storage users\\n    ) public view returns (DataTypes.User storage) {\\n        require(isUserExisting(userAddressToId, account), \\\"No such userId\\\");\\n\\n        DataTypes.User storage user = getUserById(\\n            userAddressToId.get(account),\\n            userIdToAddress,\\n            users\\n        );\\n        return user;\\n    }\\n\\n    function isUserExisting(\\n        EnumerableMap.AddressToUintMap storage userAddressToId,\\n        address account\\n    ) public view returns (bool) {\\n        return (userAddressToId.contains(account));\\n    }\\n\\n    function format(\\n        DataTypes.User storage user,\\n        uint256 id,\\n        address wallet\\n    ) external view returns (OutputTypes.UserOutput memory) {\\n        return (\\n            OutputTypes.UserOutput({\\n                metadata: user.metadata,\\n                inviterId: user.inviterId,\\n                buyerUntil: user.buyerUntil,\\n                buyerInvites: user.buyerInvites,\\n                sellerUntil: user.sellerUntil,\\n                sellerInvites: user.sellerInvites,\\n                userId: id,\\n                wallet: wallet,\\n                gigIds: user.gigIds.values(),\\n                offerIds: user.offerIds.values(),\\n                bidIds: user.bidIds.values(),\\n                buyerOrderIds: user.buyerOrderIds.values(),\\n                gigReviewsIds: user.gigReviewsIds.values(),\\n                userReviewsIds: user.userReviewsIds.values(),\\n                reviewsIds: user.reviewsIds.values()\\n            })\\n        );\\n    }\\n\\n    function executeAddGig(\\n        uint256 gigId,\\n        uint256 userId,\\n        EnumerableSet.AddressSet storage userIdToAddress,\\n        mapping(address => DataTypes.User) storage users\\n    ) external returns (bool) {\\n        bool success = getUserById(userId, userIdToAddress, users).addGig(\\n            gigId\\n        );\\n        return success;\\n    }\\n\\n    function isGigOwner(\\n        uint256 userId,\\n        uint256 gigId,\\n        EnumerableSet.AddressSet storage userIdToAddress,\\n        mapping(address => DataTypes.User) storage users\\n    ) public view returns (bool) {\\n        return\\n            getUserById(userId, userIdToAddress, users).gigIds.contains(gigId);\\n    }\\n\\n    function executeAddBuyerOrder(\\n        uint256 orderId,\\n        uint256 buyerId,\\n        EnumerableSet.AddressSet storage userIdToAddress,\\n        mapping(address => DataTypes.User) storage users\\n    ) external returns (bool) {\\n        bool success = getUserById(buyerId, userIdToAddress, users)\\n            .addBuyerOrder(orderId);\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf2df26357c2ac0d96026bda378f93743e6a22da5e9a23e0a59c025107e7ceae5\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\n\\nlibrary DataTypes {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    enum OrderState {\\n        UNCONFIRMED,\\n        CONFIRMED,\\n        TRIAL,\\n        PENDING,\\n        DONE\\n        // UPDATING\\n    }\\n\\n    struct DelayTimestamp {\\n        uint256 selfRefund;\\n        uint256 closeTrial;\\n        uint256 endTrial;\\n    }\\n\\n    struct User {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        EnumerableSet.UintSet gigIds;\\n        EnumerableSet.UintSet offerIds;\\n        EnumerableSet.UintSet bidIds;\\n        EnumerableSet.UintSet buyerOrderIds;\\n        EnumerableSet.UintSet gigReviewsIds;\\n        EnumerableSet.UintSet userReviewsIds;\\n        EnumerableSet.UintSet reviewsIds;\\n    }\\n\\n    struct Package {\\n        uint256 price;\\n        uint256 timeDelivery;\\n    }\\n\\n    struct Gig {\\n        string metadata;\\n        uint256 createdAt;\\n        bool isPaused;\\n        EnumerableSet.UintSet reviewIds;\\n        EnumerableSet.UintSet orderIds;\\n        Counters.Counter successSell;\\n        Counters.Counter failedSell;\\n        Package[3] packages;\\n    }\\n\\n    struct Order {\\n        string metadata;\\n        string brief;\\n        uint256 sellerFeesVersion;\\n        uint256 toTrial;\\n        uint256 toProceed;\\n        uint256 createdAt;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        Package package;\\n        OrderState state;\\n        IERC20 currency;\\n        EnumerableSet.UintSet reviewIds;\\n    }\\n\\n    struct Review {\\n        uint256 authorId;\\n        string metadata;\\n    }\\n\\n    struct ServiceProvider {\\n        address wallet;\\n        string endpoint;\\n    }\\n\\n    struct EntryParams {\\n        uint256 currencyValue;\\n        uint256 timeAdded;\\n        uint256 xpEarned;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CreationParams {\\n        uint256 currencyValue;\\n        uint256 xpEarned;\\n    }\\n\\n    struct OrderPriceParams {\\n        uint256 trialFlat;\\n        uint256 trialPercent;\\n        uint256 proceedFlat;\\n        uint256 proceedPercent;\\n    }\\n\\n    struct RetributionParams {\\n        uint256 affiliate;\\n        uint256 lvl0AffiliateShare;\\n    }\\n}\\n\",\"keccak256\":\"0x12e3178daf3f5b6f48d23f5130a2326a650d66175d10b46e395bcf948c844927\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/InputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary InputTypes {\\n    struct CreateUserInput {\\n        uint256 newId;\\n        string metadata;\\n        uint256 inviterId;\\n        address wallet;\\n    }\\n\\n    struct CreateGigInput {\\n        uint256 newId;\\n        DataTypes.Package[3] packages;\\n        string metadata;\\n    }\\n\\n    struct OrderFeesInput {\\n        uint256 sellerFeesVersion;\\n        uint256 toTrial;\\n        uint256 toProceed;\\n    }\\n\\n    struct OrderRelationInput {\\n        uint256 newId;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n    }\\n\\n    struct CreateOrderInput {\\n        uint256 sellerId;\\n        uint256 buyerId;\\n        uint256 gigId;\\n        uint256 packageId;\\n        string brief;\\n    }\\n\\n    struct ExecuteCreateOrderInput {\\n        string metadata;\\n        string brief;\\n        OrderFeesInput fees;\\n        OrderRelationInput relations;\\n        DataTypes.Package package;\\n        IERC20 currency;\\n    }\\n\\n    struct BecomeBuyerInput {\\n        address account;\\n        uint256 buyerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct BecomeSellerInput {\\n        address account;\\n        uint256 sellerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CalcInvitersRewardsInput {\\n        uint256 currencyValue;\\n        uint256 affiliateShare;\\n        uint256 lvl0AffiliateShare;\\n    }\\n\\n    struct ProcessPaymentInput {\\n        address caller;\\n        address inviter0;\\n        address inviter1;\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n}\\n\",\"keccak256\":\"0x71bf9ab7d769307007dd572d3710c4d693f920aeb44020493912a268ec9a7190\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/OutputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary OutputTypes {\\n    struct CalcInvitersRewardsOutput {\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n\\n    struct PrepareBecomeRoleOutput {\\n        address inviter0;\\n        address inviter1;\\n        DataTypes.EntryParams entryParams;\\n        DataTypes.RetributionParams retributionParams;\\n        CalcInvitersRewardsOutput rewards;\\n    }\\n\\n    struct GigOutput {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        uint256[] reviewIds;\\n        uint256[] orderIds;\\n        DataTypes.Package[3] packages;\\n    }\\n\\n    struct UserOutput {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 userId;\\n        address wallet;\\n        uint256[] gigIds;\\n        uint256[] offerIds;\\n        uint256[] bidIds;\\n        uint256[] buyerOrderIds;\\n        uint256[] gigReviewsIds;\\n        uint256[] userReviewsIds;\\n        uint256[] reviewsIds;\\n    }\\n\\n    struct OrderOutput {\\n        string metadata;\\n        string brief;\\n        uint256 sellerFeesVersion;\\n        uint256 toTrial;\\n        uint256 toProceed;\\n        uint256 orderId;\\n        uint256 createdAt;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        uint256[] reviewIds;\\n        DataTypes.Package package;\\n        DataTypes.OrderState state;\\n        IERC20 currency;\\n    }\\n\\n    struct PopulatedGig {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        DataTypes.Review[] reviews;\\n        DataTypes.Package[] packages;\\n    }\\n\\n    struct PopulatedUser {\\n        uint256 userId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 bswanBalance;\\n        uint256 usdcBalance;\\n        uint256 xpBalance;\\n        uint256[] gigIds;\\n        address wallet;\\n        bool isBuyer;\\n        bool isSeller;\\n        bool isJudge;\\n        UserOutput[] inviters;\\n    }\\n}\\n\",\"keccak256\":\"0xc02136162bbd7da91cc53d2da6346223c4a6fbe1646445f13dfe39884a7fee6e\",\"license\":\"MIT\"},\"contracts/protocol/user/User.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {UserStorage} from \\\"./UserStorage.sol\\\";\\nimport {IUser} from \\\"../../interfaces/IUser.sol\\\";\\nimport {IAddressProvider} from \\\"../../interfaces/IAddressProvider.sol\\\";\\nimport {IProtocolConfigurator} from \\\"../../interfaces/IProtocolConfigurator.sol\\\";\\nimport {IACLManager} from \\\"../../interfaces/IACLManager.sol\\\";\\nimport {IBSWAN} from \\\"../../interfaces/IBSWAN.sol\\\";\\n\\nimport {InputTypes} from \\\"../libraries/types/InputTypes.sol\\\";\\nimport {OutputTypes} from \\\"../libraries/types/OutputTypes.sol\\\";\\n\\nimport {UserLogic} from \\\"../libraries/logics/UserLogic.sol\\\";\\nimport {InviterLogic} from \\\"../libraries/logics/InviterLogic.sol\\\";\\n\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {RegistryKeys} from \\\"../libraries/helpers/RegistryKeys.sol\\\";\\nimport {RoleKeys} from \\\"../libraries/helpers/RoleKeys.sol\\\";\\nimport {XPKeys} from \\\"../libraries/helpers/XPKeys.sol\\\";\\n\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {ProviderContract} from \\\"../configuration/ProviderContract.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\n\\n/**\\n * @title\\tUser contract\\n * @author\\tBlockswan\\n * @notice  User data within an Blockswan protocol's marketplace\\n * - Users can:\\n *   # login\\n *   # edit profile\\n *   # invite users\\n *   # choose affiliates\\n *   # get the access rights to the protocol\\n * @dev To be covered by a proxy contract, owned by the addressProvider of the specific marketplace\\n * @dev All admin functions are callable by the protocolConfigurator contract defined also in the\\n *   addressProvider\\n **/\\n\\ncontract User is UserStorage, IUser, ProviderContract {\\n    using UserLogic for DataTypes.User;\\n    using UserLogic for EnumerableMap.AddressToUintMap;\\n    using InviterLogic for DataTypes.User;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n\\n    /**\\n     * @dev Constructor.\\n     * @param provider The address of the AddressProvider\\n     */\\n    constructor(IAddressProvider provider) ProviderContract(provider) {}\\n\\n    modifier onlyUser() {\\n        require(\\n            _userAddressToId.isUserExisting(_msgSender()),\\n            \\\"must have created an account\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @inheritdoc IUser\\n    function getUsersCount() public view virtual override returns (uint256) {\\n        uint256 count = _userIdToAddress.length();\\n        return count;\\n    }\\n\\n    /// @inheritdoc IUser\\n    function getIdByAddress(\\n        address account\\n    ) public view override returns (uint256) {\\n        return (_userAddressToId.get(account));\\n    }\\n\\n    /// @inheritdoc IUser\\n    function getAddressById(\\n        uint256 userId\\n    ) public view virtual override returns (address) {\\n        address userAddress = _userIdToAddress.at(userId);\\n        return userAddress;\\n    }\\n\\n    /// @inheritdoc IUser\\n    function getUserById(\\n        uint256 userId\\n    ) public view virtual override returns (OutputTypes.UserOutput memory) {\\n        DataTypes.User storage user = _users[_userIdToAddress.at(userId)];\\n        return user.format(userId, getAddressById(userId));\\n    }\\n\\n    /// @inheritdoc IUser\\n    function getUserByAddress(\\n        address pubKey\\n    ) public view virtual override returns (OutputTypes.UserOutput memory) {\\n        DataTypes.User storage user = _users[pubKey];\\n        return user.format(_userAddressToId.get(pubKey), pubKey);\\n    }\\n\\n    /// @inheritdoc IUser\\n    function getUserList()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (OutputTypes.UserOutput[] memory)\\n    {\\n        uint256 len = getUsersCount();\\n        OutputTypes.UserOutput[] memory userList = new OutputTypes.UserOutput[](\\n            len\\n        );\\n        for (uint256 i = 0; i < len; i++) {\\n            userList[i] = getUserById(i);\\n        }\\n        return userList;\\n    }\\n\\n    /// @inheritdoc IUser\\n    function createUser(\\n        string memory metadata,\\n        uint256 inviterId\\n    ) external override {\\n        uint256 totalUser = getUsersCount();\\n        require(\\n            totalUser == 0 ? inviterId == 0 : inviterId < totalUser,\\n            Errors.INVALID_INVITER_ID\\n        );\\n\\n        uint256 newId = totalUser;\\n        InputTypes.CreateUserInput memory userInput = InputTypes\\n            .CreateUserInput({\\n                newId: newId,\\n                metadata: metadata,\\n                inviterId: inviterId,\\n                wallet: _msgSender()\\n            });\\n        bool isCreated = UserLogic.executeCreateUser(\\n            _userIdToAddress,\\n            _userAddressToId,\\n            _users,\\n            userInput\\n        );\\n        require(\\n            isCreated && newId == getUsersCount() - 1,\\n            Errors.INVALID_USER_ID\\n        );\\n        emit UserAdded(newId, _msgSender(), userInput);\\n    }\\n\\n    function becomeBuyer() external {\\n        address caller = _msgSender();\\n        bool isBuyer = hasProtocolRole(RoleKeys.BUYER_ROLE, caller);\\n        require(!isBuyer, Errors.RESTRICTED_TO_BUYER);\\n\\n        OutputTypes.PrepareBecomeRoleOutput\\n            memory becomeBuyerParams = _prepareRoleParams(\\n                RoleKeys.BUYER_ROLE,\\n                caller\\n            );\\n        grantProtocolRole(RoleKeys.BUYER_ROLE, caller);\\n        bool isBecomeBuyer = _userAddressToId.executeBecomeBuyer(\\n            _users,\\n            _userIdToAddress,\\n            InputTypes.BecomeBuyerInput({\\n                account: caller,\\n                buyerTimeAdded: becomeBuyerParams.entryParams.timeAdded,\\n                invitationEarned: becomeBuyerParams.entryParams.invitationEarned\\n            })\\n        );\\n        require(isBecomeBuyer, Errors.FAILED_BECOMING_BUYER);\\n        _giveXP(XPKeys.BECOME_BUYER, caller);\\n        _processPayment(\\n            InputTypes.ProcessPaymentInput({\\n                caller: caller,\\n                inviter0: becomeBuyerParams.inviter0,\\n                inviter1: becomeBuyerParams.inviter1,\\n                inviter0Rewards: becomeBuyerParams.rewards.inviter0Rewards,\\n                inviter1Rewards: becomeBuyerParams.rewards.inviter1Rewards,\\n                remainingRewards: becomeBuyerParams.rewards.remainingRewards\\n            })\\n        );\\n    }\\n\\n    function becomeSeller() external {\\n        address caller = _msgSender();\\n        bool isSeller = hasProtocolRole(RoleKeys.SELLER_ROLE, caller);\\n        require(!isSeller, Errors.RESTRICTED_TO_SELLER);\\n\\n        OutputTypes.PrepareBecomeRoleOutput\\n            memory becomeSellerParams = _prepareRoleParams(\\n                RoleKeys.SELLER_ROLE,\\n                caller\\n            );\\n        grantProtocolRole(RoleKeys.SELLER_ROLE, caller);\\n        bool isBecomeSeller = _userAddressToId.executeBecomeSeller(\\n            _users,\\n            _userIdToAddress,\\n            InputTypes.BecomeSellerInput({\\n                account: caller,\\n                sellerTimeAdded: becomeSellerParams.entryParams.timeAdded,\\n                invitationEarned: becomeSellerParams\\n                    .entryParams\\n                    .invitationEarned\\n            })\\n        );\\n        require(isBecomeSeller, Errors.FAILED_BECOMING_SELLER);\\n        _giveXP(XPKeys.BECOME_SELLER, caller);\\n        _processPayment(\\n            InputTypes.ProcessPaymentInput({\\n                caller: caller,\\n                inviter0: becomeSellerParams.inviter0,\\n                inviter1: becomeSellerParams.inviter1,\\n                inviter0Rewards: becomeSellerParams.rewards.inviter0Rewards,\\n                inviter1Rewards: becomeSellerParams.rewards.inviter1Rewards,\\n                remainingRewards: becomeSellerParams.rewards.remainingRewards\\n            })\\n        );\\n    }\\n\\n    /// @inheritdoc IUser\\n    function getInvitersById(\\n        uint256 userId\\n    ) public view override returns (address, address) {\\n        DataTypes.User storage user = UserLogic.getUserById(\\n            userId,\\n            _userIdToAddress,\\n            _users\\n        );\\n        return user.getInvitersAddresses(_userIdToAddress, _users);\\n    }\\n\\n    /// @inheritdoc IUser\\n    function getInvitersByUserAddress(\\n        address account\\n    ) public view override returns (address, address) {\\n        DataTypes.User storage user = UserLogic.getUserByAddress(\\n            account,\\n            _userAddressToId,\\n            _userIdToAddress,\\n            _users\\n        );\\n        return user.getInvitersAddresses(_userIdToAddress, _users);\\n    }\\n\\n    function getBecomeBuyerParams()\\n        internal\\n        view\\n        returns (DataTypes.EntryParams memory)\\n    {\\n        return\\n            IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            ).getBuyerEntryParams();\\n    }\\n\\n    function getBecomeSellerParams()\\n        internal\\n        view\\n        returns (DataTypes.EntryParams memory)\\n    {\\n        return\\n            IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            ).getSellerEntryParams();\\n    }\\n\\n    function getGigCreationParams()\\n        internal\\n        view\\n        returns (DataTypes.CreationParams memory)\\n    {\\n        return\\n            IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            ).getGigCreationParams();\\n    }\\n\\n    function _prepareRoleParams(\\n        bytes32 role,\\n        address caller\\n    ) internal view returns (OutputTypes.PrepareBecomeRoleOutput memory) {\\n        DataTypes.EntryParams memory entryParams;\\n        if (role == RoleKeys.BUYER_ROLE) {\\n            entryParams = getBecomeBuyerParams();\\n        } else {\\n            entryParams = getBecomeSellerParams();\\n        }\\n        (address inviter0, address inviter1) = getInvitersByUserAddress(caller);\\n        DataTypes.RetributionParams\\n            memory retributionParams = getProtocolRetributionParams();\\n        OutputTypes.CalcInvitersRewardsOutput memory rewards = InviterLogic\\n            .calcInvitersRewards(\\n                InputTypes.CalcInvitersRewardsInput({\\n                    currencyValue: entryParams.currencyValue,\\n                    affiliateShare: retributionParams.affiliate,\\n                    lvl0AffiliateShare: retributionParams.lvl0AffiliateShare\\n                })\\n            );\\n        return (\\n            OutputTypes.PrepareBecomeRoleOutput({\\n                inviter0: inviter0,\\n                inviter1: inviter1,\\n                entryParams: entryParams,\\n                retributionParams: retributionParams,\\n                rewards: rewards\\n            })\\n        );\\n    }\\n\\n    /// @inheritdoc IUser\\n    function createGig(\\n        address caller,\\n        uint256 newGigId\\n    ) external override onlyProvider(RegistryKeys.GIG) returns (bool) {\\n        bool success = UserLogic.executeAddGig(\\n            newGigId,\\n            getIdByAddress(caller),\\n            _userIdToAddress,\\n            _users\\n        );\\n        return success;\\n    }\\n\\n    /// @inheritdoc IUser\\n    function createBuyerOrder(\\n        uint256 buyerId,\\n        uint256 newOrderId\\n    ) external override onlyProvider(RegistryKeys.ORDER) returns (bool) {\\n        bool success = UserLogic.executeAddBuyerOrder(\\n            newOrderId,\\n            buyerId,\\n            _userIdToAddress,\\n            _users\\n        );\\n        return success;\\n    }\\n\\n    /// @inheritdoc IUser\\n    function isGigOwner(\\n        uint256 userId,\\n        uint256 gigId\\n    ) public view override returns (bool) {\\n        return UserLogic.isGigOwner(userId, gigId, _userIdToAddress, _users);\\n    }\\n}\\n\",\"keccak256\":\"0xe4656dbddd002faa55239e6c69eafe519424730c405ec951c6cf041af1281465\",\"license\":\"MIT\"},\"contracts/protocol/user/UserStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title UserStorage\\n * @author Blockswan\\n * @notice Contract used as storage of the user contract.\\n * @dev It defines the storage layout of the user contract.\\n */\\ncontract UserStorage {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n\\n    //using l_account_logic for l_data_types.s_escrow;\\n\\n    // set of address by userId  (userId => address)\\n    EnumerableSet.AddressSet internal _userIdToAddress;\\n\\n    // Map of address and their userId (address => userId)\\n    EnumerableMap.AddressToUintMap internal _userAddressToId;\\n\\n    // Map of the public key used and their user data (address => User)\\n    mapping(address => DataTypes.User) internal _users;\\n}\\n\",\"keccak256\":\"0x7c7d60839ab3eea5346b909ade59952fb79c583a0beae89c956a73ed87176970\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60806040526000196008553480156200001757600080fd5b5060405162002bf538038062002bf58339810160408190526200003a9162000118565b806200004f62000049620000c2565b620000c6565b6040805180820190915260018152603560f81b60208201526001600160a01b0382166200009a5760405162461bcd60e51b815260040162000091919062000148565b60405180910390fd5b50600780546001600160a01b0319166001600160a01b0392909216919091179055506200019e565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200012a578081fd5b81516001600160a01b038116811462000141578182fd5b9392505050565b6000602080835283518082850152825b81811015620001765785810183015185820160400152820162000158565b81811115620001885783604083870101525b50601f01601f1916929092016040019392505050565b612a4780620001ae6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063982714b6116100f9578063cfd8d6c011610097578063dff3b49711610071578063dff3b49714610388578063e5b5019a1461039b578063f2fde38b146103a3578063fbd2817f146103b6576101c4565b8063cfd8d6c01461034f578063daea85c514610362578063dd06ef0214610375576101c4565b8063adcd2d21116100d3578063adcd2d21146102f3578063b817bcf714610306578063b852204314610319578063bebf138f1461032e576101c4565b8063982714b6146102b8578063985fadc8146102cb578063a4a1e263146102de576101c4565b806369c212f61161016657806379a558e71161014057806379a558e7146102825780638d80c922146102955780638da5cb5b146102a85780638f299b1e146102b0576101c4565b806369c212f6146102475780636ed6da9e14610267578063715018a61461027a576101c4565b8063128fdb48116101a2578063128fdb481461021c5780631848effa1461022457806319872f761461022c57806341c0e1b51461023f576101c4565b80630542975c146101c957806311e0c07b146101e7578063121ef24314610207575b600080fd5b6101d16103c9565b6040516101de91906124aa565b60405180910390f35b6101fa6101f53660046122a8565b6103d8565b6040516101de9190612577565b61021a610215366004611f19565b610461565b005b61021a610638565b6101d1610849565b6101d161023a366004611edd565b610858565b61021a6108e1565b61025a610255366004611e21565b610917565b6040516101de9190612897565b61025a610275366004611edd565b6109d7565b61021a610a4c565b6101fa610290366004611e21565b610a60565b6101d16102a3366004611edd565b610b16565b6101d1610b23565b61021a610b32565b6101fa6102c6366004612287565b610cd2565b6101fa6102d9366004611ef5565b610db7565b6102e6610dfe565b6040516101de9190612582565b6101fa610301366004611e92565b610e11565b6101fa610314366004611e21565b610ea3565b610321610f5a565b6040516101de9190612517565b61034161033c366004611edd565b611026565b6040516101de9291906124be565b61021a61035d366004611e21565b611151565b61021a610370366004611e21565b61123b565b610341610383366004611e21565b61130b565b6102e6610396366004611e21565b611350565b6102e661135d565b61021a6103b1366004611e21565b611363565b6101fa6103c4366004612287565b61139d565b6007546001600160a01b031690565b60405163fbd2817f60e01b81526000906001600160a01b0383169063fbd2817f9061040990879087906004016128df565b60206040518083038186803b15801561042157600080fd5b505afa158015610435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104599190611ebd565b949350505050565b600061046b610dfe565b9050801561047b5780821061047e565b81155b60405180604001604052806002815260200161031360f41b815250906104c05760405162461bcd60e51b81526004016104b791906125a2565b60405180910390fd5b506000819050600060405180608001604052808381526020018681526020018581526020016104ed61142e565b6001600160a01b0316905260405163729dfdcd60e11b815290915060009073D6C850aeBFDC46D7F4c207e445cC0d6B0919BDBe9063e53bfb9a9061053d908490600290600590889060040161279e565b60206040518083038186803b15801561055557600080fd5b505af4158015610569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058d9190611ebd565b90508080156105ae575060016105a1610dfe565b6105ab9190612972565b83145b604051806040016040528060018152602001600760fb1b815250906105e65760405162461bcd60e51b81526004016104b791906125a2565b506105ef61142e565b6001600160a01b0316837fbee9c5c7ffbde119e3d12f30b5b584a6b78652a5ce90278f90c9c98c0f3178db846040516106289190612846565b60405180910390a3505050505050565b600061064261142e565b9050600061065864212aaca2a960d91b83610db7565b90508015604051806040016040528060018152602001603960f81b815250906106945760405162461bcd60e51b81526004016104b791906125a2565b5060006106a964212aaca2a960d91b84611432565b90506106bd64212aaca2a960d91b8461156d565b60408051606080820183526001600160a01b038616825283830180516020908101519084015251015160ff16818301529051633bb7b3f960e01b815260009173D6C850aeBFDC46D7F4c207e445cC0d6B0919BDBe91633bb7b3f99161072d91600291600591879190600401612803565b60206040518083038186803b15801561074557600080fd5b505af4158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d9190611ebd565b90508060405180604001604052806002815260200161313160f01b815250906107b95760405162461bcd60e51b81526004016104b791906125a2565b506107d36b2122a1a7a6a2afa12aaca2a960a11b856115e7565b6108436040518060c00160405280866001600160a01b0316815260200184600001516001600160a01b0316815260200184602001516001600160a01b0316815260200184608001516000015181526020018460800151602001518152602001846080015160400151815250611622565b50505050565b6007546001600160a01b031681565b600754604051630cc397bb60e11b81526000916001600160a01b0316906319872f7690610889908590600401612582565b60206040518083038186803b1580156108a157600080fd5b505afa1580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d99190611e3d565b90505b919050565b6007546001600160a01b0316331461090957634e487b7160e01b600052600160045260246000fd5b6007546001600160a01b0316ff5b61091f611c29565b6001600160a01b038216600090815260056020526040902073D6C850aeBFDC46D7F4c207e445cC0d6B0919BDBe632aa8eb808261095d600287611820565b866040518463ffffffff1660e01b815260040161097c939291906128c0565b60006040518083038186803b15801561099457600080fd5b505af41580156109a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d091908101906120ae565b9392505050565b6109df611c29565b60006005816109ee8186611835565b6001600160a01b031681526020810191909152604001600020905073D6C850aeBFDC46D7F4c207e445cC0d6B0919BDBe632aa8eb808285610a2e81610b16565b6040518463ffffffff1660e01b815260040161097c939291906128c0565b610a54611841565b610a5e6000611880565b565b6000610a7464212aaca2a960d91b83610db7565b80156108d9575042610a8c632aa9a2a960e11b610858565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b8152600401610ab791906124aa565b60006040518083038186803b158015610acf57600080fd5b505afa158015610ae3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b0b91908101906120ae565b604001511192915050565b6000806109d08184611835565b6006546001600160a01b031690565b6000610b3c61142e565b90506000610b536529a2a62622a960d11b83610db7565b9050801560405180604001604052806002815260200161189960f11b81525090610b905760405162461bcd60e51b81526004016104b791906125a2565b506000610ba66529a2a62622a960d11b84611432565b9050610bbb6529a2a62622a960d11b8461156d565b60408051606080820183526001600160a01b038616825283830180516020908101519084015251015160ff16818301529051633ea5a5a360e11b815260009173D6C850aeBFDC46D7F4c207e445cC0d6B0919BDBe91637d4b4b4691610c2b91600291600591879190600401612803565b60206040518083038186803b158015610c4357600080fd5b505af4158015610c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b9190611ebd565b90508060405180604001604052806002815260200161313360f01b81525090610cb75760405162461bcd60e51b81526004016104b791906125a2565b506107d36c2122a1a7a6a2afa9a2a62622a960991b856115e7565b60006427a92222a960d91b610ce681610858565b6001600160a01b0316610cf761142e565b6001600160a01b031614610d1d5760405162461bcd60e51b81526004016104b790612740565b60405163a292a61360e01b815260009073D6C850aeBFDC46D7F4c207e445cC0d6B0919BDBe9063a292a61390610d5e908790899086906005906004016128ed565b60206040518083038186803b158015610d7657600080fd5b505af4158015610d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dae9190611ebd565b95945050505050565b600080610dd16a20a1a62fa6a0a720a3a2a960a91b610858565b6001600160a01b03166391d1485485856040518363ffffffff1660e01b815260040161040992919061258b565b600080610e0b60006118d2565b91505090565b60006247494760e81b610e2381610858565b6001600160a01b0316610e3461142e565b6001600160a01b031614610e5a5760405162461bcd60e51b81526004016104b790612740565b600073D6C850aeBFDC46D7F4c207e445cC0d6B0919BDBe63a2caedd685610e8088611350565b600060056040518563ffffffff1660e01b8152600401610d5e94939291906128ed565b6000610eb86529a2a62622a960d11b83610db7565b80156108d9575042610ed0632aa9a2a960e11b610858565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b8152600401610efb91906124aa565b60006040518083038186803b158015610f1357600080fd5b505afa158015610f27573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f4f91908101906120ae565b608001511192915050565b60606000610f66610dfe565b905060008167ffffffffffffffff811115610f9157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fca57816020015b610fb7611c29565b815260200190600190039081610faf5790505b50905060005b8281101561101f57610fe1816109d7565b82828151811061100157634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080611017906129b5565b915050610fd0565b5091505090565b600080600073D6C850aeBFDC46D7F4c207e445cC0d6B0919BDBe63f1193ae985600060056040518463ffffffff1660e01b8152600401611068939291906128aa565b60206040518083038186803b15801561108057600080fd5b505af4158015611094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b8919061226f565b604051631900f20b60e21b815290915073500D1d6A4c7D8Ae28240b47c8FCde034D827fD5e90636403c82c906110f89084906000906005906004016128aa565b604080518083038186803b15801561110f57600080fd5b505af4158015611123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111479190611e59565b9250925050915091565b6001600160a01b038116158061117157506007546001600160a01b031633145b806111fd5750336001600160a01b0316306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111ba57600080fd5b505afa1580156111ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f29190611e3d565b6001600160a01b0316145b6112195760405162461bcd60e51b81526004016104b7906125fb565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6d282927aa27a1a7a62fa0a226a4a760911b611259816102d961142e565b6112755760405162461bcd60e51b81526004016104b790612709565b60006112866211105560ea1b610858565b60085460405163095ea7b360e01b81529192506001600160a01b0385169163095ea7b3916112b9918591906004016124fe565b602060405180830381600087803b1580156112d357600080fd5b505af11580156112e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190611ebd565b600080600073D6C850aeBFDC46D7F4c207e445cC0d6B0919BDBe635e80e951856002600060056040518563ffffffff1660e01b815260040161106894939291906124d8565b60006108d9600283611820565b60085481565b61136b611841565b6001600160a01b0381166113915760405162461bcd60e51b81526004016104b7906125b5565b61139a81611880565b50565b604051630dde020f60e01b815260009073D6C850aeBFDC46D7F4c207e445cC0d6B0919BDBe90630dde020f906113de908690869086906005906004016128ed565b60206040518083038186803b1580156113f657600080fd5b505af415801561140a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d09190611ebd565b3390565b61143a611ca8565b611442611ce6565b64212aaca2a960d91b8414156114615761145a6118dd565b905061146c565b61146961197b565b90505b6000806114788561130b565b9150915060006114866119dc565b6040805160608101825286518152825160208083019190915283015181830152905163013a9d5b60e01b815291925060009173500D1d6A4c7D8Ae28240b47c8FCde034D827fD5e9163013a9d5b916114e19190600401612825565b60606040518083038186803b1580156114f957600080fd5b505af415801561150d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115319190611f95565b6040805160a0810182526001600160a01b0396871681529490951660208501529383019490945260608201526080810191909152949350505050565b6115846a20a1a62fa6a0a720a3a2a960a91b610858565b6001600160a01b0316632f2ff15d83836040518363ffffffff1660e01b81526004016115b192919061258b565b600060405180830381600087803b1580156115cb57600080fd5b505af11580156115df573d6000803e3d6000fd5b505050505050565b6115f561058560f41b610858565b6001600160a01b031663293c6a3a83836040518363ffffffff1660e01b81526004016115b192919061258b565b60006116336211105560ea1b610858565b905060008260a0015183608001518460600151611650919061295a565b61165a919061295a565b90506116ea83600001513083856001600160a01b031663e5a6b10f6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156116a157600080fd5b505af11580156116b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d99190611e3d565b6001600160a01b0316929190611a74565b60208301516060840151604051636203b43b60e11b81526001600160a01b0385169263c40768769261171e926004016124fe565b600060405180830381600087803b15801561173857600080fd5b505af115801561174c573d6000803e3d6000fd5b50505060408085015160808601519151636203b43b60e11b81526001600160a01b038616935063c40768769261178592916004016124fe565b600060405180830381600087803b15801561179f57600080fd5b505af11580156117b3573d6000803e3d6000fd5b5050505060a0830151604051636203b43b60e11b81526001600160a01b0384169163c4076876916117e9916000916004016124fe565b600060405180830381600087803b15801561180357600080fd5b505af1158015611817573d6000803e3d6000fd5b50505050505050565b60006109d0836001600160a01b038416611ae6565b60006109d08383611b26565b61184961142e565b6001600160a01b031661185a610b23565b6001600160a01b031614610a5e5760405162461bcd60e51b81526004016104b79061269d565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006108d982611b5e565b6118e5611ce6565b61190674282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610858565b6001600160a01b0316632c53f6c46040518163ffffffff1660e01b815260040160806040518083038186803b15801561193e57600080fd5b505afa158015611952573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119769190611ff0565b905090565b611983611ce6565b6119a474282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610858565b6001600160a01b031663688c4b246040518163ffffffff1660e01b815260040160806040518083038186803b15801561193e57600080fd5b6119e4611d11565b611a0574282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610858565b6001600160a01b0316639af1da486040518163ffffffff1660e01b8152600401604080518083038186803b158015611a3c57600080fd5b505afa158015611a50573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119769190612060565b6040516323b872dd60e01b8082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af1611ab9573d6000803e3d6000fd5b50611ac385611b62565b611adf5760405162461bcd60e51b81526004016104b790612666565b5050505050565b600081815260028301602052604081205480151580611b0a5750611b0a8484611c09565b6109d05760405162461bcd60e51b81526004016104b7906126d2565b6000826000018281548110611b4b57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b5490565b6000611b86565b62461bcd60e51b6000526020600452806024528160445260646000fd5b3d8015611bc55760208114611bf657611bc07f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f611b69565b611c03565b823b611bed57611bed7311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b6014611b69565b60019150611c03565b3d6000803e600051151591505b50919050565b60008181526001830160205260408120546109d090849084908490151584565b604051806101e001604052806060815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6040805160a08101825260008082526020820152908101611cc7611ce6565b8152602001611cd4611d11565b8152602001611ce1611d2b565b905290565b6040518060800160405280600081526020016000815260200160008152602001600060ff1681525090565b604051806040016040528060008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b80516108dc816129fc565b600082601f830112611d67578081fd5b8151602067ffffffffffffffff821115611d8357611d836129e6565b808202611d91828201612908565b838152828101908684018388018501891015611dab578687fd5b8693505b85841015611dcd578051835260019390930192918401918401611daf565b50979650505050505050565b600082601f830112611de9578081fd5b8151611dfc611df782612932565b612908565b818152846020838601011115611e10578283fd5b610459826020830160208701612989565b600060208284031215611e32578081fd5b81356109d0816129fc565b600060208284031215611e4e578081fd5b81516109d0816129fc565b60008060408385031215611e6b578081fd5b8251611e76816129fc565b6020840151909250611e87816129fc565b809150509250929050565b60008060408385031215611ea4578182fd5b8235611eaf816129fc565b946020939093013593505050565b600060208284031215611ece578081fd5b815180151581146109d0578182fd5b600060208284031215611eee578081fd5b5035919050565b60008060408385031215611f07578182fd5b823591506020830135611e87816129fc565b60008060408385031215611f2b578182fd5b823567ffffffffffffffff811115611f41578283fd5b8301601f81018513611f51578283fd5b8035611f5f611df782612932565b818152866020838501011115611f73578485fd5b8160208401602083013790810160209081019490945295939092013593505050565b600060608284031215611fa6578081fd5b6040516060810181811067ffffffffffffffff82111715611fc957611fc96129e6565b80604052508251815260208301516020820152604083015160408201528091505092915050565b600060808284031215612001578081fd5b6040516080810181811067ffffffffffffffff82111715612024576120246129e6565b8060405250825181526020830151602082015260408301516040820152606083015160ff81168114612054578283fd5b60608201529392505050565b600060408284031215612071578081fd5b6040516040810181811067ffffffffffffffff82111715612094576120946129e6565b604052825181526020928301519281019290925250919050565b6000602082840312156120bf578081fd5b815167ffffffffffffffff808211156120d6578283fd5b81840191506101e08083870312156120ec578384fd5b6120f581612908565b9050825182811115612105578485fd5b61211187828601611dd9565b8252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015261215c60e08401611d4c565b60e08201526101008084015183811115612174578586fd5b61218088828701611d57565b8284015250506101208084015183811115612199578586fd5b6121a588828701611d57565b82840152505061014080840151838111156121be578586fd5b6121ca88828701611d57565b82840152505061016080840151838111156121e3578586fd5b6121ef88828701611d57565b8284015250506101808084015183811115612208578586fd5b61221488828701611d57565b8284015250506101a0808401518381111561222d578586fd5b61223988828701611d57565b8284015250506101c08084015183811115612252578586fd5b61225e88828701611d57565b918301919091525095945050505050565b600060208284031215612280578081fd5b5051919050565b60008060408385031215612299578182fd5b50508035926020909101359150565b6000806000606084860312156122bc578081fd5b833592506020840135915060408401356122d5816129fc565b809150509250925092565b6001600160a01b03169052565b6000815180845260208085019450808401835b8381101561231c57815187529582019590820190600101612300565b509495945050505050565b6000815180845261233f816020860160208601612989565b601f01601f19169290920160200192915050565b80516001600160a01b031682526020808201519083015260409081015160ff16910152565b60006101e0825181855261238e82860182612327565b9150506020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e08301516123df60e08601826122e0565b5061010080840151858303828701526123f883826122ed565b92505050610120808401518583038287015261241483826122ed565b92505050610140808401518583038287015261243083826122ed565b92505050610160808401518583038287015261244c83826122ed565b92505050610180808401518583038287015261246883826122ed565b925050506101a0808401518583038287015261248483826122ed565b925050506101c080840151858303828701526124a083826122ed565b9695505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561256a57603f19888603018452612558858351612378565b9450928501929085019060010161253c565b5092979650505050505050565b901515815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6000602082526109d06020830184612327565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526045908201527f43616e206f6e6c792062652063616c6c6564206966206164647265737365735060408201527f726f766964657220697320656d7074792c206d73672e73656e646572206f722060608201526437bbb732b960d91b608082015260a00190565b60208082526019908201527f475076323a206661696c6564207472616e7366657246726f6d00000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000604082015260600190565b6020808252601c908201527f5265717569726573206d73672e73656e6465722068617320726f6c6500000000604082015260600190565b602080825260409082018190527f5265717569726573206d73672e73656e6465722069732066726f6d20636f6e74908201527f726163742061646472657373207265676973746572656420746f205f6e616d65606082015260800190565b600085825284602083015283604083015260806060830152825160808301526020830151608060a08401526127d7610100840182612327565b604085015160c08501526060909401516001600160a01b031660e0909301929092525090949350505050565b848152602081018490526040810183905260c08101610dae6060830184612353565b81518152602080830151908201526040918201519181019190915260600190565b6000602082528251602083015260208301516080604084015261286c60a0840182612327565b6040850151606085810191909152909401516001600160a01b03166080909301929092525090919050565b6000602082526109d06020830184612378565b9283526020830191909152604082015260600190565b92835260208301919091526001600160a01b0316604082015260600190565b918252602082015260400190565b93845260208401929092526040830152606082015260800190565b60405181810167ffffffffffffffff8111828210171561292a5761292a6129e6565b604052919050565b600067ffffffffffffffff82111561294c5761294c6129e6565b50601f01601f191660200190565b6000821982111561296d5761296d6129d0565b500190565b600082821015612984576129846129d0565b500390565b60005b838110156129a457818101518382015260200161298c565b838111156108435750506000910152565b60006000198214156129c9576129c96129d0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461139a57600080fdfea2646970667358221220ae34e67b5f1d0ff9787e9695ac43549351dafd830a80c003dc19603a4101452864736f6c63430008000033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c8063982714b6116100f9578063cfd8d6c011610097578063dff3b49711610071578063dff3b49714610388578063e5b5019a1461039b578063f2fde38b146103a3578063fbd2817f146103b6576101c4565b8063cfd8d6c01461034f578063daea85c514610362578063dd06ef0214610375576101c4565b8063adcd2d21116100d3578063adcd2d21146102f3578063b817bcf714610306578063b852204314610319578063bebf138f1461032e576101c4565b8063982714b6146102b8578063985fadc8146102cb578063a4a1e263146102de576101c4565b806369c212f61161016657806379a558e71161014057806379a558e7146102825780638d80c922146102955780638da5cb5b146102a85780638f299b1e146102b0576101c4565b806369c212f6146102475780636ed6da9e14610267578063715018a61461027a576101c4565b8063128fdb48116101a2578063128fdb481461021c5780631848effa1461022457806319872f761461022c57806341c0e1b51461023f576101c4565b80630542975c146101c957806311e0c07b146101e7578063121ef24314610207575b600080fd5b6101d16103c9565b6040516101de91906124aa565b60405180910390f35b6101fa6101f53660046122a8565b6103d8565b6040516101de9190612577565b61021a610215366004611f19565b610461565b005b61021a610638565b6101d1610849565b6101d161023a366004611edd565b610858565b61021a6108e1565b61025a610255366004611e21565b610917565b6040516101de9190612897565b61025a610275366004611edd565b6109d7565b61021a610a4c565b6101fa610290366004611e21565b610a60565b6101d16102a3366004611edd565b610b16565b6101d1610b23565b61021a610b32565b6101fa6102c6366004612287565b610cd2565b6101fa6102d9366004611ef5565b610db7565b6102e6610dfe565b6040516101de9190612582565b6101fa610301366004611e92565b610e11565b6101fa610314366004611e21565b610ea3565b610321610f5a565b6040516101de9190612517565b61034161033c366004611edd565b611026565b6040516101de9291906124be565b61021a61035d366004611e21565b611151565b61021a610370366004611e21565b61123b565b610341610383366004611e21565b61130b565b6102e6610396366004611e21565b611350565b6102e661135d565b61021a6103b1366004611e21565b611363565b6101fa6103c4366004612287565b61139d565b6007546001600160a01b031690565b60405163fbd2817f60e01b81526000906001600160a01b0383169063fbd2817f9061040990879087906004016128df565b60206040518083038186803b15801561042157600080fd5b505afa158015610435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104599190611ebd565b949350505050565b600061046b610dfe565b9050801561047b5780821061047e565b81155b60405180604001604052806002815260200161031360f41b815250906104c05760405162461bcd60e51b81526004016104b791906125a2565b60405180910390fd5b506000819050600060405180608001604052808381526020018681526020018581526020016104ed61142e565b6001600160a01b0316905260405163729dfdcd60e11b815290915060009073__$2fdc6bd74422c331d4350e08f48e4d7efc$__9063e53bfb9a9061053d908490600290600590889060040161279e565b60206040518083038186803b15801561055557600080fd5b505af4158015610569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058d9190611ebd565b90508080156105ae575060016105a1610dfe565b6105ab9190612972565b83145b604051806040016040528060018152602001600760fb1b815250906105e65760405162461bcd60e51b81526004016104b791906125a2565b506105ef61142e565b6001600160a01b0316837fbee9c5c7ffbde119e3d12f30b5b584a6b78652a5ce90278f90c9c98c0f3178db846040516106289190612846565b60405180910390a3505050505050565b600061064261142e565b9050600061065864212aaca2a960d91b83610db7565b90508015604051806040016040528060018152602001603960f81b815250906106945760405162461bcd60e51b81526004016104b791906125a2565b5060006106a964212aaca2a960d91b84611432565b90506106bd64212aaca2a960d91b8461156d565b60408051606080820183526001600160a01b038616825283830180516020908101519084015251015160ff16818301529051633bb7b3f960e01b815260009173__$2fdc6bd74422c331d4350e08f48e4d7efc$__91633bb7b3f99161072d91600291600591879190600401612803565b60206040518083038186803b15801561074557600080fd5b505af4158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d9190611ebd565b90508060405180604001604052806002815260200161313160f01b815250906107b95760405162461bcd60e51b81526004016104b791906125a2565b506107d36b2122a1a7a6a2afa12aaca2a960a11b856115e7565b6108436040518060c00160405280866001600160a01b0316815260200184600001516001600160a01b0316815260200184602001516001600160a01b0316815260200184608001516000015181526020018460800151602001518152602001846080015160400151815250611622565b50505050565b6007546001600160a01b031681565b600754604051630cc397bb60e11b81526000916001600160a01b0316906319872f7690610889908590600401612582565b60206040518083038186803b1580156108a157600080fd5b505afa1580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d99190611e3d565b90505b919050565b6007546001600160a01b0316331461090957634e487b7160e01b600052600160045260246000fd5b6007546001600160a01b0316ff5b61091f611c29565b6001600160a01b038216600090815260056020526040902073__$2fdc6bd74422c331d4350e08f48e4d7efc$__632aa8eb808261095d600287611820565b866040518463ffffffff1660e01b815260040161097c939291906128c0565b60006040518083038186803b15801561099457600080fd5b505af41580156109a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d091908101906120ae565b9392505050565b6109df611c29565b60006005816109ee8186611835565b6001600160a01b031681526020810191909152604001600020905073__$2fdc6bd74422c331d4350e08f48e4d7efc$__632aa8eb808285610a2e81610b16565b6040518463ffffffff1660e01b815260040161097c939291906128c0565b610a54611841565b610a5e6000611880565b565b6000610a7464212aaca2a960d91b83610db7565b80156108d9575042610a8c632aa9a2a960e11b610858565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b8152600401610ab791906124aa565b60006040518083038186803b158015610acf57600080fd5b505afa158015610ae3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b0b91908101906120ae565b604001511192915050565b6000806109d08184611835565b6006546001600160a01b031690565b6000610b3c61142e565b90506000610b536529a2a62622a960d11b83610db7565b9050801560405180604001604052806002815260200161189960f11b81525090610b905760405162461bcd60e51b81526004016104b791906125a2565b506000610ba66529a2a62622a960d11b84611432565b9050610bbb6529a2a62622a960d11b8461156d565b60408051606080820183526001600160a01b038616825283830180516020908101519084015251015160ff16818301529051633ea5a5a360e11b815260009173__$2fdc6bd74422c331d4350e08f48e4d7efc$__91637d4b4b4691610c2b91600291600591879190600401612803565b60206040518083038186803b158015610c4357600080fd5b505af4158015610c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b9190611ebd565b90508060405180604001604052806002815260200161313360f01b81525090610cb75760405162461bcd60e51b81526004016104b791906125a2565b506107d36c2122a1a7a6a2afa9a2a62622a960991b856115e7565b60006427a92222a960d91b610ce681610858565b6001600160a01b0316610cf761142e565b6001600160a01b031614610d1d5760405162461bcd60e51b81526004016104b790612740565b60405163a292a61360e01b815260009073__$2fdc6bd74422c331d4350e08f48e4d7efc$__9063a292a61390610d5e908790899086906005906004016128ed565b60206040518083038186803b158015610d7657600080fd5b505af4158015610d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dae9190611ebd565b95945050505050565b600080610dd16a20a1a62fa6a0a720a3a2a960a91b610858565b6001600160a01b03166391d1485485856040518363ffffffff1660e01b815260040161040992919061258b565b600080610e0b60006118d2565b91505090565b60006247494760e81b610e2381610858565b6001600160a01b0316610e3461142e565b6001600160a01b031614610e5a5760405162461bcd60e51b81526004016104b790612740565b600073__$2fdc6bd74422c331d4350e08f48e4d7efc$__63a2caedd685610e8088611350565b600060056040518563ffffffff1660e01b8152600401610d5e94939291906128ed565b6000610eb86529a2a62622a960d11b83610db7565b80156108d9575042610ed0632aa9a2a960e11b610858565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b8152600401610efb91906124aa565b60006040518083038186803b158015610f1357600080fd5b505afa158015610f27573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f4f91908101906120ae565b608001511192915050565b60606000610f66610dfe565b905060008167ffffffffffffffff811115610f9157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fca57816020015b610fb7611c29565b815260200190600190039081610faf5790505b50905060005b8281101561101f57610fe1816109d7565b82828151811061100157634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080611017906129b5565b915050610fd0565b5091505090565b600080600073__$2fdc6bd74422c331d4350e08f48e4d7efc$__63f1193ae985600060056040518463ffffffff1660e01b8152600401611068939291906128aa565b60206040518083038186803b15801561108057600080fd5b505af4158015611094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b8919061226f565b604051631900f20b60e21b815290915073__$30e2c0763bc74e29ca837c0a99f7d1b333$__90636403c82c906110f89084906000906005906004016128aa565b604080518083038186803b15801561110f57600080fd5b505af4158015611123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111479190611e59565b9250925050915091565b6001600160a01b038116158061117157506007546001600160a01b031633145b806111fd5750336001600160a01b0316306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111ba57600080fd5b505afa1580156111ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f29190611e3d565b6001600160a01b0316145b6112195760405162461bcd60e51b81526004016104b7906125fb565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6d282927aa27a1a7a62fa0a226a4a760911b611259816102d961142e565b6112755760405162461bcd60e51b81526004016104b790612709565b60006112866211105560ea1b610858565b60085460405163095ea7b360e01b81529192506001600160a01b0385169163095ea7b3916112b9918591906004016124fe565b602060405180830381600087803b1580156112d357600080fd5b505af11580156112e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190611ebd565b600080600073__$2fdc6bd74422c331d4350e08f48e4d7efc$__635e80e951856002600060056040518563ffffffff1660e01b815260040161106894939291906124d8565b60006108d9600283611820565b60085481565b61136b611841565b6001600160a01b0381166113915760405162461bcd60e51b81526004016104b7906125b5565b61139a81611880565b50565b604051630dde020f60e01b815260009073__$2fdc6bd74422c331d4350e08f48e4d7efc$__90630dde020f906113de908690869086906005906004016128ed565b60206040518083038186803b1580156113f657600080fd5b505af415801561140a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d09190611ebd565b3390565b61143a611ca8565b611442611ce6565b64212aaca2a960d91b8414156114615761145a6118dd565b905061146c565b61146961197b565b90505b6000806114788561130b565b9150915060006114866119dc565b6040805160608101825286518152825160208083019190915283015181830152905163013a9d5b60e01b815291925060009173__$30e2c0763bc74e29ca837c0a99f7d1b333$__9163013a9d5b916114e19190600401612825565b60606040518083038186803b1580156114f957600080fd5b505af415801561150d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115319190611f95565b6040805160a0810182526001600160a01b0396871681529490951660208501529383019490945260608201526080810191909152949350505050565b6115846a20a1a62fa6a0a720a3a2a960a91b610858565b6001600160a01b0316632f2ff15d83836040518363ffffffff1660e01b81526004016115b192919061258b565b600060405180830381600087803b1580156115cb57600080fd5b505af11580156115df573d6000803e3d6000fd5b505050505050565b6115f561058560f41b610858565b6001600160a01b031663293c6a3a83836040518363ffffffff1660e01b81526004016115b192919061258b565b60006116336211105560ea1b610858565b905060008260a0015183608001518460600151611650919061295a565b61165a919061295a565b90506116ea83600001513083856001600160a01b031663e5a6b10f6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156116a157600080fd5b505af11580156116b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d99190611e3d565b6001600160a01b0316929190611a74565b60208301516060840151604051636203b43b60e11b81526001600160a01b0385169263c40768769261171e926004016124fe565b600060405180830381600087803b15801561173857600080fd5b505af115801561174c573d6000803e3d6000fd5b50505060408085015160808601519151636203b43b60e11b81526001600160a01b038616935063c40768769261178592916004016124fe565b600060405180830381600087803b15801561179f57600080fd5b505af11580156117b3573d6000803e3d6000fd5b5050505060a0830151604051636203b43b60e11b81526001600160a01b0384169163c4076876916117e9916000916004016124fe565b600060405180830381600087803b15801561180357600080fd5b505af1158015611817573d6000803e3d6000fd5b50505050505050565b60006109d0836001600160a01b038416611ae6565b60006109d08383611b26565b61184961142e565b6001600160a01b031661185a610b23565b6001600160a01b031614610a5e5760405162461bcd60e51b81526004016104b79061269d565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006108d982611b5e565b6118e5611ce6565b61190674282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610858565b6001600160a01b0316632c53f6c46040518163ffffffff1660e01b815260040160806040518083038186803b15801561193e57600080fd5b505afa158015611952573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119769190611ff0565b905090565b611983611ce6565b6119a474282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610858565b6001600160a01b031663688c4b246040518163ffffffff1660e01b815260040160806040518083038186803b15801561193e57600080fd5b6119e4611d11565b611a0574282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610858565b6001600160a01b0316639af1da486040518163ffffffff1660e01b8152600401604080518083038186803b158015611a3c57600080fd5b505afa158015611a50573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119769190612060565b6040516323b872dd60e01b8082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af1611ab9573d6000803e3d6000fd5b50611ac385611b62565b611adf5760405162461bcd60e51b81526004016104b790612666565b5050505050565b600081815260028301602052604081205480151580611b0a5750611b0a8484611c09565b6109d05760405162461bcd60e51b81526004016104b7906126d2565b6000826000018281548110611b4b57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b5490565b6000611b86565b62461bcd60e51b6000526020600452806024528160445260646000fd5b3d8015611bc55760208114611bf657611bc07f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f611b69565b611c03565b823b611bed57611bed7311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b6014611b69565b60019150611c03565b3d6000803e600051151591505b50919050565b60008181526001830160205260408120546109d090849084908490151584565b604051806101e001604052806060815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6040805160a08101825260008082526020820152908101611cc7611ce6565b8152602001611cd4611d11565b8152602001611ce1611d2b565b905290565b6040518060800160405280600081526020016000815260200160008152602001600060ff1681525090565b604051806040016040528060008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b80516108dc816129fc565b600082601f830112611d67578081fd5b8151602067ffffffffffffffff821115611d8357611d836129e6565b808202611d91828201612908565b838152828101908684018388018501891015611dab578687fd5b8693505b85841015611dcd578051835260019390930192918401918401611daf565b50979650505050505050565b600082601f830112611de9578081fd5b8151611dfc611df782612932565b612908565b818152846020838601011115611e10578283fd5b610459826020830160208701612989565b600060208284031215611e32578081fd5b81356109d0816129fc565b600060208284031215611e4e578081fd5b81516109d0816129fc565b60008060408385031215611e6b578081fd5b8251611e76816129fc565b6020840151909250611e87816129fc565b809150509250929050565b60008060408385031215611ea4578182fd5b8235611eaf816129fc565b946020939093013593505050565b600060208284031215611ece578081fd5b815180151581146109d0578182fd5b600060208284031215611eee578081fd5b5035919050565b60008060408385031215611f07578182fd5b823591506020830135611e87816129fc565b60008060408385031215611f2b578182fd5b823567ffffffffffffffff811115611f41578283fd5b8301601f81018513611f51578283fd5b8035611f5f611df782612932565b818152866020838501011115611f73578485fd5b8160208401602083013790810160209081019490945295939092013593505050565b600060608284031215611fa6578081fd5b6040516060810181811067ffffffffffffffff82111715611fc957611fc96129e6565b80604052508251815260208301516020820152604083015160408201528091505092915050565b600060808284031215612001578081fd5b6040516080810181811067ffffffffffffffff82111715612024576120246129e6565b8060405250825181526020830151602082015260408301516040820152606083015160ff81168114612054578283fd5b60608201529392505050565b600060408284031215612071578081fd5b6040516040810181811067ffffffffffffffff82111715612094576120946129e6565b604052825181526020928301519281019290925250919050565b6000602082840312156120bf578081fd5b815167ffffffffffffffff808211156120d6578283fd5b81840191506101e08083870312156120ec578384fd5b6120f581612908565b9050825182811115612105578485fd5b61211187828601611dd9565b8252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015261215c60e08401611d4c565b60e08201526101008084015183811115612174578586fd5b61218088828701611d57565b8284015250506101208084015183811115612199578586fd5b6121a588828701611d57565b82840152505061014080840151838111156121be578586fd5b6121ca88828701611d57565b82840152505061016080840151838111156121e3578586fd5b6121ef88828701611d57565b8284015250506101808084015183811115612208578586fd5b61221488828701611d57565b8284015250506101a0808401518381111561222d578586fd5b61223988828701611d57565b8284015250506101c08084015183811115612252578586fd5b61225e88828701611d57565b918301919091525095945050505050565b600060208284031215612280578081fd5b5051919050565b60008060408385031215612299578182fd5b50508035926020909101359150565b6000806000606084860312156122bc578081fd5b833592506020840135915060408401356122d5816129fc565b809150509250925092565b6001600160a01b03169052565b6000815180845260208085019450808401835b8381101561231c57815187529582019590820190600101612300565b509495945050505050565b6000815180845261233f816020860160208601612989565b601f01601f19169290920160200192915050565b80516001600160a01b031682526020808201519083015260409081015160ff16910152565b60006101e0825181855261238e82860182612327565b9150506020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e08301516123df60e08601826122e0565b5061010080840151858303828701526123f883826122ed565b92505050610120808401518583038287015261241483826122ed565b92505050610140808401518583038287015261243083826122ed565b92505050610160808401518583038287015261244c83826122ed565b92505050610180808401518583038287015261246883826122ed565b925050506101a0808401518583038287015261248483826122ed565b925050506101c080840151858303828701526124a083826122ed565b9695505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561256a57603f19888603018452612558858351612378565b9450928501929085019060010161253c565b5092979650505050505050565b901515815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6000602082526109d06020830184612327565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526045908201527f43616e206f6e6c792062652063616c6c6564206966206164647265737365735060408201527f726f766964657220697320656d7074792c206d73672e73656e646572206f722060608201526437bbb732b960d91b608082015260a00190565b60208082526019908201527f475076323a206661696c6564207472616e7366657246726f6d00000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000604082015260600190565b6020808252601c908201527f5265717569726573206d73672e73656e6465722068617320726f6c6500000000604082015260600190565b602080825260409082018190527f5265717569726573206d73672e73656e6465722069732066726f6d20636f6e74908201527f726163742061646472657373207265676973746572656420746f205f6e616d65606082015260800190565b600085825284602083015283604083015260806060830152825160808301526020830151608060a08401526127d7610100840182612327565b604085015160c08501526060909401516001600160a01b031660e0909301929092525090949350505050565b848152602081018490526040810183905260c08101610dae6060830184612353565b81518152602080830151908201526040918201519181019190915260600190565b6000602082528251602083015260208301516080604084015261286c60a0840182612327565b6040850151606085810191909152909401516001600160a01b03166080909301929092525090919050565b6000602082526109d06020830184612378565b9283526020830191909152604082015260600190565b92835260208301919091526001600160a01b0316604082015260600190565b918252602082015260400190565b93845260208401929092526040830152606082015260800190565b60405181810167ffffffffffffffff8111828210171561292a5761292a6129e6565b604052919050565b600067ffffffffffffffff82111561294c5761294c6129e6565b50601f01601f191660200190565b6000821982111561296d5761296d6129d0565b500190565b600082821015612984576129846129d0565b500390565b60005b838110156129a457818101518382015260200161298c565b838111156108435750506000910152565b60006000198214156129c9576129c96129d0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461139a57600080fdfea2646970667358221220ae34e67b5f1d0ff9787e9695ac43549351dafd830a80c003dc19603a4101452864736f6c63430008000033",
    "libraries": {
        "UserLogic": "0xD6C850aeBFDC46D7F4c207e445cC0d6B0919BDBe",
        "InviterLogic": "0x500D1d6A4c7D8Ae28240b47c8FCde034D827fD5e",
        "UserDataLogic": "0xc4905364b78a742ccce7B890A89514061E47068D"
    },
    "devdoc": {
        "author": "Blockswan",
        "details": "To be covered by a proxy contract, owned by the addressProvider of the specific marketplaceAll admin functions are callable by the protocolConfigurator contract defined also in the   addressProvider*",
        "kind": "dev",
        "methods": {
            "ADDRESSES_PROVIDER()": {
                "returns": {
                    "_0": "The address of the AddressProvider"
                }
            },
            "constructor": {
                "details": "Constructor.",
                "params": {
                    "provider": "The address of the AddressProvider"
                }
            },
            "createBuyerOrder(uint256,uint256)": {
                "params": {
                    "buyerId": "the id of the buyer",
                    "newOrderId": "the new gig orderId."
                },
                "returns": {
                    "_0": "success the relation has been addded.*"
                }
            },
            "createGig(address,uint256)": {
                "params": {
                    "caller": "the wallet creating the gig.",
                    "newGigId": "the new gig id."
                },
                "returns": {
                    "_0": "success the relation has been addded.*"
                }
            },
            "createUser(string,uint256)": {
                "params": {
                    "inviterId": "the userID of whom invited the newUser*",
                    "metadata": "the user related information"
                }
            },
            "fetchContract(bytes32)": {
                "params": {
                    "_name": "the bytes32 name of the contract"
                }
            },
            "getAddressById(uint256)": {
                "params": {
                    "userId": "The id of the user."
                },
                "returns": {
                    "_0": "userAddress the wallet of the user*"
                }
            },
            "getIdByAddress(address)": {
                "params": {
                    "account": "The address of the user"
                },
                "returns": {
                    "_0": "userId The userId associated to the account address*"
                }
            },
            "getInvitersById(uint256)": {
                "params": {
                    "userId": "the user id to get the inviters from"
                },
                "returns": {
                    "_0": "address the pubkey of inviter0",
                    "_1": "address the pubkey of inviter1*"
                }
            },
            "getInvitersByUserAddress(address)": {
                "params": {
                    "account": "the wallet to get the inviters from"
                },
                "returns": {
                    "_0": "address the pubkey of inviter0",
                    "_1": "address the pubkey of inviter1*"
                }
            },
            "getUserByAddress(address)": {
                "params": {
                    "pubKey": "The address as parameter."
                },
                "returns": {
                    "_0": "User the user linked to the public key*"
                }
            },
            "getUserById(uint256)": {
                "params": {
                    "userId": "The id of the user."
                },
                "returns": {
                    "_0": "User The data associated to the user it*"
                }
            },
            "getUserList()": {
                "details": "It does not include dropped users",
                "returns": {
                    "_0": "A data array of the underlying user.*"
                }
            },
            "getUsersCount()": {
                "returns": {
                    "_0": "the current revision*"
                }
            },
            "isGigOwner(uint256,uint256)": {
                "params": {
                    "gigId": "the gigId",
                    "userId": "the user id to check if he own the gig"
                },
                "returns": {
                    "_0": "bool if the gigId is owned by the given userId*"
                }
            },
            "owner()": {
                "details": "Returns the address of the current owner."
            },
            "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
            },
            "setProvider(address)": {
                "params": {
                    "_providerAddress": "The address of the AddressProvider"
                }
            },
            "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            }
        },
        "title": "User contract",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "ADDRESSES_PROVIDER()": {
                "notice": "Returns the contract address of the IAddressProvider"
            },
            "createBuyerOrder(uint256,uint256)": {
                "notice": "add the order id to the user buyerOrderIds set."
            },
            "createGig(address,uint256)": {
                "notice": "add the gig id to the user gigIds set."
            },
            "createUser(string,uint256)": {
                "notice": "Create a new users with the msg.sender wallet"
            },
            "fetchContract(bytes32)": {
                "notice": "fetch the contract address from the ADDRESSS_PROVIDERthrows error if address === 0"
            },
            "getAddressById(uint256)": {
                "notice": "Returns the user wallet address."
            },
            "getIdByAddress(address)": {
                "notice": "Returns the user id from a given address."
            },
            "getInvitersById(uint256)": {
                "notice": "retrieves the inviters wallet for a given userId"
            },
            "getInvitersByUserAddress(address)": {
                "notice": "retrieves the inviters wallet for a given wallet account"
            },
            "getUserByAddress(address)": {
                "notice": "Returns the user for a given public key."
            },
            "getUserById(uint256)": {
                "notice": "Returns the user data."
            },
            "getUserList()": {
                "notice": "Returns the list of all initialized users."
            },
            "getUsersCount()": {
                "notice": "Returns the current revision of the contract"
            },
            "isGigOwner(uint256,uint256)": {
                "notice": "return true if the gigId is owned by the given userId"
            },
            "kill()": {
                "notice": "kill the current address provider, only callable by the AddressProvider"
            },
            "setProvider(address)": {
                "notice": "set the provider address of the ProviderContract"
            }
        },
        "notice": "User data within an Blockswan protocol's marketplace - Users can:   # login   # edit profile   # invite users   # choose affiliates   # get the access rights to the protocol",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 12750,
                "contract": "contracts/protocol/user/User.sol:User",
                "label": "_userIdToAddress",
                "offset": 0,
                "slot": "0",
                "type": "t_struct(AddressSet)2727_storage"
            },
            {
                "astId": 12753,
                "contract": "contracts/protocol/user/User.sol:User",
                "label": "_userAddressToId",
                "offset": 0,
                "slot": "2",
                "type": "t_struct(AddressToUintMap)1969_storage"
            },
            {
                "astId": 12758,
                "contract": "contracts/protocol/user/User.sol:User",
                "label": "_users",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_address,t_struct(User)10836_storage)"
            },
            {
                "astId": 4101,
                "contract": "contracts/protocol/user/User.sol:User",
                "label": "_owner",
                "offset": 0,
                "slot": "6",
                "type": "t_address"
            },
            {
                "astId": 7100,
                "contract": "contracts/protocol/user/User.sol:User",
                "label": "ADDRESS_PROVIDER",
                "offset": 0,
                "slot": "7",
                "type": "t_contract(IAddressProvider)4606"
            },
            {
                "astId": 7107,
                "contract": "contracts/protocol/user/User.sol:User",
                "label": "MAX_UINT",
                "offset": 0,
                "slot": "8",
                "type": "t_uint256"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
                "base": "t_bytes32",
                "encoding": "dynamic_array",
                "label": "bytes32[]",
                "numberOfBytes": "32"
            },
            "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
            },
            "t_contract(IAddressProvider)4606": {
                "encoding": "inplace",
                "label": "contract IAddressProvider",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(User)10836_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct DataTypes.User)",
                "numberOfBytes": "32",
                "value": "t_struct(User)10836_storage"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => bytes32)",
                "numberOfBytes": "32",
                "value": "t_bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
            },
            "t_struct(AddressSet)2727_storage": {
                "encoding": "inplace",
                "label": "struct EnumerableSet.AddressSet",
                "members": [
                    {
                        "astId": 2726,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "_inner",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_struct(Set)2412_storage"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_struct(AddressToUintMap)1969_storage": {
                "encoding": "inplace",
                "label": "struct EnumerableMap.AddressToUintMap",
                "members": [
                    {
                        "astId": 1968,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "_inner",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_struct(Bytes32ToBytes32Map)1295_storage"
                    }
                ],
                "numberOfBytes": "96"
            },
            "t_struct(Bytes32Set)2606_storage": {
                "encoding": "inplace",
                "label": "struct EnumerableSet.Bytes32Set",
                "members": [
                    {
                        "astId": 2605,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "_inner",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_struct(Set)2412_storage"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_struct(Bytes32ToBytes32Map)1295_storage": {
                "encoding": "inplace",
                "label": "struct EnumerableMap.Bytes32ToBytes32Map",
                "members": [
                    {
                        "astId": 1290,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "_keys",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_struct(Bytes32Set)2606_storage"
                    },
                    {
                        "astId": 1294,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "_values",
                        "offset": 0,
                        "slot": "2",
                        "type": "t_mapping(t_bytes32,t_bytes32)"
                    }
                ],
                "numberOfBytes": "96"
            },
            "t_struct(Set)2412_storage": {
                "encoding": "inplace",
                "label": "struct EnumerableSet.Set",
                "members": [
                    {
                        "astId": 2407,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "_values",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_array(t_bytes32)dyn_storage"
                    },
                    {
                        "astId": 2411,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "_indexes",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_mapping(t_bytes32,t_uint256)"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_struct(UintSet)2884_storage": {
                "encoding": "inplace",
                "label": "struct EnumerableSet.UintSet",
                "members": [
                    {
                        "astId": 2883,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "_inner",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_struct(Set)2412_storage"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_struct(User)10836_storage": {
                "encoding": "inplace",
                "label": "struct DataTypes.User",
                "members": [
                    {
                        "astId": 10804,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "metadata",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_string_storage"
                    },
                    {
                        "astId": 10806,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "inviterId",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 10808,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "buyerUntil",
                        "offset": 0,
                        "slot": "2",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 10810,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "buyerInvites",
                        "offset": 0,
                        "slot": "3",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 10812,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "sellerUntil",
                        "offset": 0,
                        "slot": "4",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 10814,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "sellerInvites",
                        "offset": 0,
                        "slot": "5",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 10817,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "gigIds",
                        "offset": 0,
                        "slot": "6",
                        "type": "t_struct(UintSet)2884_storage"
                    },
                    {
                        "astId": 10820,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "offerIds",
                        "offset": 0,
                        "slot": "8",
                        "type": "t_struct(UintSet)2884_storage"
                    },
                    {
                        "astId": 10823,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "bidIds",
                        "offset": 0,
                        "slot": "10",
                        "type": "t_struct(UintSet)2884_storage"
                    },
                    {
                        "astId": 10826,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "buyerOrderIds",
                        "offset": 0,
                        "slot": "12",
                        "type": "t_struct(UintSet)2884_storage"
                    },
                    {
                        "astId": 10829,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "gigReviewsIds",
                        "offset": 0,
                        "slot": "14",
                        "type": "t_struct(UintSet)2884_storage"
                    },
                    {
                        "astId": 10832,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "userReviewsIds",
                        "offset": 0,
                        "slot": "16",
                        "type": "t_struct(UintSet)2884_storage"
                    },
                    {
                        "astId": 10835,
                        "contract": "contracts/protocol/user/User.sol:User",
                        "label": "reviewsIds",
                        "offset": 0,
                        "slot": "18",
                        "type": "t_struct(UintSet)2884_storage"
                    }
                ],
                "numberOfBytes": "640"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
