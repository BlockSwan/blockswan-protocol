{
    "address": "0x53369fd4680FfE3DfF39Fc6DDa9CfbfD43daeA2E",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "contract IAddressProvider",
                    "name": "provider",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "ADDRESSES_PROVIDER",
            "outputs": [
                {
                    "internalType": "contract IAddressProvider",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "ADDRESS_PROVIDER",
            "outputs": [
                {
                    "internalType": "contract IAddressProvider",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "MAX_UINT",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "erc20",
                    "type": "address"
                }
            ],
            "name": "approve",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "_name",
                    "type": "bytes32"
                }
            ],
            "name": "fetchContract",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                }
            ],
            "name": "getBuyerEntryParams",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "currencyValue",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "timeAdded",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "xpEarned",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint8",
                            "name": "invitationEarned",
                            "type": "uint8"
                        }
                    ],
                    "internalType": "struct DataTypes.EntryParams",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getBuyerEntryParams",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "currencyValue",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "timeAdded",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "xpEarned",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint8",
                            "name": "invitationEarned",
                            "type": "uint8"
                        }
                    ],
                    "internalType": "struct DataTypes.EntryParams",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                }
            ],
            "name": "getDelayTimestamp",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "selfRefund",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "closeTrial",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "endTrial",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct DataTypes.DelayTimestamp",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getDelayTimestamp",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "selfRefund",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "closeTrial",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "endTrial",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct DataTypes.DelayTimestamp",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getGigCreationParams",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "currencyValue",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "xpEarned",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct DataTypes.CreationParams",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                }
            ],
            "name": "getGigCreationParams",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "currencyValue",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "xpEarned",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct DataTypes.CreationParams",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOrderCreationParams",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "trialFlat",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "trialPercent",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "proceedFlat",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "proceedPercent",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct DataTypes.OrderPriceParams",
                    "name": "",
                    "type": "tuple"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                }
            ],
            "name": "getOrderCreationParams",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "trialFlat",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "trialPercent",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "proceedFlat",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "proceedPercent",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct DataTypes.OrderPriceParams",
                    "name": "",
                    "type": "tuple"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                }
            ],
            "name": "getRetributionParams",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "affiliate",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "lvl0AffiliateShare",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct DataTypes.RetributionParams",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getRetributionParams",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "affiliate",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "lvl0AffiliateShare",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct DataTypes.RetributionParams",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getSellerEntryParams",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "currencyValue",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "timeAdded",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "xpEarned",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint8",
                            "name": "invitationEarned",
                            "type": "uint8"
                        }
                    ],
                    "internalType": "struct DataTypes.EntryParams",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                }
            ],
            "name": "getSellerEntryParams",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "currencyValue",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "timeAdded",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "xpEarned",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint8",
                            "name": "invitationEarned",
                            "type": "uint8"
                        }
                    ],
                    "internalType": "struct DataTypes.EntryParams",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "version",
                    "type": "uint256"
                }
            ],
            "name": "getSellerOrderFees",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "trialFlat",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "trialPercent",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "proceedFlat",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "proceedPercent",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct DataTypes.OrderPriceParams",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "_role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "hasProtocolRole",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "userId",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "gigId",
                    "type": "uint256"
                },
                {
                    "internalType": "contract IUser",
                    "name": "UserContract",
                    "type": "address"
                }
            ],
            "name": "isGigOwner",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "isStillBuyer",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "isStillSeller",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "kill",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract IAddressProvider",
                    "name": "_providerAddress",
                    "type": "address"
                }
            ],
            "name": "setProvider",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "currencyValue",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "timeAdded",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "xpEarned",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint8",
                            "name": "invitationEarned",
                            "type": "uint8"
                        }
                    ],
                    "internalType": "struct DataTypes.EntryParams",
                    "name": "newParams",
                    "type": "tuple"
                }
            ],
            "name": "updateBuyerEntryParams",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "selfRefund",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "closeTrial",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "endTrial",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct DataTypes.DelayTimestamp",
                    "name": "newParams",
                    "type": "tuple"
                }
            ],
            "name": "updateDelayTimestamp",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "currencyValue",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "xpEarned",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct DataTypes.CreationParams",
                    "name": "newParams",
                    "type": "tuple"
                }
            ],
            "name": "updateGigCreationParams",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "trialFlat",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "trialPercent",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "proceedFlat",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "proceedPercent",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct DataTypes.OrderPriceParams",
                    "name": "newParams",
                    "type": "tuple"
                }
            ],
            "name": "updateOrderCreationParams",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "affiliate",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "lvl0AffiliateShare",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct DataTypes.RetributionParams",
                    "name": "newParams",
                    "type": "tuple"
                }
            ],
            "name": "updateRetributionParams",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "currencyValue",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "timeAdded",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "xpEarned",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint8",
                            "name": "invitationEarned",
                            "type": "uint8"
                        }
                    ],
                    "internalType": "struct DataTypes.EntryParams",
                    "name": "newParams",
                    "type": "tuple"
                }
            ],
            "name": "updateSellerEntryParams",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0x8124f3a654bcc2465c6960b4fa8c11d551e797c2eaa49d43537d4e7db709ebf8",
    "receipt": {
        "to": null,
        "from": "0xc783df8a850f42e7F7e57013759C285caa701eB6",
        "contractAddress": "0x53369fd4680FfE3DfF39Fc6DDa9CfbfD43daeA2E",
        "transactionIndex": 0,
        "gasUsed": "1890980",
        "logsBloom": "0x
        "blockHash": "0x92a811f5098f93ab0cf0120f3c1cf940da14ee321c5f81fc3a2cb45fcc3b3ed1",
        "transactionHash": "0x8124f3a654bcc2465c6960b4fa8c11d551e797c2eaa49d43537d4e7db709ebf8",
        "logs": [
            {
                "transactionIndex": 0,
                "blockNumber": 22,
                "transactionHash": "0x8124f3a654bcc2465c6960b4fa8c11d551e797c2eaa49d43537d4e7db709ebf8",
                "address": "0x53369fd4680FfE3DfF39Fc6DDa9CfbfD43daeA2E",
                "topics": [
                    "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x000000000000000000000000c783df8a850f42e7f7e57013759c285caa701eb6"
                ],
                "data": "0x",
                "logIndex": 0,
                "blockHash": "0x92a811f5098f93ab0cf0120f3c1cf940da14ee321c5f81fc3a2cb45fcc3b3ed1"
            }
        ],
        "blockNumber": 22,
        "cumulativeGasUsed": "1890980",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x20Ce94F404343aD2752A2D01b43fa407db9E0D00"],
    "numDeployments": 1,
    "solcInputHash": "11b40aac2c6ba2dcd5f594f6e6f90e03",
    "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"fetchContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getBuyerEntryParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"invitationEarned\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.EntryParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerEntryParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"invitationEarned\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.EntryParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getDelayTimestamp\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"selfRefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeTrial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTrial\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.DelayTimestamp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDelayTimestamp\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"selfRefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeTrial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTrial\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.DelayTimestamp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGigCreationParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.CreationParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getGigCreationParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.CreationParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrderCreationParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"trialFlat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trialPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceedFlat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceedPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.OrderPriceParams\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getOrderCreationParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"trialFlat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trialPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceedFlat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceedPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.OrderPriceParams\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getRetributionParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"affiliate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lvl0AffiliateShare\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.RetributionParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRetributionParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"affiliate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lvl0AffiliateShare\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.RetributionParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerEntryParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"invitationEarned\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.EntryParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getSellerEntryParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"invitationEarned\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.EntryParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getSellerOrderFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"trialFlat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trialPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceedFlat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceedPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.OrderPriceParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasProtocolRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gigId\",\"type\":\"uint256\"},{\"internalType\":\"contract IUser\",\"name\":\"UserContract\",\"type\":\"address\"}],\"name\":\"isGigOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isStillBuyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isStillSeller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"_providerAddress\",\"type\":\"address\"}],\"name\":\"setProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"invitationEarned\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.EntryParams\",\"name\":\"newParams\",\"type\":\"tuple\"}],\"name\":\"updateBuyerEntryParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"selfRefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeTrial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTrial\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.DelayTimestamp\",\"name\":\"newParams\",\"type\":\"tuple\"}],\"name\":\"updateDelayTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.CreationParams\",\"name\":\"newParams\",\"type\":\"tuple\"}],\"name\":\"updateGigCreationParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"trialFlat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trialPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceedFlat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceedPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.OrderPriceParams\",\"name\":\"newParams\",\"type\":\"tuple\"}],\"name\":\"updateOrderCreationParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"affiliate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lvl0AffiliateShare\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.RetributionParams\",\"name\":\"newParams\",\"type\":\"tuple\"}],\"name\":\"updateRetributionParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"invitationEarned\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.EntryParams\",\"name\":\"newParams\",\"type\":\"tuple\"}],\"name\":\"updateSellerEntryParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Blockswan\",\"kind\":\"dev\",\"methods\":{\"ADDRESSES_PROVIDER()\":{\"returns\":{\"_0\":\"The address of the AddressProvider\"}},\"fetchContract(bytes32)\":{\"params\":{\"_name\":\"the bytes32 name of the contract\"}},\"getBuyerEntryParams()\":{\"returns\":{\"_0\":\"parameters The paramaters  when accessing the role status\"}},\"getDelayTimestamp()\":{\"returns\":{\"_0\":\"parameters The delay timestamp parametes\"}},\"getGigCreationParams()\":{\"returns\":{\"_0\":\"parameters The parameters when creating a gig\"}},\"getOrderCreationParams()\":{\"returns\":{\"_0\":\"parameters The parameters when creating an order.\",\"_1\":\"sellerFeesParamsVersion The latest fee structur version that will be applied to the seller upon order completion.\"}},\"getRetributionParams()\":{\"returns\":{\"_0\":\"retributions The retribution percentage values of the protocol.\"}},\"getSellerEntryParams()\":{\"returns\":{\"_0\":\"parameters The paramaters  when accessing the role status\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setProvider(address)\":{\"params\":{\"_providerAddress\":\"The address of the AddressProvider\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBuyerEntryParams((uint256,uint256,uint256,uint8))\":{\"params\":{\"newParams\":\"The new buyer entry paramaters\"}},\"updateDelayTimestamp((uint256,uint256,uint256))\":{\"params\":{\"newParams\":\"The new order creation paramaters\"}},\"updateGigCreationParams((uint256,uint256))\":{\"params\":{\"newParams\":\"The new gig creation paramaters\"}},\"updateOrderCreationParams((uint256,uint256,uint256,uint256))\":{\"params\":{\"newParams\":\"The new order creation paramaters\"}},\"updateRetributionParams((uint256,uint256))\":{\"params\":{\"newParams\":\"The new retribution paramaters\"}},\"updateSellerEntryParams((uint256,uint256,uint256,uint8))\":{\"params\":{\"newParams\":\"The new buyer entry paramaters\"}}},\"title\":\"Protocol Configurator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ADDRESSES_PROVIDER()\":{\"notice\":\"Returns the contract address of the IAddressProvider\"},\"fetchContract(bytes32)\":{\"notice\":\"fetch the contract address from the ADDRESSS_PROVIDERthrows error if address === 0\"},\"getBuyerEntryParams()\":{\"notice\":\"Retrieves the parameters when enterering the protocol as a buyer.\"},\"getDelayTimestamp()\":{\"notice\":\"Retrieves the protocol delay timestamp.\"},\"getGigCreationParams()\":{\"notice\":\"Retrieves the parameters when creating a gig.\"},\"getOrderCreationParams()\":{\"notice\":\"Retrieves the parameters when creating an order.\"},\"getRetributionParams()\":{\"notice\":\"Retrieves the retribution percentage values of the protocol.\"},\"getSellerEntryParams()\":{\"notice\":\"Retrieves the parameters when enterering the protocol as a seller.\"},\"kill()\":{\"notice\":\"kill the current address provider, only callable by the AddressProvider\"},\"setProvider(address)\":{\"notice\":\"set the provider address of the ProviderContract\"},\"updateBuyerEntryParams((uint256,uint256,uint256,uint8))\":{\"notice\":\"Update the  parameters when enterering the protocol as as buyer.\"},\"updateDelayTimestamp((uint256,uint256,uint256))\":{\"notice\":\"Update the delays timestamp parameters of the protocol.\"},\"updateGigCreationParams((uint256,uint256))\":{\"notice\":\"Update the gig creation parameters of the protocol.\"},\"updateOrderCreationParams((uint256,uint256,uint256,uint256))\":{\"notice\":\"Update the order creation parameters of the protocol.\"},\"updateRetributionParams((uint256,uint256))\":{\"notice\":\"Update the retributin  parameters of the protocol.\"},\"updateSellerEntryParams((uint256,uint256,uint256,uint8))\":{\"notice\":\"Update the  parameters when enterering the protocol as as seller.\"}},\"notice\":\"Contains all the protocol configuration*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/configuration/ProtocolConfigurator.sol\":\"ProtocolConfigurator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/imports/gnosis/contracts/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../../openzeppelin/contracts/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developer^\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(from, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(freeMemoryPointer, 36),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTransferResult(\\n        IERC20 token\\n    ) private view returns (bool success) {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n            // Non-standard ERC20 transfer without return.\\n            case 0 {\\n                // NOTE: When the return data size is 0, verify that there\\n                // is code at the address. This is done in order to maintain\\n                // compatibility with Solidity calling conventions.\\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                if iszero(extcodesize(token)) {\\n                    revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                }\\n\\n                success := 1\\n            }\\n            // Standard ERC20 transfer returning boolean success value.\\n            case 32 {\\n                returndatacopy(0, 0, returndatasize())\\n\\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                // as `true` for a boolean. In order to stay compatible with\\n                // OpenZeppelin's `SafeERC20` library which is known to work\\n                // with the existing ERC20 implementation we care about,\\n                // make sure we return success for any non-zero return value\\n                // from the `transfer*` call.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            default {\\n                revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16a97de85622232442771b5974e025bbac9d4bb56fde737f58f3b363ac09ef5\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/imports/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\",\"keccak256\":\"0x632d89cfbd5134bb48ab9f27f8acb3ef6230858240a06c01860523508cce9502\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\",\"keccak256\":\"0xbe08f54c573afa66d30bddd5781ad651fa0ac388458375e4c4c3f04cf2baf6b1\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\",\"keccak256\":\"0x6edba116c3de120257f96a0e2cf286645d5b3317a06a20cbf933f1fa2166d7f6\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\",\"keccak256\":\"0x9f78e6c3f521399028621916f4fb097a485c053041141af27c978b67e6fb769a\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbe7e8c250bbebe46299f337b29c535ce00d67fe289eb03d84ebbd74934eec19f\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x3e3b5b4dd5f5483461605d0fa56c249517effc2500a4f6da288d6baabf01ed4d\",\"license\":\"MIT\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {IAccessControlEnumerable} from \\\"../imports/openzeppelin/contracts/IAccessControlEnumerable.sol\\\";\\n\\n/**\\n * @title IACLManager\\n * @author Blockswan\\n * @notice Defines the basic interface for the ACLManager\\n **/\\ninterface IACLManager is IAccessControlEnumerable {\\n    /**\\n     * @notice Set the role as admin of a specific role.\\n     * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\\n     * @param role The role to be managed by the admin role\\n     * @param adminRole The admin role\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0xd78c8b8344352eda17c37b4474398fcf7c2f08c6855c87de8d6e9439e4e1ca16\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressProvider.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title The interface for contracts to interact with the Blockswan Address Provider contract\\ninterface IAddressProvider {\\n    /**\\n     * @dev Emitted when a new marketplaceId is set.\\n     * @param oldMarketplaceId The address of the old marketplaceId\\n     * @param newMarketplaceId The address of the new marketplaceId\\n     */\\n    event MarketplaceIdSet(\\n        string indexed oldMarketplaceId,\\n        string indexed newMarketplaceId\\n    );\\n\\n    /**\\n     * @dev Emitted when a new contract is added to the AddressProvider.\\n     * @param _name The name assigned in the AddressProvider.\\n     * @param _address The address of the new contract\\n     */\\n    event ContractAdded(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a new contract is removed from the AddressProvider.\\n     * @param _name The contract name removed in the AddressProvider.\\n     * @param _address The address of the removed contract\\n     */\\n    event ContractRemoved(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a contract is upgraded in the AddressProvider.\\n     * @param _name The contract name upraded in the AddressProvider.\\n     * @param _oldAddress The old address prior upgrade\\n     * @param _newAddress The new address after upgrade\\n     */\\n    event ContractUpgraded(\\n        bytes32 _name,\\n        address _oldAddress,\\n        address _newAddress\\n    );\\n\\n    /**\\n     * @notice returns contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     * @return contractAddr - address of contract registered under given provider key\\n     */\\n    function getContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice overloaded getContract to return explicit version of contract */\\n    function getContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    function getContractVersionCount(\\n        bytes32 _name\\n    ) external view returns (uint);\\n\\n    /**\\n     * @dev addContract does two things:\\n     *      1.) registers the address of given ProviderContract in the registry\\n     *      2.) sets the registry address in given ProviderContract so only\\n     *          the registry can call functions on given contract\\n     */\\n    function addContract(bytes32 _name, address _address) external;\\n\\n    /**\\n     * @dev removes contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     */\\n    function removeContract(bytes32 _name) external;\\n\\n    /**\\n     * @notice replaces contract address registered under given key with provided address\\n     * @param _name - registry key for lookup\\n     * @param _newAddress - new contract address to register under given key\\n     */\\n    function upgradeContract(bytes32 _name, address _newAddress) external;\\n}\\n\",\"keccak256\":\"0x46fd1f2889b6a5fbd60209f90b44ced918175d5ef3b05e7d8dd526a4afd77bdc\",\"license\":\"MIT\"},\"contracts/interfaces/IBSWAN.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IBSWAN\\n * @author Blockswan\\n * @notice Defines the basic interface for the Blockswan Trust\\n **/\\ninterface IBSWAN is IERC20 {\\n    /**\\n     * @notice Update the DAT config.\\n     * @param _newOwner The new owner of the DAT\\n     * @param _revenueCommitmentBasisPoints the share of revenues tranfered to the buyback reserve\\n     * @param _minInvestment the min investment required in currency value\\n     */\\n    function updateConfig(\\n        address payable _newOwner,\\n        uint256 _revenueCommitmentBasisPoints,\\n        uint256 _minInvestment\\n    ) external;\\n\\n    /**\\n     * @notice Update the DAT config.\\n     * @param _currencyValue the quantity of currency to buy\\n     * @return tokenValue the quantity of BSWAN bought for the _currencyValue\\n     */\\n    function estimateBuyValue(\\n        uint256 _currencyValue\\n    ) external view returns (uint256);\\n\\n    /** @notice Purchase BSWAN tokens with the given amount of currency.\\n     * @param _to The account to receive the BSWAN tokens from this purchase.\\n     * @param _currencyValue How much currency to spend in order to buy BSWAN.\\n     * @param _minTokensBought Buy at least this many BSWAN tokens or the transaction reverts.\\n     * @dev _minTokensBought is necessary as the price will change if some elses transaction mines after\\n     * yours was submitted.\\n     */\\n    function buy(\\n        address _to,\\n        uint256 _currencyValue,\\n        uint256 _minTokensBought\\n    ) external payable;\\n\\n    /// Pay\\n    function estimatePayValue(\\n        uint256 _currencyValue\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Pay the organization on-chain.\\n     * @param _to The account which receives tokens for the contribution. If this address\\n     * is not authorized to receive tokens then they will be sent to the beneficiary account instead.\\n     * @param _currencyValue How much currency which was paid.\\n     */\\n    function pay(address _to, uint _currencyValue) external payable;\\n\\n    /// @notice The address of the token used as reserve in the bonding curve\\n    /// (e.g. the DAI contract)\\n    function currency() external returns (IERC20);\\n}\\n\",\"keccak256\":\"0xb07e5fcfdebb6b3f050ad1f172eb7923d06ce3727af5528f4acc236f87d9b146\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {IAccessControlEnumerable} from \\\"../imports/openzeppelin/contracts/IAccessControlEnumerable.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IProtocolConfigurator\\n * @author Blockswan\\n * @notice Defines the basic interface for the ProtocolConfigurator\\n **/\\ninterface IProtocolConfigurator {\\n    /**\\n     * @notice Retrieves the parameters when enterering the protocol as a buyer.\\n     * @return parameters The paramaters  when accessing the role status\\n     */\\n    function getBuyerEntryParams()\\n        external\\n        view\\n        returns (DataTypes.EntryParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getBuyerEntryParams(\\n        uint256 version\\n    ) external view returns (DataTypes.EntryParams memory);\\n\\n    /**\\n     * @notice Update the  parameters when enterering the protocol as as buyer.\\n     * @param newParams The new buyer entry paramaters\\n     */\\n    function updateBuyerEntryParams(\\n        DataTypes.EntryParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when enterering the protocol as a seller.\\n     * @return parameters The paramaters  when accessing the role status\\n     */\\n    function getSellerEntryParams()\\n        external\\n        view\\n        returns (DataTypes.EntryParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getSellerEntryParams(\\n        uint256 version\\n    ) external view returns (DataTypes.EntryParams memory);\\n\\n    /**\\n     * @notice Update the  parameters when enterering the protocol as as seller.\\n     * @param newParams The new buyer entry paramaters\\n     */\\n    function updateSellerEntryParams(\\n        DataTypes.EntryParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the retribution percentage values of the protocol.\\n     * @return retributions The retribution percentage values of the protocol.\\n     */\\n    function getRetributionParams()\\n        external\\n        view\\n        returns (DataTypes.RetributionParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getRetributionParams(\\n        uint256 version\\n    ) external view returns (DataTypes.RetributionParams memory);\\n\\n    /**\\n     * @notice Update the retributin  parameters of the protocol.\\n     * @param newParams The new retribution paramaters\\n     */\\n    function updateRetributionParams(\\n        DataTypes.RetributionParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when creating a gig.\\n     * @return parameters The parameters when creating a gig\\n     */\\n    function getGigCreationParams()\\n        external\\n        view\\n        returns (DataTypes.CreationParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getGigCreationParams(\\n        uint256 version\\n    ) external view returns (DataTypes.CreationParams memory);\\n\\n    /**\\n     * @notice Update the gig creation parameters of the protocol.\\n     * @param newParams The new gig creation paramaters\\n     */\\n    function updateGigCreationParams(\\n        DataTypes.CreationParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when creating an order.\\n     * @return parameters The parameters when creating an order.\\n     * @return sellerFeesParamsVersion The latest fee structur version that will be applied to the seller upon order completion.\\n     */\\n    function getOrderCreationParams()\\n        external\\n        view\\n        returns (DataTypes.OrderPriceParams memory, uint256);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getOrderCreationParams(\\n        uint256 version\\n    ) external view returns (DataTypes.OrderPriceParams memory, uint256);\\n\\n    /**\\n     * @notice Update the order creation parameters of the protocol.\\n     * @param newParams The new order creation paramaters\\n     */\\n    function updateOrderCreationParams(\\n        DataTypes.OrderPriceParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the protocol delay timestamp.\\n     * @return parameters The delay timestamp parametes\\n     */\\n    function getDelayTimestamp()\\n        external\\n        view\\n        returns (DataTypes.DelayTimestamp memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getDelayTimestamp(\\n        uint256 version\\n    ) external view returns (DataTypes.DelayTimestamp memory);\\n\\n    /**\\n     * @notice Update the delays timestamp parameters of the protocol.\\n     * @param newParams The new order creation paramaters\\n     */\\n    function updateDelayTimestamp(\\n        DataTypes.DelayTimestamp memory newParams\\n    ) external;\\n\\n    // extends the above function specifying a version to retrieve\\n    function getSellerOrderFees(\\n        uint256 version\\n    ) external view returns (DataTypes.OrderPriceParams memory);\\n}\\n\",\"keccak256\":\"0xdb9b99f681e942af09270c411de9cb7a0cebe3779f4efaa03436097e26705f8f\",\"license\":\"MIT\"},\"contracts/interfaces/IProviderContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\n\\ninterface IProviderContract {\\n    /**\\n     * @notice set the provider address of the ProviderContract\\n     * @param _providerAddress The address of the AddressProvider\\n     */\\n    function setProvider(IAddressProvider _providerAddress) external;\\n\\n    /**\\n     * @notice fetch the contract address from the ADDRESSS_PROVIDER\\n     * @notice throws error if address === 0\\n     * @param _name the bytes32 name of the contract\\n     */\\n    function fetchContract(bytes32 _name) external view returns (address);\\n\\n    /**\\n     * @notice kill the current address provider, only callable by the AddressProvider\\n     */\\n    function kill() external;\\n\\n    /**\\n     * @notice Returns the contract address of the IAddressProvider\\n     * @return The address of the AddressProvider\\n     */\\n    function ADDRESSES_PROVIDER() external view returns (IAddressProvider);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the protocol_admin role\\n    //  * @return The id of the protocol_admin role\\n    //  */\\n    // function PROTOCOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the buyer role\\n    //  * @return The id of the buyer role\\n    //  */\\n    // function BUYER_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the seller role\\n    //  * @return The id of the seller role\\n    //  */\\n    // function SELLER_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the judge role\\n    //  * @return The id of the judge role\\n    //  */\\n    // function JUDGE_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the Blacklist role\\n    //  * @return The id of the Blacklist role\\n    //  */\\n    // function BLACKLIST_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the whitelist role\\n    //  * @return The id of the whitelist role\\n    //  */\\n    // function WHITELIST_ROLE() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xebb668acafab498b830a453d31cb524d4472e8f73905a214c27228f75e7a955d\",\"license\":\"MIT\"},\"contracts/interfaces/IProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IProviderRegistry\\n * @author Blockswan\\n * @notice Defines the basic interface for an Blockswan Protocol Provider Registry.\\n **/\\ninterface IProviderRegistry {\\n    /**\\n     * @dev Emitted when a new AddressProvider is registered.\\n     * @param addressProvider The address of the registered AddressProvider\\n     * @param id The id of the registered AddressProvider\\n     */\\n    event AddressProviderRegistered(\\n        address indexed addressProvider,\\n        uint256 indexed id\\n    );\\n\\n    /**\\n     * @dev Emitted when an addressProvider is unregistered.\\n     * @param addressProvider The address of the unregistered AddressProvider\\n     * @param id The id of the unregistered AddressProvider\\n     */\\n    event AddressProviderUnregistered(\\n        address indexed addressProvider,\\n        uint256 indexed id\\n    );\\n\\n    /**\\n     * @notice Returns the list of registered addresses providers\\n     * @return The list of addresses providers\\n     **/\\n    function getAddressProvidersList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the id of a registered AddressProvider\\n     * @param addressProvider The address of the AddressProvider\\n     * @return The id of the AddressProvider or 0 if is not registered\\n     */\\n    function getAddressProviderIdByAddress(\\n        address addressProvider\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the address of a registered AddressProvider\\n     * @param id The id of the marketplace\\n     * @return The address of the AddressProvider with the given id or zero address if it is not registered\\n     */\\n    function getAddressProviderById(uint256 id) external view returns (address);\\n\\n    /**\\n     * @notice Registers an addresses provider\\n     * @dev The protocol AddressesProvider must not already be registered in the registry\\n     * @dev The id must not be used by an already registered protocol AddressesProvider\\n     * @param provider The address of the new protocol AddressesProvider\\n     * @param id The id for the new AddressesProvider, referring to the marketplace it belongs to\\n     **/\\n    function registerAddressProvider(address provider, uint256 id) external;\\n\\n    /**\\n     * @notice Removes an addresses provider from the list of registered addresses providers\\n     * @param provider The protocol AddressesProvider address\\n     **/\\n    function unregisterAddressProvider(address provider) external;\\n}\\n\",\"keccak256\":\"0xa2cf1413be2372816b81b91aa017533526faf9ef84c1b6bab69f583678b4edbe\",\"license\":\"MIT\"},\"contracts/interfaces/IUser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../protocol/libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../protocol/libraries/types/InputTypes.sol\\\";\\n\\n/**\\n * @title IUser\\n * @author Blockswan\\n * @notice Defines the basic interface for an blockswan user.\\n **/\\ninterface IUser {\\n    /**\\n     * @dev Emitted when a new user is created.\\n     * @param userId The id of the user\\n     * @param userAddress The wallet addresss of the user\\n     * @param userData The data associated with the user\\n     */\\n    event UserAdded(\\n        uint256 indexed userId,\\n        address indexed userAddress,\\n        InputTypes.CreateUserInput userData\\n    );\\n\\n    /**\\n     * @dev Emitted when an user is edited.\\n     * @param userId The id of the user\\n     * @param userAddress The wallet addresss of the user\\n     * @param userData The data associated with the user\\n     */\\n    event UserEdited(\\n        uint256 indexed userId,\\n        address indexed userAddress,\\n        OutputTypes.UserOutput userData\\n    );\\n\\n    /**\\n     * @notice Returns the user id from a given address.\\n     * @param account The address of the user\\n     * @return userId The userId associated to the account address\\n     **/\\n    function getIdByAddress(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user data.\\n     * @param userId The id of the user.\\n     * @return User The data associated to the user it\\n     **/\\n    function getUserById(\\n        uint256 userId\\n    ) external view returns (OutputTypes.UserOutput memory);\\n\\n    /**\\n     * @notice Returns the user for a given public key.\\n     * @param pubKey The address as parameter.\\n     * @return User the user linked to the public key\\n     **/\\n    function getUserByAddress(\\n        address pubKey\\n    ) external view returns (OutputTypes.UserOutput memory);\\n\\n    /**\\n     * @notice Returns the list of all initialized users.\\n     * @dev It does not include dropped users\\n     * @return A data array of the underlying user.\\n     **/\\n    function getUserList()\\n        external\\n        view\\n        returns (OutputTypes.UserOutput[] memory);\\n\\n    /**\\n     * @notice Returns the current revision of the contract\\n     * @return the current revision\\n     **/\\n    function getUsersCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user wallet address.\\n     * @param userId The id of the user.\\n     * @return userAddress the wallet of the user\\n     **/\\n    function getAddressById(uint256 userId) external view returns (address);\\n\\n    /**\\n     * @notice Create a new users with the msg.sender wallet\\n     * @param metadata the user related information\\n     * @param inviterId the userID of whom invited the newUser\\n     **/\\n    function createUser(string memory metadata, uint256 inviterId) external;\\n\\n    /**\\n     * @notice retrieves the inviters wallet for a given wallet account\\n     * @param account the wallet to get the inviters from\\n     * @return address the pubkey of inviter0\\n     * @return address the pubkey of inviter1\\n     **/\\n    function getInvitersByUserAddress(\\n        address account\\n    ) external view returns (address, address);\\n\\n    /**\\n     * @notice add the gig id to the user gigIds set.\\n     * @param caller the wallet creating the gig.\\n     * @param newGigId the new gig id.\\n     * @return success the relation has been addded.\\n     **/\\n    function createGig(\\n        address caller,\\n        uint256 newGigId\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice add the order id to the user buyerOrderIds set.\\n     * @param buyerId the id of the buyer\\n     * @param newOrderId the new gig orderId.\\n     * @return success the relation has been addded.\\n     **/\\n    function createBuyerOrder(\\n        uint256 buyerId,\\n        uint256 newOrderId\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice retrieves the inviters wallet for a given userId\\n     * @param userId the user id to get the inviters from\\n     * @return address the pubkey of inviter0\\n     * @return address the pubkey of inviter1\\n     **/\\n    function getInvitersById(\\n        uint256 userId\\n    ) external view returns (address, address);\\n\\n    /**\\n     * @notice return true if the gigId is owned by the given userId\\n     * @param userId the user id to check if he own the gig\\n     * @param gigId the gigId\\n     * @return bool if the gigId is owned by the given userId\\n     **/\\n    function isGigOwner(\\n        uint256 userId,\\n        uint256 gigId\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x628d9f386d3ecb2d8de7171eba630317a4e9a90fe531f228438cb00a31dbb59b\",\"license\":\"MIT\"},\"contracts/interfaces/IXP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IXP\\n * @author Blockswan\\n * @notice Defines the basic interface for the Experience\\n **/\\ninterface IXP is IERC20 {\\n    /**\\n     * @notice set the xp amount to earn for a bytes32 key action\\n     * @param xpKey The key associated to the xp to earn\\n     * @param xpToReceive the xp to earn for the key action\\n     */\\n    function setXpAmount(bytes32 xpKey, uint256 xpToReceive) external;\\n\\n    /**\\n     * @notice get the xp amount to earn for a bytes32 key action\\n     * @param xpKey The action key as bytes32\\n     * @return success There is an action matching the key\\n     * @return _amount the xp to earn for the key action\\n     */\\n    function getXpAmount(bytes32 xpKey) external returns (bool, uint256);\\n\\n    /**\\n     * @notice mint the xp amount to earn for a bytes32 key action\\n     * @param xpKey The action key as bytes32\\n     * @param to the addres receiving the XP\\n     */\\n    function mint(bytes32 xpKey, address to) external;\\n}\\n\",\"keccak256\":\"0xb8822f9fc46596a40318b26aaef973805c016c364ddfaadc338e36fa1d93dad9\",\"license\":\"MIT\"},\"contracts/protocol/configuration/ProtocolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {Ownable} from \\\"../../imports/openzeppelin/contracts/Ownable.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {EnumerableSet} from \\\"../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {RegistryKeys} from \\\"../libraries/helpers/RegistryKeys.sol\\\";\\nimport {RoleKeys} from \\\"../libraries/helpers/RoleKeys.sol\\\";\\nimport {IProviderRegistry} from \\\"../../interfaces/IProviderRegistry.sol\\\";\\nimport {IProtocolConfigurator} from \\\"../../interfaces/IProtocolConfigurator.sol\\\";\\nimport {IAddressProvider} from \\\"../../interfaces/IAddressProvider.sol\\\";\\n\\nimport {ProviderContract} from \\\"./ProviderContract.sol\\\";\\nimport {ParamsLogic} from \\\"../libraries/logics/ParamsLogic.sol\\\";\\n\\n/**\\n * @title Protocol Configurator\\n * @author Blockswan\\n * @notice Contains all the protocol configuration\\n **/\\n\\ncontract ProtocolConfigurator is ProviderContract, IProtocolConfigurator {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using ParamsLogic for EnumerableSet.UintSet;\\n\\n    EnumerableSet.UintSet private _buyerEntryParamsVersions;\\n    mapping(uint256 => DataTypes.EntryParams) private _buyerEntryParamsHistory;\\n\\n    EnumerableSet.UintSet private _sellerEntryParamsVersions;\\n    mapping(uint256 => DataTypes.EntryParams) private _sellerEntryParamsHistory;\\n\\n    EnumerableSet.UintSet private _retributionParamsVersions;\\n    mapping(uint256 => DataTypes.RetributionParams)\\n        private _retributionParamsHistory;\\n\\n    EnumerableSet.UintSet private _gigCreationParamsVersions;\\n    mapping(uint256 => DataTypes.CreationParams)\\n        private _gigCreationParamsHistory;\\n\\n    EnumerableSet.UintSet private _orderCreationParamsVersions;\\n    mapping(uint256 => DataTypes.OrderPriceParams)\\n        private _orderCreationParamsHistory;\\n\\n    EnumerableSet.UintSet private _sellerOrderFeesParamsVersions;\\n    mapping(uint256 => DataTypes.OrderPriceParams)\\n        private _sellerOrderFeesParamsHistory;\\n\\n    EnumerableSet.UintSet private _delayTimestampVersions;\\n    mapping(uint256 => DataTypes.DelayTimestamp) private _delayTimestampHistory;\\n\\n    constructor(IAddressProvider provider) ProviderContract(provider) {}\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function getBuyerEntryParams()\\n        external\\n        view\\n        override\\n        returns (DataTypes.EntryParams memory)\\n    {\\n        return\\n            _buyerEntryParamsVersions.getEntryParams(_buyerEntryParamsHistory);\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function getBuyerEntryParams(\\n        uint256 version\\n    ) external view override returns (DataTypes.EntryParams memory) {\\n        return\\n            _buyerEntryParamsVersions.getEntryParams(\\n                _buyerEntryParamsHistory,\\n                version\\n            );\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function updateBuyerEntryParams(\\n        DataTypes.EntryParams memory newParams\\n    ) external override onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        _buyerEntryParamsVersions.updateEntryParams(\\n            _buyerEntryParamsHistory,\\n            newParams\\n        );\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function getSellerEntryParams()\\n        external\\n        view\\n        override\\n        returns (DataTypes.EntryParams memory)\\n    {\\n        return\\n            _sellerEntryParamsVersions.getEntryParams(\\n                _sellerEntryParamsHistory\\n            );\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function getSellerEntryParams(\\n        uint256 version\\n    ) external view override returns (DataTypes.EntryParams memory) {\\n        return\\n            _sellerEntryParamsVersions.getEntryParams(\\n                _sellerEntryParamsHistory,\\n                version\\n            );\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function updateSellerEntryParams(\\n        DataTypes.EntryParams memory newParams\\n    ) external override onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        _sellerEntryParamsVersions.updateEntryParams(\\n            _sellerEntryParamsHistory,\\n            newParams\\n        );\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function getRetributionParams()\\n        external\\n        view\\n        override\\n        returns (DataTypes.RetributionParams memory)\\n    {\\n        return\\n            _retributionParamsVersions.getRetributionParams(\\n                _retributionParamsHistory\\n            );\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function getRetributionParams(\\n        uint256 version\\n    ) external view override returns (DataTypes.RetributionParams memory) {\\n        return\\n            _retributionParamsVersions.getRetributionParams(\\n                _retributionParamsHistory,\\n                version\\n            );\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function updateRetributionParams(\\n        DataTypes.RetributionParams memory newParams\\n    ) external override onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        _retributionParamsVersions.updateRetributionParams(\\n            _retributionParamsHistory,\\n            newParams\\n        );\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function getGigCreationParams()\\n        external\\n        view\\n        override\\n        returns (DataTypes.CreationParams memory)\\n    {\\n        return\\n            _gigCreationParamsVersions.getCreationParams(\\n                _gigCreationParamsHistory\\n            );\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function getGigCreationParams(\\n        uint256 version\\n    ) external view override returns (DataTypes.CreationParams memory) {\\n        return\\n            _gigCreationParamsVersions.getCreationParams(\\n                _gigCreationParamsHistory,\\n                version\\n            );\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function updateGigCreationParams(\\n        DataTypes.CreationParams memory newParams\\n    ) external override onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        _gigCreationParamsVersions.updateCreationParams(\\n            _gigCreationParamsHistory,\\n            newParams\\n        );\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function getOrderCreationParams()\\n        external\\n        view\\n        override\\n        returns (DataTypes.OrderPriceParams memory, uint256)\\n    {\\n        return (\\n            _orderCreationParamsVersions.getPriceParams(\\n                _orderCreationParamsHistory\\n            ),\\n            _sellerOrderFeesParamsVersions.getLatestVersion()\\n        );\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function getOrderCreationParams(\\n        uint256 version\\n    )\\n        external\\n        view\\n        override\\n        returns (DataTypes.OrderPriceParams memory, uint256)\\n    {\\n        return (\\n            _orderCreationParamsVersions.getPriceParams(\\n                _orderCreationParamsHistory,\\n                version\\n            ),\\n            _sellerOrderFeesParamsVersions.getLatestVersion()\\n        );\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function updateOrderCreationParams(\\n        DataTypes.OrderPriceParams memory newParams\\n    ) external override onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        _orderCreationParamsVersions.updatePriceParams(\\n            _orderCreationParamsHistory,\\n            newParams\\n        );\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function getDelayTimestamp()\\n        external\\n        view\\n        override\\n        returns (DataTypes.DelayTimestamp memory)\\n    {\\n        return\\n            _delayTimestampVersions.getDelayTimestamp(_delayTimestampHistory);\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function getDelayTimestamp(\\n        uint256 version\\n    ) external view override returns (DataTypes.DelayTimestamp memory) {\\n        return\\n            _delayTimestampVersions.getDelayTimestamp(\\n                _delayTimestampHistory,\\n                version\\n            );\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function updateDelayTimestamp(\\n        DataTypes.DelayTimestamp memory newParams\\n    ) external override onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        _delayTimestampVersions.updateDelayTimestamp(\\n            _delayTimestampHistory,\\n            newParams\\n        );\\n    }\\n\\n    /// @inheritdoc IProtocolConfigurator\\n    function getSellerOrderFees(\\n        uint256 version\\n    ) external view override returns (DataTypes.OrderPriceParams memory) {\\n        return\\n            _sellerOrderFeesParamsVersions.getPriceParams(\\n                _sellerOrderFeesParamsHistory,\\n                version\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xc3a86d123bc9c762dd9a3b82a36f47fa27e9a75f3dce28d32fb34246fb8a0eda\",\"license\":\"MIT\"},\"contracts/protocol/configuration/ProviderContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {Ownable} from \\\"../../imports/openzeppelin/contracts/Ownable.sol\\\";\\nimport {IERC20} from \\\"../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {IAddressProvider} from \\\"../../interfaces/IAddressProvider.sol\\\";\\nimport {IProtocolConfigurator} from \\\"../../interfaces/IProtocolConfigurator.sol\\\";\\n\\nimport {IProviderContract} from \\\"../../interfaces/IProviderContract.sol\\\";\\nimport {IACLManager} from \\\"../../interfaces/IACLManager.sol\\\";\\nimport {IBSWAN} from \\\"../../interfaces/IBSWAN.sol\\\";\\nimport {IXP} from \\\"../../interfaces/IXP.sol\\\";\\nimport {IUser} from \\\"../../interfaces/IUser.sol\\\";\\nimport {InputTypes} from \\\"../libraries/types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {RegistryKeys} from \\\"../libraries/helpers/RegistryKeys.sol\\\";\\nimport {RoleKeys} from \\\"../libraries/helpers/RoleKeys.sol\\\";\\n\\n/**\\n * @title Parent class to all contracts used to check that a contract is registerable\\n * @notice ProviderContract is Ownable so the deployer can re-register it against new registries\\n * @dev The Provider uses this to talk to all contracts that inherit from this contract.\\n */\\n\\ncontract ProviderContract is Ownable, IProviderContract {\\n    using GPv2SafeERC20 for IERC20;\\n    IAddressProvider public ADDRESS_PROVIDER;\\n\\n    uint256 public MAX_UINT = 2 ** 256 - 1;\\n\\n    /// @notice all contracts that inherit from ProviderContract are automatically Ownable()\\n    /// @dev internal constructor makes ProviderContract abstract\\n    constructor(IAddressProvider provider) Ownable() {\\n        require(\\n            address(provider) != address(0x00),\\n            Errors.ZERO_ADDRESS_IS_INVALID\\n        );\\n\\n        ADDRESS_PROVIDER = IAddressProvider(provider);\\n    }\\n\\n    /// @notice only allow  contracts to be called by the respective agent.\\n    ///     i.e. GigStorage methods can only be invoked by GigFactory.\\n    modifier onlyProvider(bytes32 _name) {\\n        require(\\n            _msgSender() == fetchContract(_name),\\n            \\\"Requires msg.sender is from contract address registered to _name\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice only allow function contracts to be called by the respective role.\\n    ///     i.e. GigStorage methods can only be invoked by BUYER_ROLE.\\n    modifier onlyProtocolRole(bytes32 _role) {\\n        require(\\n            hasProtocolRole(_role, _msgSender()),\\n            \\\"Requires msg.sender has role\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyStillBuyer() {\\n        require(isStillBuyer(_msgSender()), \\\"buyer time elapsed\\\");\\n        _;\\n    }\\n\\n    modifier onlyStillSeller() {\\n        require(isStillSeller(_msgSender()), Errors.ONLY_SELLER);\\n        _;\\n    }\\n\\n    function hasProtocolRole(\\n        bytes32 _role,\\n        address account\\n    ) public view returns (bool) {\\n        bool hasRole = IACLManager(fetchContract(RegistryKeys.ACL_MANAGER))\\n            .hasRole(_role, account);\\n        return hasRole;\\n    }\\n\\n    // function hasProtocolRoles(\\n    //     bytes32[] memory _roles,\\n    //     address account\\n    // ) public view returns (bool) {\\n    //     for (uint256 i; i < _roles.length; i++) {\\n    //         bool hasRole = IACLManager(fetchContract(RegistryKeys.ACL_MANAGER))\\n    //             .hasRole(_roles[i], account);\\n    //         if (hasRole) {\\n    //             return true;\\n    //         }\\n    //     }\\n    //     return false;\\n    // }\\n\\n    function isStillBuyer(address account) public view returns (bool) {\\n        return\\n            hasProtocolRole(RoleKeys.BUYER_ROLE, account) &&\\n            IUser(fetchContract(RegistryKeys.USER))\\n                .getUserByAddress(account)\\n                .buyerUntil >\\n            block.timestamp;\\n    }\\n\\n    function isStillSeller(address account) public view returns (bool) {\\n        return\\n            hasProtocolRole(RoleKeys.SELLER_ROLE, account) &&\\n            IUser(fetchContract(RegistryKeys.USER))\\n                .getUserByAddress(account)\\n                .sellerUntil >\\n            block.timestamp;\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function setProvider(IAddressProvider _providerAddress) public override {\\n        require(\\n            address(_providerAddress) == address(0x00) ||\\n                address(ADDRESS_PROVIDER) == msg.sender ||\\n                this.owner() == msg.sender,\\n            \\\"Can only be called if addressesProvider is empty, msg.sender or owner\\\"\\n        );\\n        ADDRESS_PROVIDER = _providerAddress;\\n    }\\n\\n    function fetchContract(\\n        bytes32 _name\\n    ) public view override returns (address) {\\n        return address(IAddressProvider(ADDRESS_PROVIDER).fetchContract(_name));\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function kill() external override {\\n        assert(msg.sender == address(ADDRESS_PROVIDER));\\n        selfdestruct(payable(address(ADDRESS_PROVIDER)));\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        override\\n        returns (IAddressProvider)\\n    {\\n        return ADDRESS_PROVIDER;\\n    }\\n\\n    function grantProtocolRole(bytes32 _role, address account) internal {\\n        IACLManager(fetchContract(RegistryKeys.ACL_MANAGER)).grantRole(\\n            _role,\\n            account\\n        );\\n    }\\n\\n    function approve(\\n        address erc20\\n    ) public onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        address dat = fetchContract(RegistryKeys.DAT);\\n        IERC20(erc20).approve(dat, MAX_UINT);\\n    }\\n\\n    function _processPayment(\\n        InputTypes.ProcessPaymentInput memory params\\n    ) internal {\\n        IBSWAN dat = IBSWAN(fetchContract(RegistryKeys.DAT));\\n        uint256 total = params.inviter0Rewards +\\n            params.inviter1Rewards +\\n            params.remainingRewards;\\n        IERC20(dat.currency()).safeTransferFrom(\\n            params.caller,\\n            address(this),\\n            total\\n        );\\n        dat.pay(params.inviter0, params.inviter0Rewards);\\n        dat.pay(params.inviter1, params.inviter1Rewards);\\n        dat.pay(address(0), params.remainingRewards);\\n    }\\n\\n    function _giveXP(bytes32 _key, address _to) internal {\\n        IXP(fetchContract(RegistryKeys.XP)).mint(_key, _to);\\n    }\\n\\n    function getProtocolRetributionParams()\\n        internal\\n        view\\n        returns (DataTypes.RetributionParams memory)\\n    {\\n        return\\n            IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            ).getRetributionParams();\\n    }\\n\\n    function getProtocolDelayTimestamp()\\n        internal\\n        view\\n        returns (DataTypes.DelayTimestamp memory)\\n    {\\n        return\\n            IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            ).getDelayTimestamp();\\n    }\\n\\n    function isGigOwner(\\n        uint256 userId,\\n        uint256 gigId,\\n        IUser UserContract\\n    ) public view returns (bool) {\\n        return UserContract.isGigOwner(userId, gigId);\\n    }\\n}\\n\",\"keccak256\":\"0x0169fd3dcbf1210a873e7228a75d5074d79e0d0e6a5e989732084cb472c4dbeb\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors  library\\n * @author Blockswan\\n * @notice Defines the error messages emitted by the different contracts of the Blockswan protocol\\n */\\nlibrary Errors {\\n    // REGISTRY\\n    string public constant INVALID_ADDRESS_PROVIDER_ID = \\\"1\\\"; // The addresses provider is not valid\\n    string public constant ADDRESS_PROVIDER_ALREADY_ADDED = \\\"2\\\"; // This addresses provider already exists\\n    string public constant ADDRESS_PROVIDER_NOT_REGISTERED = \\\"3\\\"; // 'This addresses provider is not registered'\\n\\n    // ADDRESSSES PROVIDER\\n    string public constant CONTRACT_NAME_ALREADY_USED = \\\"4\\\"; // 'Requires that given _name does not already have non-zero registered contract address'\\n    string public constant ZERO_ADDRESS_IS_INVALID = \\\"5\\\"; // the address provided is 0x00\\n    string public constant INDEX_OUT_OF_RANGE = \\\"6\\\"; // the index provided is out of range\\n\\n    // USER\\n    string public constant ADDRESS_ALREADY_USED = \\\"7\\\"; // 'The address provided has already been unsed to initialise an account'\\n    string public constant INVALID_USER_ID = \\\"8\\\"; // 'The userId is incorrect'\\n    string public constant RESTRICTED_TO_BUYER = \\\"9\\\"; // this function can't  be called by buyers\\n    string public constant INVALID_INVITER_ID = \\\"10\\\"; // The inviter ID provided is incorrect\\n    string public constant FAILED_BECOMING_BUYER = \\\"11\\\"; // The execution to becomeBuyer failed\\n    string public constant RESTRICTED_TO_SELLER = \\\"12\\\"; // this function can't  be called by sellers\\n    string public constant FAILED_BECOMING_SELLER = \\\"13\\\"; // The execution to becomeSeller failed\\n\\n    //XP\\n    string public constant NO_MATCHING_XP_KEY = \\\"14\\\"; // There is no xp value to give for this byte32\\n\\n    // GIG\\n    string public constant GIG_ID_ALREADY_EXISING = \\\"15\\\"; // There is already an id for this gig.\\n\\n    // modifiers\\n    string public constant ONLY_SELLER = \\\"16\\\"; // Only account with the seller role can call the functions\\n}\\n\",\"keccak256\":\"0x748ec2c302520ae868fc975301db95bd0b95ccd622ab162b0791302dca55d824\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/helpers/RegistryKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary RegistryKeys {\\n    /// REGISTRY\\n    //  ----  CONTRACT ------\\n    bytes32 public constant GIG = \\\"GIG\\\";\\n    bytes32 public constant ORDER = \\\"ORDER\\\";\\n    bytes32 public constant USER = \\\"USER\\\";\\n    bytes32 public constant PROTOCOL_CONFIGURATOR = \\\"PROTOCOL_CONFIGURATOR\\\";\\n    bytes32 public constant DAT = \\\"DAT\\\";\\n    bytes32 public constant ACL_MANAGER = \\\"ACL_MANAGER\\\";\\n    bytes32 public constant DATA_PROVIDER = \\\"DATA_PROVIDER\\\";\\n    bytes32 public constant XP = \\\"XP\\\";\\n    // ---- NON CONTRACT ------\\n    bytes32 public constant ACL_ADMIN = \\\"ACL_ADMIN\\\";\\n}\\n\",\"keccak256\":\"0xc2517afba6cab6fad869d0967d7b5f2ca9f85ddedbedb0b989e615ac2c2ea851\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/RoleKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary RoleKeys {\\n    // ---- ADMIN ROLES  ------\\n    bytes32 public constant PROTOCOL_ADMIN_ROLE = \\\"PROTOCOL_ADMIN\\\";\\n    bytes32 public constant BUYER_ADMIN_ROLE = \\\"BUYER_ADMIN\\\";\\n    bytes32 public constant SELLER_ADMIN_ROLE = \\\"SELLER_ADMIN\\\";\\n    // ----  ROLES  ------\\n    bytes32 public constant BUYER_ROLE = \\\"BUYER\\\";\\n    bytes32 public constant SELLER_ROLE = \\\"SELLER\\\";\\n    bytes32 public constant JUDGE_ROLE = \\\"JUDGE\\\";\\n    bytes32 public constant BLACKLIST_ROLE = \\\"BLACKLIST\\\";\\n    bytes32 public constant WHITELIST_ROLE = \\\"WHITELIST\\\";\\n    bytes32 public constant XP_GIVER_ROLE = \\\"XP_GIVER\\\";\\n}\\n\",\"keccak256\":\"0x96ba28ef5c4c14bc1ef86a62e3a2bb1ea859abda8a57d053e2d25a335c58aeae\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/ParamsLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title  Params logic library\\n * @author Blockswan\\n * @notice Implements the logic for protocol params functions\\n */\\nlibrary ParamsLogic {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function getEntryParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.EntryParams) storage history\\n    ) external view returns (DataTypes.EntryParams memory) {\\n        return history[params.at(params.length() - 1)];\\n    }\\n\\n    function getEntryParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.EntryParams) storage history,\\n        uint256 version\\n    ) external view returns (DataTypes.EntryParams memory) {\\n        return history[params.at(version)];\\n    }\\n\\n    function updateEntryParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.EntryParams) storage history,\\n        DataTypes.EntryParams memory newParams\\n    ) external {\\n        uint256 newParamId = params.length();\\n        params.add(newParamId);\\n        history[newParamId] = newParams;\\n    }\\n\\n    function getRetributionParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.RetributionParams) storage history\\n    ) external view returns (DataTypes.RetributionParams memory) {\\n        return history[params.at(params.length() - 1)];\\n    }\\n\\n    function getRetributionParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.RetributionParams) storage history,\\n        uint256 version\\n    ) external view returns (DataTypes.RetributionParams memory) {\\n        return history[params.at(version)];\\n    }\\n\\n    function updateRetributionParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.RetributionParams) storage history,\\n        DataTypes.RetributionParams memory newParams\\n    ) external {\\n        uint256 newParamId = params.length();\\n        params.add(newParamId);\\n        history[newParamId] = newParams;\\n    }\\n\\n    function getCreationParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.CreationParams) storage history\\n    ) external view returns (DataTypes.CreationParams memory) {\\n        return history[params.at(params.length() - 1)];\\n    }\\n\\n    function getCreationParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.CreationParams) storage history,\\n        uint256 version\\n    ) external view returns (DataTypes.CreationParams memory) {\\n        return history[params.at(version)];\\n    }\\n\\n    function updateCreationParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.CreationParams) storage history,\\n        DataTypes.CreationParams memory newParams\\n    ) external {\\n        uint256 newParamId = params.length();\\n        params.add(newParamId);\\n        history[newParamId] = newParams;\\n    }\\n\\n    function getPriceParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.OrderPriceParams) storage history\\n    ) external view returns (DataTypes.OrderPriceParams memory) {\\n        return history[params.at(params.length() - 1)];\\n    }\\n\\n    function getPriceParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.OrderPriceParams) storage history,\\n        uint256 version\\n    ) external view returns (DataTypes.OrderPriceParams memory) {\\n        return history[params.at(version)];\\n    }\\n\\n    function updatePriceParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.OrderPriceParams) storage history,\\n        DataTypes.OrderPriceParams memory newParams\\n    ) external {\\n        uint256 newParamId = params.length();\\n        params.add(newParamId);\\n        history[newParamId] = newParams;\\n    }\\n\\n    function getLatestVersion(\\n        EnumerableSet.UintSet storage versions\\n    ) external view returns (uint256) {\\n        return versions.length() - 1;\\n    }\\n\\n    function getDelayTimestamp(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.DelayTimestamp) storage history\\n    ) external view returns (DataTypes.DelayTimestamp memory) {\\n        return history[params.at(params.length() - 1)];\\n    }\\n\\n    function getDelayTimestamp(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.DelayTimestamp) storage history,\\n        uint256 version\\n    ) external view returns (DataTypes.DelayTimestamp memory) {\\n        return history[params.at(version)];\\n    }\\n\\n    function updateDelayTimestamp(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.DelayTimestamp) storage history,\\n        DataTypes.DelayTimestamp memory newParams\\n    ) external {\\n        uint256 newParamId = params.length();\\n        params.add(newParamId);\\n        history[newParamId] = newParams;\\n    }\\n}\\n\",\"keccak256\":\"0x001241f8238438255eec0c6b25e5e3259026e44f155135d5a167de0e486541f6\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\n\\nlibrary DataTypes {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    enum OrderState {\\n        UNCONFIRMED,\\n        CONFIRMED,\\n        TRIAL,\\n        PENDING,\\n        DONE\\n        // UPDATING\\n    }\\n\\n    struct DelayTimestamp {\\n        uint256 selfRefund;\\n        uint256 closeTrial;\\n        uint256 endTrial;\\n    }\\n\\n    struct User {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        EnumerableSet.UintSet gigIds;\\n        EnumerableSet.UintSet offerIds;\\n        EnumerableSet.UintSet bidIds;\\n        EnumerableSet.UintSet buyerOrderIds;\\n        EnumerableSet.UintSet gigReviewsIds;\\n        EnumerableSet.UintSet userReviewsIds;\\n        EnumerableSet.UintSet reviewsIds;\\n    }\\n\\n    struct Package {\\n        uint256 price;\\n        uint256 timeDelivery;\\n    }\\n\\n    struct Gig {\\n        string metadata;\\n        uint256 createdAt;\\n        bool isPaused;\\n        EnumerableSet.UintSet reviewIds;\\n        EnumerableSet.UintSet orderIds;\\n        Counters.Counter successSell;\\n        Counters.Counter failedSell;\\n        Package[3] packages;\\n    }\\n\\n    struct Order {\\n        string metadata;\\n        string brief;\\n        uint256 sellerFeesVersion;\\n        uint256 toTrial;\\n        uint256 toProceed;\\n        uint256 createdAt;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        Package package;\\n        OrderState state;\\n        IERC20 currency;\\n        EnumerableSet.UintSet reviewIds;\\n    }\\n\\n    struct Review {\\n        uint256 authorId;\\n        string metadata;\\n    }\\n\\n    struct ServiceProvider {\\n        address wallet;\\n        string endpoint;\\n    }\\n\\n    struct EntryParams {\\n        uint256 currencyValue;\\n        uint256 timeAdded;\\n        uint256 xpEarned;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CreationParams {\\n        uint256 currencyValue;\\n        uint256 xpEarned;\\n    }\\n\\n    struct OrderPriceParams {\\n        uint256 trialFlat;\\n        uint256 trialPercent;\\n        uint256 proceedFlat;\\n        uint256 proceedPercent;\\n    }\\n\\n    struct RetributionParams {\\n        uint256 affiliate;\\n        uint256 lvl0AffiliateShare;\\n    }\\n}\\n\",\"keccak256\":\"0x12e3178daf3f5b6f48d23f5130a2326a650d66175d10b46e395bcf948c844927\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/InputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary InputTypes {\\n    struct CreateUserInput {\\n        uint256 newId;\\n        string metadata;\\n        uint256 inviterId;\\n        address wallet;\\n    }\\n\\n    struct CreateGigInput {\\n        uint256 newId;\\n        DataTypes.Package[3] packages;\\n        string metadata;\\n    }\\n\\n    struct OrderFeesInput {\\n        uint256 sellerFeesVersion;\\n        uint256 toTrial;\\n        uint256 toProceed;\\n    }\\n\\n    struct OrderRelationInput {\\n        uint256 newId;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n    }\\n\\n    struct CreateOrderInput {\\n        uint256 sellerId;\\n        uint256 buyerId;\\n        uint256 gigId;\\n        uint256 packageId;\\n        string brief;\\n    }\\n\\n    struct ExecuteCreateOrderInput {\\n        string metadata;\\n        string brief;\\n        OrderFeesInput fees;\\n        OrderRelationInput relations;\\n        DataTypes.Package package;\\n        IERC20 currency;\\n    }\\n\\n    struct BecomeBuyerInput {\\n        address account;\\n        uint256 buyerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct BecomeSellerInput {\\n        address account;\\n        uint256 sellerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CalcInvitersRewardsInput {\\n        uint256 currencyValue;\\n        uint256 affiliateShare;\\n        uint256 lvl0AffiliateShare;\\n    }\\n\\n    struct ProcessPaymentInput {\\n        address caller;\\n        address inviter0;\\n        address inviter1;\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n}\\n\",\"keccak256\":\"0x71bf9ab7d769307007dd572d3710c4d693f920aeb44020493912a268ec9a7190\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/OutputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary OutputTypes {\\n    struct CalcInvitersRewardsOutput {\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n\\n    struct PrepareBecomeRoleOutput {\\n        address inviter0;\\n        address inviter1;\\n        DataTypes.EntryParams entryParams;\\n        DataTypes.RetributionParams retributionParams;\\n        CalcInvitersRewardsOutput rewards;\\n    }\\n\\n    struct GigOutput {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        uint256[] reviewIds;\\n        uint256[] orderIds;\\n        DataTypes.Package[3] packages;\\n    }\\n\\n    struct UserOutput {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 userId;\\n        address wallet;\\n        uint256[] gigIds;\\n        uint256[] offerIds;\\n        uint256[] bidIds;\\n        uint256[] buyerOrderIds;\\n        uint256[] gigReviewsIds;\\n        uint256[] userReviewsIds;\\n        uint256[] reviewsIds;\\n    }\\n\\n    struct OrderOutput {\\n        string metadata;\\n        string brief;\\n        uint256 sellerFeesVersion;\\n        uint256 toTrial;\\n        uint256 toProceed;\\n        uint256 orderId;\\n        uint256 createdAt;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        uint256[] reviewIds;\\n        DataTypes.Package package;\\n        DataTypes.OrderState state;\\n        IERC20 currency;\\n    }\\n\\n    struct PopulatedGig {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        DataTypes.Review[] reviews;\\n        DataTypes.Package[] packages;\\n    }\\n\\n    struct PopulatedUser {\\n        uint256 userId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 bswanBalance;\\n        uint256 usdcBalance;\\n        uint256 xpBalance;\\n        uint256[] gigIds;\\n        address wallet;\\n        bool isBuyer;\\n        bool isSeller;\\n        bool isJudge;\\n        UserOutput[] inviters;\\n    }\\n}\\n\",\"keccak256\":\"0xc02136162bbd7da91cc53d2da6346223c4a6fbe1646445f13dfe39884a7fee6e\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60806040526000196002553480156200001757600080fd5b506040516200218d3803806200218d8339810160408190526200003a9162000116565b806200004f62000049620000c2565b620000c6565b6040805180820190915260018152603560f81b60208201526001600160a01b0382166200009a5760405162461bcd60e51b815260040162000091919062000146565b60405180910390fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055506200019c565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121562000128578081fd5b81516001600160a01b03811681146200013f578182fd5b9392505050565b6000602080835283518082850152825b81811015620001745785810183015185820160400152820162000156565b81811115620001865783604083870101525b50601f01601f1916929092016040019392505050565b611fe180620001ac6000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c8063715018a61161011a5780639b7a220d116100ad578063daea85c51161007c578063daea85c514610402578063e5b5019a14610415578063ea532d461461042a578063f2fde38b1461043d578063f73afd9614610450576101fb565b80639b7a220d146103b3578063b817bcf7146103c6578063cfd8d6c0146103d9578063d618cc64146103ec576101fb565b80638da5cb5b116100e95780638da5cb5b1461037057806391af5b3414610378578063985fadc8146103985780639af1da48146103ab576101fb565b8063715018a61461032f57806372633f981461033757806379a558e71461034a578063882baa001461035d576101fb565b80631cb647051161019257806340717f431161016157806340717f43146102f957806341c0e1b51461030c57806357ddafd314610314578063688c4b2414610327576101fb565b80631cb64705146102c15780632c53f6c4146102c957806333327472146102d15780633e8b9f19146102e6576101fb565b806311e0c07b116101ce57806311e0c07b146102735780631848effa1461029357806319872f761461029b57806319d9603a146102ae576101fb565b806301215c83146102005780630542975c146102155780630adf05d0146102335780630b3f0b5414610253575b600080fd5b61021361020e36600461199d565b610463565b005b61021d610517565b60405161022a9190611cef565b60405180910390f35b6102466102413660046117a0565b610526565b60405161022a9190611e80565b6102666102613660046117a0565b6105c3565b60405161022a9190611e72565b610286610281366004611c40565b610657565b60405161022a9190611d1c565b61021d6106e0565b61021d6102a93660046117a0565b6106ef565b6102136102bc3660046117e7565b610770565b6102666107e7565b61024661087f565b6102d9610912565b60405161022a9190611e64565b6102d96102f43660046117a0565b6109a4565b6102136103073660046118d3565b610a38565b610213610aaf565b6102d96103223660046117a0565b610ae5565b610246610b2a565b610213610b6d565b6102136103453660046118d3565b610b81565b610286610358366004611741565b610bf8565b61021361036b36600461181d565b610cae565b61021d610d25565b61038b6103863660046117a0565b610d34565b60405161022a9190611e8e565b6102866103a63660046117b8565b610dc9565b6102d9610e6a565b6102136103c13660046117e7565b610ead565b6102866103d4366004611741565b610f24565b6102136103e7366004611741565b610fdb565b6103f46110c5565b60405161022a929190611e9c565b610213610410366004611741565b6111eb565b61041d6112c1565b60405161022a9190611d27565b6102466104383660046117a0565b6112c7565b61021361044b366004611741565b61130c565b6103f461045e3660046117a0565b611346565b6d282927aa27a1a7a62fa0a226a4a760911b610481816103a661146f565b6104a65760405162461bcd60e51b815260040161049d90611e2d565b60405180910390fd5b604051633005b9a560e11b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A89063600b734a906104e390600f906011908790600401611f2c565b60006040518083038186803b1580156104fb57600080fd5b505af415801561050f573d6000803e3d6000fd5b505050505050565b6001546001600160a01b031690565b61052e611502565b60405163038d39c160e11b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A89063071a73829061056b906003906005908790600401611ee0565b60806040518083038186803b15801561058357600080fd5b505af4158015610597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb919061193e565b90505b919050565b6105cb61152d565b60405162ac321b60e31b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A89063056190d890610607906015906017908790600401611ee0565b60606040518083038186803b15801561061f57600080fd5b505af4158015610633573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190611878565b60405163fbd2817f60e01b81526000906001600160a01b0383169063fbd2817f906106889087908790600401611eb7565b60206040518083038186803b1580156106a057600080fd5b505afa1580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d89190611780565b949350505050565b6001546001600160a01b031681565b600154604051630cc397bb60e11b81526000916001600160a01b0316906319872f7690610720908590600401611d27565b60206040518083038186803b15801561073857600080fd5b505afa15801561074c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190611764565b6d282927aa27a1a7a62fa0a226a4a760911b61078e816103a661146f565b6107aa5760405162461bcd60e51b815260040161049d90611e2d565b604051635f000b3960e01b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A890635f000b39906104e390600c90600e908790600401611ec5565b6107ef61152d565b6040516315d9c37560e11b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A890632bb386ea9061082a90601590601790600401611eb7565b60606040518083038186803b15801561084257600080fd5b505af4158015610856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087a9190611878565b905090565b610887611502565b60405163a6b16b4360e01b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A89063a6b16b43906108c290600390600590600401611eb7565b60806040518083038186803b1580156108da57600080fd5b505af41580156108ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087a919061193e565b61091a61154e565b60405163bfdb039960e01b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A89063bfdb03999061095590600c90600e90600401611eb7565b604080518083038186803b15801561096c57600080fd5b505af4158015610980573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087a9190611802565b6109ac61154e565b60405163907874e560e01b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A89063907874e5906109e990600990600b908790600401611ee0565b604080518083038186803b158015610a0057600080fd5b505af4158015610a14573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190611802565b6d282927aa27a1a7a62fa0a226a4a760911b610a56816103a661146f565b610a725760405162461bcd60e51b815260040161049d90611e2d565b60405163eecd53b160e01b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A89063eecd53b1906104e3906003906005908790600401611f11565b6001546001600160a01b03163314610ad757634e487b7160e01b600052600160045260246000fd5b6001546001600160a01b0316ff5b610aed61154e565b604051639bb062d360e01b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A890639bb062d3906109e990600c90600e908790600401611ee0565b610b32611502565b60405163a6b16b4360e01b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A89063a6b16b43906108c290600690600890600401611eb7565b610b75611473565b610b7f60006114b2565b565b6d282927aa27a1a7a62fa0a226a4a760911b610b9f816103a661146f565b610bbb5760405162461bcd60e51b815260040161049d90611e2d565b60405163eecd53b160e01b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A89063eecd53b1906104e3906006906008908790600401611f11565b6000610c0c64212aaca2a960d91b83610dc9565b80156105bb575042610c24632aa9a2a960e11b6106ef565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b8152600401610c4f9190611cef565b60006040518083038186803b158015610c6757600080fd5b505afa158015610c7b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ca39190810190611a67565b604001511192915050565b6d282927aa27a1a7a62fa0a226a4a760911b610ccc816103a661146f565b610ce85760405162461bcd60e51b815260040161049d90611e2d565b60405163d93df20360e01b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A89063d93df203906104e3906015906017908790600401611ef6565b6000546001600160a01b031690565b610d3c611568565b60405163759b8c0160e01b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A89063759b8c0190610d79906012906014908790600401611ee0565b60806040518083038186803b158015610d9157600080fd5b505af4158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190611a02565b600080610de36a20a1a62fa6a0a720a3a2a960a91b6106ef565b6001600160a01b03166391d1485485856040518363ffffffff1660e01b8152600401610e10929190611d30565b60206040518083038186803b158015610e2857600080fd5b505afa158015610e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e609190611780565b9150505b92915050565b610e7261154e565b604051632fe2848160e01b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A890632fe284819061095590600990600b90600401611eb7565b6d282927aa27a1a7a62fa0a226a4a760911b610ecb816103a661146f565b610ee75760405162461bcd60e51b815260040161049d90611e2d565b6040516313a6a97b60e11b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A89063274d52f6906104e390600990600b908790600401611ec5565b6000610f396529a2a62622a960d11b83610dc9565b80156105bb575042610f51632aa9a2a960e11b6106ef565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b8152600401610f7c9190611cef565b60006040518083038186803b158015610f9457600080fd5b505afa158015610fa8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fd09190810190611a67565b608001511192915050565b6001600160a01b0381161580610ffb57506001546001600160a01b031633145b806110875750336001600160a01b0316306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561104457600080fd5b505afa158015611058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107c9190611764565b6001600160a01b0316145b6110a35760405162461bcd60e51b815260040161049d90611d8d565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6110cd611568565b604051630d0682c560e21b8152600090731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A89063341a0b149061110b90600f90601190600401611eb7565b60806040518083038186803b15801561112357600080fd5b505af4158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115b9190611a02565b604051639e9886b760e01b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A890639e9886b79061119390601290600401611d27565b60206040518083038186803b1580156111ab57600080fd5b505af41580156111bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e39190611c28565b915091509091565b6d282927aa27a1a7a62fa0a226a4a760911b611209816103a661146f565b6112255760405162461bcd60e51b815260040161049d90611e2d565b60006112366211105560ea1b6106ef565b60025460405163095ea7b360e01b81529192506001600160a01b0385169163095ea7b39161126991859190600401611d03565b602060405180830381600087803b15801561128357600080fd5b505af1158015611297573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bb9190611780565b50505050565b60025481565b6112cf611502565b60405163038d39c160e11b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A89063071a73829061056b906006906008908790600401611ee0565b611314611473565b6001600160a01b03811661133a5760405162461bcd60e51b815260040161049d90611d47565b611343816114b2565b50565b61134e611568565b60405163759b8c0160e01b8152600090731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A89063759b8c019061138e90600f906011908890600401611ee0565b60806040518083038186803b1580156113a657600080fd5b505af41580156113ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113de9190611a02565b604051639e9886b760e01b8152731A1FEe7EeD918BD762173e4dc5EfDB8a78C924A890639e9886b79061141690601290600401611d27565b60206040518083038186803b15801561142e57600080fd5b505af4158015611442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114669190611c28565b91509150915091565b3390565b61147b61146f565b6001600160a01b031661148c610d25565b6001600160a01b031614610b7f5760405162461bcd60e51b815260040161049d90611df8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518060800160405280600081526020016000815260200160008152602001600060ff1681525090565b60405180606001604052806000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b80516105be81611f87565b600082601f8301126115ab578081fd5b8151602067ffffffffffffffff8211156115c7576115c7611f71565b8082026115d5828201611f47565b8381528281019086840183880185018910156115ef578687fd5b8693505b858410156116115780518352600193909301929184019184016115f3565b50979650505050505050565b600082601f83011261162d578081fd5b815167ffffffffffffffff81111561164757611647611f71565b602061165b601f8301601f19168201611f47565b828152858284870101111561166e578384fd5b835b8381101561168b578581018301518282018401528201611670565b8381111561169b57848385840101525b5095945050505050565b6000604082840312156116b6578081fd5b6040516040810181811067ffffffffffffffff821117156116d9576116d9611f71565b604052823581526020928301359281019290925250919050565b600060408284031215611704578081fd5b6040516040810181811067ffffffffffffffff8211171561172757611727611f71565b604052825181526020928301519281019290925250919050565b600060208284031215611752578081fd5b813561175d81611f87565b9392505050565b600060208284031215611775578081fd5b815161175d81611f87565b600060208284031215611791578081fd5b8151801515811461175d578182fd5b6000602082840312156117b1578081fd5b5035919050565b600080604083850312156117ca578081fd5b8235915060208301356117dc81611f87565b809150509250929050565b6000604082840312156117f8578081fd5b61175d83836116a5565b600060408284031215611813578081fd5b61175d83836116f3565b60006060828403121561182e578081fd5b6040516060810181811067ffffffffffffffff8211171561185157611851611f71565b80604052508235815260208301356020820152604083013560408201528091505092915050565b600060608284031215611889578081fd5b6040516060810181811067ffffffffffffffff821117156118ac576118ac611f71565b80604052508251815260208301516020820152604083015160408201528091505092915050565b6000608082840312156118e4578081fd5b6040516080810181811067ffffffffffffffff8211171561190757611907611f71565b8060405250823581526020830135602082015260408301356040820152606083013561193281611f9c565b60608201529392505050565b60006080828403121561194f578081fd5b6040516080810181811067ffffffffffffffff8211171561197257611972611f71565b8060405250825181526020830151602082015260408301516040820152606083015161193281611f9c565b6000608082840312156119ae578081fd5b6040516080810181811067ffffffffffffffff821117156119d1576119d1611f71565b8060405250823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b600060808284031215611a13578081fd5b6040516080810181811067ffffffffffffffff82111715611a3657611a36611f71565b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b600060208284031215611a78578081fd5b815167ffffffffffffffff80821115611a8f578283fd5b81840191506101e0808387031215611aa5578384fd5b611aae81611f47565b9050825182811115611abe578485fd5b611aca8782860161161d565b8252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c0820152611b1560e08401611590565b60e08201526101008084015183811115611b2d578586fd5b611b398882870161159b565b8284015250506101208084015183811115611b52578586fd5b611b5e8882870161159b565b8284015250506101408084015183811115611b77578586fd5b611b838882870161159b565b8284015250506101608084015183811115611b9c578586fd5b611ba88882870161159b565b8284015250506101808084015183811115611bc1578586fd5b611bcd8882870161159b565b8284015250506101a08084015183811115611be6578586fd5b611bf28882870161159b565b8284015250506101c08084015183811115611c0b578586fd5b611c178882870161159b565b918301919091525095945050505050565b600060208284031215611c39578081fd5b5051919050565b600080600060608486031215611c54578081fd5b83359250602084013591506040840135611c6d81611f87565b809150509250925092565b80518252602090810151910152565b8051825260208082015190830152604090810151910152565b80518252602081015160208301526040810151604083015260ff60608201511660608301525050565b805182526020810151602083015260408101516040830152606081015160608301525050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526045908201527f43616e206f6e6c792062652063616c6c6564206966206164647265737365735060408201527f726f766964657220697320656d7074792c206d73672e73656e646572206f722060608201526437bbb732b960d91b608082015260a00190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601c908201527f5265717569726573206d73672e73656e6465722068617320726f6c6500000000604082015260600190565b60408101610e648284611c78565b60608101610e648284611c87565b60808101610e648284611ca0565b60808101610e648284611cc9565b60a08101611eaa8285611cc9565b8260808301529392505050565b918252602082015260400190565b83815260208101839052608081016106d86040830184611c78565b9283526020830191909152604082015260600190565b8381526020810183905260a081016106d86040830184611c87565b8381526020810183905260c081016106d86040830184611ca0565b8381526020810183905260c081016106d86040830184611cc9565b60405181810167ffffffffffffffff81118282101715611f6957611f69611f71565b604052919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461134357600080fd5b60ff8116811461134357600080fdfea2646970667358221220ee85e6d99c09f6e929d9cfb5cdabef0cda57e22cf0e26c0508d6565a89b795a964736f6c63430008000033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c8063715018a61161011a5780639b7a220d116100ad578063daea85c51161007c578063daea85c514610402578063e5b5019a14610415578063ea532d461461042a578063f2fde38b1461043d578063f73afd9614610450576101fb565b80639b7a220d146103b3578063b817bcf7146103c6578063cfd8d6c0146103d9578063d618cc64146103ec576101fb565b80638da5cb5b116100e95780638da5cb5b1461037057806391af5b3414610378578063985fadc8146103985780639af1da48146103ab576101fb565b8063715018a61461032f57806372633f981461033757806379a558e71461034a578063882baa001461035d576101fb565b80631cb647051161019257806340717f431161016157806340717f43146102f957806341c0e1b51461030c57806357ddafd314610314578063688c4b2414610327576101fb565b80631cb64705146102c15780632c53f6c4146102c957806333327472146102d15780633e8b9f19146102e6576101fb565b806311e0c07b116101ce57806311e0c07b146102735780631848effa1461029357806319872f761461029b57806319d9603a146102ae576101fb565b806301215c83146102005780630542975c146102155780630adf05d0146102335780630b3f0b5414610253575b600080fd5b61021361020e36600461199d565b610463565b005b61021d610517565b60405161022a9190611cef565b60405180910390f35b6102466102413660046117a0565b610526565b60405161022a9190611e80565b6102666102613660046117a0565b6105c3565b60405161022a9190611e72565b610286610281366004611c40565b610657565b60405161022a9190611d1c565b61021d6106e0565b61021d6102a93660046117a0565b6106ef565b6102136102bc3660046117e7565b610770565b6102666107e7565b61024661087f565b6102d9610912565b60405161022a9190611e64565b6102d96102f43660046117a0565b6109a4565b6102136103073660046118d3565b610a38565b610213610aaf565b6102d96103223660046117a0565b610ae5565b610246610b2a565b610213610b6d565b6102136103453660046118d3565b610b81565b610286610358366004611741565b610bf8565b61021361036b36600461181d565b610cae565b61021d610d25565b61038b6103863660046117a0565b610d34565b60405161022a9190611e8e565b6102866103a63660046117b8565b610dc9565b6102d9610e6a565b6102136103c13660046117e7565b610ead565b6102866103d4366004611741565b610f24565b6102136103e7366004611741565b610fdb565b6103f46110c5565b60405161022a929190611e9c565b610213610410366004611741565b6111eb565b61041d6112c1565b60405161022a9190611d27565b6102466104383660046117a0565b6112c7565b61021361044b366004611741565b61130c565b6103f461045e3660046117a0565b611346565b6d282927aa27a1a7a62fa0a226a4a760911b610481816103a661146f565b6104a65760405162461bcd60e51b815260040161049d90611e2d565b60405180910390fd5b604051633005b9a560e11b815273__$60257ade2e9256c87b7577fd1b418be579$__9063600b734a906104e390600f906011908790600401611f2c565b60006040518083038186803b1580156104fb57600080fd5b505af415801561050f573d6000803e3d6000fd5b505050505050565b6001546001600160a01b031690565b61052e611502565b60405163038d39c160e11b815273__$60257ade2e9256c87b7577fd1b418be579$__9063071a73829061056b906003906005908790600401611ee0565b60806040518083038186803b15801561058357600080fd5b505af4158015610597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb919061193e565b90505b919050565b6105cb61152d565b60405162ac321b60e31b815273__$60257ade2e9256c87b7577fd1b418be579$__9063056190d890610607906015906017908790600401611ee0565b60606040518083038186803b15801561061f57600080fd5b505af4158015610633573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190611878565b60405163fbd2817f60e01b81526000906001600160a01b0383169063fbd2817f906106889087908790600401611eb7565b60206040518083038186803b1580156106a057600080fd5b505afa1580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d89190611780565b949350505050565b6001546001600160a01b031681565b600154604051630cc397bb60e11b81526000916001600160a01b0316906319872f7690610720908590600401611d27565b60206040518083038186803b15801561073857600080fd5b505afa15801561074c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190611764565b6d282927aa27a1a7a62fa0a226a4a760911b61078e816103a661146f565b6107aa5760405162461bcd60e51b815260040161049d90611e2d565b604051635f000b3960e01b815273__$60257ade2e9256c87b7577fd1b418be579$__90635f000b39906104e390600c90600e908790600401611ec5565b6107ef61152d565b6040516315d9c37560e11b815273__$60257ade2e9256c87b7577fd1b418be579$__90632bb386ea9061082a90601590601790600401611eb7565b60606040518083038186803b15801561084257600080fd5b505af4158015610856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087a9190611878565b905090565b610887611502565b60405163a6b16b4360e01b815273__$60257ade2e9256c87b7577fd1b418be579$__9063a6b16b43906108c290600390600590600401611eb7565b60806040518083038186803b1580156108da57600080fd5b505af41580156108ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087a919061193e565b61091a61154e565b60405163bfdb039960e01b815273__$60257ade2e9256c87b7577fd1b418be579$__9063bfdb03999061095590600c90600e90600401611eb7565b604080518083038186803b15801561096c57600080fd5b505af4158015610980573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087a9190611802565b6109ac61154e565b60405163907874e560e01b815273__$60257ade2e9256c87b7577fd1b418be579$__9063907874e5906109e990600990600b908790600401611ee0565b604080518083038186803b158015610a0057600080fd5b505af4158015610a14573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190611802565b6d282927aa27a1a7a62fa0a226a4a760911b610a56816103a661146f565b610a725760405162461bcd60e51b815260040161049d90611e2d565b60405163eecd53b160e01b815273__$60257ade2e9256c87b7577fd1b418be579$__9063eecd53b1906104e3906003906005908790600401611f11565b6001546001600160a01b03163314610ad757634e487b7160e01b600052600160045260246000fd5b6001546001600160a01b0316ff5b610aed61154e565b604051639bb062d360e01b815273__$60257ade2e9256c87b7577fd1b418be579$__90639bb062d3906109e990600c90600e908790600401611ee0565b610b32611502565b60405163a6b16b4360e01b815273__$60257ade2e9256c87b7577fd1b418be579$__9063a6b16b43906108c290600690600890600401611eb7565b610b75611473565b610b7f60006114b2565b565b6d282927aa27a1a7a62fa0a226a4a760911b610b9f816103a661146f565b610bbb5760405162461bcd60e51b815260040161049d90611e2d565b60405163eecd53b160e01b815273__$60257ade2e9256c87b7577fd1b418be579$__9063eecd53b1906104e3906006906008908790600401611f11565b6000610c0c64212aaca2a960d91b83610dc9565b80156105bb575042610c24632aa9a2a960e11b6106ef565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b8152600401610c4f9190611cef565b60006040518083038186803b158015610c6757600080fd5b505afa158015610c7b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ca39190810190611a67565b604001511192915050565b6d282927aa27a1a7a62fa0a226a4a760911b610ccc816103a661146f565b610ce85760405162461bcd60e51b815260040161049d90611e2d565b60405163d93df20360e01b815273__$60257ade2e9256c87b7577fd1b418be579$__9063d93df203906104e3906015906017908790600401611ef6565b6000546001600160a01b031690565b610d3c611568565b60405163759b8c0160e01b815273__$60257ade2e9256c87b7577fd1b418be579$__9063759b8c0190610d79906012906014908790600401611ee0565b60806040518083038186803b158015610d9157600080fd5b505af4158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190611a02565b600080610de36a20a1a62fa6a0a720a3a2a960a91b6106ef565b6001600160a01b03166391d1485485856040518363ffffffff1660e01b8152600401610e10929190611d30565b60206040518083038186803b158015610e2857600080fd5b505afa158015610e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e609190611780565b9150505b92915050565b610e7261154e565b604051632fe2848160e01b815273__$60257ade2e9256c87b7577fd1b418be579$__90632fe284819061095590600990600b90600401611eb7565b6d282927aa27a1a7a62fa0a226a4a760911b610ecb816103a661146f565b610ee75760405162461bcd60e51b815260040161049d90611e2d565b6040516313a6a97b60e11b815273__$60257ade2e9256c87b7577fd1b418be579$__9063274d52f6906104e390600990600b908790600401611ec5565b6000610f396529a2a62622a960d11b83610dc9565b80156105bb575042610f51632aa9a2a960e11b6106ef565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b8152600401610f7c9190611cef565b60006040518083038186803b158015610f9457600080fd5b505afa158015610fa8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fd09190810190611a67565b608001511192915050565b6001600160a01b0381161580610ffb57506001546001600160a01b031633145b806110875750336001600160a01b0316306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561104457600080fd5b505afa158015611058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107c9190611764565b6001600160a01b0316145b6110a35760405162461bcd60e51b815260040161049d90611d8d565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6110cd611568565b604051630d0682c560e21b815260009073__$60257ade2e9256c87b7577fd1b418be579$__9063341a0b149061110b90600f90601190600401611eb7565b60806040518083038186803b15801561112357600080fd5b505af4158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115b9190611a02565b604051639e9886b760e01b815273__$60257ade2e9256c87b7577fd1b418be579$__90639e9886b79061119390601290600401611d27565b60206040518083038186803b1580156111ab57600080fd5b505af41580156111bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e39190611c28565b915091509091565b6d282927aa27a1a7a62fa0a226a4a760911b611209816103a661146f565b6112255760405162461bcd60e51b815260040161049d90611e2d565b60006112366211105560ea1b6106ef565b60025460405163095ea7b360e01b81529192506001600160a01b0385169163095ea7b39161126991859190600401611d03565b602060405180830381600087803b15801561128357600080fd5b505af1158015611297573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bb9190611780565b50505050565b60025481565b6112cf611502565b60405163038d39c160e11b815273__$60257ade2e9256c87b7577fd1b418be579$__9063071a73829061056b906006906008908790600401611ee0565b611314611473565b6001600160a01b03811661133a5760405162461bcd60e51b815260040161049d90611d47565b611343816114b2565b50565b61134e611568565b60405163759b8c0160e01b815260009073__$60257ade2e9256c87b7577fd1b418be579$__9063759b8c019061138e90600f906011908890600401611ee0565b60806040518083038186803b1580156113a657600080fd5b505af41580156113ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113de9190611a02565b604051639e9886b760e01b815273__$60257ade2e9256c87b7577fd1b418be579$__90639e9886b79061141690601290600401611d27565b60206040518083038186803b15801561142e57600080fd5b505af4158015611442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114669190611c28565b91509150915091565b3390565b61147b61146f565b6001600160a01b031661148c610d25565b6001600160a01b031614610b7f5760405162461bcd60e51b815260040161049d90611df8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518060800160405280600081526020016000815260200160008152602001600060ff1681525090565b60405180606001604052806000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b80516105be81611f87565b600082601f8301126115ab578081fd5b8151602067ffffffffffffffff8211156115c7576115c7611f71565b8082026115d5828201611f47565b8381528281019086840183880185018910156115ef578687fd5b8693505b858410156116115780518352600193909301929184019184016115f3565b50979650505050505050565b600082601f83011261162d578081fd5b815167ffffffffffffffff81111561164757611647611f71565b602061165b601f8301601f19168201611f47565b828152858284870101111561166e578384fd5b835b8381101561168b578581018301518282018401528201611670565b8381111561169b57848385840101525b5095945050505050565b6000604082840312156116b6578081fd5b6040516040810181811067ffffffffffffffff821117156116d9576116d9611f71565b604052823581526020928301359281019290925250919050565b600060408284031215611704578081fd5b6040516040810181811067ffffffffffffffff8211171561172757611727611f71565b604052825181526020928301519281019290925250919050565b600060208284031215611752578081fd5b813561175d81611f87565b9392505050565b600060208284031215611775578081fd5b815161175d81611f87565b600060208284031215611791578081fd5b8151801515811461175d578182fd5b6000602082840312156117b1578081fd5b5035919050565b600080604083850312156117ca578081fd5b8235915060208301356117dc81611f87565b809150509250929050565b6000604082840312156117f8578081fd5b61175d83836116a5565b600060408284031215611813578081fd5b61175d83836116f3565b60006060828403121561182e578081fd5b6040516060810181811067ffffffffffffffff8211171561185157611851611f71565b80604052508235815260208301356020820152604083013560408201528091505092915050565b600060608284031215611889578081fd5b6040516060810181811067ffffffffffffffff821117156118ac576118ac611f71565b80604052508251815260208301516020820152604083015160408201528091505092915050565b6000608082840312156118e4578081fd5b6040516080810181811067ffffffffffffffff8211171561190757611907611f71565b8060405250823581526020830135602082015260408301356040820152606083013561193281611f9c565b60608201529392505050565b60006080828403121561194f578081fd5b6040516080810181811067ffffffffffffffff8211171561197257611972611f71565b8060405250825181526020830151602082015260408301516040820152606083015161193281611f9c565b6000608082840312156119ae578081fd5b6040516080810181811067ffffffffffffffff821117156119d1576119d1611f71565b8060405250823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b600060808284031215611a13578081fd5b6040516080810181811067ffffffffffffffff82111715611a3657611a36611f71565b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b600060208284031215611a78578081fd5b815167ffffffffffffffff80821115611a8f578283fd5b81840191506101e0808387031215611aa5578384fd5b611aae81611f47565b9050825182811115611abe578485fd5b611aca8782860161161d565b8252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c0820152611b1560e08401611590565b60e08201526101008084015183811115611b2d578586fd5b611b398882870161159b565b8284015250506101208084015183811115611b52578586fd5b611b5e8882870161159b565b8284015250506101408084015183811115611b77578586fd5b611b838882870161159b565b8284015250506101608084015183811115611b9c578586fd5b611ba88882870161159b565b8284015250506101808084015183811115611bc1578586fd5b611bcd8882870161159b565b8284015250506101a08084015183811115611be6578586fd5b611bf28882870161159b565b8284015250506101c08084015183811115611c0b578586fd5b611c178882870161159b565b918301919091525095945050505050565b600060208284031215611c39578081fd5b5051919050565b600080600060608486031215611c54578081fd5b83359250602084013591506040840135611c6d81611f87565b809150509250925092565b80518252602090810151910152565b8051825260208082015190830152604090810151910152565b80518252602081015160208301526040810151604083015260ff60608201511660608301525050565b805182526020810151602083015260408101516040830152606081015160608301525050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526045908201527f43616e206f6e6c792062652063616c6c6564206966206164647265737365735060408201527f726f766964657220697320656d7074792c206d73672e73656e646572206f722060608201526437bbb732b960d91b608082015260a00190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601c908201527f5265717569726573206d73672e73656e6465722068617320726f6c6500000000604082015260600190565b60408101610e648284611c78565b60608101610e648284611c87565b60808101610e648284611ca0565b60808101610e648284611cc9565b60a08101611eaa8285611cc9565b8260808301529392505050565b918252602082015260400190565b83815260208101839052608081016106d86040830184611c78565b9283526020830191909152604082015260600190565b8381526020810183905260a081016106d86040830184611c87565b8381526020810183905260c081016106d86040830184611ca0565b8381526020810183905260c081016106d86040830184611cc9565b60405181810167ffffffffffffffff81118282101715611f6957611f69611f71565b604052919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461134357600080fd5b60ff8116811461134357600080fdfea2646970667358221220ee85e6d99c09f6e929d9cfb5cdabef0cda57e22cf0e26c0508d6565a89b795a964736f6c63430008000033",
    "libraries": {
        "ParamsLogic": "0x1A1FEe7EeD918BD762173e4dc5EfDB8a78C924A8"
    },
    "devdoc": {
        "author": "Blockswan",
        "kind": "dev",
        "methods": {
            "ADDRESSES_PROVIDER()": {
                "returns": {
                    "_0": "The address of the AddressProvider"
                }
            },
            "fetchContract(bytes32)": {
                "params": {
                    "_name": "the bytes32 name of the contract"
                }
            },
            "getBuyerEntryParams()": {
                "returns": {
                    "_0": "parameters The paramaters  when accessing the role status"
                }
            },
            "getDelayTimestamp()": {
                "returns": {
                    "_0": "parameters The delay timestamp parametes"
                }
            },
            "getGigCreationParams()": {
                "returns": {
                    "_0": "parameters The parameters when creating a gig"
                }
            },
            "getOrderCreationParams()": {
                "returns": {
                    "_0": "parameters The parameters when creating an order.",
                    "_1": "sellerFeesParamsVersion The latest fee structur version that will be applied to the seller upon order completion."
                }
            },
            "getRetributionParams()": {
                "returns": {
                    "_0": "retributions The retribution percentage values of the protocol."
                }
            },
            "getSellerEntryParams()": {
                "returns": {
                    "_0": "parameters The paramaters  when accessing the role status"
                }
            },
            "owner()": {
                "details": "Returns the address of the current owner."
            },
            "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
            },
            "setProvider(address)": {
                "params": {
                    "_providerAddress": "The address of the AddressProvider"
                }
            },
            "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            },
            "updateBuyerEntryParams((uint256,uint256,uint256,uint8))": {
                "params": {
                    "newParams": "The new buyer entry paramaters"
                }
            },
            "updateDelayTimestamp((uint256,uint256,uint256))": {
                "params": {
                    "newParams": "The new order creation paramaters"
                }
            },
            "updateGigCreationParams((uint256,uint256))": {
                "params": {
                    "newParams": "The new gig creation paramaters"
                }
            },
            "updateOrderCreationParams((uint256,uint256,uint256,uint256))": {
                "params": {
                    "newParams": "The new order creation paramaters"
                }
            },
            "updateRetributionParams((uint256,uint256))": {
                "params": {
                    "newParams": "The new retribution paramaters"
                }
            },
            "updateSellerEntryParams((uint256,uint256,uint256,uint8))": {
                "params": {
                    "newParams": "The new buyer entry paramaters"
                }
            }
        },
        "title": "Protocol Configurator",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "ADDRESSES_PROVIDER()": {
                "notice": "Returns the contract address of the IAddressProvider"
            },
            "fetchContract(bytes32)": {
                "notice": "fetch the contract address from the ADDRESSS_PROVIDERthrows error if address === 0"
            },
            "getBuyerEntryParams()": {
                "notice": "Retrieves the parameters when enterering the protocol as a buyer."
            },
            "getDelayTimestamp()": {
                "notice": "Retrieves the protocol delay timestamp."
            },
            "getGigCreationParams()": {
                "notice": "Retrieves the parameters when creating a gig."
            },
            "getOrderCreationParams()": {
                "notice": "Retrieves the parameters when creating an order."
            },
            "getRetributionParams()": {
                "notice": "Retrieves the retribution percentage values of the protocol."
            },
            "getSellerEntryParams()": {
                "notice": "Retrieves the parameters when enterering the protocol as a seller."
            },
            "kill()": {
                "notice": "kill the current address provider, only callable by the AddressProvider"
            },
            "setProvider(address)": {
                "notice": "set the provider address of the ProviderContract"
            },
            "updateBuyerEntryParams((uint256,uint256,uint256,uint8))": {
                "notice": "Update the  parameters when enterering the protocol as as buyer."
            },
            "updateDelayTimestamp((uint256,uint256,uint256))": {
                "notice": "Update the delays timestamp parameters of the protocol."
            },
            "updateGigCreationParams((uint256,uint256))": {
                "notice": "Update the gig creation parameters of the protocol."
            },
            "updateOrderCreationParams((uint256,uint256,uint256,uint256))": {
                "notice": "Update the order creation parameters of the protocol."
            },
            "updateRetributionParams((uint256,uint256))": {
                "notice": "Update the retributin  parameters of the protocol."
            },
            "updateSellerEntryParams((uint256,uint256,uint256,uint8))": {
                "notice": "Update the  parameters when enterering the protocol as as seller."
            }
        },
        "notice": "Contains all the protocol configuration*",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 4101,
                "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
            },
            {
                "astId": 7100,
                "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                "label": "ADDRESS_PROVIDER",
                "offset": 0,
                "slot": "1",
                "type": "t_contract(IAddressProvider)4606"
            },
            {
                "astId": 7107,
                "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                "label": "MAX_UINT",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
            },
            {
                "astId": 6656,
                "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                "label": "_buyerEntryParamsVersions",
                "offset": 0,
                "slot": "3",
                "type": "t_struct(UintSet)2884_storage"
            },
            {
                "astId": 6661,
                "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                "label": "_buyerEntryParamsHistory",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_uint256,t_struct(EntryParams)10915_storage)"
            },
            {
                "astId": 6664,
                "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                "label": "_sellerEntryParamsVersions",
                "offset": 0,
                "slot": "6",
                "type": "t_struct(UintSet)2884_storage"
            },
            {
                "astId": 6669,
                "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                "label": "_sellerEntryParamsHistory",
                "offset": 0,
                "slot": "8",
                "type": "t_mapping(t_uint256,t_struct(EntryParams)10915_storage)"
            },
            {
                "astId": 6672,
                "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                "label": "_retributionParamsVersions",
                "offset": 0,
                "slot": "9",
                "type": "t_struct(UintSet)2884_storage"
            },
            {
                "astId": 6677,
                "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                "label": "_retributionParamsHistory",
                "offset": 0,
                "slot": "11",
                "type": "t_mapping(t_uint256,t_struct(RetributionParams)10934_storage)"
            },
            {
                "astId": 6680,
                "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                "label": "_gigCreationParamsVersions",
                "offset": 0,
                "slot": "12",
                "type": "t_struct(UintSet)2884_storage"
            },
            {
                "astId": 6685,
                "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                "label": "_gigCreationParamsHistory",
                "offset": 0,
                "slot": "14",
                "type": "t_mapping(t_uint256,t_struct(CreationParams)10920_storage)"
            },
            {
                "astId": 6688,
                "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                "label": "_orderCreationParamsVersions",
                "offset": 0,
                "slot": "15",
                "type": "t_struct(UintSet)2884_storage"
            },
            {
                "astId": 6693,
                "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                "label": "_orderCreationParamsHistory",
                "offset": 0,
                "slot": "17",
                "type": "t_mapping(t_uint256,t_struct(OrderPriceParams)10929_storage)"
            },
            {
                "astId": 6696,
                "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                "label": "_sellerOrderFeesParamsVersions",
                "offset": 0,
                "slot": "18",
                "type": "t_struct(UintSet)2884_storage"
            },
            {
                "astId": 6701,
                "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                "label": "_sellerOrderFeesParamsHistory",
                "offset": 0,
                "slot": "20",
                "type": "t_mapping(t_uint256,t_struct(OrderPriceParams)10929_storage)"
            },
            {
                "astId": 6704,
                "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                "label": "_delayTimestampVersions",
                "offset": 0,
                "slot": "21",
                "type": "t_struct(UintSet)2884_storage"
            },
            {
                "astId": 6709,
                "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                "label": "_delayTimestampHistory",
                "offset": 0,
                "slot": "23",
                "type": "t_mapping(t_uint256,t_struct(DelayTimestamp)10802_storage)"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
                "base": "t_bytes32",
                "encoding": "dynamic_array",
                "label": "bytes32[]",
                "numberOfBytes": "32"
            },
            "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
            },
            "t_contract(IAddressProvider)4606": {
                "encoding": "inplace",
                "label": "contract IAddressProvider",
                "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_uint256)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_mapping(t_uint256,t_struct(CreationParams)10920_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => struct DataTypes.CreationParams)",
                "numberOfBytes": "32",
                "value": "t_struct(CreationParams)10920_storage"
            },
            "t_mapping(t_uint256,t_struct(DelayTimestamp)10802_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => struct DataTypes.DelayTimestamp)",
                "numberOfBytes": "32",
                "value": "t_struct(DelayTimestamp)10802_storage"
            },
            "t_mapping(t_uint256,t_struct(EntryParams)10915_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => struct DataTypes.EntryParams)",
                "numberOfBytes": "32",
                "value": "t_struct(EntryParams)10915_storage"
            },
            "t_mapping(t_uint256,t_struct(OrderPriceParams)10929_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => struct DataTypes.OrderPriceParams)",
                "numberOfBytes": "32",
                "value": "t_struct(OrderPriceParams)10929_storage"
            },
            "t_mapping(t_uint256,t_struct(RetributionParams)10934_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => struct DataTypes.RetributionParams)",
                "numberOfBytes": "32",
                "value": "t_struct(RetributionParams)10934_storage"
            },
            "t_struct(CreationParams)10920_storage": {
                "encoding": "inplace",
                "label": "struct DataTypes.CreationParams",
                "members": [
                    {
                        "astId": 10917,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "currencyValue",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 10919,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "xpEarned",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_uint256"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_struct(DelayTimestamp)10802_storage": {
                "encoding": "inplace",
                "label": "struct DataTypes.DelayTimestamp",
                "members": [
                    {
                        "astId": 10797,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "selfRefund",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 10799,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "closeTrial",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 10801,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "endTrial",
                        "offset": 0,
                        "slot": "2",
                        "type": "t_uint256"
                    }
                ],
                "numberOfBytes": "96"
            },
            "t_struct(EntryParams)10915_storage": {
                "encoding": "inplace",
                "label": "struct DataTypes.EntryParams",
                "members": [
                    {
                        "astId": 10908,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "currencyValue",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 10910,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "timeAdded",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 10912,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "xpEarned",
                        "offset": 0,
                        "slot": "2",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 10914,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "invitationEarned",
                        "offset": 0,
                        "slot": "3",
                        "type": "t_uint8"
                    }
                ],
                "numberOfBytes": "128"
            },
            "t_struct(OrderPriceParams)10929_storage": {
                "encoding": "inplace",
                "label": "struct DataTypes.OrderPriceParams",
                "members": [
                    {
                        "astId": 10922,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "trialFlat",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 10924,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "trialPercent",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 10926,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "proceedFlat",
                        "offset": 0,
                        "slot": "2",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 10928,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "proceedPercent",
                        "offset": 0,
                        "slot": "3",
                        "type": "t_uint256"
                    }
                ],
                "numberOfBytes": "128"
            },
            "t_struct(RetributionParams)10934_storage": {
                "encoding": "inplace",
                "label": "struct DataTypes.RetributionParams",
                "members": [
                    {
                        "astId": 10931,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "affiliate",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 10933,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "lvl0AffiliateShare",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_uint256"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_struct(Set)2412_storage": {
                "encoding": "inplace",
                "label": "struct EnumerableSet.Set",
                "members": [
                    {
                        "astId": 2407,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "_values",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_array(t_bytes32)dyn_storage"
                    },
                    {
                        "astId": 2411,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "_indexes",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_mapping(t_bytes32,t_uint256)"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_struct(UintSet)2884_storage": {
                "encoding": "inplace",
                "label": "struct EnumerableSet.UintSet",
                "members": [
                    {
                        "astId": 2883,
                        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
                        "label": "_inner",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_struct(Set)2412_storage"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            },
            "t_uint8": {
                "encoding": "inplace",
                "label": "uint8",
                "numberOfBytes": "1"
            }
        }
    }
}
