{
  "address": "0x1d67608184F6Aa7781CeA119454f1131DB65a5a9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "provider",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "appeal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "claimAppealFeeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "claimAsJudge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "claimRuling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "salt",
          "type": "string"
        }
      ],
      "name": "commitVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "procecutorId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defendantId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "userId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct DataTypes.Evidence",
          "name": "evidence",
          "type": "tuple"
        }
      ],
      "name": "createDispute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "name": "fetchContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProtocolConfigurator",
          "name": "protocolConfigurator",
          "type": "address"
        }
      ],
      "name": "getDelayTimestamp",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "selfRefund",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "evidence",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "appeal",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.DelayTimestamp",
          "name": "delayTimestamp",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "getDisputeById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "disputeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ruling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ruledAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "timestamps",
              "type": "uint256[]"
            },
            {
              "internalType": "enum DataTypes.DisputeState",
              "name": "state",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "roundId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "procecutorId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "defendantId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "appealFeeRewards",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokensAtStakePerJuror",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalFeesForJurors",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "penalties",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "winningChoice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalRepartitions",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalVoted",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalCommited",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256[11]",
                  "name": "counts",
                  "type": "uint256[11]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "evidenceSubmitters",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "appealedBy",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "account",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "commit",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "choice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "weight",
                      "type": "uint256"
                    },
                    {
                      "internalType": "string",
                      "name": "justification",
                      "type": "string"
                    },
                    {
                      "internalType": "bool",
                      "name": "hasVoted",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct DataTypes.Vote[]",
                  "name": "votes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "userId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "role",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "string",
                      "name": "metadata",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct DataTypes.Evidence[]",
                  "name": "evidences",
                  "type": "tuple[]"
                },
                {
                  "internalType": "address[]",
                  "name": "drawnJurors",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "judgesClaimed",
                  "type": "address[]"
                },
                {
                  "internalType": "bool",
                  "name": "closed",
                  "type": "bool"
                }
              ],
              "internalType": "struct OutputTypes.RoundOutput[]",
              "name": "rounds",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct OutputTypes.DisputeOutput",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDisputeCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDisputeList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "disputeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ruling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ruledAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "timestamps",
              "type": "uint256[]"
            },
            {
              "internalType": "enum DataTypes.DisputeState",
              "name": "state",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "roundId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "procecutorId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "defendantId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "appealFeeRewards",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokensAtStakePerJuror",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalFeesForJurors",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "penalties",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "winningChoice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalRepartitions",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalVoted",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalCommited",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256[11]",
                  "name": "counts",
                  "type": "uint256[11]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "evidenceSubmitters",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "appealedBy",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "account",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "commit",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "choice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "weight",
                      "type": "uint256"
                    },
                    {
                      "internalType": "string",
                      "name": "justification",
                      "type": "string"
                    },
                    {
                      "internalType": "bool",
                      "name": "hasVoted",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct DataTypes.Vote[]",
                  "name": "votes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "userId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "role",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "string",
                      "name": "metadata",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct DataTypes.Evidence[]",
                  "name": "evidences",
                  "type": "tuple[]"
                },
                {
                  "internalType": "address[]",
                  "name": "drawnJurors",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "judgesClaimed",
                  "type": "address[]"
                },
                {
                  "internalType": "bool",
                  "name": "closed",
                  "type": "bool"
                }
              ],
              "internalType": "struct OutputTypes.RoundOutput[]",
              "name": "rounds",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct OutputTypes.DisputeOutput[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "getOrderPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasProtocolRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "internalType": "contract IUser",
          "name": "UserContract",
          "type": "address"
        }
      ],
      "name": "isCallerUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAddressMatchingId",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gigId",
          "type": "uint256"
        },
        {
          "internalType": "contract IUser",
          "name": "UserContract",
          "type": "address"
        }
      ],
      "name": "isGigOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isStillBuyer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isStillSeller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "userId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct DataTypes.Evidence",
          "name": "evidence",
          "type": "tuple"
        }
      ],
      "name": "nextRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "passPhase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "salt",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "justification",
          "type": "string"
        }
      ],
      "name": "revealVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "userId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct DataTypes.Evidence",
          "name": "evidence",
          "type": "tuple"
        }
      ],
      "name": "sendEvidence",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "_providerAddress",
          "type": "address"
        }
      ],
      "name": "setProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x42637aae1b4ecc5690ddcebd72dee0cf8dc7091b3ff5e44533a2aae4a2655875",
  "receipt": {
    "to": null,
    "from": "0x8D3BD47c94b340E0151376ABF9D76C74c471E213",
    "contractAddress": "0x1d67608184F6Aa7781CeA119454f1131DB65a5a9",
    "transactionIndex": 0,
    "gasUsed": "3856060",
    "logsBloom": "0x
    "blockHash": "0x25a4435ba4653654cf825da3edb83858d1ab303298f0cfc949d782911790474c",
    "transactionHash": "0x42637aae1b4ecc5690ddcebd72dee0cf8dc7091b3ff5e44533a2aae4a2655875",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32903041,
        "transactionHash": "0x42637aae1b4ecc5690ddcebd72dee0cf8dc7091b3ff5e44533a2aae4a2655875",
        "address": "0x1d67608184F6Aa7781CeA119454f1131DB65a5a9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d3bd47c94b340e0151376abf9d76c74c471e213"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x25a4435ba4653654cf825da3edb83858d1ab303298f0cfc949d782911790474c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 32903041,
        "transactionHash": "0x42637aae1b4ecc5690ddcebd72dee0cf8dc7091b3ff5e44533a2aae4a2655875",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008d3bd47c94b340e0151376abf9d76c74c471e213",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000001567ca74b15c14400000000000000000000000000000000000000000000000015b979b8869fd50c7000000000000000000000000000000000000000000001c21a8c311fd0fccba05000000000000000000000000000000000000000000000001462fd113b8a13c87000000000000000000000000000000000000000000001c21be2adc71c128ce45",
        "logIndex": 1,
        "blockHash": "0x25a4435ba4653654cf825da3edb83858d1ab303298f0cfc949d782911790474c"
      }
    ],
    "blockNumber": 32903041,
    "cumulativeGasUsed": "3856060",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc4b6Cd0bc2BBF47077d321d3c878c31b01e17aD5"
  ],
  "numDeployments": 1,
  "solcInputHash": "540ab05e3117b642ab74c32eb85f094d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"appeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"claimAppealFeeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"claimAsJudge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"claimRuling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"salt\",\"type\":\"string\"}],\"name\":\"commitVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"procecutorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defendantId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.Evidence\",\"name\":\"evidence\",\"type\":\"tuple\"}],\"name\":\"createDispute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"fetchContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolConfigurator\",\"name\":\"protocolConfigurator\",\"type\":\"address\"}],\"name\":\"getDelayTimestamp\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"selfRefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"evidence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appeal\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.DelayTimestamp\",\"name\":\"delayTimestamp\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"getDisputeById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ruling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ruledAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"timestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"enum DataTypes.DisputeState\",\"name\":\"state\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"procecutorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defendantId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appealFeeRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAtStakePerJuror\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeesForJurors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalties\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningChoice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRepartitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVoted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommited\",\"type\":\"uint256\"},{\"internalType\":\"uint256[11]\",\"name\":\"counts\",\"type\":\"uint256[11]\"},{\"internalType\":\"uint256[]\",\"name\":\"evidenceSubmitters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"appealedBy\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"justification\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.Vote[]\",\"name\":\"votes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.Evidence[]\",\"name\":\"evidences\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"drawnJurors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"judgesClaimed\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"internalType\":\"struct OutputTypes.RoundOutput[]\",\"name\":\"rounds\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OutputTypes.DisputeOutput\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDisputeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDisputeList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ruling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ruledAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"timestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"enum DataTypes.DisputeState\",\"name\":\"state\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"procecutorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defendantId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appealFeeRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAtStakePerJuror\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeesForJurors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalties\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningChoice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRepartitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVoted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommited\",\"type\":\"uint256\"},{\"internalType\":\"uint256[11]\",\"name\":\"counts\",\"type\":\"uint256[11]\"},{\"internalType\":\"uint256[]\",\"name\":\"evidenceSubmitters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"appealedBy\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"justification\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.Vote[]\",\"name\":\"votes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.Evidence[]\",\"name\":\"evidences\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"drawnJurors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"judgesClaimed\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"internalType\":\"struct OutputTypes.RoundOutput[]\",\"name\":\"rounds\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OutputTypes.DisputeOutput[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getOrderPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasProtocolRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"contract IUser\",\"name\":\"UserContract\",\"type\":\"address\"}],\"name\":\"isCallerUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAddressMatchingId\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gigId\",\"type\":\"uint256\"},{\"internalType\":\"contract IUser\",\"name\":\"UserContract\",\"type\":\"address\"}],\"name\":\"isGigOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isStillBuyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isStillSeller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.Evidence\",\"name\":\"evidence\",\"type\":\"tuple\"}],\"name\":\"nextRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"passPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"salt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"justification\",\"type\":\"string\"}],\"name\":\"revealVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.Evidence\",\"name\":\"evidence\",\"type\":\"tuple\"}],\"name\":\"sendEvidence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"_providerAddress\",\"type\":\"address\"}],\"name\":\"setProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Blockswan\",\"details\":\"To be covered by a proxy contract, owned by the addressProvider of the specific marketplaceAll admin functions are callable by the protocolConfigurator contract defined also in the   addressProvider*\",\"kind\":\"dev\",\"methods\":{\"ADDRESSES_PROVIDER()\":{\"returns\":{\"_0\":\"The address of the AddressProvider\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"provider\":\"The address of the AddressProvider\"}},\"fetchContract(bytes32)\":{\"params\":{\"_name\":\"the bytes32 name of the contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setProvider(address)\":{\"params\":{\"_providerAddress\":\"The address of the AddressProvider\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Dispute contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ADDRESSES_PROVIDER()\":{\"notice\":\"Returns the contract address of the IAddressProvider\"},\"fetchContract(bytes32)\":{\"notice\":\"fetch the contract address from the ADDRESSS_PROVIDERthrows error if address === 0\"},\"kill()\":{\"notice\":\"kill the current address provider, only callable by the AddressProvider\"},\"setProvider(address)\":{\"notice\":\"set the provider address of the ProviderContract\"}},\"notice\":\"Dispute data within an Blockswan protocol's marketplace - Users can:   # raise a dispute via the Dispute contract   # send evidence to a dispute   # commit a vote on a dispute   # vote on a dispute   # appeal to a dispute resolution  # execute a ruling on a dispute\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/dispute/Dispute.sol\":\"Dispute\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/imports/aave/contracts/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/*^\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary PercentageMath {\\n    // Maximum percentage factor (100.00%)\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     **/\\n    function percentMul(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        assembly {\\n            if iszero(\\n                or(\\n                    iszero(percentage),\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\\n                PERCENTAGE_FACTOR\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     **/\\n    function percentDiv(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(\\n                                sub(not(0), div(percentage, 2)),\\n                                PERCENTAGE_FACTOR\\n                            )\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\\n                percentage\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x25d639d6a4c8aca57f987e5d94d761273dff9df8dcdeb7c8cefbb6250ecec927\",\"license\":\"BUSL-1.1\"},\"contracts/imports/gnosis/contracts/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../../openzeppelin/contracts/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developer^\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(from, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(freeMemoryPointer, 36),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTransferResult(\\n        IERC20 token\\n    ) private view returns (bool success) {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n            // Non-standard ERC20 transfer without return.\\n            case 0 {\\n                // NOTE: When the return data size is 0, verify that there\\n                // is code at the address. This is done in order to maintain\\n                // compatibility with Solidity calling conventions.\\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                if iszero(extcodesize(token)) {\\n                    revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                }\\n\\n                success := 1\\n            }\\n            // Standard ERC20 transfer returning boolean success value.\\n            case 32 {\\n                returndatacopy(0, 0, returndatasize())\\n\\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                // as `true` for a boolean. In order to stay compatible with\\n                // OpenZeppelin's `SafeERC20` library which is known to work\\n                // with the existing ERC20 implementation we care about,\\n                // make sure we return success for any non-zero return value\\n                // from the `transfer*` call.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            default {\\n                revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16a97de85622232442771b5974e025bbac9d4bb56fde737f58f3b363ac09ef5\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/imports/kleros/contracts/SortitionSumTreeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@epiqueras, @unknownunknown1]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8;\\n\\n/**\\n *  @title SortitionSumTreeFactory\\n *  @dev A factory of trees that keeps track of staked values for sortition. This is the updated version for 0.8 compiler.\\n */\\nlibrary SortitionSumTreeFactory {\\n    /* Structs */\\n\\n    struct SortitionSumTree {\\n        uint256 K; // The maximum number of childs per node.\\n        // We use this to keep track of vacant positions in the tree after removing a leaf. This is for keeping the tree as balanced as possible without spending gas on moving nodes around.\\n        uint256[] stack;\\n        uint256[] nodes;\\n        // Two-way mapping of IDs to node indexes. Note that node index 0 is reserved for the root node, and means the ID does not have a node.\\n        mapping(bytes32 => uint256) IDsToNodeIndexes;\\n        mapping(uint256 => bytes32) nodeIndexesToIDs;\\n    }\\n\\n    /* Storage */\\n\\n    struct SortitionSumTrees {\\n        mapping(bytes32 => SortitionSumTree) sortitionSumTrees;\\n    }\\n\\n    /* Public */\\n\\n    /**\\n     *  @dev Create a sortition sum tree at the specified key.\\n     *  @param _key The key of the new tree.\\n     *  @param _K The number of children each node in the tree should have.\\n     */\\n    function createTree(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint256 _K\\n    ) external {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        require(tree.K == 0, \\\"Tree already exists.\\\");\\n        require(_K > 1, \\\"K must be greater than one.\\\");\\n        tree.K = _K;\\n        tree.nodes.push(0);\\n    }\\n\\n    /**\\n     *  @dev Set a value of a tree.\\n     *  @param _key The key of the tree.\\n     *  @param _value The new value.\\n     *  @param _ID The ID of the value.\\n     *  `O(log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function set(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint256 _value,\\n        bytes32 _ID\\n    ) external {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint256 treeIndex = tree.IDsToNodeIndexes[_ID];\\n\\n        if (treeIndex == 0) {\\n            // No existing node.\\n            if (_value != 0) {\\n                // Non zero value.\\n                // Append.\\n                // Add node.\\n                if (tree.stack.length == 0) {\\n                    // No vacant spots.\\n                    // Get the index and append the value.\\n                    treeIndex = tree.nodes.length;\\n                    tree.nodes.push(_value);\\n\\n                    // Potentially append a new node and make the parent a sum node.\\n                    if (treeIndex != 1 && (treeIndex - 1) % tree.K == 0) {\\n                        // Is first child.\\n                        uint256 parentIndex = treeIndex / tree.K;\\n                        bytes32 parentID = tree.nodeIndexesToIDs[parentIndex];\\n                        uint256 newIndex = treeIndex + 1;\\n                        tree.nodes.push(tree.nodes[parentIndex]);\\n                        delete tree.nodeIndexesToIDs[parentIndex];\\n                        tree.IDsToNodeIndexes[parentID] = newIndex;\\n                        tree.nodeIndexesToIDs[newIndex] = parentID;\\n                    }\\n                } else {\\n                    // Some vacant spot.\\n                    // Pop the stack and append the value.\\n                    treeIndex = tree.stack[tree.stack.length - 1];\\n                    tree.stack.pop();\\n                    tree.nodes[treeIndex] = _value;\\n                }\\n\\n                // Add label.\\n                tree.IDsToNodeIndexes[_ID] = treeIndex;\\n                tree.nodeIndexesToIDs[treeIndex] = _ID;\\n\\n                updateParents(self, _key, treeIndex, true, _value);\\n            }\\n        } else {\\n            // Existing node.\\n            if (_value == 0) {\\n                // Zero value.\\n                // Remove.\\n                // Remember value and set to 0.\\n                uint256 value = tree.nodes[treeIndex];\\n                tree.nodes[treeIndex] = 0;\\n\\n                // Push to stack.\\n                tree.stack.push(treeIndex);\\n\\n                // Clear label.\\n                delete tree.IDsToNodeIndexes[_ID];\\n                delete tree.nodeIndexesToIDs[treeIndex];\\n\\n                updateParents(self, _key, treeIndex, false, value);\\n            } else if (_value != tree.nodes[treeIndex]) {\\n                // New, non zero value.\\n                // Set.\\n                bool plusOrMinus = tree.nodes[treeIndex] <= _value;\\n                uint256 plusOrMinusValue = plusOrMinus\\n                    ? _value - tree.nodes[treeIndex]\\n                    : tree.nodes[treeIndex] - _value;\\n                tree.nodes[treeIndex] = _value;\\n\\n                updateParents(self, _key, treeIndex, plusOrMinus, plusOrMinusValue);\\n            }\\n        }\\n    }\\n\\n    /* Public Views */\\n\\n    /**\\n     *  @dev Query the leaves of a tree. Note that if `startIndex == 0`, the tree is empty and the root node will be returned.\\n     *  @param _key The key of the tree to get the leaves from.\\n     *  @param _cursor The pagination cursor.\\n     *  @param _count The number of items to return.\\n     *  @return startIndex The index at which leaves start.\\n     *  @return values The values of the returned leaves.\\n     *  @return hasMore Whether there are more for pagination.\\n     *  `O(n)` where\\n     *  `n` is the maximum number of nodes ever appended.\\n     */\\n    function queryLeafs(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint256 _cursor,\\n        uint256 _count\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 startIndex,\\n            uint256[] memory values,\\n            bool hasMore\\n        )\\n    {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n\\n        // Find the start index.\\n        for (uint256 i = 0; i < tree.nodes.length; i++) {\\n            if ((tree.K * i) + 1 >= tree.nodes.length) {\\n                startIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // Get the values.\\n        uint256 loopStartIndex = startIndex + _cursor;\\n        values = new uint256[](\\n            loopStartIndex + _count > tree.nodes.length ? tree.nodes.length - loopStartIndex : _count\\n        );\\n        uint256 valuesIndex = 0;\\n        for (uint256 j = loopStartIndex; j < tree.nodes.length; j++) {\\n            if (valuesIndex < _count) {\\n                values[valuesIndex] = tree.nodes[j];\\n                valuesIndex++;\\n            } else {\\n                hasMore = true;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function draw(SortitionSumTrees storage self, bytes32 _key, uint _drawnNumber) internal view returns(bytes32 ID) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint treeIndex = 0;\\n        uint currentDrawnNumber = _drawnNumber % tree.nodes[0];\\n\\n        while ((tree.K * treeIndex) + 1 < tree.nodes.length)  // While it still has children.\\n            for (uint i = 1; i <= tree.K; i++) { // Loop over children.\\n                uint nodeIndex = (tree.K * treeIndex) + i;\\n                uint nodeValue = tree.nodes[nodeIndex];\\n\\n                if (currentDrawnNumber >= nodeValue) currentDrawnNumber -= nodeValue; // Go to the next child.\\n                else { // Pick this child.\\n                    treeIndex = nodeIndex;\\n                    break;\\n                }\\n            }\\n        \\n        ID = tree.nodeIndexesToIDs[treeIndex];\\n    }\\n\\n    function total(SortitionSumTrees storage self, bytes32 _key) internal view returns (uint) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        if (tree.nodes.length == 0) {\\n            return 0;\\n        } else {\\n            return tree.nodes[0];\\n        }\\n    }\\n\\n\\n    /** @dev Gets a specified ID's associated value.\\n     *  @param _key The key of the tree.\\n     *  @param _ID The ID of the value.\\n     *  @return value The associated value.\\n     */\\n    function stakeOf(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        bytes32 _ID\\n    ) external view returns (uint256 value) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint256 treeIndex = tree.IDsToNodeIndexes[_ID];\\n\\n        if (treeIndex == 0) value = 0;\\n        else value = tree.nodes[treeIndex];\\n    }\\n\\n    /* Private */\\n\\n    /**\\n     *  @dev Update all the parents of a node.\\n     *  @param _key The key of the tree to update.\\n     *  @param _treeIndex The index of the node to start from.\\n     *  @param _plusOrMinus Whether to add (true) or substract (false).\\n     *  @param _value The value to add or substract.\\n     *  `O(log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function updateParents(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint256 _treeIndex,\\n        bool _plusOrMinus,\\n        uint256 _value\\n    ) private {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n\\n        uint256 parentIndex = _treeIndex;\\n        while (parentIndex != 0) {\\n            parentIndex = (parentIndex - 1) / tree.K;\\n            tree.nodes[parentIndex] = _plusOrMinus\\n                ? tree.nodes[parentIndex] + _value\\n                : tree.nodes[parentIndex] - _value;\\n        }\\n    }\\n}\",\"keccak256\":\"0xbbee78df1db771d41161ac6e39d43d3a36ae69ce13ceee2b6e32e78007ffdb3a\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\",\"keccak256\":\"0x632d89cfbd5134bb48ab9f27f8acb3ef6230858240a06c01860523508cce9502\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n      \\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\",\"keccak256\":\"0xc70dcac795ccbf6d71c8749ad70836deef10bb12af9216d7c63399e11dd00186\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\",\"keccak256\":\"0xbe08f54c573afa66d30bddd5781ad651fa0ac388458375e4c4c3f04cf2baf6b1\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\",\"keccak256\":\"0x6edba116c3de120257f96a0e2cf286645d5b3317a06a20cbf933f1fa2166d7f6\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\",\"keccak256\":\"0x9f78e6c3f521399028621916f4fb097a485c053041141af27c978b67e6fb769a\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbe7e8c250bbebe46299f337b29c535ce00d67fe289eb03d84ebbd74934eec19f\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x3e3b5b4dd5f5483461605d0fa56c249517effc2500a4f6da288d6baabf01ed4d\",\"license\":\"MIT\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {IAccessControlEnumerable} from \\\"../imports/openzeppelin/contracts/IAccessControlEnumerable.sol\\\";\\n\\n/**\\n * @title IACLManager\\n * @author Blockswan\\n * @notice Defines the basic interface for the ACLManager\\n **/\\ninterface IACLManager is IAccessControlEnumerable {\\n    /**\\n     * @notice Set the role as admin of a specific role.\\n     * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\\n     * @param role The role to be managed by the admin role\\n     * @param adminRole The admin role\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0xd78c8b8344352eda17c37b4474398fcf7c2f08c6855c87de8d6e9439e4e1ca16\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressProvider.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title The interface for contracts to interact with the Blockswan Address Provider contract\\ninterface IAddressProvider {\\n    /**\\n     * @dev Emitted when a new marketplaceId is set.\\n     * @param oldMarketplaceId The address of the old marketplaceId\\n     * @param newMarketplaceId The address of the new marketplaceId\\n     */\\n    event MarketplaceIdSet(\\n        string indexed oldMarketplaceId,\\n        string indexed newMarketplaceId\\n    );\\n\\n    /**\\n     * @dev Emitted when a new contract is added to the AddressProvider.\\n     * @param _name The name assigned in the AddressProvider.\\n     * @param _address The address of the new contract\\n     */\\n    event ContractAdded(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a new contract is removed from the AddressProvider.\\n     * @param _name The contract name removed in the AddressProvider.\\n     * @param _address The address of the removed contract\\n     */\\n    event ContractRemoved(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a contract is upgraded in the AddressProvider.\\n     * @param _name The contract name upraded in the AddressProvider.\\n     * @param _oldAddress The old address prior upgrade\\n     * @param _newAddress The new address after upgrade\\n     */\\n    event ContractUpgraded(\\n        bytes32 _name,\\n        address _oldAddress,\\n        address _newAddress\\n    );\\n\\n    /**\\n     * @notice returns contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     * @return contractAddr - address of contract registered under given provider key\\n     */\\n    function getContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice overloaded getContract to return explicit version of contract */\\n    function getContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    function getContractVersionCount(\\n        bytes32 _name\\n    ) external view returns (uint);\\n\\n    /**\\n     * @dev addContract does two things:\\n     *      1.) registers the address of given ProviderContract in the registry\\n     *      2.) sets the registry address in given ProviderContract so only\\n     *          the registry can call functions on given contract\\n     */\\n    function addContract(bytes32 _name, address _address) external;\\n\\n    /**\\n     * @dev removes contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     */\\n    function removeContract(bytes32 _name) external;\\n\\n    /**\\n     * @notice replaces contract address registered under given key with provided address\\n     * @param _name - registry key for lookup\\n     * @param _newAddress - new contract address to register under given key\\n     */\\n    function upgradeContract(bytes32 _name, address _newAddress) external;\\n}\\n\",\"keccak256\":\"0x46fd1f2889b6a5fbd60209f90b44ced918175d5ef3b05e7d8dd526a4afd77bdc\",\"license\":\"MIT\"},\"contracts/interfaces/IBSWAN.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IBSWAN\\n * @author Blockswan\\n * @notice Defines the basic interface for the Blockswan Trust\\n **/\\ninterface IBSWAN is IERC20 {\\n    /**\\n     * @notice Update the DAT config.\\n     * @param _newOwner The new owner of the DAT\\n     * @param _revenueCommitmentBasisPoints the share of revenues tranfered to the buyback reserve\\n     * @param _minInvestment the min investment required in currency value\\n     */\\n    function updateConfig(\\n        address payable _newOwner,\\n        uint256 _revenueCommitmentBasisPoints,\\n        uint256 _minInvestment\\n    ) external;\\n\\n    /**\\n     * @notice Update the DAT config.\\n     * @param _currencyValue the quantity of currency to buy\\n     * @return tokenValue the quantity of BSWAN bought for the _currencyValue\\n     */\\n    function estimateBuyValue(\\n        uint256 _currencyValue\\n    ) external view returns (uint256);\\n\\n    /** @notice Purchase BSWAN tokens with the given amount of currency.\\n     * @param _to The account to receive the BSWAN tokens from this purchase.\\n     * @param _currencyValue How much currency to spend in order to buy BSWAN.\\n     * @param _minTokensBought Buy at least this many BSWAN tokens or the transaction reverts.\\n     * @dev _minTokensBought is necessary as the price will change if some elses transaction mines after\\n     * yours was submitted.\\n     */\\n    function buy(\\n        address _to,\\n        uint256 _currencyValue,\\n        uint256 _minTokensBought\\n    ) external payable;\\n\\n    /// Pay\\n    function estimatePayValue(\\n        uint256 _currencyValue\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Pay the organization on-chain.\\n     * @param _to The account which receives tokens for the contribution. If this address\\n     * is not authorized to receive tokens then they will be sent to the beneficiary account instead.\\n     * @param _currencyValue How much currency which was paid.\\n     */\\n    function pay(address _to, uint _currencyValue) external payable;\\n\\n    /// @notice The address of the token used as reserve in the bonding curve\\n    /// (e.g. the DAI contract)\\n    function currency() external returns (IERC20);\\n}\\n\",\"keccak256\":\"0xb07e5fcfdebb6b3f050ad1f172eb7923d06ce3727af5528f4acc236f87d9b146\",\"license\":\"MIT\"},\"contracts/interfaces/IDispute.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../protocol/libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../protocol/libraries/types/InputTypes.sol\\\";\\n\\n/**\\n * @title IDispute\\n * @author Blockswan\\n * @notice Defines the basic interface for a blockswan dispute contract.\\n **/\\ninterface IDispute {\\n    /**\\n     * @dev Emitted when a new dispute is created.\\n     * @param orderId The order id\\n     * @param disputeId The new dispute id\\n   \\n     */\\n    event NewDispute(uint256 indexed orderId, uint256 indexed disputeId);\\n\\n    /**\\n     * @notice Returns the dispute data.\\n     * @param disputeId The id of the dispute.\\n     * @return The data associated to the disputeId\\n     **/\\n    function getDisputeById(\\n        uint256 disputeId\\n    ) external view returns (OutputTypes.GigOutput memory);\\n\\n    /**\\n     * @notice Returns the list of all initialized disputes.\\n     * @return A data array of the disputes.\\n     **/\\n    function getDisputeList()\\n        external\\n        view\\n        returns (OutputTypes.DisputeOutput[] memory);\\n\\n    /**\\n     * @notice Returns the current amount of disputes\\n     * @return the current amount of disputes\\n     **/\\n    function getDisputesCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Create a new dispute\\n     * @param orderId The order id\\n     * @param procecutorId The procecutor id\\n     * @param defendantId The defendant id\\n     * @param caller The caller address\\n     * @param evidence The evidence data\\n     * @return the new dispute id\\n     **/\\n    function createDispute(\\n        uint256 orderId,\\n        uint256 procecutorId,\\n        uint256 defendantId,\\n        address caller,\\n        DataTypes.Evidence memory evidence\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x8a856b5cf7bb4a1f9d91b5fdfb117402ca62417a787297ad055d3b511cece5e9\",\"license\":\"MIT\"},\"contracts/interfaces/IGig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../protocol/libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../protocol/libraries/types/InputTypes.sol\\\";\\n\\n/**\\n * @title IGig\\n * @author Blockswan\\n * @notice Defines the basic interface for a blockswan gig contract.\\n **/\\ninterface IGig {\\n    /**\\n     * @dev Emitted when a new gig is created.\\n     * @param gigId The id of the gig\\n     * @param userId The user creating the gig\\n     * @param metadata The gig metadata\\n     * @param packages The gig packages\\n     */\\n    event GigAdded(\\n        uint256 indexed gigId,\\n        uint256 indexed userId,\\n        string metadata,\\n        DataTypes.Package[3] packages\\n    );\\n\\n    /**\\n     * @dev Emitted when a gig is edited.\\n     * @param gigId The id of the gig\\n     * @param userId The user creating the gig\\n     * @param metadata The gig metadata\\n     * @param packages The gig packages\\n     */\\n    event GigEdited(\\n        uint256 indexed gigId,\\n        uint256 indexed userId,\\n        string metadata,\\n        DataTypes.Package[3] packages\\n    );\\n\\n    /**\\n     * @notice Returns the gig data.\\n     * @param gigId The id of the gig.\\n     * @return The data associated to the gigId\\n     **/\\n    function getGigById(\\n        uint256 gigId\\n    ) external view returns (OutputTypes.GigOutput memory);\\n\\n    /**\\n     * @notice Returns the list of all initialized gigs.\\n     * @return A data array of the gigs.\\n     **/\\n    function getGigList()\\n        external\\n        view\\n        returns (OutputTypes.GigOutput[] memory);\\n\\n    /**\\n     * @notice Returns the current amount of gigs\\n     * @return the current amount of gigs\\n     **/\\n    function getGigsCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Create a new gig with the msg.sender wallet\\n     * @param metadata the gig related information\\n     * @param packages the packages inside the gig\\n     **/\\n    function createGig(\\n        string memory metadata,\\n        DataTypes.Package[3] memory packages\\n    ) external;\\n\\n    /**\\n     * @notice retrieves the inviters wallet for a given wallet account\\n     * @param account the wallet to get the inviters from\\n     * @return address the pubkey of inviter0\\n     * @return address the pubkey of inviter1\\n     **/\\n    function getInvitersByUserAddress(\\n        address account\\n    ) external view returns (address, address);\\n\\n    /**\\n     * @notice retrieves the inviters wallet for a given userId\\n     * @param userId the user id to get the inviters from\\n     * @return address the pubkey of inviter0\\n     * @return address the pubkey of inviter1\\n     **/\\n    function getInvitersById(\\n        uint256 userId\\n    ) external view returns (address, address);\\n\\n    /**\\n     * @notice add the order id to the gig orderIds set.\\n     * @param newOrderId the new orderId.\\n     * @param gigId the new gig id.\\n     * @param packageId the packages inside the gig\\n     * @return success the relation has been addded.\\n     * @return metadata the gig metadata\\n     * @return packages the gig packages\\n     **/\\n    function createOrder(\\n        uint256 newOrderId,\\n        uint256 gigId,\\n        uint256 packageId\\n    ) external returns (bool, string memory, DataTypes.Package memory);\\n}\\n\",\"keccak256\":\"0x3ab44c145755b260802b7c6b5c760cbc23679b1efd0c6da00ac5c541959da1ee\",\"license\":\"MIT\"},\"contracts/interfaces/IJury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../protocol/libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../protocol/libraries/types/InputTypes.sol\\\";\\n\\n/**\\n * @title IJury\\n * @author Blockswan\\n * @notice Defines the basic interface for a blockswan jury contract.\\n **/\\ninterface IJury {\\n    /**\\n     * @notice Randomly draws X jurors from the jurors pool\\n     * using entropy made with the blockhash and the disputeId among other things.\\n     * @param numberOfJurors The number of jurors to draw\\n   \\n     * @return jurors The list of jurors address\\n     */\\n\\n    function drawJurors(\\n        uint256 numberOfJurors\\n    ) external view returns (address[] memory jurors);\\n\\n    /**\\n     *\\n     * @param accounts The list of jurors to freeze\\n     */\\n\\n    function freezeTokens(address[] memory accounts) external;\\n\\n    /**\\n     * @param amount The amount to unfreeze\\n     * @param account The juror to unfreeze\\n     */\\n\\n    function unfreezeTokens(uint256 amount, address account) external;\\n\\n    /**\\n     * @param amount The amount of tokens added to the stake\\n     * @param juror The juror to reward\\n     */\\n    function rewardJuror(uint256 amount, address juror) external;\\n}\\n\",\"keccak256\":\"0x231e99b4594fbc9617adc601b2f261468fb5be029ece5f38da8cb68575b2af3c\",\"license\":\"MIT\"},\"contracts/interfaces/IOrder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../protocol/libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../protocol/libraries/types/InputTypes.sol\\\";\\n\\n/**\\n * @title IOrder\\n * @author Blockswan\\n * @notice Defines the basic interface for a blockswan order contract.\\n **/\\ninterface IOrder {\\n    function getOrderById(\\n        uint256 orderId\\n    ) external view returns (OutputTypes.OrderOutput memory);\\n\\n    function rule(\\n        uint256 winningChoice,\\n        uint256 orderId,\\n        uint256 procecutorId,\\n        uint256 defendantId\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x78ef8042c0dbc12357c5dd3072e35d5e0d2f213772e564ed3b295855f35c8857\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {IAccessControlEnumerable} from \\\"../imports/openzeppelin/contracts/IAccessControlEnumerable.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IProtocolConfigurator\\n * @author Blockswan\\n * @notice Defines the basic interface for the ProtocolConfigurator\\n **/\\ninterface IProtocolConfigurator {\\n    /**\\n     * @notice Retrieves the parameters when enterering the protocol as a buyer.\\n     * @return parameters The paramaters  when accessing the role status\\n     */\\n    function getBuyerEntryParams()\\n        external\\n        view\\n        returns (DataTypes.EntryParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getBuyerEntryParams(\\n        uint256 version\\n    ) external view returns (DataTypes.EntryParams memory);\\n\\n    /**\\n     * @notice Update the  parameters when enterering the protocol as as buyer.\\n     * @param newParams The new buyer entry paramaters\\n     */\\n    function updateBuyerEntryParams(\\n        DataTypes.EntryParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when enterering the protocol as a seller.\\n     * @return parameters The paramaters  when accessing the role status\\n     */\\n    function getSellerEntryParams()\\n        external\\n        view\\n        returns (DataTypes.EntryParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getSellerEntryParams(\\n        uint256 version\\n    ) external view returns (DataTypes.EntryParams memory);\\n\\n    /**\\n     * @notice Update the  parameters when enterering the protocol as as seller.\\n     * @param newParams The new buyer entry paramaters\\n     */\\n    function updateSellerEntryParams(\\n        DataTypes.EntryParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the retribution percentage values of the protocol.\\n     * @return retributions The retribution percentage values of the protocol.\\n     */\\n    function getRetributionParams()\\n        external\\n        view\\n        returns (DataTypes.RetributionParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getRetributionParams(\\n        uint256 version\\n    ) external view returns (DataTypes.RetributionParams memory);\\n\\n    /**\\n     * @notice Update the retributin  parameters of the protocol.\\n     * @param newParams The new retribution paramaters\\n     */\\n    function updateRetributionParams(\\n        DataTypes.RetributionParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when creating a gig.\\n     * @return parameters The parameters when creating a gig\\n     */\\n    function getGigCreationParams()\\n        external\\n        view\\n        returns (DataTypes.CreationParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getGigCreationParams(\\n        uint256 version\\n    ) external view returns (DataTypes.CreationParams memory);\\n\\n    /**\\n     * @notice Update the gig creation parameters of the protocol.\\n     * @param newParams The new gig creation paramaters\\n     */\\n    function updateGigCreationParams(\\n        DataTypes.CreationParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when creating an order.\\n     * @return parameters The parameters when creating an order.\\n     */\\n    function getOrderCreationParams()\\n        external\\n        view\\n        returns (DataTypes.FeeParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getOrderCreationParams(\\n        uint256 version\\n    ) external view returns (DataTypes.FeeParams memory);\\n\\n    /**\\n     * @notice Update the order creation parameters of the protocol.\\n     * @param newParams The new order creation paramaters\\n     */\\n    function updateOrderCreationParams(\\n        DataTypes.FeeParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters fees for the seller after an order.\\n     * @return parameters The seller parameters upon odder completion\\n     */\\n    function getSellerOrderFees()\\n        external\\n        view\\n        returns (DataTypes.FeeParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getSellerOrderFees(\\n        uint256 version\\n    ) external view returns (DataTypes.FeeParams memory);\\n\\n    /**\\n     * @notice Update the order creation parameters of the protocol applied to a seller.\\n     * @param newParams The new sellerr-applied order creation paramaters\\n     */\\n    function updateSellerOrderFees(\\n        DataTypes.FeeParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the protocol delay timestamp.\\n     * @return parameters The delay timestamp parametes\\n     */\\n    function getDelayTimestamp()\\n        external\\n        view\\n        returns (DataTypes.DelayTimestamp memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getDelayTimestamp(\\n        uint256 version\\n    ) external view returns (DataTypes.DelayTimestamp memory);\\n\\n    /**\\n     * @notice Update the delays timestamp parameters of the protocol.\\n     * @param newParams The new order creation paramaters\\n     */\\n    function updateDelayTimestamp(\\n        DataTypes.DelayTimestamp memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the protocol dispute parameters.\\n     * @return parameters The dispute parameters\\n     */\\n    function getDisputeParams()\\n        external\\n        view\\n        returns (DataTypes.DisputeParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getDisputeParams(\\n        uint256 version\\n    ) external view returns (DataTypes.DisputeParams memory);\\n\\n    /**\\n     * @notice Update the dispute parameters of the protocol.\\n     * @param newParams The new dispute paramaters\\n     */\\n    function updateDisputeParams(\\n        DataTypes.DisputeParams memory newParams\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb8bbe515aae7479fdbe271803de8544045a36c6969f52b76a998701af5d153cc\",\"license\":\"MIT\"},\"contracts/interfaces/IProviderContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\n\\ninterface IProviderContract {\\n    /**\\n     * @notice set the provider address of the ProviderContract\\n     * @param _providerAddress The address of the AddressProvider\\n     */\\n    function setProvider(IAddressProvider _providerAddress) external;\\n\\n    /**\\n     * @notice fetch the contract address from the ADDRESSS_PROVIDER\\n     * @notice throws error if address === 0\\n     * @param _name the bytes32 name of the contract\\n     */\\n    function fetchContract(bytes32 _name) external view returns (address);\\n\\n    /**\\n     * @notice kill the current address provider, only callable by the AddressProvider\\n     */\\n    function kill() external;\\n\\n    /**\\n     * @notice Returns the contract address of the IAddressProvider\\n     * @return The address of the AddressProvider\\n     */\\n    function ADDRESSES_PROVIDER() external view returns (IAddressProvider);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the protocol_admin role\\n    //  * @return The id of the protocol_admin role\\n    //  */\\n    // function PROTOCOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the buyer role\\n    //  * @return The id of the buyer role\\n    //  */\\n    // function BUYER_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the seller role\\n    //  * @return The id of the seller role\\n    //  */\\n    // function SELLER_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the judge role\\n    //  * @return The id of the judge role\\n    //  */\\n    // function JUDGE_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the Blacklist role\\n    //  * @return The id of the Blacklist role\\n    //  */\\n    // function BLACKLIST_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the whitelist role\\n    //  * @return The id of the whitelist role\\n    //  */\\n    // function WHITELIST_ROLE() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xebb668acafab498b830a453d31cb524d4472e8f73905a214c27228f75e7a955d\",\"license\":\"MIT\"},\"contracts/interfaces/IUser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../protocol/libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../protocol/libraries/types/InputTypes.sol\\\";\\n\\n/**\\n * @title IUser\\n * @author Blockswan\\n * @notice Defines the basic interface for an blockswan user.\\n **/\\ninterface IUser {\\n    /**\\n     * @dev Emitted when a new user is created.\\n     * @param userId The id of the user\\n     * @param userAddress The wallet addresss of the user\\n     * @param userData The data associated with the user\\n     */\\n    event UserAdded(\\n        uint256 indexed userId,\\n        address indexed userAddress,\\n        InputTypes.CreateUserInput userData\\n    );\\n\\n    /**\\n     * @dev Emitted when an user is edited.\\n     * @param userId The id of the user\\n     * @param userAddress The wallet addresss of the user\\n     * @param userData The data associated with the user\\n     */\\n    event UserEdited(\\n        uint256 indexed userId,\\n        address indexed userAddress,\\n        OutputTypes.UserOutput userData\\n    );\\n\\n    /**\\n     * @notice Returns the user id from a given address.\\n     * @param account The address of the user\\n     * @return userId The userId associated to the account address\\n     **/\\n    function getIdByAddress(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user data.\\n     * @param userId The id of the user.\\n     * @return User The data associated to the user it\\n     **/\\n    function getUserById(\\n        uint256 userId\\n    ) external view returns (OutputTypes.UserOutput memory);\\n\\n    /**\\n     * @notice Returns the user for a given public key.\\n     * @param pubKey The address as parameter.\\n     * @return User the user linked to the public key\\n     **/\\n    function getUserByAddress(\\n        address pubKey\\n    ) external view returns (OutputTypes.UserOutput memory);\\n\\n    /**\\n     * @notice Returns the list of all initialized users.\\n     * @dev It does not include dropped users\\n     * @return A data array of the underlying user.\\n     **/\\n    function getUserList()\\n        external\\n        view\\n        returns (OutputTypes.UserOutput[] memory);\\n\\n    /**\\n     * @notice Returns the current revision of the contract\\n     * @return the current revision\\n     **/\\n    function getUsersCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user wallet address.\\n     * @param userId The id of the user.\\n     * @return userAddress the wallet of the user\\n     **/\\n    function getAddressById(uint256 userId) external view returns (address);\\n\\n    /**\\n     * @notice Create a new users with the msg.sender wallet\\n     * @param metadata the user related information\\n     * @param inviterId the userID of whom invited the newUser\\n     **/\\n    function createUser(string memory metadata, uint256 inviterId) external;\\n\\n    /**\\n     * @notice retrieves the inviters wallet for a given wallet account\\n     * @param account the wallet to get the inviters from\\n     * @return address the pubkey of inviter0\\n     * @return address the pubkey of inviter1\\n     **/\\n    function getInvitersByUserAddress(\\n        address account\\n    ) external view returns (address, address);\\n\\n    /**\\n     * @notice add the gig id to the user gigIds set.\\n     * @param caller the wallet creating the gig.\\n     * @param newGigId the new gig id.\\n     * @return success the relation has been addded.\\n     **/\\n    function createGig(\\n        address caller,\\n        uint256 newGigId\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice add the order id to the user buyerOrderIds set.\\n     * @param buyerId the id of the buyer\\n     * @param newOrderId the new gig orderId.\\n     * @return success the relation has been addded.\\n     **/\\n    function createBuyerOrder(\\n        uint256 buyerId,\\n        uint256 newOrderId\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice retrieves the inviters wallet for a given userId\\n     * @param userId the user id to get the inviters from\\n     * @return address the pubkey of inviter0\\n     * @return address the pubkey of inviter1\\n     **/\\n    function getInvitersById(\\n        uint256 userId\\n    ) external view returns (address, address);\\n\\n    /**\\n     * @notice return true if the gigId is owned by the given userId\\n     * @param userId the user id to check if he own the gig\\n     * @param gigId the gigId\\n     * @return bool if the gigId is owned by the given userId\\n     **/\\n    function isGigOwner(\\n        uint256 userId,\\n        uint256 gigId\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x628d9f386d3ecb2d8de7171eba630317a4e9a90fe531f228438cb00a31dbb59b\",\"license\":\"MIT\"},\"contracts/interfaces/IXP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IXP\\n * @author Blockswan\\n * @notice Defines the basic interface for the Experience\\n **/\\ninterface IXP is IERC20 {\\n    /**\\n     * @notice set the xp amount to earn for a bytes32 key action\\n     * @param xpKey The key associated to the xp to earn\\n     * @param xpToReceive the xp to earn for the key action\\n     */\\n    function setXpAmount(bytes32 xpKey, uint256 xpToReceive) external;\\n\\n    /**\\n     * @notice get the xp amount to earn for a bytes32 key action\\n     * @param xpKey The action key as bytes32\\n     * @return success There is an action matching the key\\n     * @return _amount the xp to earn for the key action\\n     */\\n    function getXpAmount(bytes32 xpKey) external returns (bool, uint256);\\n\\n    /**\\n     * @notice mint the xp amount to earn for a bytes32 key action\\n     * @param xpKey The action key as bytes32\\n     * @param to the addres receiving the XP\\n     */\\n    function mint(bytes32 xpKey, address to) external;\\n}\\n\",\"keccak256\":\"0xb8822f9fc46596a40318b26aaef973805c016c364ddfaadc338e36fa1d93dad9\",\"license\":\"MIT\"},\"contracts/protocol/configuration/ProviderContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {Ownable} from \\\"../../imports/openzeppelin/contracts/Ownable.sol\\\";\\nimport {IERC20} from \\\"../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {IAddressProvider} from \\\"../../interfaces/IAddressProvider.sol\\\";\\nimport {IProtocolConfigurator} from \\\"../../interfaces/IProtocolConfigurator.sol\\\";\\n\\nimport {IProviderContract} from \\\"../../interfaces/IProviderContract.sol\\\";\\nimport {IACLManager} from \\\"../../interfaces/IACLManager.sol\\\";\\nimport {IBSWAN} from \\\"../../interfaces/IBSWAN.sol\\\";\\nimport {IXP} from \\\"../../interfaces/IXP.sol\\\";\\nimport {IUser} from \\\"../../interfaces/IUser.sol\\\";\\nimport {InputTypes} from \\\"../libraries/types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {RegistryKeys} from \\\"../libraries/helpers/RegistryKeys.sol\\\";\\nimport {RoleKeys} from \\\"../libraries/helpers/RoleKeys.sol\\\";\\n\\n/**\\n * @title Parent class to all contracts used to check that a contract is registerable\\n * @notice ProviderContract is Ownable so the deployer can re-register it against new registries\\n * @dev The Provider uses this to talk to all contracts that inherit from this contract.\\n */\\n\\ncontract ProviderContract is Ownable, IProviderContract {\\n    using GPv2SafeERC20 for IERC20;\\n    IAddressProvider public ADDRESS_PROVIDER;\\n\\n    uint256 public MAX_UINT = 2 ** 256 - 1;\\n\\n    /// @notice all contracts that inherit from ProviderContract are automatically Ownable()\\n    /// @dev internal constructor makes ProviderContract abstract\\n    constructor(IAddressProvider provider) Ownable() {\\n        require(\\n            address(provider) != address(0x00),\\n            Errors.ZERO_ADDRESS_IS_INVALID\\n        );\\n\\n        ADDRESS_PROVIDER = IAddressProvider(provider);\\n    }\\n\\n    /// @notice only allow  contracts to be called by the respective agent.\\n    ///     i.e. GigStorage methods can only be invoked by GigFactory.\\n    modifier onlyProvider(bytes32 _name) {\\n        require(\\n            _msgSender() == fetchContract(_name),\\n            Errors.ONLY_PROVIDER_ALLOWED\\n        );\\n        _;\\n    }\\n\\n    /// @notice only allow function contracts to be called by the respective role.\\n    ///     i.e. GigStorage methods can only be invoked by BUYER_ROLE.\\n    modifier onlyProtocolRole(bytes32 _role) {\\n        require(\\n            hasProtocolRole(_role, _msgSender()),\\n            \\\"Requires msg.sender has role\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyStillBuyer() {\\n        require(isStillBuyer(_msgSender()), Errors.ONLY_BUYER);\\n        _;\\n    }\\n\\n    modifier onlyStillSeller() {\\n        require(isStillSeller(_msgSender()), Errors.ONLY_SELLER);\\n        _;\\n    }\\n\\n    function hasProtocolRole(\\n        bytes32 _role,\\n        address account\\n    ) public view returns (bool) {\\n        bool hasRole = IACLManager(fetchContract(RegistryKeys.ACL_MANAGER))\\n            .hasRole(_role, account);\\n        return hasRole;\\n    }\\n\\n    // function hasProtocolRoles(\\n    //     bytes32[] memory _roles,\\n    //     address account\\n    // ) public view returns (bool) {\\n    //     for (uint256 i; i < _roles.length; i++) {\\n    //         bool hasRole = IACLManager(fetchContract(RegistryKeys.ACL_MANAGER))\\n    //             .hasRole(_roles[i], account);\\n    //         if (hasRole) {\\n    //             return true;\\n    //         }\\n    //     }\\n    //     return false;\\n    // }\\n\\n    function isStillBuyer(address account) public view returns (bool) {\\n        return\\n            hasProtocolRole(RoleKeys.BUYER_ROLE, account) &&\\n            IUser(fetchContract(RegistryKeys.USER))\\n                .getUserByAddress(account)\\n                .buyerUntil >\\n            block.timestamp;\\n    }\\n\\n    function isStillSeller(address account) public view returns (bool) {\\n        return\\n            hasProtocolRole(RoleKeys.SELLER_ROLE, account) &&\\n            IUser(fetchContract(RegistryKeys.USER))\\n                .getUserByAddress(account)\\n                .sellerUntil >\\n            block.timestamp;\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function setProvider(IAddressProvider _providerAddress) public override {\\n        require(\\n            address(_providerAddress) == address(0x00) ||\\n                address(ADDRESS_PROVIDER) == msg.sender ||\\n                this.owner() == msg.sender,\\n            \\\"Can only be called if addressesProvider is empty, msg.sender or owner\\\"\\n        );\\n        ADDRESS_PROVIDER = _providerAddress;\\n    }\\n\\n    function fetchContract(\\n        bytes32 _name\\n    ) public view override returns (address) {\\n        return address(IAddressProvider(ADDRESS_PROVIDER).fetchContract(_name));\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function kill() external override {\\n        assert(msg.sender == address(ADDRESS_PROVIDER));\\n        selfdestruct(payable(address(ADDRESS_PROVIDER)));\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        override\\n        returns (IAddressProvider)\\n    {\\n        return ADDRESS_PROVIDER;\\n    }\\n\\n    function grantProtocolRole(bytes32 _role, address account) internal {\\n        IACLManager(fetchContract(RegistryKeys.ACL_MANAGER)).grantRole(\\n            _role,\\n            account\\n        );\\n    }\\n\\n    function approve(\\n        address erc20\\n    ) public onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        address dat = fetchContract(RegistryKeys.DAT);\\n        IERC20(erc20).approve(dat, MAX_UINT);\\n    }\\n\\n    function _pay(\\n        InputTypes.ProcessPaymentInput memory params,\\n        IBSWAN dat\\n    ) internal {\\n        dat.pay(params.inviter0, params.inviter0Rewards);\\n        dat.pay(params.inviter1, params.inviter1Rewards);\\n        dat.pay(address(0), params.remainingRewards);\\n    }\\n\\n    function _processPayment(\\n        InputTypes.ProcessPaymentInput memory params\\n    ) internal {\\n        IBSWAN dat = IBSWAN(fetchContract(RegistryKeys.DAT));\\n        uint256 total = params.inviter0Rewards +\\n            params.inviter1Rewards +\\n            params.remainingRewards;\\n        IERC20(dat.currency()).safeTransferFrom(\\n            params.caller,\\n            address(this),\\n            total\\n        );\\n        _pay(params, dat);\\n    }\\n\\n    function _giveXP(bytes32 _key, address _to) internal {\\n        IXP(fetchContract(RegistryKeys.XP)).mint(_key, _to);\\n    }\\n\\n    function getProtocolRetributionParams()\\n        internal\\n        view\\n        returns (DataTypes.RetributionParams memory)\\n    {\\n        return\\n            IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            ).getRetributionParams();\\n    }\\n\\n    function getProtocolDelayTimestamp()\\n        internal\\n        view\\n        returns (DataTypes.DelayTimestamp memory)\\n    {\\n        return\\n            IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            ).getDelayTimestamp();\\n    }\\n\\n    function isGigOwner(\\n        uint256 userId,\\n        uint256 gigId,\\n        IUser UserContract\\n    ) public view returns (bool) {\\n        return UserContract.isGigOwner(userId, gigId);\\n    }\\n}\\n\",\"keccak256\":\"0xe89f0da0eaa29f3c35cccd741f92e6ba07819973ff63dd30d3d3ecaa8da787a0\",\"license\":\"MIT\"},\"contracts/protocol/dispute/Dispute.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../libraries/types/InputTypes.sol\\\";\\nimport {IERC20} from \\\"../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {DisputeLogic} from \\\"../libraries/logics/DisputeLogic.sol\\\";\\nimport {InviterLogic} from \\\"../libraries/logics/InviterLogic.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\nimport {RegistryKeys} from \\\"../libraries/helpers/RegistryKeys.sol\\\";\\nimport {XPKeys} from \\\"../libraries/helpers/XPKeys.sol\\\";\\nimport {DisputeStorage} from \\\"./DisputeStorage.sol\\\";\\nimport {ProviderContract} from \\\"../configuration/ProviderContract.sol\\\";\\nimport {IProtocolConfigurator} from \\\"../../interfaces/IProtocolConfigurator.sol\\\";\\nimport {IAddressProvider} from \\\"../../interfaces/IAddressProvider.sol\\\";\\nimport {IUser} from \\\"../../interfaces/IUser.sol\\\";\\nimport {IJury} from \\\"../../interfaces/IJury.sol\\\";\\nimport {IBSWAN} from \\\"../../interfaces/IBSWAN.sol\\\";\\nimport {IDispute} from \\\"../../interfaces/IDispute.sol\\\";\\nimport {IGig} from \\\"../../interfaces/IGig.sol\\\";\\nimport {IOrder} from \\\"../../interfaces/IOrder.sol\\\";\\nimport {JuryLogic} from \\\"../libraries/logics/JuryLogic.sol\\\";\\n\\n/**\\n * @title\\tDispute contract\\n * @author\\tBlockswan\\n * @notice  Dispute data within an Blockswan protocol's marketplace\\n * - Users can:\\n *   # raise a dispute via the Dispute contract\\n *   # send evidence to a dispute\\n *   # commit a vote on a dispute\\n *   # vote on a dispute\\n *   # appeal to a dispute resolution\\n *  # execute a ruling on a dispute\\n * @dev To be covered by a proxy contract, owned by the addressProvider of the specific marketplace\\n * @dev All admin functions are callable by the protocolConfigurator contract defined also in the\\n *   addressProvider\\n **/\\n\\ncontract Dispute is DisputeStorage, ProviderContract {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using DisputeLogic for DataTypes.Dispute;\\n    using GPv2SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Constructor.\\n     * @param provider The address of the AddressProvider\\n     */\\n    constructor(IAddressProvider provider) ProviderContract(provider) {}\\n\\n    function getDisputeCount() public view virtual returns (uint256) {\\n        uint256 count = _disputeIds.length();\\n        return count;\\n    }\\n\\n    function getDisputeById(\\n        uint256 disputeId\\n    ) public view virtual returns (OutputTypes.DisputeOutput memory) {\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        return dispute.format(disputeId);\\n    }\\n\\n    function getDisputeList()\\n        external\\n        view\\n        virtual\\n        returns (OutputTypes.DisputeOutput[] memory)\\n    {\\n        uint256 len = getDisputeCount();\\n        OutputTypes.DisputeOutput[]\\n            memory disputeList = new OutputTypes.DisputeOutput[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            disputeList[i] = getDisputeById(i);\\n        }\\n        return disputeList;\\n    }\\n\\n    function createDispute(\\n        uint256 orderId,\\n        uint256 procecutorId,\\n        uint256 defendantId,\\n        address caller,\\n        DataTypes.Evidence memory evidence\\n    ) external onlyProvider(RegistryKeys.ORDER) returns (uint256) {\\n        uint256 newId = getDisputeCount();\\n\\n        {\\n            IProtocolConfigurator protocolConfigurator = IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            );\\n            DataTypes.DisputeParams memory disputeParams = protocolConfigurator\\n                .getDisputeParams();\\n\\n            _createDispute(\\n                newId,\\n                orderId,\\n                procecutorId,\\n                defendantId,\\n                caller,\\n                protocolConfigurator,\\n                disputeParams\\n            );\\n            sendEvidence(newId, caller, evidence);\\n        }\\n        return newId;\\n    }\\n\\n    function _createDispute(\\n        uint256 newId,\\n        uint256 orderId,\\n        uint256 procecutorId,\\n        uint256 defendantId,\\n        address caller,\\n        IProtocolConfigurator protocolConfigurator,\\n        DataTypes.DisputeParams memory disputeParams\\n    ) internal {\\n        bool isCreated = DisputeLogic.executeCreateDispute(\\n            _disputeIds,\\n            _disputes,\\n            InputTypes.ExecuteCreateDisputeInput({\\n                newId: newId,\\n                orderId: orderId,\\n                procecutorId: procecutorId,\\n                defendantId: defendantId,\\n                maxVotes: disputeParams.maxVotes,\\n                totalFeesForJurors: _payDisputeContract(\\n                    disputeParams.feePerJuror * disputeParams.maxVotes,\\n                    caller\\n                ),\\n                evidenceUntil: getDelayTimestamp(protocolConfigurator).evidence,\\n                drawnJurors: drawJurors(disputeParams.maxVotes),\\n                tokensAtStakePerJuror: JuryLogic.calcTokenToFreeze(\\n                    disputeParams.minStake,\\n                    disputeParams.alpha\\n                )\\n            })\\n        );\\n        require(isCreated, Errors.DISPUTE_NOT_CREATED);\\n    }\\n\\n    function getDelayTimestamp(\\n        IProtocolConfigurator protocolConfigurator\\n    ) public view returns (DataTypes.DelayTimestamp memory delayTimestamp) {\\n        delayTimestamp = protocolConfigurator.getDelayTimestamp();\\n        return delayTimestamp;\\n    }\\n\\n    function sendEvidence(\\n        uint256 disputeId,\\n        address caller,\\n        DataTypes.Evidence memory evidence\\n    ) public {\\n        IUser UserContract = IUser(fetchContract(RegistryKeys.USER));\\n        require(\\n            isCallerUser(caller, evidence.userId, UserContract),\\n            Errors.CALLER_NOT_USER\\n        );\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        bool isSent = DisputeLogic.executeSendEvidence(dispute, evidence);\\n        require(isSent, Errors.EVIDENCE_NOT_SUBMITTED);\\n    }\\n\\n    function passPhase(uint256 disputeId) public {\\n        DataTypes.DelayTimestamp memory delayTimestamps = IProtocolConfigurator(\\n            fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n        ).getDelayTimestamp();\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        DataTypes.DisputeState state = dispute.state;\\n        require(\\n            state != DataTypes.DisputeState.EXECUTION,\\n            Errors.DS_IN_EXECUTION_PERIOD\\n        );\\n        if (state == DataTypes.DisputeState.EVIDENCE) {\\n            dispute.goCommitState(delayTimestamps);\\n        } else if (state == DataTypes.DisputeState.COMMIT) {\\n            dispute.goVoteState(delayTimestamps.vote);\\n        } else if (state == DataTypes.DisputeState.VOTE) {\\n            dispute.goAppealState(delayTimestamps.appeal);\\n        } else if (state == DataTypes.DisputeState.APPEAL) {\\n            dispute.goExecutionState();\\n        }\\n    }\\n\\n    function commitVote(\\n        uint256 disputeId,\\n        uint256 choice,\\n        string memory salt\\n    ) public {\\n        address caller = _msgSender();\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        dispute.executeCommitVote(choice, salt, caller);\\n    }\\n\\n    function revealVote(\\n        uint256 disputeId,\\n        uint256 choice,\\n        string memory salt,\\n        string memory justification\\n    ) public {\\n        address caller = _msgSender();\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        dispute.executeRevealVote(choice, salt, justification, caller);\\n    }\\n\\n    function drawJurors(\\n        uint256 numberOfJurors\\n    ) internal returns (address[] memory jurorsAddresses) {\\n        IJury JuryContract = IJury(fetchContract(RegistryKeys.JURY));\\n        jurorsAddresses = JuryContract.drawJurors(numberOfJurors);\\n        JuryContract.freezeTokens(jurorsAddresses);\\n    }\\n\\n    function appeal(uint256 disputeId) external {\\n        address caller = _msgSender();\\n        IUser UserContract = IUser(fetchContract(RegistryKeys.USER));\\n        uint256 callerId = UserContract.getIdByAddress(caller);\\n        DataTypes.DisputeParams memory disputeParams = IProtocolConfigurator(\\n            fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n        ).getDisputeParams();\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        uint256 appealFeeInUSDC = dispute.calcAppealFees(\\n            disputeParams.feePerJuror\\n        );\\n        uint256 appealFeeRewardsinBSWAN = _payDisputeContract(\\n            appealFeeInUSDC,\\n            _msgSender()\\n        );\\n        dispute.executeAppeal(appealFeeRewardsinBSWAN, callerId);\\n    }\\n\\n    function claimAsJudge(uint256 disputeId, uint256 roundId) external {\\n        address caller = _msgSender();\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        OutputTypes.ExecuteClaimAsJudgeOutput memory claimParams = dispute\\n            .executeClaimAsJudge(caller, roundId);\\n        if (claimParams.isVoteCorrect) {\\n            _handleCorrectVoter(\\n                caller,\\n                claimParams.tokensAtStakePerJuror,\\n                claimParams.amountFromDisputeFees,\\n                claimParams.amountFromJurorsTokensAtStake\\n            );\\n        } else if (claimParams.isVoteInRange) {\\n            _handleInRangeVoter(caller, claimParams.tokensAtStakePerJuror);\\n        } else {\\n            require(false, Errors.VOTE_INCORRECT);\\n        }\\n    }\\n\\n    function claimAppealFeeRewards(uint256 disputeId, uint256 roundId) public {\\n        address caller = _msgSender();\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        uint256 callerId = IUser(fetchContract(RegistryKeys.USER))\\n            .getIdByAddress(caller);\\n\\n        uint256 appealFeeAmount = dispute.executeClaimAppealFeeRewards(\\n            callerId,\\n            roundId\\n        );\\n        _transfer(\\n            appealFeeAmount,\\n            caller,\\n            address(IBSWAN(fetchContract(RegistryKeys.DAT)))\\n        );\\n    }\\n\\n    function claimRuling(uint256 disputeId) external {\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        (\\n            uint256 ruling,\\n            uint256 orderId,\\n            uint256 procecutorId,\\n            uint256 defendantId\\n        ) = dispute.executeClaimRuling();\\n        IOrder OrderContract = IOrder(fetchContract(RegistryKeys.ORDER));\\n        OrderContract.rule(ruling, orderId, procecutorId, defendantId);\\n    }\\n\\n    function nextRound(\\n        uint256 disputeId,\\n        DataTypes.Evidence memory evidence\\n    ) external {\\n        address caller = _msgSender();\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        DataTypes.DelayTimestamp memory delays = IProtocolConfigurator(\\n            fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n        ).getDelayTimestamp();\\n        DataTypes.DisputeParams memory disputeParams = IProtocolConfigurator(\\n            fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n        ).getDisputeParams();\\n        uint256 roundNumber = dispute.rounds.length + 1;\\n        dispute.executeNextRound(\\n            InputTypes.ExecuteNextRoundInput({\\n                evidenceUntil: delays.evidence,\\n                maxVotes: disputeParams.maxVotes * roundNumber,\\n                totalFeesForJurors: _payDisputeContract(\\n                    disputeParams.feePerJuror *\\n                        disputeParams.maxVotes *\\n                        roundNumber,\\n                    caller\\n                ),\\n                tokensAtStakePerJuror: JuryLogic.calcTokenToFreeze(\\n                    disputeParams.minStake,\\n                    disputeParams.alpha\\n                ),\\n                drawnJurors: drawJurors(disputeParams.maxVotes * roundNumber)\\n            })\\n        );\\n        sendEvidence(disputeId, caller, evidence);\\n    }\\n\\n    function _handleCorrectVoter(\\n        address voter,\\n        uint256 tokensAtStakePerJuror,\\n        uint256 amountFromDisputeFees,\\n        uint256 amountFromJurorsTokensAtStake\\n    ) internal {\\n        IJury JuryContract = IJury(fetchContract(RegistryKeys.JURY));\\n        IBSWAN BSWANContract = IBSWAN(fetchContract(RegistryKeys.DAT));\\n        JuryContract.unfreezeTokens(tokensAtStakePerJuror, voter);\\n        _transfer(\\n            amountFromDisputeFees,\\n            address(JuryContract),\\n            address(BSWANContract)\\n        );\\n        JuryContract.rewardJuror(\\n            amountFromDisputeFees + amountFromJurorsTokensAtStake,\\n            voter\\n        );\\n    }\\n\\n    function _handleInRangeVoter(\\n        address voter,\\n        uint256 tokensAtStakePerJuror\\n    ) internal {\\n        IJury JuryContract = IJury(fetchContract(RegistryKeys.JURY));\\n        JuryContract.unfreezeTokens(tokensAtStakePerJuror, voter);\\n    }\\n\\n    function _safeTransferFrom(\\n        uint256 value,\\n        address from,\\n        address to,\\n        address currency\\n    ) internal {\\n        IERC20(currency).safeTransferFrom(from, to, value);\\n    }\\n\\n    function _transfer(uint256 amount, address _to, address currency) internal {\\n        IERC20(currency).safeTransfer(_to, amount);\\n    }\\n\\n    function _payDisputeContract(\\n        uint256 amount,\\n        address payer\\n    ) internal returns (uint256 amountBought) {\\n        IBSWAN BSWANContract = IBSWAN(fetchContract(RegistryKeys.DAT));\\n        _safeTransferFrom(\\n            amount,\\n            payer,\\n            address(this),\\n            address(BSWANContract.currency())\\n        );\\n        amountBought = BSWANContract.estimateBuyValue(amount);\\n        BSWANContract.buy(address(this), amount, amountBought);\\n    }\\n\\n    function isCallerUser(\\n        address caller,\\n        uint256 userId,\\n        IUser UserContract\\n    ) public view returns (bool isAddressMatchingId) {\\n        isAddressMatchingId = UserContract.getIdByAddress(caller) == userId;\\n    }\\n\\n    function getOrderPrice(\\n        uint256 orderId\\n    ) public view returns (uint256 price) {\\n        price = IOrder(fetchContract(RegistryKeys.ORDER))\\n            .getOrderById(orderId)\\n            .invoice\\n            .price;\\n    }\\n}\\n\",\"keccak256\":\"0x4aee079f1986edebfd921df9d55bb86a87730f6feb4a092e0063a2f24620d95c\",\"license\":\"MIT\"},\"contracts/protocol/dispute/DisputeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {RegistryKeys} from \\\"../libraries/helpers/RegistryKeys.sol\\\";\\n\\n/**\\n * @title DisputeStorage\\n * @author Blockswan\\n * @notice Contract used as storage of the dispute contract.\\n * @dev It defines the storage layout of the dispute contract.\\n */\\ncontract DisputeStorage {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    // set of dispute Ids\\n    EnumerableSet.UintSet internal _disputeIds;\\n    // Map of the dispute id to the dispute data (disputeId => Dispute)\\n    mapping(uint256 => DataTypes.Dispute) internal _disputes;\\n}\\n\",\"keccak256\":\"0xbc2e32331851b1066ffd01d7ff8537c0c4ebc84d4d32e83974bbb47d46800774\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/Choices.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Choices library\\n * @author Blockswan\\n * @notice Defines the choices available for a juror upon a dispute in the Blockswan protocol.\\n * The uint256 values chosen represents the % of the value in the order contract that the procecutor will receive.\\n * (eg. 0 = 0% of the value in the order contract)\\n * (eg. 1000000000000000000 = 100% of the value in the order contract)\\n */\\nlibrary Choices {\\n    uint256 public constant PERCENTAGE_FACTOR = 1e4;\\n    // ---- CHOICES ---- (in percentage from 0 to 100% with 10% incrementation - 100% = 1e4)\\n    uint256 public constant ZERO_PERCENT = 0;\\n    uint256 public constant TEN_PERCENT = 1e3;\\n    uint256 public constant TWENTY_PERCENT = 2e3;\\n    uint256 public constant THIRTY_PERCENT = 3e3;\\n    uint256 public constant FORTY_PERCENT = 4e3;\\n    uint256 public constant FIFTY_PERCENT = 5e3;\\n    uint256 public constant SIXTY_PERCENT = 6e3;\\n    uint256 public constant SEVENTY_PERCENT = 7e3;\\n    uint256 public constant EIGHTY_PERCENT = 8e3;\\n    uint256 public constant NINETY_PERCENT = 9e3;\\n    uint256 public constant ONE_HUNDRED_PERCENT = 1e4;\\n}\\n\",\"keccak256\":\"0xafff24df4cde70620cb142f8f46ccab692dd31c0761c949f3f0d9224411bae82\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors  library\\n * @author Blockswan\\n * @notice Defines the error messages emitted by the different contracts of the Blockswan protocol\\n */\\nlibrary Errors {\\n    string public constant INVALID_ADDRESS_PROVIDER_ID = \\\"1\\\"; // The addresses provider is not valid\\n    string public constant ADDRESS_PROVIDER_ALREADY_ADDED = \\\"2\\\"; // This addresses provider already exists\\n    string public constant ADDRESS_PROVIDER_NOT_REGISTERED = \\\"3\\\"; // 'This addresses provider is not registered'\\n    string public constant CONTRACT_NAME_ALREADY_USED = \\\"4\\\"; // 'Requires that given _name does not already have non-zero registered contract address'\\n    string public constant ZERO_ADDRESS_IS_INVALID = \\\"5\\\"; // the address provided is 0x00\\n    string public constant INDEX_OUT_OF_RANGE = \\\"6\\\"; // the index provided is out of range\\n    string public constant ADDRESS_ALREADY_USED = \\\"7\\\"; // 'The address provided has already been unsed to initialise an account'\\n    string public constant INVALID_USER_ID = \\\"8\\\"; // 'The userId is incorrect'\\n    string public constant RESTRICTED_TO_BUYER = \\\"9\\\"; // this function can't  be called by buyers\\n    string public constant INVALID_INVITER_ID = \\\"10\\\"; // The inviter ID provided is incorrect\\n    string public constant FAILED_BECOMING_BUYER = \\\"11\\\"; // The execution to becomeBuyer failed\\n    string public constant RESTRICTED_TO_SELLER = \\\"12\\\"; // this function can't  be called by sellers\\n    string public constant FAILED_BECOMING_SELLER = \\\"13\\\"; // The execution to becomeSeller failed\\n    string public constant NO_MATCHING_XP_KEY = \\\"14\\\"; // There is no xp value to give for this byte32\\n    string public constant GIG_ID_ALREADY_EXISING = \\\"15\\\"; // There is already an id for this gig.\\n    string public constant ONLY_SELLER = \\\"16\\\"; // Only account with the seller role can call the functions\\n    string public constant ONLY_BUYER = \\\"17\\\"; // Only buyers can call those functions.\\n    string public constant NOT_GIG_OWNER = \\\"18\\\"; // The id provided does not match with the gig owner id\\n    string public constant CALLER_NOT_SELLER_ID = \\\"19\\\"; // The seller id provided is not matching with the account address calling the function\\n    string public constant CALLER_NOT_BUYER_ID = \\\"20\\\"; // The buyer id provided is not matching with the account address calling the function\\n    string public constant NOT_ORDER_SELLER = \\\"21\\\"; // The id provided is not the order seller\\n    string public constant NOT_ORDER_BUYER = \\\"22\\\"; // The id provided is not the order buyer\\n    string public constant INVALID_ORDER_STATE = \\\"23\\\"; // The function can't be called under the current order state\\n    string public constant SELF_REFUND_DELAY_NOT_OVER = \\\"24\\\"; // The self refund delay is not over\\n    string public constant NOT_ORDER_ACTOR = \\\"25\\\"; // The account address calling the function is not matching with the buyerId nor sellerId.\\n    string public constant DISPUTE_NOT_CREATED = \\\"26\\\"; // The dispute has not been created yet\\n    string public constant JURY_STAKE_NOT_ENOUGH = \\\"27\\\"; // The jury stake is not enough\\n    string public constant FAILED_TO_STAKE_JURY = \\\"28\\\"; // The jury stake failed\\n    string public constant FAILED_TO_WITHDRAW_JURY = \\\"29\\\"; // The jury withdraw failed\\n    string public constant ROUND_EVIDENCE_ALREADY_SUBMITTED = \\\"30\\\"; // The evidence has already been submitted\\n    string public constant EVIDENCE_NOT_SUBMITTED = \\\"31\\\"; // The evidence has not been submitted\\n    string public constant DS_EVIDENCE_PERIOD_OVER = \\\"32\\\"; // The evidence period is over\\n    // string public constant DS_VOTING_PERIOD_OVER = \\\"33\\\"; // The voting period is over\\n    // string public constant DS_VOTING_PERIOD_NOT_OVER = \\\"34\\\"; // The voting period is not over\\n    // string public constant DS_VOTING_PERIOD_NOT_STARTED = \\\"35\\\"; // The voting period has not started yet\\n    string public constant ONLY_PROVIDER_ALLOWED = \\\"36\\\"; // Only the provider can call this function\\n    string public constant DS_EVIDENCE_SENDER_NOT_PARTY = \\\"37\\\"; // The sender is not a party of the dispute\\n    string public constant CALLER_NOT_USER = \\\"38\\\"; // The caller is not the user Id\\n    string public constant DS_EVIDENCE_ROLE_NOT_VALID = \\\"39\\\"; // The role is not valid\\n    string public constant RD_ROUND_DOES_NOT_EXIST = \\\"40\\\"; // The round does not exist\\n    string public constant DS_IN_EXECUTION_PERIOD = \\\"46\\\"; //     The dispute is in execution state\\n    string public constant VOTE_REVEAL_INCORRECT = \\\"47\\\"; //     The vote reveal is incorrect\\n    string public constant ROUND_VOTE_ALREADY_COMMITED = \\\"48\\\"; //     The vote has already been commited\\n    string public constant ROUND_VOTE_NOT_COMMITED = \\\"49\\\"; //     The vote has not been commited\\n    string public constant ROUND_VOTE_ALREADY_REVEALED = \\\"50\\\"; //     The vote has already been revealed\\n    string public constant RD_ACCOUNT_NOT_DRAWN_JUROR = \\\"51\\\"; //     The account is not a drawn juror\\n    string public constant DS_COMMIT_STATE_REQUIRED = \\\"52\\\"; //    The dispute is not in commit state\\n    string public constant DS_TIME_NOT_PASSED = \\\"53\\\"; //   The time has not passed\\n    string public constant DS_INVALID_STATE = \\\"54\\\"; //   The state is invalid\\n    string public constant VOTE_INVALID_CHOICE = \\\"55\\\"; //  The vote choice is invalid\\n    string public constant DS_NO_COMMITMENTS_MADE_FOR_ROUND = \\\"56\\\"; //  No commitments were made for the round\\n    string public constant DS_NO_VOTES_MADE_FOR_ROUND = \\\"57\\\"; //  No votes were made for the round\\n    string public constant RD_VOTE_NOT_FOUND = \\\"58\\\"; //  The vote was not found\\n    string public constant ROUND_NOT_CLOSED = \\\"59\\\"; //  The round is not closed\\n    string public constant VOTE_INCORRECT = \\\"60\\\"; //  The vote is incorrect\\n    string public constant ROUND_NOT_APPEALED = \\\"61\\\"; //  The round is not appealed\\n    string public constant ROUND_ID_INVALID = \\\"62\\\"; //  The round id is invalid\\n    string public constant CLAIM_NOT_ALLOWED = \\\"63\\\"; //  The claim is not allowed\\n    string public constant ROUND_IS_APPEALED = \\\"64\\\"; //  The round is appealed\\n    string public constant DS_DISPUTE_ALREADY_RULED = \\\"65\\\"; //  The dispute is already ruled\\n}\\n\",\"keccak256\":\"0x2fdca5575c0847027beb5918556b66679442a8bf7ac8119f9c06de7060ab4bb1\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/helpers/RegistryKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary RegistryKeys {\\n    /// REGISTRY\\n    //  ----  CONTRACT ------\\n    bytes32 public constant GIG = \\\"GIG\\\";\\n    bytes32 public constant ORDER = \\\"ORDER\\\";\\n    bytes32 public constant USER = \\\"USER\\\";\\n    bytes32 public constant DISPUTE = \\\"DISPUTE\\\";\\n    bytes32 public constant JURY = \\\"JURY\\\";\\n    bytes32 public constant PROTOCOL_CONFIGURATOR = \\\"PROTOCOL_CONFIGURATOR\\\";\\n    bytes32 public constant DAT = \\\"DAT\\\";\\n    bytes32 public constant ACL_MANAGER = \\\"ACL_MANAGER\\\";\\n    bytes32 public constant DATA_PROVIDER = \\\"DATA_PROVIDER\\\";\\n    bytes32 public constant XP = \\\"XP\\\";\\n    // ---- NON CONTRACT ------\\n    bytes32 public constant ACL_ADMIN = \\\"ACL_ADMIN\\\";\\n\\n    bytes32 public constant TREE_KEY = \\\"Blockswan/SortitionSumTrees\\\";\\n}\\n\",\"keccak256\":\"0x22aa7c202e3cd58ddc3ba544daf7de1dc01306f9b64c0e689f485100e235267e\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/RoleKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary RoleKeys {\\n    // ---- ADMIN ROLES  ------\\n    bytes32 public constant PROTOCOL_ADMIN_ROLE = \\\"PROTOCOL_ADMIN\\\";\\n    bytes32 public constant BUYER_ADMIN_ROLE = \\\"BUYER_ADMIN\\\";\\n    bytes32 public constant SELLER_ADMIN_ROLE = \\\"SELLER_ADMIN\\\";\\n    // ----  ROLES  ------\\n    bytes32 public constant BUYER_ROLE = \\\"BUYER\\\";\\n    bytes32 public constant SELLER_ROLE = \\\"SELLER\\\";\\n    bytes32 public constant JUDGE_ROLE = \\\"JUDGE\\\";\\n    bytes32 public constant BLACKLIST_ROLE = \\\"BLACKLIST\\\";\\n    bytes32 public constant WHITELIST_ROLE = \\\"WHITELIST\\\";\\n    bytes32 public constant XP_GIVER_ROLE = \\\"XP_GIVER\\\";\\n}\\n\",\"keccak256\":\"0x96ba28ef5c4c14bc1ef86a62e3a2bb1ea859abda8a57d053e2d25a335c58aeae\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/XPKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary XPKeys {\\n    bytes32 public constant BECOME_BUYER = \\\"BECOME_BUYER\\\";\\n    bytes32 public constant BECOME_SELLER = \\\"BECOME_SELLER\\\";\\n    bytes32 public constant CREATE_GIG = \\\"CREATE_GIG\\\";\\n    bytes32 public constant CREATE_ORDER = \\\"CREATE_ORDER\\\";\\n    bytes32 public constant PAY_ORDER = \\\"PAY_ORDER\\\";\\n}\\n\",\"keccak256\":\"0xb289d8aee389335698fe40c35b798c8537f15defc239fc539c9a82907065e07e\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/DisputeDataLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title DisputeData logic library\\n * @author Blockswan\\n * @notice Implements the logic for dispute data specific functions\\n */\\n\\nlibrary DisputeDataLogic {\\n    using Counters for Counters.Counter;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function setCreated(\\n        DataTypes.Dispute storage dispute\\n    ) external returns (bool) {\\n        dispute.createdAt = block.timestamp;\\n        return true;\\n    }\\n\\n    function setOrderId(\\n        DataTypes.Dispute storage dispute,\\n        uint256 orderId\\n    ) external returns (bool) {\\n        dispute.orderId = orderId;\\n        return true;\\n    }\\n\\n    function setRuling(\\n        DataTypes.Dispute storage dispute,\\n        uint256 ruling\\n    ) external returns (bool) {\\n        dispute.ruling = ruling;\\n        dispute.ruledAt = block.timestamp;\\n        return true;\\n    }\\n\\n    function setState(\\n        DataTypes.Dispute storage dispute,\\n        DataTypes.DisputeState state\\n    ) external returns (bool) {\\n        dispute.state = state;\\n        return true;\\n    }\\n\\n    function addTimestamp(\\n        DataTypes.Dispute storage dispute,\\n        uint256 delay\\n    ) external returns (bool) {\\n        dispute.timestamps.push(block.timestamp + delay);\\n        return true;\\n    }\\n\\n    function deleteTimestamps(\\n        DataTypes.Dispute storage dispute\\n    ) external returns (bool) {\\n        delete dispute.timestamps;\\n        return true;\\n    }\\n\\n    function isState(\\n        DataTypes.Dispute storage dispute,\\n        DataTypes.DisputeState state\\n    ) external view returns (bool) {\\n        return (dispute.state == state);\\n    }\\n\\n    function getLatestRound(\\n        DataTypes.Dispute storage dispute\\n    ) external view returns (DataTypes.Round storage) {\\n        DataTypes.Round[] storage rounds = dispute.rounds;\\n        return rounds[rounds.length - 1];\\n    }\\n\\n    function getRound(\\n        DataTypes.Dispute storage dispute,\\n        uint256 roundId\\n    ) external view returns (DataTypes.Round storage) {\\n        return dispute.rounds[roundId];\\n    }\\n\\n    function isEvidencePeriod(\\n        DataTypes.Dispute storage dispute\\n    ) external view returns (bool) {\\n        return (block.timestamp < dispute.timestamps[0]);\\n    }\\n\\n    function isCommitPeriod(\\n        DataTypes.Dispute storage dispute\\n    ) external view returns (bool) {\\n        return (block.timestamp >= dispute.timestamps[0] &&\\n            block.timestamp < dispute.timestamps[1]);\\n    }\\n\\n    function isVotePeriod(\\n        DataTypes.Dispute storage dispute\\n    ) external view returns (bool) {\\n        return (block.timestamp >= dispute.timestamps[1] &&\\n            block.timestamp < dispute.timestamps[2]);\\n    }\\n\\n    function isAppealPeriod(\\n        DataTypes.Dispute storage dispute\\n    ) external view returns (bool) {\\n        return (block.timestamp >= dispute.timestamps[2] &&\\n            block.timestamp < dispute.timestamps[3]);\\n    }\\n}\\n\",\"keccak256\":\"0x111f4000f4efca6ea084b1abf39008cd0bb104695615043e2bc683be06a56104\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/DisputeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {PercentageMath} from \\\"../../../imports/aave/contracts/PercentageMath.sol\\\";\\nimport {RoundLogic} from \\\"./RoundLogic.sol\\\";\\nimport {DisputeDataLogic} from \\\"./DisputeDataLogic.sol\\\";\\nimport {SortitionSumTreeFactory} from \\\"../../../imports/kleros/contracts/SortitionSumTreeFactory.sol\\\";\\nimport {Choices} from \\\"../helpers/Choices.sol\\\";\\nimport {RoundDataLogic} from \\\"./RoundDataLogic.sol\\\";\\n\\n/**\\n * @title Dispute logic library\\n * @author Blockswan\\n * @notice Implements the logic for dispute specific functions\\n */\\nlibrary DisputeLogic {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using DisputeDataLogic for DataTypes.Dispute;\\n    using RoundDataLogic for DataTypes.Round;\\n    using RoundLogic for *;\\n    using Counters for Counters.Counter;\\n    using PercentageMath for uint256;\\n    using SortitionSumTreeFactory for SortitionSumTreeFactory.SortitionSumTrees;\\n\\n    modifier onlyIfTimeElapsed(uint256 timestamp) {\\n        require(block.timestamp >= timestamp, Errors.DS_TIME_NOT_PASSED);\\n        _;\\n    }\\n\\n    modifier onlyIfState(\\n        DataTypes.Dispute storage dispute,\\n        DataTypes.DisputeState state\\n    ) {\\n        require(dispute.state == state, Errors.DS_INVALID_STATE);\\n        _;\\n    }\\n\\n    modifier onlyIfAtLeastOneCommit(DataTypes.Dispute storage dispute) {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        require(\\n            round.totalCommited > 0,\\n            Errors.DS_NO_COMMITMENTS_MADE_FOR_ROUND\\n        );\\n        _;\\n    }\\n\\n    modifier onlyIfAtLeastOneVote(DataTypes.Dispute storage dispute) {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        require(round.totalVoted > 0, Errors.DS_NO_VOTES_MADE_FOR_ROUND);\\n        _;\\n    }\\n\\n    function getDisputeById(\\n        uint256 disputeId,\\n        mapping(uint256 => DataTypes.Dispute) storage disputes\\n    ) public view returns (DataTypes.Dispute storage) {\\n        return disputes[disputeId];\\n    }\\n\\n    function executeCreateDispute(\\n        EnumerableSet.UintSet storage disputeIds,\\n        mapping(uint256 => DataTypes.Dispute) storage disputes,\\n        InputTypes.ExecuteCreateDisputeInput memory params\\n    ) external returns (bool) {\\n        bool added = disputeIds.add(params.newId);\\n        DataTypes.Dispute storage newDispute = getDisputeById(\\n            params.newId,\\n            disputes\\n        );\\n        newDispute.addTimestamp(params.evidenceUntil);\\n        newDispute.rounds.addRound(\\n            InputTypes.AddRoundInput({\\n                maxVotes: params.maxVotes,\\n                totalFeesForJurors: params.totalFeesForJurors,\\n                tokensAtStakePerJuror: params.tokensAtStakePerJuror,\\n                procecutorId: params.procecutorId,\\n                defendantId: params.defendantId,\\n                drawnJurors: params.drawnJurors\\n            })\\n        );\\n        newDispute.setCreated();\\n        return added;\\n    }\\n\\n    function executeNextRound(\\n        DataTypes.Dispute storage dispute,\\n        InputTypes.ExecuteNextRoundInput memory params\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.EXECUTION)\\n        returns (bool)\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        require(round.isAppealed(), Errors.ROUND_NOT_APPEALED);\\n        dispute.setState(DataTypes.DisputeState.EVIDENCE);\\n        dispute.deleteTimestamps();\\n        dispute.addTimestamp(params.evidenceUntil);\\n        dispute.rounds.addRound(\\n            InputTypes.AddRoundInput({\\n                maxVotes: params.maxVotes,\\n                totalFeesForJurors: params.totalFeesForJurors,\\n                tokensAtStakePerJuror: params.tokensAtStakePerJuror,\\n                procecutorId: round.procecutorId,\\n                defendantId: round.defendantId,\\n                drawnJurors: params.drawnJurors\\n            })\\n        );\\n        return true;\\n    }\\n\\n    modifier onlyNotRuled(DataTypes.Dispute storage dispute) {\\n        require(dispute.ruledAt == 0, Errors.DS_DISPUTE_ALREADY_RULED);\\n        _;\\n    }\\n\\n    function executeSendEvidence(\\n        DataTypes.Dispute storage dispute,\\n        DataTypes.Evidence memory evidence\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.EVIDENCE)\\n        returns (bool)\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        round.submitEvidence(evidence);\\n        return true;\\n    }\\n\\n    function executeClaimRuling(\\n        DataTypes.Dispute storage dispute\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.EXECUTION)\\n        onlyNotRuled(dispute)\\n        returns (\\n            uint256 ruling,\\n            uint256 orderId,\\n            uint256 procecutorId,\\n            uint256 defendantId\\n        )\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        (ruling, procecutorId, defendantId) = round.claimRuling();\\n        orderId = dispute.orderId;\\n        dispute.setRuling(ruling);\\n    }\\n\\n    function calcDisputeDelaysFromBlock(\\n        uint256 evidenceUntil,\\n        uint256 commitUntil,\\n        uint256 voteUntil,\\n        uint256 appealUntil\\n    ) public view returns (uint256[] memory delays) {\\n        uint256 blockTimestamp = block.timestamp;\\n        delays = new uint256[](4);\\n        delays[0] = blockTimestamp + evidenceUntil;\\n        delays[1] = delays[0] + commitUntil;\\n        delays[2] = delays[1] + voteUntil;\\n        delays[3] = delays[2] + appealUntil;\\n    }\\n\\n    function format(\\n        DataTypes.Dispute storage dispute,\\n        uint256 id\\n    ) external view returns (OutputTypes.DisputeOutput memory) {\\n        return (\\n            OutputTypes.DisputeOutput({\\n                createdAt: dispute.createdAt,\\n                disputeId: id,\\n                orderId: dispute.orderId,\\n                ruling: dispute.ruling,\\n                ruledAt: dispute.ruledAt,\\n                timestamps: dispute.timestamps,\\n                state: dispute.state,\\n                rounds: RoundLogic.formatAll(dispute.rounds)\\n            })\\n        );\\n    }\\n\\n    function setEvidencePhase(DataTypes.Dispute storage dispute) external {}\\n\\n    function goCommitState(\\n        DataTypes.Dispute storage dispute,\\n        DataTypes.DelayTimestamp memory delayTimestamp\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.EVIDENCE)\\n        onlyIfTimeElapsed(dispute.timestamps[0])\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        if (round.areEvidencesSubmitted()) {\\n            dispute.addTimestamp(delayTimestamp.commit);\\n            dispute.setState(DataTypes.DisputeState.COMMIT);\\n        } else {\\n            dispute.addTimestamp(delayTimestamp.commit);\\n            dispute.addTimestamp(delayTimestamp.vote);\\n            dispute.addTimestamp(delayTimestamp.appeal);\\n            dispute.setState(DataTypes.DisputeState.APPEAL);\\n            round.setWinningChoice(Choices.ONE_HUNDRED_PERCENT);\\n        }\\n    }\\n\\n    function goVoteState(\\n        DataTypes.Dispute storage dispute,\\n        uint256 voteDelay\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.COMMIT)\\n        onlyIfTimeElapsed(dispute.timestamps[1])\\n        onlyIfAtLeastOneCommit(dispute)\\n    {\\n        dispute.addTimestamp(voteDelay);\\n        dispute.setState(DataTypes.DisputeState.VOTE);\\n    }\\n\\n    function goAppealState(\\n        DataTypes.Dispute storage dispute,\\n        uint256 appealDelay\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.VOTE)\\n        onlyIfTimeElapsed(dispute.timestamps[2])\\n        onlyIfAtLeastOneVote(dispute)\\n    {\\n        dispute.setState(DataTypes.DisputeState.APPEAL);\\n        dispute.addTimestamp(appealDelay);\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        round.setWinningChoice(round.getWinningChoice());\\n    }\\n\\n    function goExecutionState(\\n        DataTypes.Dispute storage dispute\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.APPEAL)\\n        onlyIfTimeElapsed(dispute.timestamps[3])\\n    {\\n        dispute.setState(DataTypes.DisputeState.EXECUTION);\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        uint256 winningChoice = round.winningChoice;\\n        (uint256 min, uint256 max) = RoundDataLogic.getRanges(winningChoice);\\n        round.setTotalPenalties(round.calcPenaltiesAmount(min, max));\\n        round.close();\\n    }\\n\\n    //function goNextRound() external {}\\n\\n    function executeCommitVote(\\n        DataTypes.Dispute storage dispute,\\n        uint256 choice,\\n        string memory salt,\\n        address account\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.COMMIT)\\n        returns (bool)\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        round.commitVote(account, choice, salt);\\n        return true;\\n    }\\n\\n    function executeRevealVote(\\n        DataTypes.Dispute storage dispute,\\n        uint256 choice,\\n        string memory salt,\\n        string memory justification,\\n        address account\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.VOTE)\\n        returns (bool)\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        round.revealVote(account, choice, salt, justification);\\n        return true;\\n    }\\n\\n    function executeAppeal(\\n        DataTypes.Dispute storage dispute,\\n        uint256 appealFeeRewards,\\n        uint256 procecutorId\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.APPEAL)\\n        returns (bool)\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        round.appeal(appealFeeRewards, procecutorId);\\n        return true;\\n    }\\n\\n    function executeClaimAsJudge(\\n        DataTypes.Dispute storage dispute,\\n        address account,\\n        uint256 roundId\\n    ) external returns (OutputTypes.ExecuteClaimAsJudgeOutput memory params) {\\n        DataTypes.Round storage round = dispute.getRound(roundId);\\n        uint256 winningChoice = round.winningChoice;\\n        uint256 amountOfCorrectVotes = round.getAmountOfCorrectVote(\\n            winningChoice\\n        );\\n\\n        (uint256 min, uint256 max) = RoundDataLogic.getRanges(winningChoice);\\n\\n        params = round.claimAsJudge(\\n            InputTypes.ClaimAsJudgeInput({\\n                account: account,\\n                min: min,\\n                max: max,\\n                winningChoice: winningChoice,\\n                amountOfCorrectVotes: amountOfCorrectVotes,\\n                tokensAtStakePerJuror: round.tokensAtStakePerJuror,\\n                totalFeesForJurors: round.totalFeesForJurors,\\n                penalties: round.penalties\\n            })\\n        );\\n    }\\n\\n    function executeClaimAppealFeeRewards(\\n        DataTypes.Dispute storage dispute,\\n        uint256 callerId,\\n        uint256 roundId\\n    ) external returns (uint256) {\\n        require(roundId > 0, Errors.ROUND_ID_INVALID);\\n        (uint256 appealFeeAmount, bool isClaimable) = RoundLogic\\n            .claimAppealFeeRewards(\\n                dispute.getRound(roundId),\\n                dispute.getRound(roundId - 1),\\n                callerId\\n            );\\n        require(isClaimable, Errors.CLAIM_NOT_ALLOWED);\\n        return appealFeeAmount;\\n    }\\n\\n    function calcAppealFees(\\n        DataTypes.Dispute storage dispute,\\n        uint256 feePerJuror\\n    ) public view returns (uint256) {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        uint256 appealFee = feePerJuror * round.maxVotes * 2;\\n        return PercentageMath.percentMul(appealFee, 0.1e4);\\n    }\\n}\\n\",\"keccak256\":\"0xa78e36e6c18b81377f4cf8e3d6fddc5461b6ce58e590ac4446a63261dcadbcac\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/InviterLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {PercentageMath} from \\\"../../../imports/aave/contracts/PercentageMath.sol\\\";\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title Inviter logic library\\n * @author Blockswan\\n * @notice Implements the logic for inviter specific functions\\n */\\nlibrary InviterLogic {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using PercentageMath for uint256;\\n\\n    function addInviter(\\n        DataTypes.User storage user,\\n        uint256 inviterId\\n    ) external returns (bool) {\\n        user.inviterId = inviterId;\\n        return (true);\\n    }\\n\\n    function getInviterAddress(\\n        DataTypes.User storage user,\\n        EnumerableSet.AddressSet storage userIdToAddress\\n    ) public view returns (address) {\\n        return (userIdToAddress.at(user.inviterId));\\n    }\\n\\n    function getInvitersAddresses(\\n        DataTypes.User storage user,\\n        EnumerableSet.AddressSet storage userIdToAddress,\\n        mapping(address => DataTypes.User) storage users\\n    ) public view returns (address, address) {\\n        address inviter0 = getInviterAddress(user, userIdToAddress);\\n        address inviter1 = getInviterAddress(users[inviter0], userIdToAddress);\\n        return (inviter0, inviter1);\\n    }\\n\\n    function calcInviterRewards(\\n        uint256 currencyValue,\\n        uint256 affiliateShare\\n    ) public pure returns (uint256) {\\n        return currencyValue.percentMul(affiliateShare);\\n    }\\n\\n    function calcInvitersRewards(\\n        InputTypes.CalcInvitersRewardsInput memory params\\n    ) external pure returns (OutputTypes.CalcInvitersRewardsOutput memory) {\\n        uint256 totalRewards = calcInviterRewards(\\n            params.currencyValue,\\n            params.affiliateShare\\n        );\\n        uint256 inviter0Rewards = totalRewards.percentMul(\\n            params.lvl0AffiliateShare\\n        );\\n        uint256 inviter1Rewards = totalRewards - inviter0Rewards;\\n\\n        return (\\n            OutputTypes.CalcInvitersRewardsOutput({\\n                inviter0Rewards: inviter0Rewards,\\n                inviter1Rewards: inviter1Rewards,\\n                remainingRewards: params.currencyValue - totalRewards\\n            })\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3ea5d8ab2ffdc0349f99bea7a352b577eb42ac8508598c93e9f4213b70d38ce3\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/JuryDataLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {PercentageMath} from \\\"../../../imports/aave/contracts/PercentageMath.sol\\\";\\nimport {SortitionSumTreeFactory} from \\\"../../../imports/kleros/contracts/SortitionSumTreeFactory.sol\\\";\\n\\n/**\\n * @title JuryData logic library\\n * @author Blockswan\\n * @notice Implements the logic for jury data specific functions\\n */\\nlibrary JuryDataLogic {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using PercentageMath for uint256;\\n    using SortitionSumTreeFactory for SortitionSumTreeFactory.SortitionSumTrees;\\n\\n    function draw(\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree,\\n        bytes32 treeKey,\\n        uint256 rng\\n    ) public view returns (address) {\\n        return address(uint160(uint256(tree.draw(treeKey, rng))));\\n    }\\n\\n    function total(\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree,\\n        bytes32 treeKey\\n    ) external view returns (uint256) {\\n        return tree.total(treeKey);\\n    }\\n\\n    function updateTree(\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree,\\n        address account,\\n        bytes32 treeKey,\\n        uint256 amount\\n    ) internal {\\n        tree.set(treeKey, amount, bytes32(uint256(uint160(account))));\\n    }\\n\\n    function incrementStake(\\n        DataTypes.Juror storage juror,\\n        address account,\\n        uint256 amount,\\n        bytes32 treeKey,\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree\\n    ) internal returns (bool) {\\n        juror.stakedTokens += amount;\\n        updateTree(tree, account, treeKey, juror.stakedTokens);\\n\\n        return true;\\n    }\\n\\n    function decrementStake(\\n        DataTypes.Juror storage juror,\\n        address account,\\n        uint256 amount,\\n        bytes32 treeKey,\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree\\n    ) internal returns (bool) {\\n        juror.stakedTokens -= amount;\\n        updateTree(tree, account, treeKey, juror.stakedTokens);\\n\\n        return true;\\n    }\\n\\n    function incremementFreeze(\\n        DataTypes.Juror storage juror,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        juror.freezedTokens += amount;\\n        return true;\\n    }\\n\\n    function decrementFreeze(\\n        DataTypes.Juror storage juror,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        juror.freezedTokens -= amount;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x304f0eb4e7b6a84486456e377f42ac6142db1f6013f95738ad43e22cf3881353\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/JuryLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {PercentageMath} from \\\"../../../imports/aave/contracts/PercentageMath.sol\\\";\\nimport {SortitionSumTreeFactory} from \\\"../../../imports/kleros/contracts/SortitionSumTreeFactory.sol\\\";\\nimport {JuryDataLogic} from \\\"./JuryDataLogic.sol\\\";\\n\\n/**\\n * @title Jury logic library\\n * @author Blockswan\\n * @notice Implements the logic for jury specific functions\\n */\\n\\nlibrary JuryLogic {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using PercentageMath for uint256;\\n    using JuryDataLogic for address;\\n    using JuryDataLogic for SortitionSumTreeFactory.SortitionSumTrees;\\n    using JuryDataLogic for DataTypes.Juror;\\n\\n    // @return A random number less than the _max\\n    function random(\\n        uint256 entropy,\\n        uint256 max\\n    ) internal pure returns (uint256) {\\n        require(max > 0, \\\"max must be greater than 0\\\");\\n        return uint256(keccak256(abi.encodePacked(entropy))) % max;\\n    }\\n\\n    function getJurorByAddress(\\n        address account,\\n        mapping(address => DataTypes.Juror) storage jurors\\n    ) internal view returns (DataTypes.Juror storage) {\\n        return jurors[account];\\n    }\\n\\n    function createEntropy(uint256 intHash) internal view returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        block.difficulty,\\n                        block.timestamp,\\n                        blockhash(block.number),\\n                        intHash\\n                    )\\n                )\\n            );\\n    }\\n\\n    function randomlyDrawJuror(\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree,\\n        bytes32 treeKey,\\n        uint256 intHash\\n    ) public view returns (address drawnJuror) {\\n        uint256 entropy = createEntropy(intHash);\\n        uint256 rng = random(entropy, tree.total(treeKey));\\n        drawnJuror = tree.draw(treeKey, rng);\\n    }\\n\\n    function executeDepositStake(\\n        uint256 amount,\\n        address account,\\n        bytes32 treeKey,\\n        EnumerableSet.AddressSet storage jurorSet,\\n        mapping(address => DataTypes.Juror) storage jurors,\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree\\n    ) external returns (bool) {\\n        if (!(jurorSet.contains(account))) {\\n            jurorSet.add(account);\\n        }\\n        DataTypes.Juror storage juror = getJurorByAddress(account, jurors);\\n        juror.incrementStake(account, amount, treeKey, tree);\\n        return true;\\n    }\\n\\n    function executeWithdrawStake(\\n        uint256 amount,\\n        address account,\\n        bytes32 treeKey,\\n        EnumerableSet.AddressSet storage jurorSet,\\n        mapping(address => DataTypes.Juror) storage jurors,\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree\\n    ) external returns (bool) {\\n        DataTypes.Juror storage juror = getJurorByAddress(account, jurors);\\n        juror.decrementStake(account, amount, treeKey, tree);\\n        if (juror.stakedTokens == 0) {\\n            jurorSet.remove(account);\\n        }\\n        return true;\\n    }\\n\\n    function executeFreezeTokens(\\n        uint256 amount,\\n        address[] memory accounts,\\n        bytes32 treeKey,\\n        mapping(address => DataTypes.Juror) storage jurors,\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree\\n    ) external returns (bool) {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            address account = accounts[i];\\n\\n            DataTypes.Juror storage juror = getJurorByAddress(account, jurors);\\n            uint256 newFreeze = juror.freezedTokens + amount;\\n            juror.freezedTokens = newFreeze;\\n            juror.decrementStake(account, amount, treeKey, tree);\\n        }\\n        return true;\\n    }\\n\\n    function executeUnfreezeTokens(\\n        uint256 amount,\\n        address account,\\n        bytes32 treeKey,\\n        mapping(address => DataTypes.Juror) storage jurors,\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree\\n    ) external returns (bool) {\\n        DataTypes.Juror storage juror = getJurorByAddress(account, jurors);\\n        uint256 newFreeze = juror.freezedTokens - amount;\\n        juror.freezedTokens = newFreeze;\\n        juror.incrementStake(account, amount, treeKey, tree);\\n        return true;\\n    }\\n\\n    function calcTokenToFreeze(\\n        uint256 minStake,\\n        uint256 alpha\\n    ) public pure returns (uint256) {\\n        return PercentageMath.percentMul(minStake, alpha);\\n    }\\n\\n    function readJuror(\\n        address account,\\n        mapping(address => DataTypes.Juror) storage jurors\\n    ) public view returns (DataTypes.Juror memory juror) {\\n        juror = jurors[account];\\n    }\\n}\\n\",\"keccak256\":\"0x0948466a01da86e8848555f63cf6b59b790902bd7b12ba48968b1f7659bcfb8d\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/RoundDataLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title Round Data logic library\\n * @author Blockswan\\n * @notice Implements the logic for round data specific functions\\n */\\n\\nlibrary RoundDataLogic {\\n    using Counters for Counters.Counter;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    function setTokensAtStakePerJuror(\\n        DataTypes.Round storage round,\\n        uint256 tokensAtStakePerJuror\\n    ) external returns (bool) {\\n        round.tokensAtStakePerJuror = tokensAtStakePerJuror;\\n        return true;\\n    }\\n\\n    function setWinningChoice(\\n        DataTypes.Round storage round,\\n        uint256 winningChoice\\n    ) external returns (bool) {\\n        round.winningChoice = winningChoice;\\n        return true;\\n    }\\n\\n    function setTotalFeesForJurors(\\n        DataTypes.Round storage round,\\n        uint256 totalFeesForJurors\\n    ) external returns (bool) {\\n        round.totalFeesForJurors = totalFeesForJurors;\\n        return true;\\n    }\\n\\n    function setAppealFees(\\n        DataTypes.Round storage round,\\n        uint256 appealFeeRewards\\n    ) external returns (bool) {\\n        round.appealFeeRewards = appealFeeRewards;\\n        return true;\\n    }\\n\\n    function setMaxVotes(\\n        DataTypes.Round storage round,\\n        uint256 maxVotes\\n    ) external returns (bool) {\\n        round.maxVotes = maxVotes;\\n        return true;\\n    }\\n\\n    function setDrawnJurors(\\n        DataTypes.Round storage round,\\n        address[] memory drawnJurors\\n    ) external returns (bool) {\\n        for (uint256 i = 0; i < drawnJurors.length; i++) {\\n            round.drawnJurors.push(drawnJurors[i]);\\n        }\\n        return true;\\n    }\\n\\n    function getJurorWeight(\\n        DataTypes.Round storage round,\\n        address juror\\n    ) internal view returns (uint256 weight) {\\n        for (uint256 i = 0; i < round.drawnJurors.length; i++) {\\n            if (round.drawnJurors[i] == juror) {\\n                weight += 1;\\n            }\\n        }\\n    }\\n\\n    function addEvidence(\\n        DataTypes.Round storage round,\\n        DataTypes.Evidence memory evidence\\n    ) external returns (bool) {\\n        round.evidences.push(evidence);\\n        round.evidenceSubmitters.add(evidence.userId);\\n        return true;\\n    }\\n\\n    function setProcecutorId(\\n        DataTypes.Round storage round,\\n        uint256 procecutorId\\n    ) external returns (bool) {\\n        round.procecutorId = procecutorId;\\n        return true;\\n    }\\n\\n    function setDefendantId(\\n        DataTypes.Round storage round,\\n        uint256 defendantId\\n    ) external returns (bool) {\\n        round.defendantId = defendantId;\\n        return true;\\n    }\\n\\n    function isProcecutor(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) external view returns (bool) {\\n        return (round.procecutorId == userId);\\n    }\\n\\n    function isDefendant(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) external view returns (bool) {\\n        return (round.defendantId == userId);\\n    }\\n\\n    function isAppealed(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.appealFeeRewards > 0;\\n    }\\n\\n    function hasSubmittedEvidence(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) internal view returns (bool) {\\n        return round.evidenceSubmitters.contains(userId);\\n    }\\n\\n    function getEvidencesCount(\\n        DataTypes.Round storage round\\n    ) internal view returns (uint256) {\\n        return round.evidences.length;\\n    }\\n\\n    function setAppealedBy(\\n        DataTypes.Round storage round,\\n        uint256 appealedBy\\n    ) external returns (bool) {\\n        round.appealedBy = appealedBy;\\n        return true;\\n    }\\n\\n    function isJuror(\\n        DataTypes.Round storage round,\\n        address account\\n    ) external view returns (bool) {\\n        for (uint256 i = 0; i < round.maxVotes; i++) {\\n            if (round.drawnJurors[i] == account) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function hasRevealed(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (bool) {\\n        DataTypes.Vote memory vote = fetchVoteByAccount(round, account);\\n        return vote.hasVoted;\\n    }\\n\\n    function hasCommited(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (bool) {\\n        DataTypes.Vote memory vote = fetchVoteByAccount(round, account);\\n        return vote.commit != 0x0;\\n    }\\n\\n    function setTotalPenalties(\\n        DataTypes.Round storage round,\\n        uint256 penalties\\n    ) external returns (bool) {\\n        round.penalties = penalties;\\n        return true;\\n    }\\n\\n    function incrementTotalVoted(\\n        DataTypes.Round storage round,\\n        uint256 weight\\n    ) external returns (bool) {\\n        round.totalVoted += weight;\\n        return true;\\n    }\\n\\n    function incrementTotalCommited(\\n        DataTypes.Round storage round,\\n        uint256 weight\\n    ) external returns (bool) {\\n        round.totalCommited += weight;\\n        return true;\\n    }\\n\\n    function areAllVotesCommitted(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.totalCommited == round.maxVotes;\\n    }\\n\\n    function areAllVotesRevealed(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.totalVoted == round.maxVotes;\\n    }\\n\\n    function getVoteByAccount(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (DataTypes.Vote storage) {\\n        uint256 i = 0;\\n        for (i = 0; i < round.votes.length; i++) {\\n            if (round.votes[i].account == account) {\\n                return round.votes[i];\\n            }\\n        }\\n        return round.votes[i];\\n    }\\n\\n    function tryGetVoteByAccount(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (DataTypes.Vote storage, bool exists) {\\n        for (uint256 i = 0; i < round.votes.length; i++) {\\n            if (round.votes[i].account == account) {\\n                return (round.votes[i], true);\\n            }\\n        }\\n        return (round.votes[0], false);\\n    }\\n\\n    function incrementChoiceCount(\\n        DataTypes.Round storage round,\\n        uint256 choice,\\n        uint256 weight\\n    ) external {\\n        round.counts[choice] += weight;\\n    }\\n\\n    function fetchVoteByAccount(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (DataTypes.Vote memory) {\\n        uint256 length = round.votes.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (round.votes[i].account == account) {\\n                return round.votes[i];\\n            }\\n        }\\n        return\\n            DataTypes.Vote(\\n                account,\\n                0x0,\\n                0,\\n                getJurorWeight(round, account),\\n                \\\"\\\",\\n                false\\n            );\\n    }\\n\\n    function getWinningChoice(\\n        DataTypes.Round storage round\\n    ) internal view returns (uint256) {\\n        uint256 winningChoice = 0;\\n        uint256 winningCount = 0;\\n        for (uint256 i = 0; i < round.counts.length; i++) {\\n            if (round.counts[i] > winningCount) {\\n                winningChoice = i;\\n                winningCount = round.counts[i];\\n            }\\n        }\\n        return winningChoice;\\n    }\\n\\n    function getAmountNotVoted(\\n        DataTypes.Round storage round\\n    ) public view returns (uint256) {\\n        return round.maxVotes - round.totalVoted;\\n    }\\n\\n    function getMinRange(uint256 winningChoice) public pure returns (uint256) {\\n        return winningChoice == 0 ? 0 : winningChoice - 1;\\n    }\\n\\n    function getMaxRange(uint256 winningChoice) public pure returns (uint256) {\\n        return winningChoice == 10 ? 10 : winningChoice + 1;\\n    }\\n\\n    function getRanges(\\n        uint256 winningChoice\\n    ) public pure returns (uint256, uint256) {\\n        return (getMinRange(winningChoice), getMaxRange(winningChoice));\\n    }\\n\\n    function setAppealFeeRewards(\\n        DataTypes.Round storage round,\\n        uint256 appealFeeRewards\\n    ) external returns (bool) {\\n        round.appealFeeRewards = appealFeeRewards;\\n        return true;\\n    }\\n\\n    function setAppealFeeClaimed(\\n        DataTypes.Round storage round\\n    ) external returns (bool) {\\n        round.appealFeeRewards = 0;\\n        return true;\\n    }\\n\\n    function close(DataTypes.Round storage round) external returns (bool) {\\n        round.closed = true;\\n        return true;\\n    }\\n\\n    function isClosed(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.closed;\\n    }\\n\\n    function getAmountOfCorrectVote(\\n        DataTypes.Round storage round,\\n        uint256 winningChoice\\n    ) external view returns (uint256) {\\n        return round.counts[winningChoice];\\n    }\\n\\n    function getAmountOfIncorrectVote(\\n        DataTypes.Round storage round,\\n        uint256 min,\\n        uint256 max\\n    ) external view returns (uint256 incorrectVotes) {\\n        incorrectVotes = round.maxVotes - round.totalVoted;\\n        for (uint256 i = 0; i < round.counts.length; i++) {\\n            if (!(i >= min && i <= max)) {\\n                incorrectVotes += round.counts[i];\\n            }\\n        }\\n    }\\n\\n    function addJudgesClaimed(\\n        DataTypes.Round storage round,\\n        address account\\n    ) external returns (bool) {\\n        round.judgesClaimed.add(account);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xe2b09b674d8265b2875aaa1eb14c7ed3d79803a97de7837766151e1c1fc68319\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/RoundLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {RoleKeys} from \\\"../helpers/RoleKeys.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {PercentageMath} from \\\"../../../imports/aave/contracts/PercentageMath.sol\\\";\\nimport {RoundDataLogic} from \\\"./RoundDataLogic.sol\\\";\\nimport {VoteLogic} from \\\"./VoteLogic.sol\\\";\\n\\nimport {IJury} from \\\"../../../interfaces/IJury.sol\\\";\\n\\n/**\\n * @title Round logic library\\n * @author Blockswan\\n * @notice Implements the logic for round specific functions\\n */\\nlibrary RoundLogic {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Counters for Counters.Counter;\\n    using PercentageMath for uint256;\\n    using RoundDataLogic for DataTypes.Round;\\n    using VoteLogic for DataTypes.Vote;\\n\\n    modifier onlyJuror(DataTypes.Round storage round, address account) {\\n        require(round.isJuror(account), Errors.RD_ACCOUNT_NOT_DRAWN_JUROR);\\n        _;\\n    }\\n\\n    modifier onlyClosedRound(DataTypes.Round storage round) {\\n        require(round.isClosed(), Errors.ROUND_NOT_CLOSED);\\n        _;\\n    }\\n\\n    modifier onlyAppealedRound(DataTypes.Round storage round) {\\n        require(round.isAppealed(), Errors.ROUND_NOT_APPEALED);\\n        _;\\n    }\\n\\n    modifier onlyNotAppealedRound(DataTypes.Round storage round) {\\n        require(!round.isAppealed(), Errors.ROUND_IS_APPEALED);\\n        _;\\n    }\\n\\n    modifier onlyNotCommited(DataTypes.Round storage round, address account) {\\n        require(\\n            !round.hasCommited(account),\\n            Errors.ROUND_VOTE_ALREADY_COMMITED\\n        );\\n        _;\\n    }\\n\\n    modifier onlyNotSumbittedEvidence(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) {\\n        require(\\n            !round.hasSubmittedEvidence(userId),\\n            Errors.ROUND_EVIDENCE_ALREADY_SUBMITTED\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCommited(DataTypes.Round storage round, address account) {\\n        require(round.hasCommited(account), Errors.ROUND_VOTE_NOT_COMMITED);\\n        _;\\n    }\\n\\n    modifier onlyNotRevealed(DataTypes.Round storage round, address account) {\\n        require(\\n            !round.hasRevealed(account),\\n            Errors.ROUND_VOTE_ALREADY_REVEALED\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCorrectRole(bytes32 role) {\\n        require(\\n            role == RoleKeys.BUYER_ROLE || role == RoleKeys.SELLER_ROLE,\\n            Errors.DS_EVIDENCE_ROLE_NOT_VALID\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRoundActor(DataTypes.Round storage round, uint256 userId) {\\n        require(\\n            round.isProcecutor(userId) || round.isDefendant(userId),\\n            Errors.DS_EVIDENCE_SENDER_NOT_PARTY\\n        );\\n        _;\\n    }\\n\\n    // add a round\\n    function addRound(\\n        DataTypes.Round[] storage rounds,\\n        InputTypes.AddRoundInput memory params\\n    ) external returns (bool) {\\n        rounds.push();\\n        DataTypes.Round storage newRound = rounds[rounds.length - 1];\\n        newRound.setProcecutorId(params.procecutorId);\\n        newRound.setDefendantId(params.defendantId);\\n        newRound.setMaxVotes(params.maxVotes);\\n        newRound.setTotalFeesForJurors(params.totalFeesForJurors);\\n        newRound.setDrawnJurors(params.drawnJurors);\\n        newRound.setTokensAtStakePerJuror(params.tokensAtStakePerJuror);\\n        return true;\\n    }\\n\\n    function submitEvidence(\\n        DataTypes.Round storage round,\\n        DataTypes.Evidence memory evidence\\n    )\\n        external\\n        onlyRoundActor(round, evidence.userId)\\n        onlyNotSumbittedEvidence(round, evidence.userId)\\n        onlyCorrectRole(evidence.role)\\n        returns (bool)\\n    {\\n        if (round.getEvidencesCount() == 1) {\\n            require(\\n                evidence.role != round.evidences[0].role,\\n                Errors.DS_EVIDENCE_ROLE_NOT_VALID\\n            );\\n        }\\n        round.addEvidence(evidence);\\n        return true;\\n    }\\n\\n    function areEvidencesSubmitted(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.getEvidencesCount() == 2;\\n    }\\n\\n    function commitVote(\\n        DataTypes.Round storage round,\\n        address account,\\n        uint256 choice,\\n        string memory salt\\n    )\\n        external\\n        onlyJuror(round, account)\\n        onlyNotCommited(round, account)\\n        returns (bool)\\n    {\\n        uint256 weight = round.getJurorWeight(account);\\n        DataTypes.Vote memory newVote = VoteLogic.commit(\\n            account,\\n            choice,\\n            weight,\\n            salt\\n        );\\n        round.votes.push(newVote);\\n        round.incrementTotalCommited(weight);\\n        return true;\\n    }\\n\\n    function revealVote(\\n        DataTypes.Round storage round,\\n        address account,\\n        uint256 choice,\\n        string memory salt,\\n        string memory justification\\n    )\\n        external\\n        onlyJuror(round, account)\\n        onlyCommited(round, account)\\n        onlyNotRevealed(round, account)\\n    {\\n        uint256 weight = round.getJurorWeight(account);\\n        round.incrementTotalVoted(weight);\\n        round.incrementChoiceCount(choice, weight);\\n        {\\n            (DataTypes.Vote storage vote, bool exists) = round\\n                .tryGetVoteByAccount(account);\\n            require(exists, Errors.RD_VOTE_NOT_FOUND);\\n            vote.reveal(choice, salt, justification);\\n        }\\n    }\\n\\n    function appeal(\\n        DataTypes.Round storage round,\\n        uint256 appealFeeRewards,\\n        uint256 procecutorId\\n    ) external onlyRoundActor(round, procecutorId) {\\n        round.setAppealFeeRewards(appealFeeRewards);\\n        round.setAppealedBy(procecutorId);\\n    }\\n\\n    function claimAsJudge(\\n        DataTypes.Round storage round,\\n        InputTypes.ClaimAsJudgeInput memory params\\n    )\\n        external\\n        onlyJuror(round, params.account)\\n        onlyClosedRound(round)\\n        returns (OutputTypes.ExecuteClaimAsJudgeOutput memory output)\\n    {\\n        DataTypes.Vote memory vote = round.fetchVoteByAccount(params.account);\\n        {\\n            output = OutputTypes.ExecuteClaimAsJudgeOutput({\\n                isVoteCorrect: vote.isVoteCorrect(params.winningChoice),\\n                isVoteInRange: vote.isBetweenRange(params.min, params.max),\\n                amountFromDisputeFees: calcEarnedFromDisputeFees(\\n                    vote.weight,\\n                    params.amountOfCorrectVotes,\\n                    params.totalFeesForJurors\\n                ),\\n                amountFromJurorsTokensAtStake: calcEarnedFromDisputeFees(\\n                    vote.weight,\\n                    params.amountOfCorrectVotes,\\n                    params.penalties\\n                ),\\n                tokensAtStakePerJuror: params.tokensAtStakePerJuror\\n            });\\n        }\\n        round.addJudgesClaimed(params.account);\\n    }\\n\\n    function claimAppealFeeRewards(\\n        DataTypes.Round storage round,\\n        DataTypes.Round storage previousRound,\\n        uint256 userId\\n    )\\n        external\\n        onlyRoundActor(previousRound, userId)\\n        onlyAppealedRound(previousRound)\\n        returns (uint256 appealFeeRewards, bool isClaimable)\\n    {\\n        appealFeeRewards = previousRound.appealFeeRewards;\\n        isClaimable = checkIfClaimAppealIsPossible(\\n            round.winningChoice,\\n            previousRound.winningChoice,\\n            round.isProcecutor(userId)\\n        );\\n        previousRound.setAppealFeeClaimed();\\n    }\\n\\n    function claimRuling(\\n        DataTypes.Round storage round\\n    )\\n        external\\n        view\\n        onlyNotAppealedRound(round)\\n        returns (uint256 ruling, uint256 procecutorId, uint256 defendantId)\\n    {\\n        ruling = round.winningChoice;\\n        procecutorId = round.procecutorId;\\n        defendantId = round.defendantId;\\n    }\\n\\n    function checkIfClaimAppealIsPossible(\\n        uint256 winningChoice,\\n        uint256 previousWinningChoice,\\n        bool calledByProcecutor\\n    ) internal pure returns (bool) {\\n        if (calledByProcecutor) {\\n            return winningChoice > previousWinningChoice;\\n        } else {\\n            return winningChoice <= previousWinningChoice;\\n        }\\n    }\\n\\n    function calcEarnedFromDisputeFees(\\n        uint256 jurorWeight,\\n        uint256 weightOfCorrectVotes,\\n        uint256 disputePrice\\n    ) public pure returns (uint256) {\\n        uint res = (disputePrice * jurorWeight) / weightOfCorrectVotes;\\n        return res;\\n    }\\n\\n    function calcPenaltiesAmount(\\n        DataTypes.Round storage round,\\n        uint256 min,\\n        uint256 max\\n    ) external view returns (uint256 penaltiesAmount) {\\n        uint256 amountOfIncorrectVotes = round.getAmountOfIncorrectVote(\\n            min,\\n            max\\n        );\\n        penaltiesAmount = amountOfIncorrectVotes * round.tokensAtStakePerJuror;\\n    }\\n\\n    function format(\\n        DataTypes.Round storage round,\\n        uint256 id\\n    ) public view returns (OutputTypes.RoundOutput memory) {\\n        return (\\n            OutputTypes.RoundOutput({\\n                roundId: id,\\n                procecutorId: round.procecutorId,\\n                defendantId: round.defendantId,\\n                appealFeeRewards: round.appealFeeRewards,\\n                tokensAtStakePerJuror: round.tokensAtStakePerJuror,\\n                totalFeesForJurors: round.totalFeesForJurors,\\n                maxVotes: round.maxVotes,\\n                penalties: round.penalties,\\n                winningChoice: round.winningChoice,\\n                totalRepartitions: round.totalRepartitions,\\n                totalVoted: round.totalVoted,\\n                totalCommited: round.totalCommited,\\n                counts: round.counts,\\n                evidenceSubmitters: round.evidenceSubmitters.values(),\\n                appealedBy: round.appealedBy,\\n                votes: round.votes,\\n                evidences: round.evidences,\\n                drawnJurors: round.drawnJurors,\\n                judgesClaimed: round.judgesClaimed.values(),\\n                closed: round.closed\\n            })\\n        );\\n    }\\n\\n    function formatAll(\\n        DataTypes.Round[] storage rounds\\n    ) external view returns (OutputTypes.RoundOutput[] memory) {\\n        OutputTypes.RoundOutput[] memory output = new OutputTypes.RoundOutput[](\\n            rounds.length\\n        );\\n        for (uint256 i = 0; i < rounds.length; i++) {\\n            output[i] = format(rounds[i], i);\\n        }\\n        return output;\\n    }\\n}\\n\",\"keccak256\":\"0xf6a72669f0634b624113bdc94638ad5d1313529391d3ffc66cb2eacdb3130c62\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/VoteDataLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\n\\n/**\\n * @title VoteData logic library\\n * @author Blockswan\\n * @notice Implements the logic for vote data specific functions\\n */\\nlibrary VoteDataLogic {\\n    function setJustification(\\n        DataTypes.Vote storage vote,\\n        string memory justification\\n    ) internal returns (bool) {\\n        vote.justification = justification;\\n        return true;\\n    }\\n\\n    function setCommit(\\n        DataTypes.Vote storage vote,\\n        bytes32 commitment\\n    ) internal returns (bool) {\\n        vote.commit = commitment;\\n        return true;\\n    }\\n\\n    function setChoice(\\n        DataTypes.Vote storage vote,\\n        uint256 choice\\n    ) internal returns (bool) {\\n        vote.choice = choice;\\n        return true;\\n    }\\n\\n    function setAccount(\\n        DataTypes.Vote storage vote,\\n        address account\\n    ) internal returns (bool) {\\n        vote.account = account;\\n        return true;\\n    }\\n\\n    function setVoted(DataTypes.Vote storage vote) internal returns (bool) {\\n        vote.hasVoted = true;\\n        return true;\\n    }\\n\\n    function setWeight(\\n        DataTypes.Vote storage vote,\\n        uint256 weight\\n    ) internal returns (bool) {\\n        vote.weight = weight;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xc1147da549f5811faab7374a04df9b5a06b1645afdf1ffd029dd9f328a4f4d81\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/VoteLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\nimport {VoteDataLogic} from \\\"./VoteDataLogic.sol\\\";\\n\\n/**\\n * @title Vote logic library\\n * @author Blockswan\\n * @notice Implements the logic for vote specific functions\\n */\\nlibrary VoteLogic {\\n    using VoteDataLogic for DataTypes.Vote;\\n\\n    modifier onlyValidChoice(uint256 choice) {\\n        require(choice >= 0 && choice <= 10, Errors.VOTE_INVALID_CHOICE);\\n        _;\\n    }\\n\\n    modifier onlyValidReveal(\\n        DataTypes.Vote storage vote,\\n        uint256 choice,\\n        string memory salt\\n    ) {\\n        require(\\n            isRevealCorrect(vote.account, choice, salt, vote.commit),\\n            Errors.VOTE_REVEAL_INCORRECT\\n        );\\n        _;\\n    }\\n\\n    function encodeChoice(\\n        address account,\\n        uint256 choice,\\n        string memory salt\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(account, choice, salt));\\n    }\\n\\n    function isRevealCorrect(\\n        address account,\\n        uint256 choice,\\n        string memory salt,\\n        bytes32 commitment\\n    ) internal pure returns (bool) {\\n        return encodeChoice(account, choice, salt) == commitment;\\n    }\\n\\n    function isVoteCorrect(\\n        DataTypes.Vote storage vote,\\n        uint256 choice\\n    ) internal view returns (bool) {\\n        return vote.choice == choice;\\n    }\\n\\n    function commit(\\n        address account,\\n        uint256 choice,\\n        uint256 weight,\\n        string memory salt\\n    ) external pure returns (DataTypes.Vote memory newVote) {\\n        newVote = DataTypes.Vote({\\n            account: account,\\n            choice: 0,\\n            justification: \\\"\\\",\\n            commit: encodeChoice(account, choice, salt),\\n            weight: weight,\\n            hasVoted: false\\n        });\\n    }\\n\\n    function reveal(\\n        DataTypes.Vote storage vote,\\n        uint256 choice,\\n        string memory salt,\\n        string memory justification\\n    )\\n        external\\n        onlyValidChoice(choice)\\n        onlyValidReveal(vote, choice, salt)\\n        returns (bool)\\n    {\\n        vote.setChoice(choice);\\n        vote.setJustification(justification);\\n        vote.setVoted();\\n        return true;\\n    }\\n\\n    function isBetweenRange(\\n        DataTypes.Vote memory vote,\\n        uint256 minRange,\\n        uint256 maxRange\\n    ) external pure returns (bool) {\\n        return vote.choice >= minRange && vote.choice <= maxRange;\\n    }\\n\\n    function isVoteCorrect(\\n        DataTypes.Vote memory vote,\\n        uint256 winningChoice\\n    ) external pure returns (bool) {\\n        return vote.choice == winningChoice;\\n    }\\n}\\n\",\"keccak256\":\"0x6660ed5831dd045732438ad40c9eac0574e7902068326642de43e94590b4daa9\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\n\\nlibrary DataTypes {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n\\n    enum OrderState {\\n        UNCONFIRMED,\\n        CONFIRMED,\\n        DISPUTED,\\n        DONE\\n    }\\n\\n    enum DisputeState {\\n        EVIDENCE,\\n        COMMIT,\\n        VOTE,\\n        APPEAL,\\n        EXECUTION\\n    }\\n\\n    struct DelayTimestamp {\\n        uint256 selfRefund;\\n        uint256 evidence;\\n        uint256 commit;\\n        uint256 vote;\\n        uint256 appeal;\\n    }\\n\\n    struct User {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        EnumerableSet.UintSet gigIds;\\n        EnumerableSet.UintSet offerIds;\\n        EnumerableSet.UintSet bidIds;\\n        EnumerableSet.UintSet buyerOrderIds;\\n        EnumerableSet.UintSet gigReviewsIds;\\n        EnumerableSet.UintSet userReviewsIds;\\n        EnumerableSet.UintSet reviewsIds;\\n    }\\n\\n    struct Package {\\n        uint256 price;\\n        uint256 timeDelivery;\\n    }\\n\\n    struct Gig {\\n        string metadata;\\n        uint256 createdAt;\\n        bool isPaused;\\n        EnumerableSet.UintSet reviewIds;\\n        EnumerableSet.UintSet orderIds;\\n        Counters.Counter successSell;\\n        Counters.Counter failedSell;\\n        Package[3] packages;\\n    }\\n\\n    struct Invoice {\\n        uint256 price;\\n        uint256 buyerFees;\\n        uint256 sellerFees;\\n        uint256 createdAt;\\n        IERC20 currency;\\n    }\\n\\n    struct Order {\\n        string metadata;\\n        string brief;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        uint256 disputeId;\\n        bool disputed;\\n        Invoice invoice;\\n        OrderState state;\\n        EnumerableSet.UintSet reviewIds;\\n    }\\n\\n    struct Evidence {\\n        uint256 userId;\\n        bytes32 role;\\n        string metadata;\\n    }\\n\\n    struct Vote {\\n        address account;\\n        bytes32 commit;\\n        uint256 choice;\\n        uint256 weight;\\n        string justification;\\n        bool hasVoted;\\n    }\\n\\n    struct Juror {\\n        uint256 stakedTokens;\\n        uint256 freezedTokens;\\n    }\\n\\n    struct Round {\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 appealFeeRewards;\\n        uint256 maxVotes;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 penalties;\\n        uint256 winningChoice;\\n        uint256 totalRepartitions;\\n        uint256 totalVoted;\\n        uint256 totalCommited;\\n        uint256 appealedBy;\\n        uint256[11] counts;\\n        EnumerableSet.UintSet evidenceSubmitters;\\n        EnumerableSet.AddressSet judgesClaimed;\\n        Vote[] votes;\\n        Evidence[] evidences;\\n        address[] drawnJurors;\\n        bool closed;\\n    }\\n\\n    struct Dispute {\\n        uint256 createdAt;\\n        uint256 orderId;\\n        uint256 ruling;\\n        uint256 ruledAt;\\n        uint256[] timestamps;\\n        DisputeState state;\\n        Round[] rounds;\\n    }\\n\\n    struct Review {\\n        uint256 authorId;\\n        string metadata;\\n    }\\n\\n    struct ServiceProvider {\\n        address wallet;\\n        string endpoint;\\n    }\\n\\n    struct EntryParams {\\n        uint256 currencyValue;\\n        uint256 timeAdded;\\n        uint256 xpEarned;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CreationParams {\\n        uint256 currencyValue;\\n        uint256 xpEarned;\\n    }\\n\\n    struct OrderPriceParams {\\n        uint256 trialFlat;\\n        uint256 trialPercent;\\n        uint256 proceedFlat;\\n        uint256 proceedPercent;\\n    }\\n\\n    struct FeeParams {\\n        uint256 flat;\\n        uint256 percent;\\n    }\\n\\n    struct RetributionParams {\\n        uint256 affiliate;\\n        uint256 lvl0AffiliateShare;\\n    }\\n\\n    struct DisputeParams {\\n        uint256 minStake;\\n        uint256 alpha;\\n        uint256 feePerJuror;\\n        uint256 maxVotes;\\n    }\\n}\\n\",\"keccak256\":\"0x6e4e2c885030600a71149b4d83d2970b0f7ac310f89636734fa96fb2f12b9456\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/InputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary InputTypes {\\n    struct CreateUserInput {\\n        uint256 newId;\\n        string metadata;\\n        uint256 inviterId;\\n        address wallet;\\n    }\\n\\n    struct CreateGigInput {\\n        uint256 newId;\\n        DataTypes.Package[3] packages;\\n        string metadata;\\n    }\\n\\n    struct OrderFeesInput {\\n        DataTypes.FeeParams buyerFees;\\n        DataTypes.FeeParams sellerFees;\\n    }\\n\\n    struct OrderRelationInput {\\n        uint256 newId;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n    }\\n\\n    struct CreateOrderInput {\\n        uint256 sellerId;\\n        uint256 buyerId;\\n        uint256 gigId;\\n        uint256 packageId;\\n        string brief;\\n    }\\n\\n    struct ExecuteCreateOrderInput {\\n        uint256 price;\\n        string metadata;\\n        string brief;\\n        OrderFeesInput fees;\\n        OrderRelationInput relations;\\n        IERC20 currency;\\n    }\\n\\n    struct ExecuteCreateDisputeInput {\\n        uint256 newId;\\n        uint256 orderId;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 maxVotes;\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 evidenceUntil;\\n        address[] drawnJurors;\\n    }\\n\\n    struct ExecuteNextRoundInput {\\n        uint256 evidenceUntil;\\n        uint256 maxVotes;\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        address[] drawnJurors;\\n    }\\n\\n    struct BecomeBuyerInput {\\n        address account;\\n        uint256 buyerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct BecomeSellerInput {\\n        address account;\\n        uint256 sellerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CalcInvitersRewardsInput {\\n        uint256 currencyValue;\\n        uint256 affiliateShare;\\n        uint256 lvl0AffiliateShare;\\n    }\\n\\n    struct ProcessPaymentInput {\\n        address caller;\\n        address inviter0;\\n        address inviter1;\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n\\n    struct AddRoundInput {\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 maxVotes;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        address[] drawnJurors;\\n    }\\n\\n    struct ClaimAsJudgeInput {\\n        address account;\\n        uint256 min;\\n        uint256 max;\\n        uint256 winningChoice;\\n        uint256 amountOfCorrectVotes;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 penalties;\\n    }\\n}\\n\",\"keccak256\":\"0x1252a66975aff762ff5773cdc5cbfe9e95003a0cc6b2e9879ff119fbe60dcea4\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/OutputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary OutputTypes {\\n    struct CalcInvitersRewardsOutput {\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n\\n    struct PrepareBecomeRoleOutput {\\n        address inviter0;\\n        address inviter1;\\n        DataTypes.EntryParams entryParams;\\n        DataTypes.RetributionParams retributionParams;\\n        CalcInvitersRewardsOutput rewards;\\n    }\\n\\n    struct GigOutput {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        uint256[] reviewIds;\\n        uint256[] orderIds;\\n        DataTypes.Package[3] packages;\\n    }\\n\\n    struct UserOutput {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 userId;\\n        address wallet;\\n        uint256[] gigIds;\\n        uint256[] offerIds;\\n        uint256[] bidIds;\\n        uint256[] buyerOrderIds;\\n        uint256[] gigReviewsIds;\\n        uint256[] userReviewsIds;\\n        uint256[] reviewsIds;\\n    }\\n\\n    struct OrderOutput {\\n        string metadata;\\n        string brief;\\n        uint256 orderId;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        uint256 disputeId;\\n        uint256[] reviewIds;\\n        bool disputed;\\n        DataTypes.Invoice invoice;\\n        DataTypes.OrderState state;\\n    }\\n\\n    struct RoundOutput {\\n        uint256 roundId;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 appealFeeRewards;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 maxVotes;\\n        uint256 penalties;\\n        uint256 winningChoice;\\n        uint256 totalRepartitions;\\n        uint256 totalVoted;\\n        uint256 totalCommited;\\n        uint256[11] counts;\\n        uint256[] evidenceSubmitters;\\n        uint256 appealedBy;\\n        DataTypes.Vote[] votes;\\n        DataTypes.Evidence[] evidences;\\n        address[] drawnJurors;\\n        address[] judgesClaimed;\\n        bool closed;\\n    }\\n\\n    struct DisputeOutput {\\n        uint256 createdAt;\\n        uint256 disputeId;\\n        uint256 orderId;\\n        uint256 ruling;\\n        uint256 ruledAt;\\n        uint256[] timestamps;\\n        DataTypes.DisputeState state;\\n        RoundOutput[] rounds;\\n    }\\n\\n    struct PopulatedGig {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        DataTypes.Review[] reviews;\\n        DataTypes.Package[] packages;\\n    }\\n\\n    struct CalcDisputeDelaysFromBlock {\\n        uint256 evidenceUntil;\\n        uint256 commitUntil;\\n        uint256 voteUntil;\\n        uint256 appealUntil;\\n    }\\n\\n    struct PopulatedUser {\\n        uint256 userId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 bswanBalance;\\n        uint256 usdcBalance;\\n        uint256 xpBalance;\\n        uint256[] gigIds;\\n        address wallet;\\n        bool isBuyer;\\n        bool isSeller;\\n        bool isJudge;\\n        UserOutput[] inviters;\\n    }\\n\\n    struct ExecuteClaimAsJudgeOutput {\\n        bool isVoteCorrect;\\n        bool isVoteInRange;\\n        uint256 amountFromDisputeFees;\\n        uint256 amountFromJurorsTokensAtStake;\\n        uint256 tokensAtStakePerJuror;\\n    }\\n}\\n\",\"keccak256\":\"0x0c0945bb78e9789cffdcd04fc3518ee653b826dbb948ffeaf6026f94309ac295\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063715018a611610104578063b87ff37f116100a2578063daea85c511610071578063daea85c5146103d7578063e5b5019a146103ea578063ecccd078146103f2578063f2fde38b14610407576101da565b8063b87ff37f1461038b578063cfd8d6c01461039e578063d6c912be146103b1578063dac21a0c146103c4576101da565b80638da5cb5b116100de5780638da5cb5b1461034a578063985fadc814610352578063b470778314610365578063b817bcf714610378576101da565b8063715018a61461031c57806379a558e7146103245780637e69b7b014610337576101da565b806318f385181161017c57806341c0e1b51161014b57806341c0e1b5146102c157806343511e7f146102c95780634516b756146102e957806349c8ba9114610309576101da565b806318f385181461027557806319872f76146102885780632b495ff51461029b57806331ce2048146102ae576101da565b806310987b77116101b857806310987b771461023257806311e0c07b1461023a578063171a9bb21461025a5780631848effa1461026d576101da565b8063038fb573146101df5780630542975c146101f45780630f25135814610212575b600080fd5b6101f26101ed36600461371e565b61041a565b005b6101fc6105df565b6040516102099190613d60565b60405180910390f35b6102256102203660046131bf565b6105ee565b6040516102099190613e2c565b61022561068c565b61024d6102483660046137d9565b61069f565b6040516102099190613e21565b6101f26102683660046131bf565b61072a565b6101fc610aa8565b61024d610283366004613132565b610ab7565b6101fc6102963660046131bf565b610b3f565b6101f26102a93660046137b8565b610bc9565b6102256102bc3660046138bc565b610d6a565b6101f2610ea1565b6102dc6102d73660046130fa565b610ed7565b6040516102099190613fe2565b6102fc6102f73660046131bf565b610f50565b6040516102099190613ff0565b6101f26103173660046137b8565b611075565b6101f2611248565b61024d6103323660046130fa565b61125c565b6101f26103453660046131bf565b611312565b6101fc611613565b61024d6103603660046131d7565b611622565b6101f2610373366004613774565b6116c3565b61024d6103863660046130fa565b611a3a565b6101f2610399366004613806565b611af1565b6101f26103ac3660046130fa565b611c19565b6101f26103bf3660046131bf565b611d03565b6101f26103d2366004613849565b611ec3565b6101f26103e53660046130fa565b611fed565b6102256120bd565b6103fa6120c3565b6040516102099190613dc1565b6101f26104153660046130fa565b61218e565b600061042c632aa9a2a960e11b610b3f565b905061043d83836000015183610ab7565b60405180604001604052806002815260200161066760f31b8152509061047f5760405162461bcd60e51b81526004016104769190613e4c565b60405180910390fd5b5060405163115e1e5f60e01b815260009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063115e1e5f906104bd9088906002906004016140b6565b60206040518083038186803b1580156104d557600080fd5b505af41580156104e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050d91906133ac565b9050600073__$499c06b2b29ab2ab1aba66b7d414a45a21$__63101ee79183866040518363ffffffff1660e01b815260040161054a929190614036565b60206040518083038186803b15801561056257600080fd5b505af4158015610576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059a91906131a5565b90508060405180604001604052806002815260200161333160f01b815250906105d65760405162461bcd60e51b81526004016104769190613e4c565b50505050505050565b6004546001600160a01b031690565b60006106016427a92222a960d91b610b3f565b6001600160a01b03166342b50a7a836040518263ffffffff1660e01b815260040161062c9190613e2c565b60006040518083038186803b15801561064457600080fd5b505afa158015610658573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610680919081019061343e565b61012001515192915050565b60008061069960006121c8565b91505090565b60405163fbd2817f60e01b81526000906001600160a01b0383169063fbd2817f906106d090879087906004016140b6565b60206040518083038186803b1580156106e857600080fd5b505afa1580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072091906131a5565b90505b9392505050565b600061074d74282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610b3f565b6001600160a01b0316631cb647056040518163ffffffff1660e01b815260040160a06040518083038186803b15801561078557600080fd5b505afa158015610799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bd9190613206565b9050600073__$499c06b2b29ab2ab1aba66b7d414a45a21$__63115e1e5f8460026040518363ffffffff1660e01b81526004016107fb9291906140b6565b60206040518083038186803b15801561081357600080fd5b505af4158015610827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084b91906133ac565b600581015490915060ff16600481600481111561087857634e487b7160e01b600052602160045260246000fd5b1415604051806040016040528060028152602001611a1b60f11b815250906108b35760405162461bcd60e51b81526004016104769190613e4c565b5060008160048111156108d657634e487b7160e01b600052602160045260246000fd5b141561094a57604051635f8fdbc560e01b815273__$499c06b2b29ab2ab1aba66b7d414a45a21$__90635f8fdbc5906109159085908790600401614022565b60006040518083038186803b15801561092d57600080fd5b505af4158015610941573d6000803e3d6000fd5b50505050610aa2565b600181600481111561096c57634e487b7160e01b600052602160045260246000fd5b14156109ae576060830151604051634f1c8c7360e11b815273__$499c06b2b29ab2ab1aba66b7d414a45a21$__91639e3918e6916109159186916004016140b6565b60028160048111156109d057634e487b7160e01b600052602160045260246000fd5b1415610a1257608083015160405163261c660160e21b815273__$499c06b2b29ab2ab1aba66b7d414a45a21$__916398719804916109159186916004016140b6565b6003816004811115610a3457634e487b7160e01b600052602160045260246000fd5b1415610aa257604051636a7809e560e01b815273__$499c06b2b29ab2ab1aba66b7d414a45a21$__90636a7809e590610a71908590600401613e2c565b60006040518083038186803b158015610a8957600080fd5b505af4158015610a9d573d6000803e3d6000fd5b505050505b50505050565b6004546001600160a01b031681565b600082826001600160a01b031663dff3b497866040518263ffffffff1660e01b8152600401610ae69190613d60565b60206040518083038186803b158015610afe57600080fd5b505afa158015610b12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3691906133ac565b14949350505050565b60048054604051630cc397bb60e11b81526000926001600160a01b03909216916319872f7691610b7191869101613e2c565b60206040518083038186803b158015610b8957600080fd5b505afa158015610b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc19190613116565b90505b919050565b6000610bd36121d3565b9050600073__$499c06b2b29ab2ab1aba66b7d414a45a21$__63115e1e5f8560026040518363ffffffff1660e01b8152600401610c119291906140b6565b60206040518083038186803b158015610c2957600080fd5b505af4158015610c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6191906133ac565b604051636ad1160f60e11b815290915060009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063d5a22c1e90610ca290859087908990600401614003565b60a06040518083038186803b158015610cba57600080fd5b505af4158015610cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf291906133c4565b805190915015610d1957610d14838260800151836040015184606001516121d7565b610d63565b806020015115610d3157610d148382608001516122db565b6040805180820182526002815261036360f41b6020820152905162461bcd60e51b81526104769190600401613e4c565b505b5050505050565b60006427a92222a960d91b610d7e81610b3f565b6001600160a01b0316610d8f6121d3565b6001600160a01b03161460405180604001604052806002815260200161199b60f11b81525090610dd25760405162461bcd60e51b81526004016104769190613e4c565b506000610ddd61068c565b90506000610e0274282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610b3f565b90506000816001600160a01b03166382db8b076040518163ffffffff1660e01b815260040160806040518083038186803b158015610e3f57600080fd5b505afa158015610e53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e779190613348565b9050610e88838b8b8b8b878761234c565b610e9383888861041a565b509098975050505050505050565b6004546001600160a01b03163314610ec957634e487b7160e01b600052600160045260246000fd5b6004546001600160a01b0316ff5b610edf6129c7565b816001600160a01b0316631cb647056040518163ffffffff1660e01b815260040160a06040518083038186803b158015610f1857600080fd5b505afa158015610f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc19190613206565b610f586129f6565b60405163115e1e5f60e01b815260009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063115e1e5f90610f959086906002906004016140b6565b60206040518083038186803b158015610fad57600080fd5b505af4158015610fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe591906133ac565b60405163a191f9b360e01b815290915073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063a191f9b39061102190849087906004016140b6565b60006040518083038186803b15801561103957600080fd5b505af415801561104d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107239190810190613274565b600061107f6121d3565b9050600073__$499c06b2b29ab2ab1aba66b7d414a45a21$__63115e1e5f8560026040518363ffffffff1660e01b81526004016110bd9291906140b6565b60206040518083038186803b1580156110d557600080fd5b505af41580156110e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110d91906133ac565b90506000611121632aa9a2a960e11b610b3f565b6001600160a01b031663dff3b497846040518263ffffffff1660e01b815260040161114c9190613d60565b60206040518083038186803b15801561116457600080fd5b505afa158015611178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119c91906133ac565b60405163381bdf9d60e21b815290915060009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063e06f7e74906111dd90869086908a90600401614148565b60206040518083038186803b1580156111f557600080fd5b505af4158015611209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122d91906133ac565b9050610d6181856112436211105560ea1b610b3f565b612517565b611250612530565b61125a600061256f565b565b600061127064212aaca2a960d91b83611622565b8015610bc1575042611288632aa9a2a960e11b610b3f565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b81526004016112b39190613d60565b60006040518083038186803b1580156112cb57600080fd5b505afa1580156112df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611307919081019061355e565b604001511192915050565b600061131c6121d3565b90506000611330632aa9a2a960e11b610b3f565b90506000816001600160a01b031663dff3b497846040518263ffffffff1660e01b81526004016113609190613d60565b60206040518083038186803b15801561137857600080fd5b505afa15801561138c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b091906133ac565b905060006113d574282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610b3f565b6001600160a01b03166382db8b076040518163ffffffff1660e01b815260040160806040518083038186803b15801561140d57600080fd5b505afa158015611421573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114459190613348565b9050600073__$499c06b2b29ab2ab1aba66b7d414a45a21$__63115e1e5f8760026040518363ffffffff1660e01b81526004016114839291906140b6565b60206040518083038186803b15801561149b57600080fd5b505af41580156114af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d391906133ac565b6040808401519051632966b8e960e21b815291925060009173__$499c06b2b29ab2ab1aba66b7d414a45a21$__9163a59ae3a4916115159186916004016140b6565b60206040518083038186803b15801561152d57600080fd5b505af4158015611541573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156591906133ac565b9050600061157a826115756121d3565b6125c1565b60405163392a44a560e11b815290915073__$499c06b2b29ab2ab1aba66b7d414a45a21$__90637254894a906115b890869085908a90600401614148565b60206040518083038186803b1580156115d057600080fd5b505af41580156115e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160891906131a5565b505050505050505050565b6003546001600160a01b031690565b60008061163c6a20a1a62fa6a0a720a3a2a960a91b610b3f565b6001600160a01b03166391d1485485856040518363ffffffff1660e01b8152600401611669929190613e35565b60206040518083038186803b15801561168157600080fd5b505afa158015611695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b991906131a5565b9150505b92915050565b60006116cd6121d3565b9050600073__$499c06b2b29ab2ab1aba66b7d414a45a21$__63115e1e5f8560026040518363ffffffff1660e01b815260040161170b9291906140b6565b60206040518083038186803b15801561172357600080fd5b505af4158015611737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175b91906133ac565b9050600061178074282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610b3f565b6001600160a01b0316631cb647056040518163ffffffff1660e01b815260040160a06040518083038186803b1580156117b857600080fd5b505afa1580156117cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f09190613206565b9050600061181574282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610b3f565b6001600160a01b03166382db8b076040518163ffffffff1660e01b815260040160806040518083038186803b15801561184d57600080fd5b505afa158015611861573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118859190613348565b600684015490915060009061189b90600161427b565b90508373__$499c06b2b29ab2ab1aba66b7d414a45a21$__63425791c490916040518060a00160405280876020015181526020018587606001516118df9190614293565b815260200161190c86886060015189604001516118fc9190614293565b6119069190614293565b8b6125c1565b81528651602088810151604051633e8973e560e01b8152919093019273__$d4e29236ef5669bc8e4309ccc6f37ccd7f$__92633e8973e59261195192906004016140b6565b60206040518083038186803b15801561196957600080fd5b505af415801561197d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a191906133ac565b81526020016119be8688606001516119b99190614293565b61273b565b8152506040518363ffffffff1660e01b81526004016119de92919061406c565b60206040518083038186803b1580156119f657600080fd5b505af4158015611a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2e91906131a5565b506105d687868861041a565b6000611a4f6529a2a62622a960d11b83611622565b8015610bc1575042611a67632aa9a2a960e11b610b3f565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b8152600401611a929190613d60565b60006040518083038186803b158015611aaa57600080fd5b505afa158015611abe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ae6919081019061355e565b608001511192915050565b6000611afb6121d3565b9050600073__$499c06b2b29ab2ab1aba66b7d414a45a21$__63115e1e5f8660026040518363ffffffff1660e01b8152600401611b399291906140b6565b60206040518083038186803b158015611b5157600080fd5b505af4158015611b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8991906133ac565b60405163369de64f60e01b815290915073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063369de64f90611bc99084908890889088906004016140c4565b60206040518083038186803b158015611be157600080fd5b505af4158015611bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6191906131a5565b6001600160a01b0381161580611c3957506004546001600160a01b031633145b80611cc55750336001600160a01b0316306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8257600080fd5b505afa158015611c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cba9190613116565b6001600160a01b0316145b611ce15760405162461bcd60e51b815260040161047690613ea5565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60405163115e1e5f60e01b815260009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063115e1e5f90611d409085906002906004016140b6565b60206040518083038186803b158015611d5857600080fd5b505af4158015611d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9091906133ac565b90506000806000808473__$499c06b2b29ab2ab1aba66b7d414a45a21$__63ebc3655d90916040518263ffffffff1660e01b8152600401611dd19190613e2c565b60806040518083038186803b158015611de957600080fd5b505af4158015611dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e219190613926565b93509350935093506000611e3c6427a92222a960d91b610b3f565b60405163641a8c4160e11b81529091506001600160a01b0382169063c835188290611e719088908890889088906004016141ed565b602060405180830381600087803b158015611e8b57600080fd5b505af1158015611e9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9d91906131a5565b6000611ecd6121d3565b9050600073__$499c06b2b29ab2ab1aba66b7d414a45a21$__63115e1e5f8760026040518363ffffffff1660e01b8152600401611f0b9291906140b6565b60206040518083038186803b158015611f2357600080fd5b505af4158015611f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5b91906133ac565b6040516390bc2a9160e01b815290915073__$499c06b2b29ab2ab1aba66b7d414a45a21$__906390bc2a9190611f9d90849089908990899089906004016140fc565b60206040518083038186803b158015611fb557600080fd5b505af4158015611fc9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d691906131a5565b6d282927aa27a1a7a62fa0a226a4a760911b61200b816103606121d3565b6120275760405162461bcd60e51b815260040161047690613fab565b60006120386211105560ea1b610b3f565b60055460405163095ea7b360e01b81529192506001600160a01b0385169163095ea7b39161206b91859190600401613d74565b602060405180830381600087803b15801561208557600080fd5b505af1158015612099573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa291906131a5565b60055481565b606060006120cf61068c565b90506000816001600160401b038111156120f957634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561213257816020015b61211f6129f6565b8152602001906001900390816121175790505b50905060005b828110156121875761214981610f50565b82828151811061216957634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061217f906142de565b915050612138565b5091505090565b612196612530565b6001600160a01b0381166121bc5760405162461bcd60e51b815260040161047690613e5f565b6121c58161256f565b50565b6000610bc182612839565b3390565b60006121e9634a55525960e01b610b3f565b905060006121fc6211105560ea1b610b3f565b60405163225bcbd160e11b81529091506001600160a01b038316906344b797a29061222d9088908a90600401613e35565b600060405180830381600087803b15801561224757600080fd5b505af115801561225b573d6000803e3d6000fd5b5050505061226a848383612517565b6001600160a01b03821663fd9c6009612283858761427b565b886040518363ffffffff1660e01b81526004016122a1929190613e35565b600060405180830381600087803b1580156122bb57600080fd5b505af11580156122cf573d6000803e3d6000fd5b50505050505050505050565b60006122ed634a55525960e01b610b3f565b60405163225bcbd160e11b81529091506001600160a01b038216906344b797a29061231e9085908790600401613e35565b600060405180830381600087803b15801561233857600080fd5b505af11580156105d6573d6000803e3d6000fd5b600073__$499c06b2b29ab2ab1aba66b7d414a45a21$__639d403dc5600060026040518061012001604052808d81526020018c81526020018b81526020018a8152602001876060015181526020016123b1886060015189604001516119069190614293565b81528751602089810151604051633e8973e560e01b8152919093019273__$d4e29236ef5669bc8e4309ccc6f37ccd7f$__92633e8973e5926123f692906004016140b6565b60206040518083038186803b15801561240e57600080fd5b505af4158015612422573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244691906133ac565b815260200161245489610ed7565b60200151815260200161246a886060015161273b565b8152506040518463ffffffff1660e01b815260040161248b9392919061415e565b60206040518083038186803b1580156124a357600080fd5b505af41580156124b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124db91906131a5565b90508060405180604001604052806002815260200161191b60f11b815250906116085760405162461bcd60e51b81526004016104769190613e4c565b61252b6001600160a01b038216838561283d565b505050565b6125386121d3565b6001600160a01b0316612549611613565b6001600160a01b03161461125a5760405162461bcd60e51b815260040161047690613f47565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806125d36211105560ea1b610b3f565b9050612653848430846001600160a01b031663e5a6b10f6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561261657600080fd5b505af115801561262a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264e9190613116565b6128a0565b604051632e872bb360e01b81526001600160a01b03821690632e872bb39061267f908790600401613e2c565b60206040518083038186803b15801561269757600080fd5b505afa1580156126ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126cf91906133ac565b60405163a59ac6dd60e01b81529092506001600160a01b0382169063a59ac6dd9061270290309088908790600401613d8d565b600060405180830381600087803b15801561271c57600080fd5b505af1158015612730573d6000803e3d6000fd5b505050505092915050565b6060600061274f634a55525960e01b610b3f565b604051631586d81560e31b81529091506001600160a01b0382169063ac36c0a89061277e908690600401613e2c565b60006040518083038186803b15801561279657600080fd5b505afa1580156127aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127d29190810190613173565b604051630589489560e21b81529092506001600160a01b03821690631625225490612801908590600401613dae565b600060405180830381600087803b15801561281b57600080fd5b505af115801561282f573d6000803e3d6000fd5b5050505050919050565b5490565b60405163a9059cbb60e01b8082526001600160a01b0384166004830152602482018390529060008060448382895af161287a573d6000803e3d6000fd5b50612884846128b5565b610aa25760405162461bcd60e51b815260040161047690613f7c565b610aa26001600160a01b03821684848761295c565b60006128d9565b62461bcd60e51b6000526020600452806024528160445260646000fd5b3d80156129185760208114612949576129137f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f6128bc565b612956565b823b612940576129407311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b60146128bc565b60019150612956565b3d6000803e600051151591505b50919050565b6040516323b872dd60e01b8082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af16129a1573d6000803e3d6000fd5b506129ab856128b5565b610d635760405162461bcd60e51b815260040161047690613f10565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016060815260200160006004811115612a4d57634e487b7160e01b600052602160045260246000fd5b8152602001606081525090565b8051610bc481614325565b600082601f830112612a75578081fd5b81516020612a8a612a8583614231565b614208565b8281528181019085830183850287018401881015612aa6578586fd5b855b85811015612acd578151612abb81614325565b84529284019290840190600101612aa8565b5090979650505050505050565b600082601f830112612aea578081fd5b81516020612afa612a8583614231565b82815281810190858301855b85811015612acd5781518801606080601f19838d03011215612b26578889fd5b604080518281016001600160401b038282108183111715612b4957612b4961430f565b818452858b0151835285840151838c0152938501519380851115612b6b578c8dfd5b5050612b7b8d8a85870101612fc0565b91810191909152865250509284019290840190600101612b06565b600082601f830112612ba6578081fd5b81516020612bb6612a8583614231565b82815281810190858301855b85811015612acd57815188016103c080601f19838d03011215612be3578889fd5b612bee610280614208565b87830151815260408084015189830152606080850151828401526080915081850151818401525060a0808501518284015260c0915081850151818401525060e08085015182840152610100915081850151818401525061012080850151828401526101409150818501518184015250610160808501518284015261018091508185015181840152506101a0612c858e828701612e76565b8284015261030085015191506001600160401b0380831115612ca5578c8dfd5b612cb38f8c85890101612eec565b828501526103208601516101c0850152610340860151925080831115612cd7578c8dfd5b612ce58f8c85890101612d8b565b6101e0850152610360860151925080831115612cff578c8dfd5b612d0d8f8c85890101612ada565b610200850152610380860151925080831115612d27578c8dfd5b612d358f8c85890101612a65565b6102208501526103a0860151925080831115612d4f578c8dfd5b5050612d5f8d8a83870101612a65565b61024083015250612d71828401612f46565b610260820152865250509284019290840190600101612bc2565b600082601f830112612d9b578081fd5b81516020612dab612a8583614231565b82815281810190858301855b85811015612acd578151880160c080601f19838d03011215612dd7578889fd5b604080518281016001600160401b038282108183111715612dfa57612dfa61430f565b818452612e088b8701612a5a565b8352838601518b8401526060860151848401526080860151606084015260a0935083860151915080821115612e3b578c8dfd5b50612e4a8e8b83880101612fc0565b608083015250612e5b838501612f46565b91810191909152865250509284019290840190600101612db7565b600082601f830112612e86578081fd5b6040516101608082018281106001600160401b0382111715612eaa57612eaa61430f565b6040528184828101871015612ebd578485fd5b8492505b600b831015612ee157805182526001929092019160209182019101612ec1565b509195945050505050565b600082601f830112612efc578081fd5b81516020612f0c612a8583614231565b8281528181019085830183850287018401881015612f28578586fd5b855b85811015612acd57815184529284019290840190600101612f2a565b80518015158114610bc457600080fd5b805160058110610bc457600080fd5b805160048110610bc457600080fd5b600082601f830112612f84578081fd5b8135612f92612a8582614254565b818152846020838601011115612fa6578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112612fd0578081fd5b8151612fde612a8582614254565b818152846020838601011115612ff2578283fd5b6130038260208301602087016142b2565b949350505050565b60006060828403121561301c578081fd5b604051606081016001600160401b03828210818311171561303f5761303f61430f565b816040528293508435835260208501356020840152604085013591508082111561306857600080fd5b5061307585828601612f74565b6040830152505092915050565b600060a08284031215613093578081fd5b60405160a081018181106001600160401b03821117156130b5576130b561430f565b80604052508091508251815260208301516020820152604083015160408201526060830151606082015260808301516130ed81614325565b6080919091015292915050565b60006020828403121561310b578081fd5b813561072381614325565b600060208284031215613127578081fd5b815161072381614325565b600080600060608486031215613146578182fd5b833561315181614325565b925060208401359150604084013561316881614325565b809150509250925092565b600060208284031215613184578081fd5b81516001600160401b03811115613199578182fd5b61300384828501612a65565b6000602082840312156131b6578081fd5b61072382612f46565b6000602082840312156131d0578081fd5b5035919050565b600080604083850312156131e9578182fd5b8235915060208301356131fb81614325565b809150509250929050565b600060a08284031215613217578081fd5b60405160a081018181106001600160401b03821117156132395761323961430f565b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b600060208284031215613285578081fd5b81516001600160401b038082111561329b578283fd5b81840191506101008083870312156132b1578384fd5b6132ba81614208565b9050825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a0830151828111156132f9578485fd5b61330587828601612eec565b60a08301525061331760c08401612f56565b60c082015260e08301518281111561332d578485fd5b61333987828601612b96565b60e08301525095945050505050565b600060808284031215613359578081fd5b604051608081018181106001600160401b038211171561337b5761337b61430f565b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b6000602082840312156133bd578081fd5b5051919050565b600060a082840312156133d5578081fd5b60405160a081018181106001600160401b03821117156133f7576133f761430f565b60405261340383612f46565b815261341160208401612f46565b60208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b60006020828403121561344f578081fd5b81516001600160401b0380821115613465578283fd5b908301906101e08286031215613479578283fd5b613484610160614208565b825182811115613492578485fd5b61349e87828601612fc0565b8252506020830151828111156134b2578485fd5b6134be87828601612fc0565b60208301525060408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015182811115613507578485fd5b61351387828601612eec565b60e0830152506101009150613529828401612f46565b82820152610120915061353e86838501613082565b8282015261354f6101c08401612f65565b61014082015295945050505050565b60006020828403121561356f578081fd5b81516001600160401b0380821115613585578283fd5b81840191506101e080838703121561359b578384fd5b6135a481614208565b90508251828111156135b4578485fd5b6135c087828601612fc0565b8252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015261360b60e08401612a5a565b60e08201526101008084015183811115613623578586fd5b61362f88828701612eec565b8284015250506101208084015183811115613648578586fd5b61365488828701612eec565b828401525050610140808401518381111561366d578586fd5b61367988828701612eec565b8284015250506101608084015183811115613692578586fd5b61369e88828701612eec565b82840152505061018080840151838111156136b7578586fd5b6136c388828701612eec565b8284015250506101a080840151838111156136dc578586fd5b6136e888828701612eec565b8284015250506101c08084015183811115613701578586fd5b61370d88828701612eec565b918301919091525095945050505050565b600080600060608486031215613732578081fd5b83359250602084013561374481614325565b915060408401356001600160401b0381111561375e578182fd5b61376a8682870161300b565b9150509250925092565b60008060408385031215613786578182fd5b8235915060208301356001600160401b038111156137a2578182fd5b6137ae8582860161300b565b9150509250929050565b600080604083850312156137ca578182fd5b50508035926020909101359150565b6000806000606084860312156137ed578081fd5b8335925060208401359150604084013561316881614325565b60008060006060848603121561381a578081fd5b833592506020840135915060408401356001600160401b0381111561383d578182fd5b61376a86828701612f74565b6000806000806080858703121561385e578182fd5b843593506020850135925060408501356001600160401b0380821115613882578384fd5b61388e88838901612f74565b935060608701359150808211156138a3578283fd5b506138b087828801612f74565b91505092959194509250565b600080600080600060a086880312156138d3578283fd5b85359450602086013593506040860135925060608601356138f381614325565b915060808601356001600160401b0381111561390d578182fd5b6139198882890161300b565b9150509295509295909350565b6000806000806080858703121561393b578182fd5b505082516020840151604085015160609095015191969095509092509050565b6000815180845260208085019450808401835b838110156139935781516001600160a01b03168752958201959082019060010161396e565b509495945050505050565b6000815180845260208085019450848183028601828601855b85811015612acd57838303895281518051845285810151868501526040908101516060918501829052906139ed81860183613c71565b9a87019a94505050908401906001016139b7565b6000815180845260208085018081965082840281019150828601855b85811015613b7b578284038952815180518552858101518686015260408082015190860152606080820151908601526080808201519086015260a0808201519086015260c0808201519086015260e080820151908601526101008082015190860152610120808201519086015261014080820151908601526101608082015190860152610180808201516103c09190613ab882890182613c19565b50506101a0820151816102e0880152613ad382880182613c3c565b9150506101c08201516103008701526101e0820151868203610320880152613afb8282613b88565b915050610200820151868203610340880152613b17828261399e565b915050610220820151868203610360880152613b33828261395b565b915050610240820151868203610380880152613b4f828261395b565b9150506102608201519150613b686103a0870183613c6b565b9986019994505090840190600101613a1d565b5091979650505050505050565b6000815180845260208085019450848183028601828601855b85811015612acd578383038952815180516001600160a01b031684528581015186850152604080820151908501526060808201519085015260808082015160c08287018190529190613bf583880182613c71565b60a09485015115159790940196909652505098850198925090840190600101613ba1565b8060005b600b811015610aa2578151845260209384019390910190600101613c1d565b6000815180845260208085019450808401835b8381101561399357815187529582019590820190600101613c4f565b15159052565b60008151808452613c898160208601602086016142b2565b601f01601f19169290920160200192915050565b80518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b6000610100825184526020830151602085015260408301516040850152606083015160608501526080830151608085015260a08301518160a0860152613d1582860182613c3c565b91505060c083015160058110613d3957634e487b7160e01b83526021600452602483fd5b8060c08601525060e083015184820360e0860152613d578282613a01565b95945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b600060208252610723602083018461395b565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015613e1457603f19888603018452613e02858351613ccd565b94509285019290850190600101613de6565b5092979650505050505050565b901515815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6000602082526107236020830184613c71565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526045908201527f43616e206f6e6c792062652063616c6c6564206966206164647265737365735060408201527f726f766964657220697320656d7074792c206d73672e73656e646572206f722060608201526437bbb732b960d91b608082015260a00190565b60208082526019908201527f475076323a206661696c6564207472616e7366657246726f6d00000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526015908201527423a83b191d103330b4b632b2103a3930b739b332b960591b604082015260600190565b6020808252601c908201527f5265717569726573206d73672e73656e6465722068617320726f6c6500000000604082015260600190565b60a081016116bd8284613c9d565b6000602082526107236020830184613ccd565b9283526001600160a01b03919091166020830152604082015260600190565b82815260c081016107236020830184613c9d565b6000838252604060208301528251604083015260208301516060830152604083015160606080840152613d5760a0840182613c71565b600083825260406020830152825160408301526020830151606083015260408301516080830152606083015160a0830152608083015160a060c0840152613d5760e084018261395b565b918252602082015260400190565b6000858252846020830152608060408301526140e36080830185613c71565b905060018060a01b038316606083015295945050505050565b600086825285602083015260a0604083015261411b60a0830186613c71565b828103606084015261412d8186613c71565b91505060018060a01b03831660808301529695505050505050565b9283526020830191909152604082015260600190565b6000848252836020830152606060408301528251606083015260208301516080830152604083015160a0830152606083015160c0830152608083015160e083015260a0830151610100818185015260c08501519150610120828186015260e08601516101408601528186015192508061016086015250506141e361018084018261395b565b9695505050505050565b93845260208401929092526040830152606082015260800190565b6040518181016001600160401b03811182821017156142295761422961430f565b604052919050565b60006001600160401b0382111561424a5761424a61430f565b5060209081020190565b60006001600160401b0382111561426d5761426d61430f565b50601f01601f191660200190565b6000821982111561428e5761428e6142f9565b500190565b60008160001904831182151516156142ad576142ad6142f9565b500290565b60005b838110156142cd5781810151838201526020016142b5565b83811115610aa25750506000910152565b60006000198214156142f2576142f26142f9565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146121c557600080fdfea264697066735822122064a2440d296f1788d43a6ffe92a2b0771e4d5a4010fca628a36d77eeb67fb5d864736f6c63430008000033",
  "libraries": {
    "DisputeLogic": "0x5bfD2cB87429f3187072A243fB76B6C97A00E495",
    "DisputeDataLogic": "0x19eF137F58a21bda3aa9a259cCf37cd6A0859CA6",
    "RoundLogic": "0x6418479cc723c4121c86E0ECC459a73547C932e1",
    "InviterLogic": "0x85F0Fe200F946f76fc92AD911b4D21c196D8b71B",
    "SortitionSumTreeFactory": "0x98a5eA2D890197043Ab890082ABDf3402c50E0d9",
    "JuryLogic": "0x24c03e89796af2d6c021d475cAe56916dF15852C"
  },
  "devdoc": {
    "author": "Blockswan",
    "details": "To be covered by a proxy contract, owned by the addressProvider of the specific marketplaceAll admin functions are callable by the protocolConfigurator contract defined also in the   addressProvider*",
    "kind": "dev",
    "methods": {
      "ADDRESSES_PROVIDER()": {
        "returns": {
          "_0": "The address of the AddressProvider"
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "provider": "The address of the AddressProvider"
        }
      },
      "fetchContract(bytes32)": {
        "params": {
          "_name": "the bytes32 name of the contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setProvider(address)": {
        "params": {
          "_providerAddress": "The address of the AddressProvider"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Dispute contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ADDRESSES_PROVIDER()": {
        "notice": "Returns the contract address of the IAddressProvider"
      },
      "fetchContract(bytes32)": {
        "notice": "fetch the contract address from the ADDRESSS_PROVIDERthrows error if address === 0"
      },
      "kill()": {
        "notice": "kill the current address provider, only callable by the AddressProvider"
      },
      "setProvider(address)": {
        "notice": "set the provider address of the ProviderContract"
      }
    },
    "notice": "Dispute data within an Blockswan protocol's marketplace - Users can:   # raise a dispute via the Dispute contract   # send evidence to a dispute   # commit a vote on a dispute   # vote on a dispute   # appeal to a dispute resolution  # execute a ruling on a dispute",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9932,
        "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
        "label": "_disputeIds",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(UintSet)3606_storage"
      },
      {
        "astId": 9937,
        "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
        "label": "_disputes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Dispute)18252_storage)"
      },
      {
        "astId": 4823,
        "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8024,
        "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
        "label": "ADDRESS_PROVIDER",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IAddressProvider)5328"
      },
      {
        "astId": 8031,
        "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
        "label": "MAX_UINT",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Evidence)18167_storage)dyn_storage": {
        "base": "t_struct(Evidence)18167_storage",
        "encoding": "dynamic_array",
        "label": "struct DataTypes.Evidence[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Round)18233_storage)dyn_storage": {
        "base": "t_struct(Round)18233_storage",
        "encoding": "dynamic_array",
        "label": "struct DataTypes.Round[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Vote)18180_storage)dyn_storage": {
        "base": "t_struct(Vote)18180_storage",
        "encoding": "dynamic_array",
        "label": "struct DataTypes.Vote[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)11_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[11]",
        "numberOfBytes": "352"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressProvider)5328": {
        "encoding": "inplace",
        "label": "contract IAddressProvider",
        "numberOfBytes": "20"
      },
      "t_enum(DisputeState)18050": {
        "encoding": "inplace",
        "label": "enum DataTypes.DisputeState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Dispute)18252_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.Dispute)",
        "numberOfBytes": "32",
        "value": "t_struct(Dispute)18252_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3449_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3448,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3134_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Dispute)18252_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Dispute",
        "members": [
          {
            "astId": 18235,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "createdAt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18237,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "orderId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18239,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "ruling",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 18241,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "ruledAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18244,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "timestamps",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 18247,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "state",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(DisputeState)18050"
          },
          {
            "astId": 18251,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "rounds",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_struct(Round)18233_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Evidence)18167_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Evidence",
        "members": [
          {
            "astId": 18162,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "userId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18164,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "role",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 18166,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "metadata",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Round)18233_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Round",
        "members": [
          {
            "astId": 18187,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "procecutorId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18189,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "defendantId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18191,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "appealFeeRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 18193,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "maxVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18195,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "tokensAtStakePerJuror",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 18197,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "totalFeesForJurors",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 18199,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "penalties",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 18201,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "winningChoice",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 18203,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "totalRepartitions",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 18205,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "totalVoted",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 18207,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "totalCommited",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 18209,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "appealedBy",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 18213,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "counts",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_uint256)11_storage"
          },
          {
            "astId": 18216,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "evidenceSubmitters",
            "offset": 0,
            "slot": "23",
            "type": "t_struct(UintSet)3606_storage"
          },
          {
            "astId": 18219,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "judgesClaimed",
            "offset": 0,
            "slot": "25",
            "type": "t_struct(AddressSet)3449_storage"
          },
          {
            "astId": 18223,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "votes",
            "offset": 0,
            "slot": "27",
            "type": "t_array(t_struct(Vote)18180_storage)dyn_storage"
          },
          {
            "astId": 18227,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "evidences",
            "offset": 0,
            "slot": "28",
            "type": "t_array(t_struct(Evidence)18167_storage)dyn_storage"
          },
          {
            "astId": 18230,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "drawnJurors",
            "offset": 0,
            "slot": "29",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 18232,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "closed",
            "offset": 0,
            "slot": "30",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "992"
      },
      "t_struct(Set)3134_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3129,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3133,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)3606_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 3605,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3134_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Vote)18180_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Vote",
        "members": [
          {
            "astId": 18169,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 18171,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "commit",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 18173,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "choice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 18175,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "weight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18177,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "justification",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 18179,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "hasVoted",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}