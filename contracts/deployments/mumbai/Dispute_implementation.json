{
  "address": "0xAe4B26bd6e3A6FE74C280a13C6B841f2774E13D0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "provider",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "appeal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "claimAppealFeeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "claimAsJudge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "claimRuling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "salt",
          "type": "string"
        }
      ],
      "name": "commitVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "procecutorId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defendantId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "userId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct DataTypes.Evidence",
          "name": "evidence",
          "type": "tuple"
        }
      ],
      "name": "createDispute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "name": "fetchContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProtocolConfigurator",
          "name": "protocolConfigurator",
          "type": "address"
        }
      ],
      "name": "getDelayTimestamp",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "selfRefund",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "evidence",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "appeal",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.DelayTimestamp",
          "name": "delayTimestamp",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "getDisputeById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "disputeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ruling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ruledAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "timestamps",
              "type": "uint256[]"
            },
            {
              "internalType": "enum DataTypes.DisputeState",
              "name": "state",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "roundId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "procecutorId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "defendantId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "appealFeeRewards",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokensAtStakePerJuror",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalFeesForJurors",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "penalties",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "winningChoice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalRepartitions",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalVoted",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalCommited",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256[11]",
                  "name": "counts",
                  "type": "uint256[11]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "evidenceSubmitters",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "appealedBy",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "account",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "commit",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "choice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "weight",
                      "type": "uint256"
                    },
                    {
                      "internalType": "string",
                      "name": "justification",
                      "type": "string"
                    },
                    {
                      "internalType": "bool",
                      "name": "hasVoted",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct DataTypes.Vote[]",
                  "name": "votes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "userId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "role",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "string",
                      "name": "metadata",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct DataTypes.Evidence[]",
                  "name": "evidences",
                  "type": "tuple[]"
                },
                {
                  "internalType": "address[]",
                  "name": "drawnJurors",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "judgesClaimed",
                  "type": "address[]"
                },
                {
                  "internalType": "bool",
                  "name": "closed",
                  "type": "bool"
                }
              ],
              "internalType": "struct OutputTypes.RoundOutput[]",
              "name": "rounds",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct OutputTypes.DisputeOutput",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDisputeCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDisputeList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "disputeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ruling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ruledAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "timestamps",
              "type": "uint256[]"
            },
            {
              "internalType": "enum DataTypes.DisputeState",
              "name": "state",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "roundId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "procecutorId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "defendantId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "appealFeeRewards",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokensAtStakePerJuror",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalFeesForJurors",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "penalties",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "winningChoice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalRepartitions",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalVoted",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalCommited",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256[11]",
                  "name": "counts",
                  "type": "uint256[11]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "evidenceSubmitters",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "appealedBy",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "account",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "commit",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "choice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "weight",
                      "type": "uint256"
                    },
                    {
                      "internalType": "string",
                      "name": "justification",
                      "type": "string"
                    },
                    {
                      "internalType": "bool",
                      "name": "hasVoted",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct DataTypes.Vote[]",
                  "name": "votes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "userId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "role",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "string",
                      "name": "metadata",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct DataTypes.Evidence[]",
                  "name": "evidences",
                  "type": "tuple[]"
                },
                {
                  "internalType": "address[]",
                  "name": "drawnJurors",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "judgesClaimed",
                  "type": "address[]"
                },
                {
                  "internalType": "bool",
                  "name": "closed",
                  "type": "bool"
                }
              ],
              "internalType": "struct OutputTypes.RoundOutput[]",
              "name": "rounds",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct OutputTypes.DisputeOutput[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "getOrderPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasProtocolRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "internalType": "contract IUser",
          "name": "UserContract",
          "type": "address"
        }
      ],
      "name": "isCallerUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAddressMatchingId",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gigId",
          "type": "uint256"
        },
        {
          "internalType": "contract IUser",
          "name": "UserContract",
          "type": "address"
        }
      ],
      "name": "isGigOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isStillBuyer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isStillSeller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "userId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct DataTypes.Evidence",
          "name": "evidence",
          "type": "tuple"
        }
      ],
      "name": "nextRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "passPhase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "salt",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "justification",
          "type": "string"
        }
      ],
      "name": "revealVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "userId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct DataTypes.Evidence",
          "name": "evidence",
          "type": "tuple"
        }
      ],
      "name": "sendEvidence",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "_providerAddress",
          "type": "address"
        }
      ],
      "name": "setProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf755afa4f51b59f7deb566bfb84ef7cff62fea7e8fa7463505589ab9ddc35fbc",
  "receipt": {
    "to": null,
    "from": "0x8D3BD47c94b340E0151376ABF9D76C74c471E213",
    "contractAddress": "0xAe4B26bd6e3A6FE74C280a13C6B841f2774E13D0",
    "transactionIndex": 0,
    "gasUsed": "3854281",
    "logsBloom": "0x
    "blockHash": "0x09a2b01546331182a4af803171f1dd9604efeae107d065a3f32aaa4eaf89c2d8",
    "transactionHash": "0xf755afa4f51b59f7deb566bfb84ef7cff62fea7e8fa7463505589ab9ddc35fbc",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 33113951,
        "transactionHash": "0xf755afa4f51b59f7deb566bfb84ef7cff62fea7e8fa7463505589ab9ddc35fbc",
        "address": "0xAe4B26bd6e3A6FE74C280a13C6B841f2774E13D0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d3bd47c94b340e0151376abf9d76c74c471e213"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x09a2b01546331182a4af803171f1dd9604efeae107d065a3f32aaa4eaf89c2d8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 33113951,
        "transactionHash": "0xf755afa4f51b59f7deb566bfb84ef7cff62fea7e8fa7463505589ab9ddc35fbc",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008d3bd47c94b340e0151376abf9d76c74c471e213",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000006d8b95cb47d37000000000000000000000000000000000000000000000000003746ac80c0c80c70000000000000000000000000000000000000000000003cdbfe830afc4254ab10000000000000000000000000000000000000000000000000306df3240c4ad570000000000000000000000000000000000000000000003cdc055bc458f6d1e21",
        "logIndex": 1,
        "blockHash": "0x09a2b01546331182a4af803171f1dd9604efeae107d065a3f32aaa4eaf89c2d8"
      }
    ],
    "blockNumber": 33113951,
    "cumulativeGasUsed": "3854281",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE80a26720a707C08fc5ED6184ef02B89C4DdEc19"
  ],
  "numDeployments": 2,
  "solcInputHash": "075f2457e796c8d70088564501ef535f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"appeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"claimAppealFeeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"claimAsJudge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"claimRuling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"salt\",\"type\":\"string\"}],\"name\":\"commitVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"procecutorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defendantId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.Evidence\",\"name\":\"evidence\",\"type\":\"tuple\"}],\"name\":\"createDispute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"fetchContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolConfigurator\",\"name\":\"protocolConfigurator\",\"type\":\"address\"}],\"name\":\"getDelayTimestamp\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"selfRefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"evidence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appeal\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.DelayTimestamp\",\"name\":\"delayTimestamp\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"getDisputeById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ruling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ruledAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"timestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"enum DataTypes.DisputeState\",\"name\":\"state\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"procecutorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defendantId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appealFeeRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAtStakePerJuror\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeesForJurors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalties\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningChoice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRepartitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVoted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommited\",\"type\":\"uint256\"},{\"internalType\":\"uint256[11]\",\"name\":\"counts\",\"type\":\"uint256[11]\"},{\"internalType\":\"uint256[]\",\"name\":\"evidenceSubmitters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"appealedBy\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"justification\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.Vote[]\",\"name\":\"votes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.Evidence[]\",\"name\":\"evidences\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"drawnJurors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"judgesClaimed\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"internalType\":\"struct OutputTypes.RoundOutput[]\",\"name\":\"rounds\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OutputTypes.DisputeOutput\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDisputeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDisputeList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ruling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ruledAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"timestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"enum DataTypes.DisputeState\",\"name\":\"state\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"procecutorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defendantId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appealFeeRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAtStakePerJuror\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeesForJurors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalties\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningChoice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRepartitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVoted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommited\",\"type\":\"uint256\"},{\"internalType\":\"uint256[11]\",\"name\":\"counts\",\"type\":\"uint256[11]\"},{\"internalType\":\"uint256[]\",\"name\":\"evidenceSubmitters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"appealedBy\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"justification\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.Vote[]\",\"name\":\"votes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.Evidence[]\",\"name\":\"evidences\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"drawnJurors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"judgesClaimed\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"internalType\":\"struct OutputTypes.RoundOutput[]\",\"name\":\"rounds\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OutputTypes.DisputeOutput[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getOrderPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasProtocolRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"contract IUser\",\"name\":\"UserContract\",\"type\":\"address\"}],\"name\":\"isCallerUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAddressMatchingId\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gigId\",\"type\":\"uint256\"},{\"internalType\":\"contract IUser\",\"name\":\"UserContract\",\"type\":\"address\"}],\"name\":\"isGigOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isStillBuyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isStillSeller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.Evidence\",\"name\":\"evidence\",\"type\":\"tuple\"}],\"name\":\"nextRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"passPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"salt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"justification\",\"type\":\"string\"}],\"name\":\"revealVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.Evidence\",\"name\":\"evidence\",\"type\":\"tuple\"}],\"name\":\"sendEvidence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"_providerAddress\",\"type\":\"address\"}],\"name\":\"setProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Blockswan\",\"details\":\"To be covered by a proxy contract, owned by the addressProvider of the specific marketplaceAll admin functions are callable by the protocolConfigurator contract defined also in the   addressProvider*\",\"kind\":\"dev\",\"methods\":{\"ADDRESSES_PROVIDER()\":{\"returns\":{\"_0\":\"The address of the AddressProvider\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"provider\":\"The address of the AddressProvider\"}},\"fetchContract(bytes32)\":{\"params\":{\"_name\":\"the bytes32 name of the contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setProvider(address)\":{\"params\":{\"_providerAddress\":\"The address of the AddressProvider\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Dispute contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ADDRESSES_PROVIDER()\":{\"notice\":\"Returns the contract address of the IAddressProvider\"},\"fetchContract(bytes32)\":{\"notice\":\"fetch the contract address from the ADDRESSS_PROVIDERthrows error if address === 0\"},\"kill()\":{\"notice\":\"kill the current address provider, only callable by the AddressProvider\"},\"setProvider(address)\":{\"notice\":\"set the provider address of the ProviderContract\"}},\"notice\":\"Dispute data within an Blockswan protocol's marketplace - Users can:   # raise a dispute via the Dispute contract   # send evidence to a dispute   # commit a vote on a dispute   # vote on a dispute   # appeal to a dispute resolution  # execute a ruling on a dispute\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/dispute/Dispute.sol\":\"Dispute\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/imports/aave/contracts/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.9;\\n\\n/*^\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary PercentageMath {\\n    // Maximum percentage factor (100.00%)\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     **/\\n    function percentMul(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        assembly {\\n            if iszero(\\n                or(\\n                    iszero(percentage),\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\\n                PERCENTAGE_FACTOR\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     **/\\n    function percentDiv(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(\\n                                sub(not(0), div(percentage, 2)),\\n                                PERCENTAGE_FACTOR\\n                            )\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\\n                percentage\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf4a696c6b026c9a9747823566eeca034b0c2314b9d4d373cb664a5d5f21e7797\",\"license\":\"BUSL-1.1\"},\"contracts/imports/gnosis/contracts/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"../../openzeppelin/contracts/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developer^\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(from, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(freeMemoryPointer, 36),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTransferResult(\\n        IERC20 token\\n    ) private view returns (bool success) {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n            // Non-standard ERC20 transfer without return.\\n            case 0 {\\n                // NOTE: When the return data size is 0, verify that there\\n                // is code at the address. This is done in order to maintain\\n                // compatibility with Solidity calling conventions.\\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                if iszero(extcodesize(token)) {\\n                    revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                }\\n\\n                success := 1\\n            }\\n            // Standard ERC20 transfer returning boolean success value.\\n            case 32 {\\n                returndatacopy(0, 0, returndatasize())\\n\\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                // as `true` for a boolean. In order to stay compatible with\\n                // OpenZeppelin's `SafeERC20` library which is known to work\\n                // with the existing ERC20 implementation we care about,\\n                // make sure we return success for any non-zero return value\\n                // from the `transfer*` call.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            default {\\n                revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41990e4782d1ef388823346bdf9b3a660db63b631e342e4b1a9cadcb78795511\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/imports/kleros/contracts/SortitionSumTreeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@epiqueras, @unknownunknown1]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8;\\n\\n/**\\n *  @title SortitionSumTreeFactory\\n *  @dev A factory of trees that keeps track of staked values for sortition. This is the updated version for 0.8 compiler.\\n */\\nlibrary SortitionSumTreeFactory {\\n    /* Structs */\\n\\n    struct SortitionSumTree {\\n        uint256 K; // The maximum number of childs per node.\\n        // We use this to keep track of vacant positions in the tree after removing a leaf. This is for keeping the tree as balanced as possible without spending gas on moving nodes around.\\n        uint256[] stack;\\n        uint256[] nodes;\\n        // Two-way mapping of IDs to node indexes. Note that node index 0 is reserved for the root node, and means the ID does not have a node.\\n        mapping(bytes32 => uint256) IDsToNodeIndexes;\\n        mapping(uint256 => bytes32) nodeIndexesToIDs;\\n    }\\n\\n    /* Storage */\\n\\n    struct SortitionSumTrees {\\n        mapping(bytes32 => SortitionSumTree) sortitionSumTrees;\\n    }\\n\\n    /* Public */\\n\\n    /**\\n     *  @dev Create a sortition sum tree at the specified key.\\n     *  @param _key The key of the new tree.\\n     *  @param _K The number of children each node in the tree should have.\\n     */\\n    function createTree(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint256 _K\\n    ) external {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        require(tree.K == 0, \\\"Tree already exists.\\\");\\n        require(_K > 1, \\\"K must be greater than one.\\\");\\n        tree.K = _K;\\n        tree.nodes.push(0);\\n    }\\n\\n    /**\\n     *  @dev Set a value of a tree.\\n     *  @param _key The key of the tree.\\n     *  @param _value The new value.\\n     *  @param _ID The ID of the value.\\n     *  `O(log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function set(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint256 _value,\\n        bytes32 _ID\\n    ) external {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint256 treeIndex = tree.IDsToNodeIndexes[_ID];\\n\\n        if (treeIndex == 0) {\\n            // No existing node.\\n            if (_value != 0) {\\n                // Non zero value.\\n                // Append.\\n                // Add node.\\n                if (tree.stack.length == 0) {\\n                    // No vacant spots.\\n                    // Get the index and append the value.\\n                    treeIndex = tree.nodes.length;\\n                    tree.nodes.push(_value);\\n\\n                    // Potentially append a new node and make the parent a sum node.\\n                    if (treeIndex != 1 && (treeIndex - 1) % tree.K == 0) {\\n                        // Is first child.\\n                        uint256 parentIndex = treeIndex / tree.K;\\n                        bytes32 parentID = tree.nodeIndexesToIDs[parentIndex];\\n                        uint256 newIndex = treeIndex + 1;\\n                        tree.nodes.push(tree.nodes[parentIndex]);\\n                        delete tree.nodeIndexesToIDs[parentIndex];\\n                        tree.IDsToNodeIndexes[parentID] = newIndex;\\n                        tree.nodeIndexesToIDs[newIndex] = parentID;\\n                    }\\n                } else {\\n                    // Some vacant spot.\\n                    // Pop the stack and append the value.\\n                    treeIndex = tree.stack[tree.stack.length - 1];\\n                    tree.stack.pop();\\n                    tree.nodes[treeIndex] = _value;\\n                }\\n\\n                // Add label.\\n                tree.IDsToNodeIndexes[_ID] = treeIndex;\\n                tree.nodeIndexesToIDs[treeIndex] = _ID;\\n\\n                updateParents(self, _key, treeIndex, true, _value);\\n            }\\n        } else {\\n            // Existing node.\\n            if (_value == 0) {\\n                // Zero value.\\n                // Remove.\\n                // Remember value and set to 0.\\n                uint256 value = tree.nodes[treeIndex];\\n                tree.nodes[treeIndex] = 0;\\n\\n                // Push to stack.\\n                tree.stack.push(treeIndex);\\n\\n                // Clear label.\\n                delete tree.IDsToNodeIndexes[_ID];\\n                delete tree.nodeIndexesToIDs[treeIndex];\\n\\n                updateParents(self, _key, treeIndex, false, value);\\n            } else if (_value != tree.nodes[treeIndex]) {\\n                // New, non zero value.\\n                // Set.\\n                bool plusOrMinus = tree.nodes[treeIndex] <= _value;\\n                uint256 plusOrMinusValue = plusOrMinus\\n                    ? _value - tree.nodes[treeIndex]\\n                    : tree.nodes[treeIndex] - _value;\\n                tree.nodes[treeIndex] = _value;\\n\\n                updateParents(self, _key, treeIndex, plusOrMinus, plusOrMinusValue);\\n            }\\n        }\\n    }\\n\\n    /* Public Views */\\n\\n    /**\\n     *  @dev Query the leaves of a tree. Note that if `startIndex == 0`, the tree is empty and the root node will be returned.\\n     *  @param _key The key of the tree to get the leaves from.\\n     *  @param _cursor The pagination cursor.\\n     *  @param _count The number of items to return.\\n     *  @return startIndex The index at which leaves start.\\n     *  @return values The values of the returned leaves.\\n     *  @return hasMore Whether there are more for pagination.\\n     *  `O(n)` where\\n     *  `n` is the maximum number of nodes ever appended.\\n     */\\n    function queryLeafs(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint256 _cursor,\\n        uint256 _count\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 startIndex,\\n            uint256[] memory values,\\n            bool hasMore\\n        )\\n    {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n\\n        // Find the start index.\\n        for (uint256 i = 0; i < tree.nodes.length; i++) {\\n            if ((tree.K * i) + 1 >= tree.nodes.length) {\\n                startIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // Get the values.\\n        uint256 loopStartIndex = startIndex + _cursor;\\n        values = new uint256[](\\n            loopStartIndex + _count > tree.nodes.length ? tree.nodes.length - loopStartIndex : _count\\n        );\\n        uint256 valuesIndex = 0;\\n        for (uint256 j = loopStartIndex; j < tree.nodes.length; j++) {\\n            if (valuesIndex < _count) {\\n                values[valuesIndex] = tree.nodes[j];\\n                valuesIndex++;\\n            } else {\\n                hasMore = true;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function draw(SortitionSumTrees storage self, bytes32 _key, uint _drawnNumber) internal view returns(bytes32 ID) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint treeIndex = 0;\\n        uint currentDrawnNumber = _drawnNumber % tree.nodes[0];\\n\\n        while ((tree.K * treeIndex) + 1 < tree.nodes.length)  // While it still has children.\\n            for (uint i = 1; i <= tree.K; i++) { // Loop over children.\\n                uint nodeIndex = (tree.K * treeIndex) + i;\\n                uint nodeValue = tree.nodes[nodeIndex];\\n\\n                if (currentDrawnNumber >= nodeValue) currentDrawnNumber -= nodeValue; // Go to the next child.\\n                else { // Pick this child.\\n                    treeIndex = nodeIndex;\\n                    break;\\n                }\\n            }\\n        \\n        ID = tree.nodeIndexesToIDs[treeIndex];\\n    }\\n\\n    function total(SortitionSumTrees storage self, bytes32 _key) internal view returns (uint) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        if (tree.nodes.length == 0) {\\n            return 0;\\n        } else {\\n            return tree.nodes[0];\\n        }\\n    }\\n\\n\\n    /** @dev Gets a specified ID's associated value.\\n     *  @param _key The key of the tree.\\n     *  @param _ID The ID of the value.\\n     *  @return value The associated value.\\n     */\\n    function stakeOf(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        bytes32 _ID\\n    ) external view returns (uint256 value) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint256 treeIndex = tree.IDsToNodeIndexes[_ID];\\n\\n        if (treeIndex == 0) value = 0;\\n        else value = tree.nodes[treeIndex];\\n    }\\n\\n    /* Private */\\n\\n    /**\\n     *  @dev Update all the parents of a node.\\n     *  @param _key The key of the tree to update.\\n     *  @param _treeIndex The index of the node to start from.\\n     *  @param _plusOrMinus Whether to add (true) or substract (false).\\n     *  @param _value The value to add or substract.\\n     *  `O(log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function updateParents(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint256 _treeIndex,\\n        bool _plusOrMinus,\\n        uint256 _value\\n    ) private {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n\\n        uint256 parentIndex = _treeIndex;\\n        while (parentIndex != 0) {\\n            parentIndex = (parentIndex - 1) / tree.K;\\n            tree.nodes[parentIndex] = _plusOrMinus\\n                ? tree.nodes[parentIndex] + _value\\n                : tree.nodes[parentIndex] - _value;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67da6fc6979f74effb0bf2b3716815310346c6334b6e9ff4b9f22dbdd202d3f8\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8f3397c899641ccd9640d0074d4619bd88c568dab2cd4ecdea402039286bd8b3\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xae75c35531456b603dbd5a30d88f89ccaa7303c19a7a3f3bcac27a12a941994a\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.9;\\n\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n      \\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x18e34c1997590b80cab78121aedf411593ffb78c5e2f9993acf66cc2b09fef85\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x70f56a53e5708fa00e6e9a6b4fd6234f44a56902bc44c702e44a5e9bfc32a7ce\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x7331d74643fe3a19d8cfea8896b60a5176a8c15721c4b19ac88b745bbae9a5d6\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x53d6271c947e13a31e055d686c86925db100ca115e7f6067567dd43e9ebee357\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3b8562a2f5cf54ea27029e202bdc4945438fc44bc840c01e6027fb10a196634a\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x29a6b2b2ea467be6d14ef8c6de3fc72e91578bbd19eb0978a5a80460f4271713\",\"license\":\"MIT\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {IAccessControlEnumerable} from \\\"../imports/openzeppelin/contracts/IAccessControlEnumerable.sol\\\";\\n\\n/**\\n * @title IACLManager\\n * @author Blockswan\\n * @notice Defines the basic interface for the ACLManager\\n **/\\ninterface IACLManager is IAccessControlEnumerable {\\n    /**\\n     * @notice Set the role as admin of a specific role.\\n     * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\\n     * @param role The role to be managed by the admin role\\n     * @param adminRole The admin role\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x3f00841f2ec96bc18e710446d6fa9e89f75492aefd3db29edc861bb58a3c0425\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressProvider.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title The interface for contracts to interact with the Blockswan Address Provider contract\\ninterface IAddressProvider {\\n    /**\\n     * @dev Emitted when a new marketplaceId is set.\\n     * @param oldMarketplaceId The address of the old marketplaceId\\n     * @param newMarketplaceId The address of the new marketplaceId\\n     */\\n    event MarketplaceIdSet(\\n        string indexed oldMarketplaceId,\\n        string indexed newMarketplaceId\\n    );\\n\\n    /**\\n     * @dev Emitted when a new contract is added to the AddressProvider.\\n     * @param _name The name assigned in the AddressProvider.\\n     * @param _address The address of the new contract\\n     */\\n    event ContractAdded(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a new contract is removed from the AddressProvider.\\n     * @param _name The contract name removed in the AddressProvider.\\n     * @param _address The address of the removed contract\\n     */\\n    event ContractRemoved(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a contract is upgraded in the AddressProvider.\\n     * @param _name The contract name upraded in the AddressProvider.\\n     * @param _oldAddress The old address prior upgrade\\n     * @param _newAddress The new address after upgrade\\n     */\\n    event ContractUpgraded(\\n        bytes32 _name,\\n        address _oldAddress,\\n        address _newAddress\\n    );\\n\\n    /**\\n     * @notice returns contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     * @return contractAddr - address of contract registered under given provider key\\n     */\\n    function getContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice overloaded getContract to return explicit version of contract */\\n    function getContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    function getContractVersionCount(\\n        bytes32 _name\\n    ) external view returns (uint);\\n\\n    /**\\n     * @dev addContract does two things:\\n     *      1.) registers the address of given ProviderContract in the registry\\n     *      2.) sets the registry address in given ProviderContract so only\\n     *          the registry can call functions on given contract\\n     */\\n    function addContract(bytes32 _name, address _address) external;\\n\\n    /**\\n     * @dev removes contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     */\\n    function removeContract(bytes32 _name) external;\\n\\n    /**\\n     * @notice replaces contract address registered under given key with provided address\\n     * @param _name - registry key for lookup\\n     * @param _newAddress - new contract address to register under given key\\n     */\\n    function upgradeContract(bytes32 _name, address _newAddress) external;\\n}\\n\",\"keccak256\":\"0x79465c1c2649358699708bbaf5f0ac84a8003bb2fa352fd827b4faec2da65bb0\",\"license\":\"MIT\"},\"contracts/interfaces/IBSWAN.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IBSWAN\\n * @author Blockswan\\n * @notice Defines the basic interface for the Blockswan Trust\\n **/\\ninterface IBSWAN is IERC20 {\\n    /**\\n     * @notice Update the DAT config.\\n     * @param _newOwner The new owner of the DAT\\n     * @param _revenueCommitmentBasisPoints the share of revenues tranfered to the buyback reserve\\n     * @param _minInvestment the min investment required in currency value\\n     */\\n    function updateConfig(\\n        address payable _newOwner,\\n        uint256 _revenueCommitmentBasisPoints,\\n        uint256 _minInvestment\\n    ) external;\\n\\n    /**\\n     * @notice Update the DAT config.\\n     * @param _currencyValue the quantity of currency to buy\\n     * @return tokenValue the quantity of BSWAN bought for the _currencyValue\\n     */\\n    function estimateBuyValue(\\n        uint256 _currencyValue\\n    ) external view returns (uint256);\\n\\n    /** @notice Purchase BSWAN tokens with the given amount of currency.\\n     * @param _to The account to receive the BSWAN tokens from this purchase.\\n     * @param _currencyValue How much currency to spend in order to buy BSWAN.\\n     * @param _minTokensBought Buy at least this many BSWAN tokens or the transaction reverts.\\n     * @dev _minTokensBought is necessary as the price will change if some elses transaction mines after\\n     * yours was submitted.\\n     */\\n    function buy(\\n        address _to,\\n        uint256 _currencyValue,\\n        uint256 _minTokensBought\\n    ) external payable;\\n\\n    /// Pay\\n    function estimatePayValue(\\n        uint256 _currencyValue\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Pay the organization on-chain.\\n     * @param _to The account which receives tokens for the contribution. If this address\\n     * is not authorized to receive tokens then they will be sent to the beneficiary account instead.\\n     * @param _currencyValue How much currency which was paid.\\n     */\\n    function pay(address _to, uint _currencyValue) external payable;\\n\\n    /// @notice The address of the token used as reserve in the bonding curve\\n    /// (e.g. the DAI contract)\\n    function currency() external returns (IERC20);\\n}\\n\",\"keccak256\":\"0x5873c9d1f417e7fc1a3b0e790bfe7a6af8daeecc507709ed46e405dd5a315d01\",\"license\":\"MIT\"},\"contracts/interfaces/IDispute.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../protocol/libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../protocol/libraries/types/InputTypes.sol\\\";\\n\\n/**\\n * @title IDispute\\n * @author Blockswan\\n * @notice Defines the basic interface for a blockswan dispute contract.\\n **/\\ninterface IDispute {\\n    /**\\n     * @dev Emitted when a new dispute is created.\\n     * @param orderId The order id\\n     * @param disputeId The new dispute id\\n   \\n     */\\n    event NewDispute(uint256 indexed orderId, uint256 indexed disputeId);\\n\\n    /**\\n     * @notice Returns the dispute data.\\n     * @param disputeId The id of the dispute.\\n     * @return The data associated to the disputeId\\n     **/\\n    function getDisputeById(\\n        uint256 disputeId\\n    ) external view returns (OutputTypes.GigOutput memory);\\n\\n    /**\\n     * @notice Returns the list of all initialized disputes.\\n     * @return A data array of the disputes.\\n     **/\\n    function getDisputeList()\\n        external\\n        view\\n        returns (OutputTypes.DisputeOutput[] memory);\\n\\n    /**\\n     * @notice Returns the current amount of disputes\\n     * @return the current amount of disputes\\n     **/\\n    function getDisputesCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Create a new dispute\\n     * @param orderId The order id\\n     * @param procecutorId The procecutor id\\n     * @param defendantId The defendant id\\n     * @param caller The caller address\\n     * @param evidence The evidence data\\n     * @return the new dispute id\\n     **/\\n    function createDispute(\\n        uint256 orderId,\\n        uint256 procecutorId,\\n        uint256 defendantId,\\n        address caller,\\n        DataTypes.Evidence memory evidence\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xbbb80b65cefdcd8c1ee05667cef7fd80f056d0faf624aeb82eb193d9ab8b0fcb\",\"license\":\"MIT\"},\"contracts/interfaces/IGig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../protocol/libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../protocol/libraries/types/InputTypes.sol\\\";\\n\\n/**\\n * @title IGig\\n * @author Blockswan\\n * @notice Defines the basic interface for a blockswan gig contract.\\n **/\\ninterface IGig {\\n    /**\\n     * @dev Emitted when a new gig is created.\\n     * @param gigId The id of the gig\\n     * @param userId The user creating the gig\\n     * @param metadata The gig metadata\\n     * @param packages The gig packages\\n     */\\n    event GigAdded(\\n        uint256 indexed gigId,\\n        uint256 indexed userId,\\n        string metadata,\\n        DataTypes.Package[3] packages\\n    );\\n\\n    /**\\n     * @dev Emitted when a gig is edited.\\n     * @param gigId The id of the gig\\n     * @param userId The user creating the gig\\n     * @param metadata The gig metadata\\n     * @param packages The gig packages\\n     */\\n    event GigEdited(\\n        uint256 indexed gigId,\\n        uint256 indexed userId,\\n        string metadata,\\n        DataTypes.Package[3] packages\\n    );\\n\\n    /**\\n     * @notice Returns the gig data.\\n     * @param gigId The id of the gig.\\n     * @return The data associated to the gigId\\n     **/\\n    function getGigById(\\n        uint256 gigId\\n    ) external view returns (OutputTypes.GigOutput memory);\\n\\n    /**\\n     * @notice Returns the list of all initialized gigs.\\n     * @return A data array of the gigs.\\n     **/\\n    function getGigList()\\n        external\\n        view\\n        returns (OutputTypes.GigOutput[] memory);\\n\\n    /**\\n     * @notice Returns the current amount of gigs\\n     * @return the current amount of gigs\\n     **/\\n    function getGigsCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Create a new gig with the msg.sender wallet\\n     * @param metadata the gig related information\\n     * @param packages the packages inside the gig\\n     **/\\n    function createGig(\\n        string memory metadata,\\n        DataTypes.Package[3] memory packages\\n    ) external;\\n\\n    /**\\n     * @notice retrieves the inviters wallet for a given wallet account\\n     * @param account the wallet to get the inviters from\\n     * @return address the pubkey of inviter0\\n     * @return address the pubkey of inviter1\\n     **/\\n    function getInvitersByUserAddress(\\n        address account\\n    ) external view returns (address, address);\\n\\n    /**\\n     * @notice retrieves the inviters wallet for a given userId\\n     * @param userId the user id to get the inviters from\\n     * @return address the pubkey of inviter0\\n     * @return address the pubkey of inviter1\\n     **/\\n    function getInvitersById(\\n        uint256 userId\\n    ) external view returns (address, address);\\n\\n    /**\\n     * @notice add the order id to the gig orderIds set.\\n     * @param newOrderId the new orderId.\\n     * @param gigId the new gig id.\\n     * @param packageId the packages inside the gig\\n     * @return success the relation has been addded.\\n     * @return metadata the gig metadata\\n     * @return packages the gig packages\\n     **/\\n    function createOrder(\\n        uint256 newOrderId,\\n        uint256 gigId,\\n        uint256 packageId\\n    ) external returns (bool, string memory, DataTypes.Package memory);\\n}\\n\",\"keccak256\":\"0x190ee9b6300d522e7087cbb05b2f75cc87c6619a6ba07334a4845f2ec1d2aa30\",\"license\":\"MIT\"},\"contracts/interfaces/IJury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../protocol/libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../protocol/libraries/types/InputTypes.sol\\\";\\n\\n/**\\n * @title IJury\\n * @author Blockswan\\n * @notice Defines the basic interface for a blockswan jury contract.\\n **/\\ninterface IJury {\\n    /**\\n     * @notice Randomly draws X jurors from the jurors pool\\n     * using entropy made with the blockhash and the disputeId among other things.\\n     * @param numberOfJurors The number of jurors to draw\\n   \\n     * @return jurors The list of jurors address\\n     */\\n\\n    function drawJurors(\\n        uint256 numberOfJurors\\n    ) external view returns (address[] memory jurors);\\n\\n    /**\\n     *\\n     * @param accounts The list of jurors to freeze\\n     */\\n\\n    function freezeTokens(address[] memory accounts) external;\\n\\n    /**\\n     * @param amount The amount to unfreeze\\n     * @param account The juror to unfreeze\\n     */\\n\\n    function unfreezeTokens(uint256 amount, address account) external;\\n\\n    /**\\n     * @param amount The amount of tokens added to the stake\\n     * @param juror The juror to reward\\n     */\\n    function rewardJuror(uint256 amount, address juror) external;\\n}\\n\",\"keccak256\":\"0xb77e565cfe71591942b5b8d26bcfa6f16859c57df2e2def8a33ce134fe7da45d\",\"license\":\"MIT\"},\"contracts/interfaces/IOrder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../protocol/libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../protocol/libraries/types/InputTypes.sol\\\";\\n\\n/**\\n * @title IOrder\\n * @author Blockswan\\n * @notice Defines the basic interface for a blockswan order contract.\\n **/\\ninterface IOrder {\\n    function getOrderById(\\n        uint256 orderId\\n    ) external view returns (OutputTypes.OrderOutput memory);\\n\\n    function rule(\\n        uint256 winningChoice,\\n        uint256 orderId,\\n        uint256 procecutorId,\\n        uint256 defendantId\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x7896d0bc747877454d3ffd06f5250681a5e04a0a41a84ea27cd8b94167bf70ed\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {IAccessControlEnumerable} from \\\"../imports/openzeppelin/contracts/IAccessControlEnumerable.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IProtocolConfigurator\\n * @author Blockswan\\n * @notice Defines the basic interface for the ProtocolConfigurator\\n **/\\ninterface IProtocolConfigurator {\\n    /**\\n     * @notice Retrieves the parameters when enterering the protocol as a buyer.\\n     * @return parameters The paramaters  when accessing the role status\\n     */\\n    function getBuyerEntryParams()\\n        external\\n        view\\n        returns (DataTypes.EntryParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getBuyerEntryParams(\\n        uint256 version\\n    ) external view returns (DataTypes.EntryParams memory);\\n\\n    /**\\n     * @notice Update the  parameters when enterering the protocol as as buyer.\\n     * @param newParams The new buyer entry paramaters\\n     */\\n    function updateBuyerEntryParams(\\n        DataTypes.EntryParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when enterering the protocol as a seller.\\n     * @return parameters The paramaters  when accessing the role status\\n     */\\n    function getSellerEntryParams()\\n        external\\n        view\\n        returns (DataTypes.EntryParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getSellerEntryParams(\\n        uint256 version\\n    ) external view returns (DataTypes.EntryParams memory);\\n\\n    /**\\n     * @notice Update the  parameters when enterering the protocol as as seller.\\n     * @param newParams The new buyer entry paramaters\\n     */\\n    function updateSellerEntryParams(\\n        DataTypes.EntryParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the retribution percentage values of the protocol.\\n     * @return retributions The retribution percentage values of the protocol.\\n     */\\n    function getRetributionParams()\\n        external\\n        view\\n        returns (DataTypes.RetributionParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getRetributionParams(\\n        uint256 version\\n    ) external view returns (DataTypes.RetributionParams memory);\\n\\n    /**\\n     * @notice Update the retributin  parameters of the protocol.\\n     * @param newParams The new retribution paramaters\\n     */\\n    function updateRetributionParams(\\n        DataTypes.RetributionParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when creating a gig.\\n     * @return parameters The parameters when creating a gig\\n     */\\n    function getGigCreationParams()\\n        external\\n        view\\n        returns (DataTypes.CreationParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getGigCreationParams(\\n        uint256 version\\n    ) external view returns (DataTypes.CreationParams memory);\\n\\n    /**\\n     * @notice Update the gig creation parameters of the protocol.\\n     * @param newParams The new gig creation paramaters\\n     */\\n    function updateGigCreationParams(\\n        DataTypes.CreationParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when creating an order.\\n     * @return parameters The parameters when creating an order.\\n     */\\n    function getOrderCreationParams()\\n        external\\n        view\\n        returns (DataTypes.FeeParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getOrderCreationParams(\\n        uint256 version\\n    ) external view returns (DataTypes.FeeParams memory);\\n\\n    /**\\n     * @notice Update the order creation parameters of the protocol.\\n     * @param newParams The new order creation paramaters\\n     */\\n    function updateOrderCreationParams(\\n        DataTypes.FeeParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters fees for the seller after an order.\\n     * @return parameters The seller parameters upon odder completion\\n     */\\n    function getSellerOrderFees()\\n        external\\n        view\\n        returns (DataTypes.FeeParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getSellerOrderFees(\\n        uint256 version\\n    ) external view returns (DataTypes.FeeParams memory);\\n\\n    /**\\n     * @notice Update the order creation parameters of the protocol applied to a seller.\\n     * @param newParams The new sellerr-applied order creation paramaters\\n     */\\n    function updateSellerOrderFees(\\n        DataTypes.FeeParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the protocol delay timestamp.\\n     * @return parameters The delay timestamp parametes\\n     */\\n    function getDelayTimestamp()\\n        external\\n        view\\n        returns (DataTypes.DelayTimestamp memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getDelayTimestamp(\\n        uint256 version\\n    ) external view returns (DataTypes.DelayTimestamp memory);\\n\\n    /**\\n     * @notice Update the delays timestamp parameters of the protocol.\\n     * @param newParams The new order creation paramaters\\n     */\\n    function updateDelayTimestamp(\\n        DataTypes.DelayTimestamp memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the protocol dispute parameters.\\n     * @return parameters The dispute parameters\\n     */\\n    function getDisputeParams()\\n        external\\n        view\\n        returns (DataTypes.DisputeParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getDisputeParams(\\n        uint256 version\\n    ) external view returns (DataTypes.DisputeParams memory);\\n\\n    /**\\n     * @notice Update the dispute parameters of the protocol.\\n     * @param newParams The new dispute paramaters\\n     */\\n    function updateDisputeParams(\\n        DataTypes.DisputeParams memory newParams\\n    ) external;\\n}\\n\",\"keccak256\":\"0x97695bcb476291c7b492bf16ba4bd98d15d21422031d6b66d620468547329203\",\"license\":\"MIT\"},\"contracts/interfaces/IProviderContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\n\\ninterface IProviderContract {\\n    /**\\n     * @notice set the provider address of the ProviderContract\\n     * @param _providerAddress The address of the AddressProvider\\n     */\\n    function setProvider(IAddressProvider _providerAddress) external;\\n\\n    /**\\n     * @notice fetch the contract address from the ADDRESSS_PROVIDER\\n     * @notice throws error if address === 0\\n     * @param _name the bytes32 name of the contract\\n     */\\n    function fetchContract(bytes32 _name) external view returns (address);\\n\\n    /**\\n     * @notice kill the current address provider, only callable by the AddressProvider\\n     */\\n    function kill() external;\\n\\n    /**\\n     * @notice Returns the contract address of the IAddressProvider\\n     * @return The address of the AddressProvider\\n     */\\n    function ADDRESSES_PROVIDER() external view returns (IAddressProvider);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the protocol_admin role\\n    //  * @return The id of the protocol_admin role\\n    //  */\\n    // function PROTOCOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the buyer role\\n    //  * @return The id of the buyer role\\n    //  */\\n    // function BUYER_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the seller role\\n    //  * @return The id of the seller role\\n    //  */\\n    // function SELLER_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the judge role\\n    //  * @return The id of the judge role\\n    //  */\\n    // function JUDGE_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the Blacklist role\\n    //  * @return The id of the Blacklist role\\n    //  */\\n    // function BLACKLIST_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the whitelist role\\n    //  * @return The id of the whitelist role\\n    //  */\\n    // function WHITELIST_ROLE() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6cc741ef0ed11936ec9063a404025b26990c8f07e56b31a48bb0df65aae914ee\",\"license\":\"MIT\"},\"contracts/interfaces/IUser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../protocol/libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../protocol/libraries/types/InputTypes.sol\\\";\\n\\n/**\\n * @title IUser\\n * @author Blockswan\\n * @notice Defines the basic interface for an blockswan user.\\n **/\\ninterface IUser {\\n    /**\\n     * @dev Emitted when a new user is created.\\n     * @param userId The id of the user\\n     * @param userAddress The wallet addresss of the user\\n     * @param userData The data associated with the user\\n     */\\n    event UserAdded(\\n        uint256 indexed userId,\\n        address indexed userAddress,\\n        InputTypes.CreateUserInput userData\\n    );\\n\\n    /**\\n     * @dev Emitted when an user is edited.\\n     * @param userId The id of the user\\n     * @param userAddress The wallet addresss of the user\\n     * @param userData The data associated with the user\\n     */\\n    event UserEdited(\\n        uint256 indexed userId,\\n        address indexed userAddress,\\n        OutputTypes.UserOutput userData\\n    );\\n\\n    /**\\n     * @notice Returns the user id from a given address.\\n     * @param account The address of the user\\n     * @return userId The userId associated to the account address\\n     **/\\n    function getIdByAddress(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user data.\\n     * @param userId The id of the user.\\n     * @return User The data associated to the user it\\n     **/\\n    function getUserById(\\n        uint256 userId\\n    ) external view returns (OutputTypes.UserOutput memory);\\n\\n    /**\\n     * @notice Returns the user for a given public key.\\n     * @param pubKey The address as parameter.\\n     * @return User the user linked to the public key\\n     **/\\n    function getUserByAddress(\\n        address pubKey\\n    ) external view returns (OutputTypes.UserOutput memory);\\n\\n    /**\\n     * @notice Returns the list of all initialized users.\\n     * @dev It does not include dropped users\\n     * @return A data array of the underlying user.\\n     **/\\n    function getUserList()\\n        external\\n        view\\n        returns (OutputTypes.UserOutput[] memory);\\n\\n    /**\\n     * @notice Returns the current revision of the contract\\n     * @return the current revision\\n     **/\\n    function getUsersCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user wallet address.\\n     * @param userId The id of the user.\\n     * @return userAddress the wallet of the user\\n     **/\\n    function getAddressById(uint256 userId) external view returns (address);\\n\\n    /**\\n     * @notice Create a new users with the msg.sender wallet\\n     * @param metadata the user related information\\n     * @param inviterId the userID of whom invited the newUser\\n     **/\\n    function createUser(string memory metadata, uint256 inviterId) external;\\n\\n    /**\\n     * @notice retrieves the inviters wallet for a given wallet account\\n     * @param account the wallet to get the inviters from\\n     * @return address the pubkey of inviter0\\n     * @return address the pubkey of inviter1\\n     **/\\n    function getInvitersByUserAddress(\\n        address account\\n    ) external view returns (address, address);\\n\\n    /**\\n     * @notice add the gig id to the user gigIds set.\\n     * @param caller the wallet creating the gig.\\n     * @param newGigId the new gig id.\\n     * @return success the relation has been addded.\\n     **/\\n    function createGig(\\n        address caller,\\n        uint256 newGigId\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice add the order id to the user buyerOrderIds set.\\n     * @param buyerId the id of the buyer\\n     * @param newOrderId the new gig orderId.\\n     * @return success the relation has been addded.\\n     **/\\n    function createBuyerOrder(\\n        uint256 buyerId,\\n        uint256 newOrderId\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice retrieves the inviters wallet for a given userId\\n     * @param userId the user id to get the inviters from\\n     * @return address the pubkey of inviter0\\n     * @return address the pubkey of inviter1\\n     **/\\n    function getInvitersById(\\n        uint256 userId\\n    ) external view returns (address, address);\\n\\n    /**\\n     * @notice return true if the gigId is owned by the given userId\\n     * @param userId the user id to check if he own the gig\\n     * @param gigId the gigId\\n     * @return bool if the gigId is owned by the given userId\\n     **/\\n    function isGigOwner(\\n        uint256 userId,\\n        uint256 gigId\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf35a757d1a4fd7344e769e884d95fe22cb33ac81283741b17f6241175d62d3aa\",\"license\":\"MIT\"},\"contracts/interfaces/IXP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IXP\\n * @author Blockswan\\n * @notice Defines the basic interface for the Experience\\n **/\\ninterface IXP is IERC20 {\\n    /**\\n     * @notice set the xp amount to earn for a bytes32 key action\\n     * @param xpKey The key associated to the xp to earn\\n     * @param xpToReceive the xp to earn for the key action\\n     */\\n    function setXpAmount(bytes32 xpKey, uint256 xpToReceive) external;\\n\\n    /**\\n     * @notice get the xp amount to earn for a bytes32 key action\\n     * @param xpKey The action key as bytes32\\n     * @return success There is an action matching the key\\n     * @return _amount the xp to earn for the key action\\n     */\\n    function getXpAmount(bytes32 xpKey) external returns (bool, uint256);\\n\\n    /**\\n     * @notice mint the xp amount to earn for a bytes32 key action\\n     * @param xpKey The action key as bytes32\\n     * @param to the addres receiving the XP\\n     */\\n    function mint(bytes32 xpKey, address to) external;\\n}\\n\",\"keccak256\":\"0x8876d54ea5e4d0471db8cec5f42e8387cafbe83b8ea1618abe8326b69c96f60a\",\"license\":\"MIT\"},\"contracts/protocol/configuration/ProviderContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {Ownable} from \\\"../../imports/openzeppelin/contracts/Ownable.sol\\\";\\nimport {IERC20} from \\\"../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {IAddressProvider} from \\\"../../interfaces/IAddressProvider.sol\\\";\\nimport {IProtocolConfigurator} from \\\"../../interfaces/IProtocolConfigurator.sol\\\";\\n\\nimport {IProviderContract} from \\\"../../interfaces/IProviderContract.sol\\\";\\nimport {IACLManager} from \\\"../../interfaces/IACLManager.sol\\\";\\nimport {IBSWAN} from \\\"../../interfaces/IBSWAN.sol\\\";\\nimport {IXP} from \\\"../../interfaces/IXP.sol\\\";\\nimport {IUser} from \\\"../../interfaces/IUser.sol\\\";\\nimport {InputTypes} from \\\"../libraries/types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {RegistryKeys} from \\\"../libraries/helpers/RegistryKeys.sol\\\";\\nimport {RoleKeys} from \\\"../libraries/helpers/RoleKeys.sol\\\";\\n\\n/**\\n * @title Parent class to all contracts used to check that a contract is registerable\\n * @notice ProviderContract is Ownable so the deployer can re-register it against new registries\\n * @dev The Provider uses this to talk to all contracts that inherit from this contract.\\n */\\n\\ncontract ProviderContract is Ownable, IProviderContract {\\n    using GPv2SafeERC20 for IERC20;\\n    IAddressProvider public ADDRESS_PROVIDER;\\n\\n    uint256 public MAX_UINT = 2 ** 256 - 1;\\n\\n    /// @notice all contracts that inherit from ProviderContract are automatically Ownable()\\n    /// @dev internal constructor makes ProviderContract abstract\\n    constructor(IAddressProvider provider) Ownable() {\\n        require(\\n            address(provider) != address(0x00),\\n            Errors.ZERO_ADDRESS_IS_INVALID\\n        );\\n\\n        ADDRESS_PROVIDER = IAddressProvider(provider);\\n    }\\n\\n    /// @notice only allow  contracts to be called by the respective agent.\\n    ///     i.e. GigStorage methods can only be invoked by GigFactory.\\n    modifier onlyProvider(bytes32 _name) {\\n        require(\\n            _msgSender() == fetchContract(_name),\\n            Errors.ONLY_PROVIDER_ALLOWED\\n        );\\n        _;\\n    }\\n\\n    /// @notice only allow function contracts to be called by the respective role.\\n    ///     i.e. GigStorage methods can only be invoked by BUYER_ROLE.\\n    modifier onlyProtocolRole(bytes32 _role) {\\n        require(\\n            hasProtocolRole(_role, _msgSender()),\\n            \\\"Requires msg.sender has role\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyStillBuyer() {\\n        require(isStillBuyer(_msgSender()), Errors.ONLY_BUYER);\\n        _;\\n    }\\n\\n    modifier onlyStillSeller() {\\n        require(isStillSeller(_msgSender()), Errors.ONLY_SELLER);\\n        _;\\n    }\\n\\n    function hasProtocolRole(\\n        bytes32 _role,\\n        address account\\n    ) public view returns (bool) {\\n        bool hasRole = IACLManager(fetchContract(RegistryKeys.ACL_MANAGER))\\n            .hasRole(_role, account);\\n        return hasRole;\\n    }\\n\\n    // function hasProtocolRoles(\\n    //     bytes32[] memory _roles,\\n    //     address account\\n    // ) public view returns (bool) {\\n    //     for (uint256 i; i < _roles.length; i++) {\\n    //         bool hasRole = IACLManager(fetchContract(RegistryKeys.ACL_MANAGER))\\n    //             .hasRole(_roles[i], account);\\n    //         if (hasRole) {\\n    //             return true;\\n    //         }\\n    //     }\\n    //     return false;\\n    // }\\n\\n    function isStillBuyer(address account) public view returns (bool) {\\n        return\\n            hasProtocolRole(RoleKeys.BUYER_ROLE, account) &&\\n            IUser(fetchContract(RegistryKeys.USER))\\n                .getUserByAddress(account)\\n                .buyerUntil >\\n            block.timestamp;\\n    }\\n\\n    function isStillSeller(address account) public view returns (bool) {\\n        return\\n            hasProtocolRole(RoleKeys.SELLER_ROLE, account) &&\\n            IUser(fetchContract(RegistryKeys.USER))\\n                .getUserByAddress(account)\\n                .sellerUntil >\\n            block.timestamp;\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function setProvider(IAddressProvider _providerAddress) public override {\\n        require(\\n            address(_providerAddress) == address(0x00) ||\\n                address(ADDRESS_PROVIDER) == msg.sender ||\\n                this.owner() == msg.sender,\\n            \\\"Can only be called if addressesProvider is empty, msg.sender or owner\\\"\\n        );\\n        ADDRESS_PROVIDER = _providerAddress;\\n    }\\n\\n    function fetchContract(\\n        bytes32 _name\\n    ) public view override returns (address) {\\n        return address(IAddressProvider(ADDRESS_PROVIDER).fetchContract(_name));\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function kill() external override {\\n        assert(msg.sender == address(ADDRESS_PROVIDER));\\n        selfdestruct(payable(address(ADDRESS_PROVIDER)));\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        override\\n        returns (IAddressProvider)\\n    {\\n        return ADDRESS_PROVIDER;\\n    }\\n\\n    function grantProtocolRole(bytes32 _role, address account) internal {\\n        IACLManager(fetchContract(RegistryKeys.ACL_MANAGER)).grantRole(\\n            _role,\\n            account\\n        );\\n    }\\n\\n    function approve(\\n        address erc20\\n    ) public onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        address dat = fetchContract(RegistryKeys.DAT);\\n        IERC20(erc20).approve(dat, MAX_UINT);\\n    }\\n\\n    function _pay(\\n        InputTypes.ProcessPaymentInput memory params,\\n        IBSWAN dat\\n    ) internal {\\n        dat.pay(params.inviter0, params.inviter0Rewards);\\n        dat.pay(params.inviter1, params.inviter1Rewards);\\n        dat.pay(address(0), params.remainingRewards);\\n    }\\n\\n    function _processPayment(\\n        InputTypes.ProcessPaymentInput memory params\\n    ) internal {\\n        IBSWAN dat = IBSWAN(fetchContract(RegistryKeys.DAT));\\n        uint256 total = params.inviter0Rewards +\\n            params.inviter1Rewards +\\n            params.remainingRewards;\\n        IERC20(dat.currency()).safeTransferFrom(\\n            params.caller,\\n            address(this),\\n            total\\n        );\\n        _pay(params, dat);\\n    }\\n\\n    function _giveXP(bytes32 _key, address _to) internal {\\n        IXP(fetchContract(RegistryKeys.XP)).mint(_key, _to);\\n    }\\n\\n    function getProtocolRetributionParams()\\n        internal\\n        view\\n        returns (DataTypes.RetributionParams memory)\\n    {\\n        return\\n            IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            ).getRetributionParams();\\n    }\\n\\n    function getProtocolDelayTimestamp()\\n        internal\\n        view\\n        returns (DataTypes.DelayTimestamp memory)\\n    {\\n        return\\n            IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            ).getDelayTimestamp();\\n    }\\n\\n    function isGigOwner(\\n        uint256 userId,\\n        uint256 gigId,\\n        IUser UserContract\\n    ) public view returns (bool) {\\n        return UserContract.isGigOwner(userId, gigId);\\n    }\\n}\\n\",\"keccak256\":\"0x3797428e4012f90584916d0cbcae194627610db11936838aad90b8ed1b38df69\",\"license\":\"MIT\"},\"contracts/protocol/dispute/Dispute.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../libraries/types/InputTypes.sol\\\";\\nimport {IERC20} from \\\"../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {DisputeLogic} from \\\"../libraries/logics/DisputeLogic.sol\\\";\\nimport {InviterLogic} from \\\"../libraries/logics/InviterLogic.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\nimport {RegistryKeys} from \\\"../libraries/helpers/RegistryKeys.sol\\\";\\nimport {XPKeys} from \\\"../libraries/helpers/XPKeys.sol\\\";\\nimport {DisputeStorage} from \\\"./DisputeStorage.sol\\\";\\nimport {ProviderContract} from \\\"../configuration/ProviderContract.sol\\\";\\nimport {IProtocolConfigurator} from \\\"../../interfaces/IProtocolConfigurator.sol\\\";\\nimport {IAddressProvider} from \\\"../../interfaces/IAddressProvider.sol\\\";\\nimport {IUser} from \\\"../../interfaces/IUser.sol\\\";\\nimport {IJury} from \\\"../../interfaces/IJury.sol\\\";\\nimport {IBSWAN} from \\\"../../interfaces/IBSWAN.sol\\\";\\nimport {IDispute} from \\\"../../interfaces/IDispute.sol\\\";\\nimport {IGig} from \\\"../../interfaces/IGig.sol\\\";\\nimport {IOrder} from \\\"../../interfaces/IOrder.sol\\\";\\nimport {JuryLogic} from \\\"../libraries/logics/JuryLogic.sol\\\";\\n\\n/**\\n * @title\\tDispute contract\\n * @author\\tBlockswan\\n * @notice  Dispute data within an Blockswan protocol's marketplace\\n * - Users can:\\n *   # raise a dispute via the Dispute contract\\n *   # send evidence to a dispute\\n *   # commit a vote on a dispute\\n *   # vote on a dispute\\n *   # appeal to a dispute resolution\\n *  # execute a ruling on a dispute\\n * @dev To be covered by a proxy contract, owned by the addressProvider of the specific marketplace\\n * @dev All admin functions are callable by the protocolConfigurator contract defined also in the\\n *   addressProvider\\n **/\\n\\ncontract Dispute is DisputeStorage, ProviderContract {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using DisputeLogic for DataTypes.Dispute;\\n    using GPv2SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Constructor.\\n     * @param provider The address of the AddressProvider\\n     */\\n    constructor(IAddressProvider provider) ProviderContract(provider) {}\\n\\n    function getDisputeCount() public view virtual returns (uint256) {\\n        uint256 count = _disputeIds.length();\\n        return count;\\n    }\\n\\n    function getDisputeById(\\n        uint256 disputeId\\n    ) public view virtual returns (OutputTypes.DisputeOutput memory) {\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        return dispute.format(disputeId);\\n    }\\n\\n    function getDisputeList()\\n        external\\n        view\\n        virtual\\n        returns (OutputTypes.DisputeOutput[] memory)\\n    {\\n        uint256 len = getDisputeCount();\\n        OutputTypes.DisputeOutput[]\\n            memory disputeList = new OutputTypes.DisputeOutput[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            disputeList[i] = getDisputeById(i);\\n        }\\n        return disputeList;\\n    }\\n\\n    function createDispute(\\n        uint256 orderId,\\n        uint256 procecutorId,\\n        uint256 defendantId,\\n        address caller,\\n        DataTypes.Evidence memory evidence\\n    ) external onlyProvider(RegistryKeys.ORDER) returns (uint256) {\\n        uint256 newId = getDisputeCount();\\n\\n        {\\n            IProtocolConfigurator protocolConfigurator = IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            );\\n            DataTypes.DisputeParams memory disputeParams = protocolConfigurator\\n                .getDisputeParams();\\n\\n            _createDispute(\\n                newId,\\n                orderId,\\n                procecutorId,\\n                defendantId,\\n                caller,\\n                protocolConfigurator,\\n                disputeParams\\n            );\\n            sendEvidence(newId, caller, evidence);\\n        }\\n        return newId;\\n    }\\n\\n    function _createDispute(\\n        uint256 newId,\\n        uint256 orderId,\\n        uint256 procecutorId,\\n        uint256 defendantId,\\n        address caller,\\n        IProtocolConfigurator protocolConfigurator,\\n        DataTypes.DisputeParams memory disputeParams\\n    ) internal {\\n        bool isCreated = DisputeLogic.executeCreateDispute(\\n            _disputeIds,\\n            _disputes,\\n            InputTypes.ExecuteCreateDisputeInput({\\n                newId: newId,\\n                orderId: orderId,\\n                procecutorId: procecutorId,\\n                defendantId: defendantId,\\n                maxVotes: disputeParams.maxVotes,\\n                totalFeesForJurors: _payDisputeContract(\\n                    disputeParams.feePerJuror * disputeParams.maxVotes,\\n                    caller\\n                ),\\n                evidenceUntil: getDelayTimestamp(protocolConfigurator).evidence,\\n                drawnJurors: drawJurors(disputeParams.maxVotes),\\n                tokensAtStakePerJuror: JuryLogic.calcTokenToFreeze(\\n                    disputeParams.minStake,\\n                    disputeParams.alpha\\n                )\\n            })\\n        );\\n        require(isCreated, Errors.DISPUTE_NOT_CREATED);\\n    }\\n\\n    function getDelayTimestamp(\\n        IProtocolConfigurator protocolConfigurator\\n    ) public view returns (DataTypes.DelayTimestamp memory delayTimestamp) {\\n        delayTimestamp = protocolConfigurator.getDelayTimestamp();\\n        return delayTimestamp;\\n    }\\n\\n    function sendEvidence(\\n        uint256 disputeId,\\n        address caller,\\n        DataTypes.Evidence memory evidence\\n    ) public {\\n        IUser UserContract = IUser(fetchContract(RegistryKeys.USER));\\n        require(\\n            isCallerUser(caller, evidence.userId, UserContract),\\n            Errors.CALLER_NOT_USER\\n        );\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        bool isSent = DisputeLogic.executeSendEvidence(dispute, evidence);\\n        require(isSent, Errors.EVIDENCE_NOT_SUBMITTED);\\n    }\\n\\n    function passPhase(uint256 disputeId) public {\\n        DataTypes.DelayTimestamp memory delayTimestamps = IProtocolConfigurator(\\n            fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n        ).getDelayTimestamp();\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        DataTypes.DisputeState state = dispute.state;\\n        require(\\n            state != DataTypes.DisputeState.EXECUTION,\\n            Errors.DS_IN_EXECUTION_PERIOD\\n        );\\n        if (state == DataTypes.DisputeState.EVIDENCE) {\\n            dispute.goCommitState(delayTimestamps);\\n        } else if (state == DataTypes.DisputeState.COMMIT) {\\n            dispute.goVoteState(delayTimestamps.vote);\\n        } else if (state == DataTypes.DisputeState.VOTE) {\\n            dispute.goAppealState(delayTimestamps.appeal);\\n        } else if (state == DataTypes.DisputeState.APPEAL) {\\n            dispute.goExecutionState();\\n        }\\n    }\\n\\n    function commitVote(\\n        uint256 disputeId,\\n        uint256 choice,\\n        string memory salt\\n    ) public {\\n        address caller = _msgSender();\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        dispute.executeCommitVote(choice, salt, caller);\\n    }\\n\\n    function revealVote(\\n        uint256 disputeId,\\n        uint256 choice,\\n        string memory salt,\\n        string memory justification\\n    ) public {\\n        address caller = _msgSender();\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        dispute.executeRevealVote(choice, salt, justification, caller);\\n    }\\n\\n    function drawJurors(\\n        uint256 numberOfJurors\\n    ) internal returns (address[] memory jurorsAddresses) {\\n        IJury JuryContract = IJury(fetchContract(RegistryKeys.JURY));\\n        jurorsAddresses = JuryContract.drawJurors(numberOfJurors);\\n        JuryContract.freezeTokens(jurorsAddresses);\\n    }\\n\\n    function appeal(uint256 disputeId) external {\\n        address caller = _msgSender();\\n        IUser UserContract = IUser(fetchContract(RegistryKeys.USER));\\n        uint256 callerId = UserContract.getIdByAddress(caller);\\n        DataTypes.DisputeParams memory disputeParams = IProtocolConfigurator(\\n            fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n        ).getDisputeParams();\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        uint256 appealFeeInUSDC = dispute.calcAppealFees(\\n            disputeParams.feePerJuror\\n        );\\n        uint256 appealFeeRewardsinBSWAN = _payDisputeContract(\\n            appealFeeInUSDC,\\n            _msgSender()\\n        );\\n        dispute.executeAppeal(appealFeeRewardsinBSWAN, callerId);\\n    }\\n\\n    function claimAsJudge(uint256 disputeId, uint256 roundId) external {\\n        address caller = _msgSender();\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        OutputTypes.ExecuteClaimAsJudgeOutput memory claimParams = dispute\\n            .executeClaimAsJudge(caller, roundId);\\n        if (claimParams.isVoteCorrect) {\\n            _handleCorrectVoter(\\n                caller,\\n                claimParams.tokensAtStakePerJuror,\\n                claimParams.amountFromDisputeFees,\\n                claimParams.amountFromJurorsTokensAtStake\\n            );\\n        } else if (claimParams.isVoteInRange) {\\n            _handleInRangeVoter(caller, claimParams.tokensAtStakePerJuror);\\n        } else {\\n            require(false, Errors.VOTE_INCORRECT);\\n        }\\n    }\\n\\n    function claimAppealFeeRewards(uint256 disputeId, uint256 roundId) public {\\n        address caller = _msgSender();\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        uint256 callerId = IUser(fetchContract(RegistryKeys.USER))\\n            .getIdByAddress(caller);\\n\\n        uint256 appealFeeAmount = dispute.executeClaimAppealFeeRewards(\\n            callerId,\\n            roundId\\n        );\\n        _transfer(\\n            appealFeeAmount,\\n            caller,\\n            address(IBSWAN(fetchContract(RegistryKeys.DAT)))\\n        );\\n    }\\n\\n    function claimRuling(uint256 disputeId) external {\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        (\\n            uint256 ruling,\\n            uint256 orderId,\\n            uint256 procecutorId,\\n            uint256 defendantId\\n        ) = dispute.executeClaimRuling();\\n        IOrder OrderContract = IOrder(fetchContract(RegistryKeys.ORDER));\\n        OrderContract.rule(ruling, orderId, procecutorId, defendantId);\\n    }\\n\\n    function nextRound(\\n        uint256 disputeId,\\n        DataTypes.Evidence memory evidence\\n    ) external {\\n        address caller = _msgSender();\\n        DataTypes.Dispute storage dispute = DisputeLogic.getDisputeById(\\n            disputeId,\\n            _disputes\\n        );\\n        DataTypes.DelayTimestamp memory delays = IProtocolConfigurator(\\n            fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n        ).getDelayTimestamp();\\n        DataTypes.DisputeParams memory disputeParams = IProtocolConfigurator(\\n            fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n        ).getDisputeParams();\\n        uint256 roundNumber = dispute.rounds.length + 1;\\n        dispute.executeNextRound(\\n            InputTypes.ExecuteNextRoundInput({\\n                evidenceUntil: delays.evidence,\\n                maxVotes: disputeParams.maxVotes * roundNumber,\\n                totalFeesForJurors: _payDisputeContract(\\n                    disputeParams.feePerJuror *\\n                        disputeParams.maxVotes *\\n                        roundNumber,\\n                    caller\\n                ),\\n                tokensAtStakePerJuror: JuryLogic.calcTokenToFreeze(\\n                    disputeParams.minStake,\\n                    disputeParams.alpha\\n                ),\\n                drawnJurors: drawJurors(disputeParams.maxVotes * roundNumber)\\n            })\\n        );\\n        sendEvidence(disputeId, caller, evidence);\\n    }\\n\\n    function _handleCorrectVoter(\\n        address voter,\\n        uint256 tokensAtStakePerJuror,\\n        uint256 amountFromDisputeFees,\\n        uint256 amountFromJurorsTokensAtStake\\n    ) internal {\\n        IJury JuryContract = IJury(fetchContract(RegistryKeys.JURY));\\n        IBSWAN BSWANContract = IBSWAN(fetchContract(RegistryKeys.DAT));\\n        JuryContract.unfreezeTokens(tokensAtStakePerJuror, voter);\\n        _transfer(\\n            amountFromDisputeFees,\\n            address(JuryContract),\\n            address(BSWANContract)\\n        );\\n        JuryContract.rewardJuror(\\n            amountFromDisputeFees + amountFromJurorsTokensAtStake,\\n            voter\\n        );\\n    }\\n\\n    function _handleInRangeVoter(\\n        address voter,\\n        uint256 tokensAtStakePerJuror\\n    ) internal {\\n        IJury JuryContract = IJury(fetchContract(RegistryKeys.JURY));\\n        JuryContract.unfreezeTokens(tokensAtStakePerJuror, voter);\\n    }\\n\\n    function _safeTransferFrom(\\n        uint256 value,\\n        address from,\\n        address to,\\n        address currency\\n    ) internal {\\n        IERC20(currency).safeTransferFrom(from, to, value);\\n    }\\n\\n    function _transfer(uint256 amount, address _to, address currency) internal {\\n        IERC20(currency).safeTransfer(_to, amount);\\n    }\\n\\n    function _payDisputeContract(\\n        uint256 amount,\\n        address payer\\n    ) internal returns (uint256 amountBought) {\\n        IBSWAN BSWANContract = IBSWAN(fetchContract(RegistryKeys.DAT));\\n        _safeTransferFrom(\\n            amount,\\n            payer,\\n            address(this),\\n            address(BSWANContract.currency())\\n        );\\n        amountBought = BSWANContract.estimateBuyValue(amount);\\n        BSWANContract.buy(address(this), amount, amountBought);\\n    }\\n\\n    function isCallerUser(\\n        address caller,\\n        uint256 userId,\\n        IUser UserContract\\n    ) public view returns (bool isAddressMatchingId) {\\n        isAddressMatchingId = UserContract.getIdByAddress(caller) == userId;\\n    }\\n\\n    function getOrderPrice(\\n        uint256 orderId\\n    ) public view returns (uint256 price) {\\n        price = IOrder(fetchContract(RegistryKeys.ORDER))\\n            .getOrderById(orderId)\\n            .invoice\\n            .price;\\n    }\\n}\\n\",\"keccak256\":\"0xab455b2adf024f9c1a2ec6b464a1bff7ed5c1e1aae30a4520de13619ac14ffc3\",\"license\":\"MIT\"},\"contracts/protocol/dispute/DisputeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {RegistryKeys} from \\\"../libraries/helpers/RegistryKeys.sol\\\";\\n\\n/**\\n * @title DisputeStorage\\n * @author Blockswan\\n * @notice Contract used as storage of the dispute contract.\\n * @dev It defines the storage layout of the dispute contract.\\n */\\ncontract DisputeStorage {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    // set of dispute Ids\\n    EnumerableSet.UintSet internal _disputeIds;\\n    // Map of the dispute id to the dispute data (disputeId => Dispute)\\n    mapping(uint256 => DataTypes.Dispute) internal _disputes;\\n}\\n\",\"keccak256\":\"0x47e6419eefb9085846b8f180590db52f9212aa0b9c3f758cdc542c68be50bf80\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/Choices.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Choices library\\n * @author Blockswan\\n * @notice Defines the choices available for a juror upon a dispute in the Blockswan protocol.\\n * The uint256 values chosen represents the % of the value in the order contract that the procecutor will receive.\\n * (eg. 0 = 0% of the value in the order contract)\\n * (eg. 1000000000000000000 = 100% of the value in the order contract)\\n */\\nlibrary Choices {\\n    uint256 public constant PERCENTAGE_FACTOR = 1e4;\\n    // ---- CHOICES ---- (in percentage from 0 to 100% with 10% incrementation - 100% = 1e4)\\n    uint256 public constant ZERO_PERCENT = 0;\\n    uint256 public constant TEN_PERCENT = 1e3;\\n    uint256 public constant TWENTY_PERCENT = 2e3;\\n    uint256 public constant THIRTY_PERCENT = 3e3;\\n    uint256 public constant FORTY_PERCENT = 4e3;\\n    uint256 public constant FIFTY_PERCENT = 5e3;\\n    uint256 public constant SIXTY_PERCENT = 6e3;\\n    uint256 public constant SEVENTY_PERCENT = 7e3;\\n    uint256 public constant EIGHTY_PERCENT = 8e3;\\n    uint256 public constant NINETY_PERCENT = 9e3;\\n    uint256 public constant ONE_HUNDRED_PERCENT = 1e4;\\n}\\n\",\"keccak256\":\"0xd417a149c0ff438ec22e9d62c35b5e1d2b549add66226893c0c389347ca93245\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Errors  library\\n * @author Blockswan\\n * @notice Defines the error messages emitted by the different contracts of the Blockswan protocol\\n */\\nlibrary Errors {\\n    string public constant INVALID_ADDRESS_PROVIDER_ID = \\\"1\\\"; // The addresses provider is not valid\\n    string public constant ADDRESS_PROVIDER_ALREADY_ADDED = \\\"2\\\"; // This addresses provider already exists\\n    string public constant ADDRESS_PROVIDER_NOT_REGISTERED = \\\"3\\\"; // 'This addresses provider is not registered'\\n    string public constant CONTRACT_NAME_ALREADY_USED = \\\"4\\\"; // 'Requires that given _name does not already have non-zero registered contract address'\\n    string public constant ZERO_ADDRESS_IS_INVALID = \\\"5\\\"; // the address provided is 0x00\\n    string public constant INDEX_OUT_OF_RANGE = \\\"6\\\"; // the index provided is out of range\\n    string public constant ADDRESS_ALREADY_USED = \\\"7\\\"; // 'The address provided has already been unsed to initialise an account'\\n    string public constant INVALID_USER_ID = \\\"8\\\"; // 'The userId is incorrect'\\n    string public constant RESTRICTED_TO_BUYER = \\\"9\\\"; // this function can't  be called by buyers\\n    string public constant INVALID_INVITER_ID = \\\"10\\\"; // The inviter ID provided is incorrect\\n    string public constant FAILED_BECOMING_BUYER = \\\"11\\\"; // The execution to becomeBuyer failed\\n    string public constant RESTRICTED_TO_SELLER = \\\"12\\\"; // this function can't  be called by sellers\\n    string public constant FAILED_BECOMING_SELLER = \\\"13\\\"; // The execution to becomeSeller failed\\n    string public constant NO_MATCHING_XP_KEY = \\\"14\\\"; // There is no xp value to give for this byte32\\n    string public constant GIG_ID_ALREADY_EXISING = \\\"15\\\"; // There is already an id for this gig.\\n    string public constant ONLY_SELLER = \\\"16\\\"; // Only account with the seller role can call the functions\\n    string public constant ONLY_BUYER = \\\"17\\\"; // Only buyers can call those functions.\\n    string public constant NOT_GIG_OWNER = \\\"18\\\"; // The id provided does not match with the gig owner id\\n    string public constant CALLER_NOT_SELLER_ID = \\\"19\\\"; // The seller id provided is not matching with the account address calling the function\\n    string public constant CALLER_NOT_BUYER_ID = \\\"20\\\"; // The buyer id provided is not matching with the account address calling the function\\n    string public constant NOT_ORDER_SELLER = \\\"21\\\"; // The id provided is not the order seller\\n    string public constant NOT_ORDER_BUYER = \\\"22\\\"; // The id provided is not the order buyer\\n    string public constant INVALID_ORDER_STATE = \\\"23\\\"; // The function can't be called under the current order state\\n    string public constant SELF_REFUND_DELAY_NOT_OVER = \\\"24\\\"; // The self refund delay is not over\\n    string public constant NOT_ORDER_ACTOR = \\\"25\\\"; // The account address calling the function is not matching with the buyerId nor sellerId.\\n    string public constant DISPUTE_NOT_CREATED = \\\"26\\\"; // The dispute has not been created yet\\n    string public constant JURY_STAKE_NOT_ENOUGH = \\\"27\\\"; // The jury stake is not enough\\n    string public constant FAILED_TO_STAKE_JURY = \\\"28\\\"; // The jury stake failed\\n    string public constant FAILED_TO_WITHDRAW_JURY = \\\"29\\\"; // The jury withdraw failed\\n    string public constant ROUND_EVIDENCE_ALREADY_SUBMITTED = \\\"30\\\"; // The evidence has already been submitted\\n    string public constant EVIDENCE_NOT_SUBMITTED = \\\"31\\\"; // The evidence has not been submitted\\n    string public constant DS_EVIDENCE_PERIOD_OVER = \\\"32\\\"; // The evidence period is over\\n    // string public constant DS_VOTING_PERIOD_OVER = \\\"33\\\"; // The voting period is over\\n    // string public constant DS_VOTING_PERIOD_NOT_OVER = \\\"34\\\"; // The voting period is not over\\n    // string public constant DS_VOTING_PERIOD_NOT_STARTED = \\\"35\\\"; // The voting period has not started yet\\n    string public constant ONLY_PROVIDER_ALLOWED = \\\"36\\\"; // Only the provider can call this function\\n    string public constant DS_EVIDENCE_SENDER_NOT_PARTY = \\\"37\\\"; // The sender is not a party of the dispute\\n    string public constant CALLER_NOT_USER = \\\"38\\\"; // The caller is not the user Id\\n    string public constant DS_EVIDENCE_ROLE_NOT_VALID = \\\"39\\\"; // The role is not valid\\n    string public constant RD_ROUND_DOES_NOT_EXIST = \\\"40\\\"; // The round does not exist\\n    string public constant DS_IN_EXECUTION_PERIOD = \\\"46\\\"; //     The dispute is in execution state\\n    string public constant VOTE_REVEAL_INCORRECT = \\\"47\\\"; //     The vote reveal is incorrect\\n    string public constant ROUND_VOTE_ALREADY_COMMITED = \\\"48\\\"; //     The vote has already been commited\\n    string public constant ROUND_VOTE_NOT_COMMITED = \\\"49\\\"; //     The vote has not been commited\\n    string public constant ROUND_VOTE_ALREADY_REVEALED = \\\"50\\\"; //     The vote has already been revealed\\n    string public constant RD_ACCOUNT_NOT_DRAWN_JUROR = \\\"51\\\"; //     The account is not a drawn juror\\n    string public constant DS_COMMIT_STATE_REQUIRED = \\\"52\\\"; //    The dispute is not in commit state\\n    string public constant DS_TIME_NOT_PASSED = \\\"53\\\"; //   The time has not passed\\n    string public constant DS_INVALID_STATE = \\\"54\\\"; //   The state is invalid\\n    string public constant VOTE_INVALID_CHOICE = \\\"55\\\"; //  The vote choice is invalid\\n    string public constant DS_NO_COMMITMENTS_MADE_FOR_ROUND = \\\"56\\\"; //  No commitments were made for the round\\n    string public constant DS_NO_VOTES_MADE_FOR_ROUND = \\\"57\\\"; //  No votes were made for the round\\n    string public constant RD_VOTE_NOT_FOUND = \\\"58\\\"; //  The vote was not found\\n    string public constant ROUND_NOT_CLOSED = \\\"59\\\"; //  The round is not closed\\n    string public constant VOTE_INCORRECT = \\\"60\\\"; //  The vote is incorrect\\n    string public constant ROUND_NOT_APPEALED = \\\"61\\\"; //  The round is not appealed\\n    string public constant ROUND_ID_INVALID = \\\"62\\\"; //  The round id is invalid\\n    string public constant CLAIM_NOT_ALLOWED = \\\"63\\\"; //  The claim is not allowed\\n    string public constant ROUND_IS_APPEALED = \\\"64\\\"; //  The round is appealed\\n    string public constant DS_DISPUTE_ALREADY_RULED = \\\"65\\\"; //  The dispute is already ruled\\n}\\n\",\"keccak256\":\"0x006a08fc9f61bb5b5f34aba81b29feff39671d8d23647e159b5aae7cd8755cc2\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/helpers/RegistryKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RegistryKeys {\\n    /// REGISTRY\\n    //  ----  CONTRACT ------\\n    bytes32 public constant GIG = \\\"GIG\\\";\\n    bytes32 public constant ORDER = \\\"ORDER\\\";\\n    bytes32 public constant USER = \\\"USER\\\";\\n    bytes32 public constant DISPUTE = \\\"DISPUTE\\\";\\n    bytes32 public constant JURY = \\\"JURY\\\";\\n    bytes32 public constant PROTOCOL_CONFIGURATOR = \\\"PROTOCOL_CONFIGURATOR\\\";\\n    bytes32 public constant DAT = \\\"DAT\\\";\\n    bytes32 public constant ACL_MANAGER = \\\"ACL_MANAGER\\\";\\n    bytes32 public constant DATA_PROVIDER = \\\"DATA_PROVIDER\\\";\\n    bytes32 public constant XP = \\\"XP\\\";\\n    // ---- NON CONTRACT ------\\n    bytes32 public constant ACL_ADMIN = \\\"ACL_ADMIN\\\";\\n\\n    bytes32 public constant TREE_KEY = \\\"Blockswan/SortitionSumTrees\\\";\\n}\\n\",\"keccak256\":\"0x10a9b72b3680e119c279cbd2196a8fbb5f985d4ea99a8ee1cbd599a83464f41d\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/RoleKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoleKeys {\\n    // ---- ADMIN ROLES  ------\\n    bytes32 public constant PROTOCOL_ADMIN_ROLE = \\\"PROTOCOL_ADMIN\\\";\\n    bytes32 public constant BUYER_ADMIN_ROLE = \\\"BUYER_ADMIN\\\";\\n    bytes32 public constant SELLER_ADMIN_ROLE = \\\"SELLER_ADMIN\\\";\\n    // ----  ROLES  ------\\n    bytes32 public constant BUYER_ROLE = \\\"BUYER\\\";\\n    bytes32 public constant SELLER_ROLE = \\\"SELLER\\\";\\n    bytes32 public constant JUDGE_ROLE = \\\"JUDGE\\\";\\n    bytes32 public constant BLACKLIST_ROLE = \\\"BLACKLIST\\\";\\n    bytes32 public constant WHITELIST_ROLE = \\\"WHITELIST\\\";\\n    bytes32 public constant XP_GIVER_ROLE = \\\"XP_GIVER\\\";\\n}\\n\",\"keccak256\":\"0xe8a691a194d701426456deeea9b7b85d815e8cbaaac4c2c7e623dbec9c7e9d91\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/XPKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary XPKeys {\\n    bytes32 public constant BECOME_BUYER = \\\"BECOME_BUYER\\\";\\n    bytes32 public constant BECOME_SELLER = \\\"BECOME_SELLER\\\";\\n    bytes32 public constant CREATE_GIG = \\\"CREATE_GIG\\\";\\n    bytes32 public constant CREATE_ORDER = \\\"CREATE_ORDER\\\";\\n    bytes32 public constant PAY_ORDER = \\\"PAY_ORDER\\\";\\n}\\n\",\"keccak256\":\"0xde7fa79e87798d81f70538cc2b9cce096882100e2150744f392a26e48ba786de\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/DisputeDataLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title DisputeData logic library\\n * @author Blockswan\\n * @notice Implements the logic for dispute data specific functions\\n */\\n\\nlibrary DisputeDataLogic {\\n    using Counters for Counters.Counter;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function setCreated(\\n        DataTypes.Dispute storage dispute\\n    ) external returns (bool) {\\n        dispute.createdAt = block.timestamp;\\n        return true;\\n    }\\n\\n    function setOrderId(\\n        DataTypes.Dispute storage dispute,\\n        uint256 orderId\\n    ) external returns (bool) {\\n        dispute.orderId = orderId;\\n        return true;\\n    }\\n\\n    function setRuling(\\n        DataTypes.Dispute storage dispute,\\n        uint256 ruling\\n    ) external returns (bool) {\\n        dispute.ruling = ruling;\\n        dispute.ruledAt = block.timestamp;\\n        return true;\\n    }\\n\\n    function setState(\\n        DataTypes.Dispute storage dispute,\\n        DataTypes.DisputeState state\\n    ) external returns (bool) {\\n        dispute.state = state;\\n        return true;\\n    }\\n\\n    function addTimestamp(\\n        DataTypes.Dispute storage dispute,\\n        uint256 delay\\n    ) external returns (bool) {\\n        dispute.timestamps.push(block.timestamp + delay);\\n        return true;\\n    }\\n\\n    function deleteTimestamps(\\n        DataTypes.Dispute storage dispute\\n    ) external returns (bool) {\\n        delete dispute.timestamps;\\n        return true;\\n    }\\n\\n    function isState(\\n        DataTypes.Dispute storage dispute,\\n        DataTypes.DisputeState state\\n    ) external view returns (bool) {\\n        return (dispute.state == state);\\n    }\\n\\n    function getLatestRound(\\n        DataTypes.Dispute storage dispute\\n    ) external view returns (DataTypes.Round storage) {\\n        DataTypes.Round[] storage rounds = dispute.rounds;\\n        return rounds[rounds.length - 1];\\n    }\\n\\n    function getRound(\\n        DataTypes.Dispute storage dispute,\\n        uint256 roundId\\n    ) external view returns (DataTypes.Round storage) {\\n        return dispute.rounds[roundId];\\n    }\\n\\n    function isEvidencePeriod(\\n        DataTypes.Dispute storage dispute\\n    ) external view returns (bool) {\\n        return (block.timestamp < dispute.timestamps[0]);\\n    }\\n\\n    function isCommitPeriod(\\n        DataTypes.Dispute storage dispute\\n    ) external view returns (bool) {\\n        return (block.timestamp >= dispute.timestamps[0] &&\\n            block.timestamp < dispute.timestamps[1]);\\n    }\\n\\n    function isVotePeriod(\\n        DataTypes.Dispute storage dispute\\n    ) external view returns (bool) {\\n        return (block.timestamp >= dispute.timestamps[1] &&\\n            block.timestamp < dispute.timestamps[2]);\\n    }\\n\\n    function isAppealPeriod(\\n        DataTypes.Dispute storage dispute\\n    ) external view returns (bool) {\\n        return (block.timestamp >= dispute.timestamps[2] &&\\n            block.timestamp < dispute.timestamps[3]);\\n    }\\n}\\n\",\"keccak256\":\"0x61fff32c61907654b5ae959a3e9c8af9e63c806f89e209294e8f7a8132c64394\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/DisputeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {PercentageMath} from \\\"../../../imports/aave/contracts/PercentageMath.sol\\\";\\nimport {RoundLogic} from \\\"./RoundLogic.sol\\\";\\nimport {DisputeDataLogic} from \\\"./DisputeDataLogic.sol\\\";\\nimport {SortitionSumTreeFactory} from \\\"../../../imports/kleros/contracts/SortitionSumTreeFactory.sol\\\";\\nimport {Choices} from \\\"../helpers/Choices.sol\\\";\\nimport {RoundDataLogic} from \\\"./RoundDataLogic.sol\\\";\\n\\n/**\\n * @title Dispute logic library\\n * @author Blockswan\\n * @notice Implements the logic for dispute specific functions\\n */\\nlibrary DisputeLogic {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using DisputeDataLogic for DataTypes.Dispute;\\n    using RoundDataLogic for DataTypes.Round;\\n    using RoundLogic for *;\\n    using Counters for Counters.Counter;\\n    using PercentageMath for uint256;\\n    using SortitionSumTreeFactory for SortitionSumTreeFactory.SortitionSumTrees;\\n\\n    modifier onlyIfTimeElapsed(uint256 timestamp) {\\n        require(block.timestamp >= timestamp, Errors.DS_TIME_NOT_PASSED);\\n        _;\\n    }\\n\\n    modifier onlyIfState(\\n        DataTypes.Dispute storage dispute,\\n        DataTypes.DisputeState state\\n    ) {\\n        require(dispute.state == state, Errors.DS_INVALID_STATE);\\n        _;\\n    }\\n\\n    modifier onlyIfAtLeastOneCommit(DataTypes.Dispute storage dispute) {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        require(\\n            round.totalCommited > 0,\\n            Errors.DS_NO_COMMITMENTS_MADE_FOR_ROUND\\n        );\\n        _;\\n    }\\n\\n    modifier onlyIfAtLeastOneVote(DataTypes.Dispute storage dispute) {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        require(round.totalVoted > 0, Errors.DS_NO_VOTES_MADE_FOR_ROUND);\\n        _;\\n    }\\n\\n    function getDisputeById(\\n        uint256 disputeId,\\n        mapping(uint256 => DataTypes.Dispute) storage disputes\\n    ) public view returns (DataTypes.Dispute storage) {\\n        return disputes[disputeId];\\n    }\\n\\n    function executeCreateDispute(\\n        EnumerableSet.UintSet storage disputeIds,\\n        mapping(uint256 => DataTypes.Dispute) storage disputes,\\n        InputTypes.ExecuteCreateDisputeInput memory params\\n    ) external returns (bool) {\\n        bool added = disputeIds.add(params.newId);\\n        DataTypes.Dispute storage newDispute = getDisputeById(\\n            params.newId,\\n            disputes\\n        );\\n        newDispute.addTimestamp(params.evidenceUntil);\\n        newDispute.rounds.addRound(\\n            InputTypes.AddRoundInput({\\n                maxVotes: params.maxVotes,\\n                totalFeesForJurors: params.totalFeesForJurors,\\n                tokensAtStakePerJuror: params.tokensAtStakePerJuror,\\n                procecutorId: params.procecutorId,\\n                defendantId: params.defendantId,\\n                drawnJurors: params.drawnJurors\\n            })\\n        );\\n        newDispute.setCreated();\\n        return added;\\n    }\\n\\n    function executeNextRound(\\n        DataTypes.Dispute storage dispute,\\n        InputTypes.ExecuteNextRoundInput memory params\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.EXECUTION)\\n        returns (bool)\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        require(round.isAppealed(), Errors.ROUND_NOT_APPEALED);\\n        dispute.setState(DataTypes.DisputeState.EVIDENCE);\\n        dispute.deleteTimestamps();\\n        dispute.addTimestamp(params.evidenceUntil);\\n        dispute.rounds.addRound(\\n            InputTypes.AddRoundInput({\\n                maxVotes: params.maxVotes,\\n                totalFeesForJurors: params.totalFeesForJurors,\\n                tokensAtStakePerJuror: params.tokensAtStakePerJuror,\\n                procecutorId: round.procecutorId,\\n                defendantId: round.defendantId,\\n                drawnJurors: params.drawnJurors\\n            })\\n        );\\n        return true;\\n    }\\n\\n    modifier onlyNotRuled(DataTypes.Dispute storage dispute) {\\n        require(dispute.ruledAt == 0, Errors.DS_DISPUTE_ALREADY_RULED);\\n        _;\\n    }\\n\\n    function executeSendEvidence(\\n        DataTypes.Dispute storage dispute,\\n        DataTypes.Evidence memory evidence\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.EVIDENCE)\\n        returns (bool)\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        round.submitEvidence(evidence);\\n        return true;\\n    }\\n\\n    function executeClaimRuling(\\n        DataTypes.Dispute storage dispute\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.EXECUTION)\\n        onlyNotRuled(dispute)\\n        returns (\\n            uint256 ruling,\\n            uint256 orderId,\\n            uint256 procecutorId,\\n            uint256 defendantId\\n        )\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        (ruling, procecutorId, defendantId) = round.claimRuling();\\n        orderId = dispute.orderId;\\n        dispute.setRuling(ruling);\\n    }\\n\\n    function calcDisputeDelaysFromBlock(\\n        uint256 evidenceUntil,\\n        uint256 commitUntil,\\n        uint256 voteUntil,\\n        uint256 appealUntil\\n    ) public view returns (uint256[] memory delays) {\\n        uint256 blockTimestamp = block.timestamp;\\n        delays = new uint256[](4);\\n        delays[0] = blockTimestamp + evidenceUntil;\\n        delays[1] = delays[0] + commitUntil;\\n        delays[2] = delays[1] + voteUntil;\\n        delays[3] = delays[2] + appealUntil;\\n    }\\n\\n    function format(\\n        DataTypes.Dispute storage dispute,\\n        uint256 id\\n    ) external view returns (OutputTypes.DisputeOutput memory) {\\n        return (\\n            OutputTypes.DisputeOutput({\\n                createdAt: dispute.createdAt,\\n                disputeId: id,\\n                orderId: dispute.orderId,\\n                ruling: dispute.ruling,\\n                ruledAt: dispute.ruledAt,\\n                timestamps: dispute.timestamps,\\n                state: dispute.state,\\n                rounds: RoundLogic.formatAll(dispute.rounds)\\n            })\\n        );\\n    }\\n\\n    function setEvidencePhase(DataTypes.Dispute storage dispute) external {}\\n\\n    function goCommitState(\\n        DataTypes.Dispute storage dispute,\\n        DataTypes.DelayTimestamp memory delayTimestamp\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.EVIDENCE)\\n        onlyIfTimeElapsed(dispute.timestamps[0])\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        if (round.areEvidencesSubmitted()) {\\n            dispute.addTimestamp(delayTimestamp.commit);\\n            dispute.setState(DataTypes.DisputeState.COMMIT);\\n        } else {\\n            dispute.addTimestamp(delayTimestamp.commit);\\n            dispute.addTimestamp(delayTimestamp.vote);\\n            dispute.addTimestamp(delayTimestamp.appeal);\\n            dispute.setState(DataTypes.DisputeState.APPEAL);\\n            round.setWinningChoice(Choices.ONE_HUNDRED_PERCENT);\\n        }\\n    }\\n\\n    function goVoteState(\\n        DataTypes.Dispute storage dispute,\\n        uint256 voteDelay\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.COMMIT)\\n        onlyIfTimeElapsed(dispute.timestamps[1])\\n        onlyIfAtLeastOneCommit(dispute)\\n    {\\n        dispute.addTimestamp(voteDelay);\\n        dispute.setState(DataTypes.DisputeState.VOTE);\\n    }\\n\\n    function goAppealState(\\n        DataTypes.Dispute storage dispute,\\n        uint256 appealDelay\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.VOTE)\\n        onlyIfTimeElapsed(dispute.timestamps[2])\\n        onlyIfAtLeastOneVote(dispute)\\n    {\\n        dispute.setState(DataTypes.DisputeState.APPEAL);\\n        dispute.addTimestamp(appealDelay);\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        round.setWinningChoice(round.getWinningChoice());\\n    }\\n\\n    function goExecutionState(\\n        DataTypes.Dispute storage dispute\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.APPEAL)\\n        onlyIfTimeElapsed(dispute.timestamps[3])\\n    {\\n        dispute.setState(DataTypes.DisputeState.EXECUTION);\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        uint256 winningChoice = round.winningChoice;\\n        (uint256 min, uint256 max) = RoundDataLogic.getRanges(winningChoice);\\n        round.setTotalPenalties(round.calcPenaltiesAmount(min, max));\\n        round.close();\\n    }\\n\\n    //function goNextRound() external {}\\n\\n    function executeCommitVote(\\n        DataTypes.Dispute storage dispute,\\n        uint256 choice,\\n        string memory salt,\\n        address account\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.COMMIT)\\n        returns (bool)\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        round.commitVote(account, choice, salt);\\n        return true;\\n    }\\n\\n    function executeRevealVote(\\n        DataTypes.Dispute storage dispute,\\n        uint256 choice,\\n        string memory salt,\\n        string memory justification,\\n        address account\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.VOTE)\\n        returns (bool)\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        round.revealVote(account, choice, salt, justification);\\n        return true;\\n    }\\n\\n    function executeAppeal(\\n        DataTypes.Dispute storage dispute,\\n        uint256 appealFeeRewards,\\n        uint256 procecutorId\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.APPEAL)\\n        returns (bool)\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        round.appeal(appealFeeRewards, procecutorId);\\n        return true;\\n    }\\n\\n    function executeClaimAsJudge(\\n        DataTypes.Dispute storage dispute,\\n        address account,\\n        uint256 roundId\\n    ) external returns (OutputTypes.ExecuteClaimAsJudgeOutput memory params) {\\n        DataTypes.Round storage round = dispute.getRound(roundId);\\n        uint256 winningChoice = round.winningChoice;\\n        uint256 amountOfCorrectVotes = round.getAmountOfCorrectVote(\\n            winningChoice\\n        );\\n\\n        (uint256 min, uint256 max) = RoundDataLogic.getRanges(winningChoice);\\n\\n        params = round.claimAsJudge(\\n            InputTypes.ClaimAsJudgeInput({\\n                account: account,\\n                min: min,\\n                max: max,\\n                winningChoice: winningChoice,\\n                amountOfCorrectVotes: amountOfCorrectVotes,\\n                tokensAtStakePerJuror: round.tokensAtStakePerJuror,\\n                totalFeesForJurors: round.totalFeesForJurors,\\n                penalties: round.penalties\\n            })\\n        );\\n    }\\n\\n    function executeClaimAppealFeeRewards(\\n        DataTypes.Dispute storage dispute,\\n        uint256 callerId,\\n        uint256 roundId\\n    ) external returns (uint256) {\\n        require(roundId > 0, Errors.ROUND_ID_INVALID);\\n        (uint256 appealFeeAmount, bool isClaimable) = RoundLogic\\n            .claimAppealFeeRewards(\\n                dispute.getRound(roundId),\\n                dispute.getRound(roundId - 1),\\n                callerId\\n            );\\n        require(isClaimable, Errors.CLAIM_NOT_ALLOWED);\\n        return appealFeeAmount;\\n    }\\n\\n    function calcAppealFees(\\n        DataTypes.Dispute storage dispute,\\n        uint256 feePerJuror\\n    ) public view returns (uint256) {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        uint256 appealFee = feePerJuror * round.maxVotes * 2;\\n        return PercentageMath.percentMul(appealFee, 0.1e4);\\n    }\\n}\\n\",\"keccak256\":\"0x34fba38b0a158cff1d66599897e0b01fd87e4d95b99629144247e9bbb233c4f6\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/InviterLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {PercentageMath} from \\\"../../../imports/aave/contracts/PercentageMath.sol\\\";\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title Inviter logic library\\n * @author Blockswan\\n * @notice Implements the logic for inviter specific functions\\n */\\nlibrary InviterLogic {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using PercentageMath for uint256;\\n\\n    function addInviter(\\n        DataTypes.User storage user,\\n        uint256 inviterId\\n    ) external returns (bool) {\\n        user.inviterId = inviterId;\\n        return (true);\\n    }\\n\\n    function getInviterAddress(\\n        DataTypes.User storage user,\\n        EnumerableSet.AddressSet storage userIdToAddress\\n    ) public view returns (address) {\\n        return (userIdToAddress.at(user.inviterId));\\n    }\\n\\n    function getInvitersAddresses(\\n        DataTypes.User storage user,\\n        EnumerableSet.AddressSet storage userIdToAddress,\\n        mapping(address => DataTypes.User) storage users\\n    ) public view returns (address, address) {\\n        address inviter0 = getInviterAddress(user, userIdToAddress);\\n        address inviter1 = getInviterAddress(users[inviter0], userIdToAddress);\\n        return (inviter0, inviter1);\\n    }\\n\\n    function calcInviterRewards(\\n        uint256 currencyValue,\\n        uint256 affiliateShare\\n    ) public pure returns (uint256) {\\n        return currencyValue.percentMul(affiliateShare);\\n    }\\n\\n    function calcInvitersRewards(\\n        InputTypes.CalcInvitersRewardsInput memory params\\n    ) external pure returns (OutputTypes.CalcInvitersRewardsOutput memory) {\\n        uint256 totalRewards = calcInviterRewards(\\n            params.currencyValue,\\n            params.affiliateShare\\n        );\\n        uint256 inviter0Rewards = totalRewards.percentMul(\\n            params.lvl0AffiliateShare\\n        );\\n        uint256 inviter1Rewards = totalRewards - inviter0Rewards;\\n\\n        return (\\n            OutputTypes.CalcInvitersRewardsOutput({\\n                inviter0Rewards: inviter0Rewards,\\n                inviter1Rewards: inviter1Rewards,\\n                remainingRewards: params.currencyValue - totalRewards\\n            })\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x585922304db1e1d3c7ccefefffd8b5b2547350018c542052cff303780b1e8f26\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/JuryDataLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {PercentageMath} from \\\"../../../imports/aave/contracts/PercentageMath.sol\\\";\\nimport {SortitionSumTreeFactory} from \\\"../../../imports/kleros/contracts/SortitionSumTreeFactory.sol\\\";\\n\\n/**\\n * @title JuryData logic library\\n * @author Blockswan\\n * @notice Implements the logic for jury data specific functions\\n */\\nlibrary JuryDataLogic {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using PercentageMath for uint256;\\n    using SortitionSumTreeFactory for SortitionSumTreeFactory.SortitionSumTrees;\\n\\n    function draw(\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree,\\n        bytes32 treeKey,\\n        uint256 rng\\n    ) public view returns (address) {\\n        return address(uint160(uint256(tree.draw(treeKey, rng))));\\n    }\\n\\n    function total(\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree,\\n        bytes32 treeKey\\n    ) external view returns (uint256) {\\n        return tree.total(treeKey);\\n    }\\n\\n    function updateTree(\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree,\\n        address account,\\n        bytes32 treeKey,\\n        uint256 amount\\n    ) internal {\\n        tree.set(treeKey, amount, bytes32(uint256(uint160(account))));\\n    }\\n\\n    function incrementStake(\\n        DataTypes.Juror storage juror,\\n        address account,\\n        uint256 amount,\\n        bytes32 treeKey,\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree\\n    ) internal returns (bool) {\\n        juror.stakedTokens += amount;\\n        updateTree(tree, account, treeKey, juror.stakedTokens);\\n\\n        return true;\\n    }\\n\\n    function decrementStake(\\n        DataTypes.Juror storage juror,\\n        address account,\\n        uint256 amount,\\n        bytes32 treeKey,\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree\\n    ) internal returns (bool) {\\n        juror.stakedTokens -= amount;\\n        updateTree(tree, account, treeKey, juror.stakedTokens);\\n\\n        return true;\\n    }\\n\\n    function incremementFreeze(\\n        DataTypes.Juror storage juror,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        juror.freezedTokens += amount;\\n        return true;\\n    }\\n\\n    function decrementFreeze(\\n        DataTypes.Juror storage juror,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        juror.freezedTokens -= amount;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xc9d99197446ebcdc85749a23f63a1ea1a537c714274ae01740d6f4b48e99d0b8\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/JuryLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {PercentageMath} from \\\"../../../imports/aave/contracts/PercentageMath.sol\\\";\\nimport {SortitionSumTreeFactory} from \\\"../../../imports/kleros/contracts/SortitionSumTreeFactory.sol\\\";\\nimport {JuryDataLogic} from \\\"./JuryDataLogic.sol\\\";\\n\\n/**\\n * @title Jury logic library\\n * @author Blockswan\\n * @notice Implements the logic for jury specific functions\\n */\\n\\nlibrary JuryLogic {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using PercentageMath for uint256;\\n    using JuryDataLogic for address;\\n    using JuryDataLogic for SortitionSumTreeFactory.SortitionSumTrees;\\n    using JuryDataLogic for DataTypes.Juror;\\n\\n    // @return A random number less than the _max\\n    function random(\\n        uint256 entropy,\\n        uint256 max\\n    ) internal pure returns (uint256) {\\n        require(max > 0, \\\"max must be greater than 0\\\");\\n        return uint256(keccak256(abi.encodePacked(entropy))) % max;\\n    }\\n\\n    function getJurorByAddress(\\n        address account,\\n        mapping(address => DataTypes.Juror) storage jurors\\n    ) internal view returns (DataTypes.Juror storage) {\\n        return jurors[account];\\n    }\\n\\n    function createEntropy(uint256 intHash) internal view returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        block.difficulty,\\n                        block.timestamp,\\n                        blockhash(block.number),\\n                        intHash\\n                    )\\n                )\\n            );\\n    }\\n\\n    function randomlyDrawJuror(\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree,\\n        bytes32 treeKey,\\n        uint256 intHash\\n    ) public view returns (address drawnJuror) {\\n        uint256 entropy = createEntropy(intHash);\\n        uint256 rng = random(entropy, tree.total(treeKey));\\n        drawnJuror = tree.draw(treeKey, rng);\\n    }\\n\\n    function executeDepositStake(\\n        uint256 amount,\\n        address account,\\n        bytes32 treeKey,\\n        EnumerableSet.AddressSet storage jurorSet,\\n        mapping(address => DataTypes.Juror) storage jurors,\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree\\n    ) external returns (bool) {\\n        if (!(jurorSet.contains(account))) {\\n            jurorSet.add(account);\\n        }\\n        DataTypes.Juror storage juror = getJurorByAddress(account, jurors);\\n        juror.incrementStake(account, amount, treeKey, tree);\\n        return true;\\n    }\\n\\n    function executeWithdrawStake(\\n        uint256 amount,\\n        address account,\\n        bytes32 treeKey,\\n        EnumerableSet.AddressSet storage jurorSet,\\n        mapping(address => DataTypes.Juror) storage jurors,\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree\\n    ) external returns (bool) {\\n        DataTypes.Juror storage juror = getJurorByAddress(account, jurors);\\n        juror.decrementStake(account, amount, treeKey, tree);\\n        if (juror.stakedTokens == 0) {\\n            jurorSet.remove(account);\\n        }\\n        return true;\\n    }\\n\\n    function executeFreezeTokens(\\n        uint256 amount,\\n        address[] memory accounts,\\n        bytes32 treeKey,\\n        mapping(address => DataTypes.Juror) storage jurors,\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree\\n    ) external returns (bool) {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            address account = accounts[i];\\n\\n            DataTypes.Juror storage juror = getJurorByAddress(account, jurors);\\n            uint256 newFreeze = juror.freezedTokens + amount;\\n            juror.freezedTokens = newFreeze;\\n            juror.decrementStake(account, amount, treeKey, tree);\\n        }\\n        return true;\\n    }\\n\\n    function executeUnfreezeTokens(\\n        uint256 amount,\\n        address account,\\n        bytes32 treeKey,\\n        mapping(address => DataTypes.Juror) storage jurors,\\n        SortitionSumTreeFactory.SortitionSumTrees storage tree\\n    ) external returns (bool) {\\n        DataTypes.Juror storage juror = getJurorByAddress(account, jurors);\\n        uint256 newFreeze = juror.freezedTokens - amount;\\n        juror.freezedTokens = newFreeze;\\n        juror.incrementStake(account, amount, treeKey, tree);\\n        return true;\\n    }\\n\\n    function calcTokenToFreeze(\\n        uint256 minStake,\\n        uint256 alpha\\n    ) public pure returns (uint256) {\\n        return PercentageMath.percentMul(minStake, alpha);\\n    }\\n\\n    function readJuror(\\n        address account,\\n        mapping(address => DataTypes.Juror) storage jurors\\n    ) public view returns (DataTypes.Juror memory juror) {\\n        juror = jurors[account];\\n    }\\n}\\n\",\"keccak256\":\"0x1a587f891913b4504eca4b2603da0ed2792fde1ba8ba20e63f8609c865541ab2\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/RoundDataLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title Round Data logic library\\n * @author Blockswan\\n * @notice Implements the logic for round data specific functions\\n */\\n\\nlibrary RoundDataLogic {\\n    using Counters for Counters.Counter;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    function setTokensAtStakePerJuror(\\n        DataTypes.Round storage round,\\n        uint256 tokensAtStakePerJuror\\n    ) external returns (bool) {\\n        round.tokensAtStakePerJuror = tokensAtStakePerJuror;\\n        return true;\\n    }\\n\\n    function setWinningChoice(\\n        DataTypes.Round storage round,\\n        uint256 winningChoice\\n    ) external returns (bool) {\\n        round.winningChoice = winningChoice;\\n        return true;\\n    }\\n\\n    function setTotalFeesForJurors(\\n        DataTypes.Round storage round,\\n        uint256 totalFeesForJurors\\n    ) external returns (bool) {\\n        round.totalFeesForJurors = totalFeesForJurors;\\n        return true;\\n    }\\n\\n    function setAppealFees(\\n        DataTypes.Round storage round,\\n        uint256 appealFeeRewards\\n    ) external returns (bool) {\\n        round.appealFeeRewards = appealFeeRewards;\\n        return true;\\n    }\\n\\n    function setMaxVotes(\\n        DataTypes.Round storage round,\\n        uint256 maxVotes\\n    ) external returns (bool) {\\n        round.maxVotes = maxVotes;\\n        return true;\\n    }\\n\\n    function setDrawnJurors(\\n        DataTypes.Round storage round,\\n        address[] memory drawnJurors\\n    ) external returns (bool) {\\n        for (uint256 i = 0; i < drawnJurors.length; i++) {\\n            round.drawnJurors.push(drawnJurors[i]);\\n        }\\n        return true;\\n    }\\n\\n    function getJurorWeight(\\n        DataTypes.Round storage round,\\n        address juror\\n    ) internal view returns (uint256 weight) {\\n        for (uint256 i = 0; i < round.drawnJurors.length; i++) {\\n            if (round.drawnJurors[i] == juror) {\\n                weight += 1;\\n            }\\n        }\\n    }\\n\\n    function addEvidence(\\n        DataTypes.Round storage round,\\n        DataTypes.Evidence memory evidence\\n    ) external returns (bool) {\\n        round.evidences.push(evidence);\\n        round.evidenceSubmitters.add(evidence.userId);\\n        return true;\\n    }\\n\\n    function setProcecutorId(\\n        DataTypes.Round storage round,\\n        uint256 procecutorId\\n    ) external returns (bool) {\\n        round.procecutorId = procecutorId;\\n        return true;\\n    }\\n\\n    function setDefendantId(\\n        DataTypes.Round storage round,\\n        uint256 defendantId\\n    ) external returns (bool) {\\n        round.defendantId = defendantId;\\n        return true;\\n    }\\n\\n    function isProcecutor(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) external view returns (bool) {\\n        return (round.procecutorId == userId);\\n    }\\n\\n    function isDefendant(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) external view returns (bool) {\\n        return (round.defendantId == userId);\\n    }\\n\\n    function isAppealed(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.appealFeeRewards > 0;\\n    }\\n\\n    function hasSubmittedEvidence(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) internal view returns (bool) {\\n        return round.evidenceSubmitters.contains(userId);\\n    }\\n\\n    function getEvidencesCount(\\n        DataTypes.Round storage round\\n    ) internal view returns (uint256) {\\n        return round.evidences.length;\\n    }\\n\\n    function setAppealedBy(\\n        DataTypes.Round storage round,\\n        uint256 appealedBy\\n    ) external returns (bool) {\\n        round.appealedBy = appealedBy;\\n        return true;\\n    }\\n\\n    function isJuror(\\n        DataTypes.Round storage round,\\n        address account\\n    ) external view returns (bool) {\\n        for (uint256 i = 0; i < round.maxVotes; i++) {\\n            if (round.drawnJurors[i] == account) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function hasRevealed(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (bool) {\\n        DataTypes.Vote memory vote = fetchVoteByAccount(round, account);\\n        return vote.hasVoted;\\n    }\\n\\n    function hasCommited(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (bool) {\\n        DataTypes.Vote memory vote = fetchVoteByAccount(round, account);\\n        return vote.commit != 0x0;\\n    }\\n\\n    function setTotalPenalties(\\n        DataTypes.Round storage round,\\n        uint256 penalties\\n    ) external returns (bool) {\\n        round.penalties = penalties;\\n        return true;\\n    }\\n\\n    function incrementTotalVoted(\\n        DataTypes.Round storage round,\\n        uint256 weight\\n    ) external returns (bool) {\\n        round.totalVoted += weight;\\n        return true;\\n    }\\n\\n    function incrementTotalCommited(\\n        DataTypes.Round storage round,\\n        uint256 weight\\n    ) external returns (bool) {\\n        round.totalCommited += weight;\\n        return true;\\n    }\\n\\n    function areAllVotesCommitted(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.totalCommited == round.maxVotes;\\n    }\\n\\n    function areAllVotesRevealed(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.totalVoted == round.maxVotes;\\n    }\\n\\n    function getVoteByAccount(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (DataTypes.Vote storage) {\\n        uint256 i = 0;\\n        for (i = 0; i < round.votes.length; i++) {\\n            if (round.votes[i].account == account) {\\n                return round.votes[i];\\n            }\\n        }\\n        return round.votes[i];\\n    }\\n\\n    function tryGetVoteByAccount(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (DataTypes.Vote storage, bool exists) {\\n        for (uint256 i = 0; i < round.votes.length; i++) {\\n            if (round.votes[i].account == account) {\\n                return (round.votes[i], true);\\n            }\\n        }\\n        return (round.votes[0], false);\\n    }\\n\\n    function incrementChoiceCount(\\n        DataTypes.Round storage round,\\n        uint256 choice,\\n        uint256 weight\\n    ) external {\\n        round.counts[choice] += weight;\\n    }\\n\\n    function fetchVoteByAccount(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (DataTypes.Vote memory) {\\n        uint256 length = round.votes.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (round.votes[i].account == account) {\\n                return round.votes[i];\\n            }\\n        }\\n        return\\n            DataTypes.Vote(\\n                account,\\n                0x0,\\n                0,\\n                getJurorWeight(round, account),\\n                \\\"\\\",\\n                false\\n            );\\n    }\\n\\n    function getWinningChoice(\\n        DataTypes.Round storage round\\n    ) internal view returns (uint256) {\\n        uint256 winningChoice = 0;\\n        uint256 winningCount = 0;\\n        for (uint256 i = 0; i < round.counts.length; i++) {\\n            if (round.counts[i] > winningCount) {\\n                winningChoice = i;\\n                winningCount = round.counts[i];\\n            }\\n        }\\n        return winningChoice;\\n    }\\n\\n    function getAmountNotVoted(\\n        DataTypes.Round storage round\\n    ) public view returns (uint256) {\\n        return round.maxVotes - round.totalVoted;\\n    }\\n\\n    function getMinRange(uint256 winningChoice) public pure returns (uint256) {\\n        return winningChoice == 0 ? 0 : winningChoice - 1;\\n    }\\n\\n    function getMaxRange(uint256 winningChoice) public pure returns (uint256) {\\n        return winningChoice == 10 ? 10 : winningChoice + 1;\\n    }\\n\\n    function getRanges(\\n        uint256 winningChoice\\n    ) public pure returns (uint256, uint256) {\\n        return (getMinRange(winningChoice), getMaxRange(winningChoice));\\n    }\\n\\n    function setAppealFeeRewards(\\n        DataTypes.Round storage round,\\n        uint256 appealFeeRewards\\n    ) external returns (bool) {\\n        round.appealFeeRewards = appealFeeRewards;\\n        return true;\\n    }\\n\\n    function setAppealFeeClaimed(\\n        DataTypes.Round storage round\\n    ) external returns (bool) {\\n        round.appealFeeRewards = 0;\\n        return true;\\n    }\\n\\n    function close(DataTypes.Round storage round) external returns (bool) {\\n        round.closed = true;\\n        return true;\\n    }\\n\\n    function isClosed(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.closed;\\n    }\\n\\n    function getAmountOfCorrectVote(\\n        DataTypes.Round storage round,\\n        uint256 winningChoice\\n    ) external view returns (uint256) {\\n        return round.counts[winningChoice];\\n    }\\n\\n    function getAmountOfIncorrectVote(\\n        DataTypes.Round storage round,\\n        uint256 min,\\n        uint256 max\\n    ) external view returns (uint256 incorrectVotes) {\\n        incorrectVotes = round.maxVotes - round.totalVoted;\\n        for (uint256 i = 0; i < round.counts.length; i++) {\\n            if (!(i >= min && i <= max)) {\\n                incorrectVotes += round.counts[i];\\n            }\\n        }\\n    }\\n\\n    function addJudgesClaimed(\\n        DataTypes.Round storage round,\\n        address account\\n    ) external returns (bool) {\\n        round.judgesClaimed.add(account);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x39827cdfb90f818151ea7f6a761a32096585931d5e93e1930c9c9ad4905dfe58\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/RoundLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {RoleKeys} from \\\"../helpers/RoleKeys.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {PercentageMath} from \\\"../../../imports/aave/contracts/PercentageMath.sol\\\";\\nimport {RoundDataLogic} from \\\"./RoundDataLogic.sol\\\";\\nimport {VoteLogic} from \\\"./VoteLogic.sol\\\";\\n\\nimport {IJury} from \\\"../../../interfaces/IJury.sol\\\";\\n\\n/**\\n * @title Round logic library\\n * @author Blockswan\\n * @notice Implements the logic for round specific functions\\n */\\nlibrary RoundLogic {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Counters for Counters.Counter;\\n    using PercentageMath for uint256;\\n    using RoundDataLogic for DataTypes.Round;\\n    using VoteLogic for DataTypes.Vote;\\n\\n    modifier onlyJuror(DataTypes.Round storage round, address account) {\\n        require(round.isJuror(account), Errors.RD_ACCOUNT_NOT_DRAWN_JUROR);\\n        _;\\n    }\\n\\n    modifier onlyClosedRound(DataTypes.Round storage round) {\\n        require(round.isClosed(), Errors.ROUND_NOT_CLOSED);\\n        _;\\n    }\\n\\n    modifier onlyAppealedRound(DataTypes.Round storage round) {\\n        require(round.isAppealed(), Errors.ROUND_NOT_APPEALED);\\n        _;\\n    }\\n\\n    modifier onlyNotAppealedRound(DataTypes.Round storage round) {\\n        require(!round.isAppealed(), Errors.ROUND_IS_APPEALED);\\n        _;\\n    }\\n\\n    modifier onlyNotCommited(DataTypes.Round storage round, address account) {\\n        require(\\n            !round.hasCommited(account),\\n            Errors.ROUND_VOTE_ALREADY_COMMITED\\n        );\\n        _;\\n    }\\n\\n    modifier onlyNotSumbittedEvidence(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) {\\n        require(\\n            !round.hasSubmittedEvidence(userId),\\n            Errors.ROUND_EVIDENCE_ALREADY_SUBMITTED\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCommited(DataTypes.Round storage round, address account) {\\n        require(round.hasCommited(account), Errors.ROUND_VOTE_NOT_COMMITED);\\n        _;\\n    }\\n\\n    modifier onlyNotRevealed(DataTypes.Round storage round, address account) {\\n        require(\\n            !round.hasRevealed(account),\\n            Errors.ROUND_VOTE_ALREADY_REVEALED\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCorrectRole(bytes32 role) {\\n        require(\\n            role == RoleKeys.BUYER_ROLE || role == RoleKeys.SELLER_ROLE,\\n            Errors.DS_EVIDENCE_ROLE_NOT_VALID\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRoundActor(DataTypes.Round storage round, uint256 userId) {\\n        require(\\n            round.isProcecutor(userId) || round.isDefendant(userId),\\n            Errors.DS_EVIDENCE_SENDER_NOT_PARTY\\n        );\\n        _;\\n    }\\n\\n    // add a round\\n    function addRound(\\n        DataTypes.Round[] storage rounds,\\n        InputTypes.AddRoundInput memory params\\n    ) external returns (bool) {\\n        rounds.push();\\n        DataTypes.Round storage newRound = rounds[rounds.length - 1];\\n        newRound.setProcecutorId(params.procecutorId);\\n        newRound.setDefendantId(params.defendantId);\\n        newRound.setMaxVotes(params.maxVotes);\\n        newRound.setTotalFeesForJurors(params.totalFeesForJurors);\\n        newRound.setDrawnJurors(params.drawnJurors);\\n        newRound.setTokensAtStakePerJuror(params.tokensAtStakePerJuror);\\n        return true;\\n    }\\n\\n    function submitEvidence(\\n        DataTypes.Round storage round,\\n        DataTypes.Evidence memory evidence\\n    )\\n        external\\n        onlyRoundActor(round, evidence.userId)\\n        onlyNotSumbittedEvidence(round, evidence.userId)\\n        onlyCorrectRole(evidence.role)\\n        returns (bool)\\n    {\\n        if (round.getEvidencesCount() == 1) {\\n            require(\\n                evidence.role != round.evidences[0].role,\\n                Errors.DS_EVIDENCE_ROLE_NOT_VALID\\n            );\\n        }\\n        round.addEvidence(evidence);\\n        return true;\\n    }\\n\\n    function areEvidencesSubmitted(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.getEvidencesCount() == 2;\\n    }\\n\\n    function commitVote(\\n        DataTypes.Round storage round,\\n        address account,\\n        uint256 choice,\\n        string memory salt\\n    )\\n        external\\n        onlyJuror(round, account)\\n        onlyNotCommited(round, account)\\n        returns (bool)\\n    {\\n        uint256 weight = round.getJurorWeight(account);\\n        DataTypes.Vote memory newVote = VoteLogic.commit(\\n            account,\\n            choice,\\n            weight,\\n            salt\\n        );\\n        round.votes.push(newVote);\\n        round.incrementTotalCommited(weight);\\n        return true;\\n    }\\n\\n    function revealVote(\\n        DataTypes.Round storage round,\\n        address account,\\n        uint256 choice,\\n        string memory salt,\\n        string memory justification\\n    )\\n        external\\n        onlyJuror(round, account)\\n        onlyCommited(round, account)\\n        onlyNotRevealed(round, account)\\n    {\\n        uint256 weight = round.getJurorWeight(account);\\n        round.incrementTotalVoted(weight);\\n        round.incrementChoiceCount(choice, weight);\\n        {\\n            (DataTypes.Vote storage vote, bool exists) = round\\n                .tryGetVoteByAccount(account);\\n            require(exists, Errors.RD_VOTE_NOT_FOUND);\\n            vote.reveal(choice, salt, justification);\\n        }\\n    }\\n\\n    function appeal(\\n        DataTypes.Round storage round,\\n        uint256 appealFeeRewards,\\n        uint256 procecutorId\\n    ) external onlyRoundActor(round, procecutorId) {\\n        round.setAppealFeeRewards(appealFeeRewards);\\n        round.setAppealedBy(procecutorId);\\n    }\\n\\n    function claimAsJudge(\\n        DataTypes.Round storage round,\\n        InputTypes.ClaimAsJudgeInput memory params\\n    )\\n        external\\n        onlyJuror(round, params.account)\\n        onlyClosedRound(round)\\n        returns (OutputTypes.ExecuteClaimAsJudgeOutput memory output)\\n    {\\n        DataTypes.Vote memory vote = round.fetchVoteByAccount(params.account);\\n        {\\n            output = OutputTypes.ExecuteClaimAsJudgeOutput({\\n                isVoteCorrect: vote.isVoteCorrect(params.winningChoice),\\n                isVoteInRange: vote.isBetweenRange(params.min, params.max),\\n                amountFromDisputeFees: calcEarnedFromDisputeFees(\\n                    vote.weight,\\n                    params.amountOfCorrectVotes,\\n                    params.totalFeesForJurors\\n                ),\\n                amountFromJurorsTokensAtStake: calcEarnedFromDisputeFees(\\n                    vote.weight,\\n                    params.amountOfCorrectVotes,\\n                    params.penalties\\n                ),\\n                tokensAtStakePerJuror: params.tokensAtStakePerJuror\\n            });\\n        }\\n        round.addJudgesClaimed(params.account);\\n    }\\n\\n    function claimAppealFeeRewards(\\n        DataTypes.Round storage round,\\n        DataTypes.Round storage previousRound,\\n        uint256 userId\\n    )\\n        external\\n        onlyRoundActor(previousRound, userId)\\n        onlyAppealedRound(previousRound)\\n        returns (uint256 appealFeeRewards, bool isClaimable)\\n    {\\n        appealFeeRewards = previousRound.appealFeeRewards;\\n        isClaimable = checkIfClaimAppealIsPossible(\\n            round.winningChoice,\\n            previousRound.winningChoice,\\n            round.isProcecutor(userId)\\n        );\\n        previousRound.setAppealFeeClaimed();\\n    }\\n\\n    function claimRuling(\\n        DataTypes.Round storage round\\n    )\\n        external\\n        view\\n        onlyNotAppealedRound(round)\\n        returns (uint256 ruling, uint256 procecutorId, uint256 defendantId)\\n    {\\n        ruling = round.winningChoice;\\n        procecutorId = round.procecutorId;\\n        defendantId = round.defendantId;\\n    }\\n\\n    function checkIfClaimAppealIsPossible(\\n        uint256 winningChoice,\\n        uint256 previousWinningChoice,\\n        bool calledByProcecutor\\n    ) internal pure returns (bool) {\\n        if (calledByProcecutor) {\\n            return winningChoice > previousWinningChoice;\\n        } else {\\n            return winningChoice <= previousWinningChoice;\\n        }\\n    }\\n\\n    function calcEarnedFromDisputeFees(\\n        uint256 jurorWeight,\\n        uint256 weightOfCorrectVotes,\\n        uint256 disputePrice\\n    ) public pure returns (uint256) {\\n        uint res = (disputePrice * jurorWeight) / weightOfCorrectVotes;\\n        return res;\\n    }\\n\\n    function calcPenaltiesAmount(\\n        DataTypes.Round storage round,\\n        uint256 min,\\n        uint256 max\\n    ) external view returns (uint256 penaltiesAmount) {\\n        uint256 amountOfIncorrectVotes = round.getAmountOfIncorrectVote(\\n            min,\\n            max\\n        );\\n        penaltiesAmount = amountOfIncorrectVotes * round.tokensAtStakePerJuror;\\n    }\\n\\n    function format(\\n        DataTypes.Round storage round,\\n        uint256 id\\n    ) public view returns (OutputTypes.RoundOutput memory) {\\n        return (\\n            OutputTypes.RoundOutput({\\n                roundId: id,\\n                procecutorId: round.procecutorId,\\n                defendantId: round.defendantId,\\n                appealFeeRewards: round.appealFeeRewards,\\n                tokensAtStakePerJuror: round.tokensAtStakePerJuror,\\n                totalFeesForJurors: round.totalFeesForJurors,\\n                maxVotes: round.maxVotes,\\n                penalties: round.penalties,\\n                winningChoice: round.winningChoice,\\n                totalRepartitions: round.totalRepartitions,\\n                totalVoted: round.totalVoted,\\n                totalCommited: round.totalCommited,\\n                counts: round.counts,\\n                evidenceSubmitters: round.evidenceSubmitters.values(),\\n                appealedBy: round.appealedBy,\\n                votes: round.votes,\\n                evidences: round.evidences,\\n                drawnJurors: round.drawnJurors,\\n                judgesClaimed: round.judgesClaimed.values(),\\n                closed: round.closed\\n            })\\n        );\\n    }\\n\\n    function formatAll(\\n        DataTypes.Round[] storage rounds\\n    ) external view returns (OutputTypes.RoundOutput[] memory) {\\n        OutputTypes.RoundOutput[] memory output = new OutputTypes.RoundOutput[](\\n            rounds.length\\n        );\\n        for (uint256 i = 0; i < rounds.length; i++) {\\n            output[i] = format(rounds[i], i);\\n        }\\n        return output;\\n    }\\n}\\n\",\"keccak256\":\"0x686bec91451fccd45b27ba954d95ba589073272f80fe48445d90e1648b9ad6e4\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/VoteDataLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\n\\n/**\\n * @title VoteData logic library\\n * @author Blockswan\\n * @notice Implements the logic for vote data specific functions\\n */\\nlibrary VoteDataLogic {\\n    function setJustification(\\n        DataTypes.Vote storage vote,\\n        string memory justification\\n    ) internal returns (bool) {\\n        vote.justification = justification;\\n        return true;\\n    }\\n\\n    function setCommit(\\n        DataTypes.Vote storage vote,\\n        bytes32 commitment\\n    ) internal returns (bool) {\\n        vote.commit = commitment;\\n        return true;\\n    }\\n\\n    function setChoice(\\n        DataTypes.Vote storage vote,\\n        uint256 choice\\n    ) internal returns (bool) {\\n        vote.choice = choice;\\n        return true;\\n    }\\n\\n    function setAccount(\\n        DataTypes.Vote storage vote,\\n        address account\\n    ) internal returns (bool) {\\n        vote.account = account;\\n        return true;\\n    }\\n\\n    function setVoted(DataTypes.Vote storage vote) internal returns (bool) {\\n        vote.hasVoted = true;\\n        return true;\\n    }\\n\\n    function setWeight(\\n        DataTypes.Vote storage vote,\\n        uint256 weight\\n    ) internal returns (bool) {\\n        vote.weight = weight;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x6942c9f57558bfcd230b9deb3c4190b6c4664903670adef0c4487b635b6f9b92\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/VoteLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\nimport {VoteDataLogic} from \\\"./VoteDataLogic.sol\\\";\\n\\n/**\\n * @title Vote logic library\\n * @author Blockswan\\n * @notice Implements the logic for vote specific functions\\n */\\nlibrary VoteLogic {\\n    using VoteDataLogic for DataTypes.Vote;\\n\\n    modifier onlyValidChoice(uint256 choice) {\\n        require(choice >= 0 && choice <= 10, Errors.VOTE_INVALID_CHOICE);\\n        _;\\n    }\\n\\n    modifier onlyValidReveal(\\n        DataTypes.Vote storage vote,\\n        uint256 choice,\\n        string memory salt\\n    ) {\\n        require(\\n            isRevealCorrect(vote.account, choice, salt, vote.commit),\\n            Errors.VOTE_REVEAL_INCORRECT\\n        );\\n        _;\\n    }\\n\\n    function encodeChoice(\\n        address account,\\n        uint256 choice,\\n        string memory salt\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(account, choice, salt));\\n    }\\n\\n    function isRevealCorrect(\\n        address account,\\n        uint256 choice,\\n        string memory salt,\\n        bytes32 commitment\\n    ) internal pure returns (bool) {\\n        return encodeChoice(account, choice, salt) == commitment;\\n    }\\n\\n    function isVoteCorrect(\\n        DataTypes.Vote storage vote,\\n        uint256 choice\\n    ) internal view returns (bool) {\\n        return vote.choice == choice;\\n    }\\n\\n    function commit(\\n        address account,\\n        uint256 choice,\\n        uint256 weight,\\n        string memory salt\\n    ) external pure returns (DataTypes.Vote memory newVote) {\\n        newVote = DataTypes.Vote({\\n            account: account,\\n            choice: 0,\\n            justification: \\\"\\\",\\n            commit: encodeChoice(account, choice, salt),\\n            weight: weight,\\n            hasVoted: false\\n        });\\n    }\\n\\n    function reveal(\\n        DataTypes.Vote storage vote,\\n        uint256 choice,\\n        string memory salt,\\n        string memory justification\\n    )\\n        external\\n        onlyValidChoice(choice)\\n        onlyValidReveal(vote, choice, salt)\\n        returns (bool)\\n    {\\n        vote.setChoice(choice);\\n        vote.setJustification(justification);\\n        vote.setVoted();\\n        return true;\\n    }\\n\\n    function isBetweenRange(\\n        DataTypes.Vote memory vote,\\n        uint256 minRange,\\n        uint256 maxRange\\n    ) external pure returns (bool) {\\n        return vote.choice >= minRange && vote.choice <= maxRange;\\n    }\\n\\n    function isVoteCorrect(\\n        DataTypes.Vote memory vote,\\n        uint256 winningChoice\\n    ) external pure returns (bool) {\\n        return vote.choice == winningChoice;\\n    }\\n}\\n\",\"keccak256\":\"0xb900260c751ca9ffee96f4a799b5e793769e6285b9ab1adce6bc60f3eece460f\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\n\\nlibrary DataTypes {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n\\n    enum OrderState {\\n        UNCONFIRMED,\\n        CONFIRMED,\\n        DISPUTED,\\n        DONE\\n    }\\n\\n    enum DisputeState {\\n        EVIDENCE,\\n        COMMIT,\\n        VOTE,\\n        APPEAL,\\n        EXECUTION\\n    }\\n\\n    struct DelayTimestamp {\\n        uint256 selfRefund;\\n        uint256 evidence;\\n        uint256 commit;\\n        uint256 vote;\\n        uint256 appeal;\\n    }\\n\\n    struct User {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        EnumerableSet.UintSet gigIds;\\n        EnumerableSet.UintSet offerIds;\\n        EnumerableSet.UintSet bidIds;\\n        EnumerableSet.UintSet buyerOrderIds;\\n        EnumerableSet.UintSet gigReviewsIds;\\n        EnumerableSet.UintSet userReviewsIds;\\n        EnumerableSet.UintSet reviewsIds;\\n    }\\n\\n    struct Package {\\n        uint256 price;\\n        uint256 timeDelivery;\\n    }\\n\\n    struct Gig {\\n        string metadata;\\n        uint256 createdAt;\\n        bool isPaused;\\n        EnumerableSet.UintSet reviewIds;\\n        EnumerableSet.UintSet orderIds;\\n        Counters.Counter successSell;\\n        Counters.Counter failedSell;\\n        Package[3] packages;\\n    }\\n\\n    struct Invoice {\\n        uint256 price;\\n        uint256 buyerFees;\\n        uint256 sellerFees;\\n        uint256 createdAt;\\n        IERC20 currency;\\n    }\\n\\n    struct Order {\\n        string metadata;\\n        string brief;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        uint256 disputeId;\\n        bool disputed;\\n        Invoice invoice;\\n        OrderState state;\\n        EnumerableSet.UintSet reviewIds;\\n    }\\n\\n    struct Evidence {\\n        uint256 userId;\\n        bytes32 role;\\n        string metadata;\\n    }\\n\\n    struct Vote {\\n        address account;\\n        bytes32 commit;\\n        uint256 choice;\\n        uint256 weight;\\n        string justification;\\n        bool hasVoted;\\n    }\\n\\n    struct Juror {\\n        uint256 stakedTokens;\\n        uint256 freezedTokens;\\n    }\\n\\n    struct Round {\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 appealFeeRewards;\\n        uint256 maxVotes;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 penalties;\\n        uint256 winningChoice;\\n        uint256 totalRepartitions;\\n        uint256 totalVoted;\\n        uint256 totalCommited;\\n        uint256 appealedBy;\\n        uint256[11] counts;\\n        EnumerableSet.UintSet evidenceSubmitters;\\n        EnumerableSet.AddressSet judgesClaimed;\\n        Vote[] votes;\\n        Evidence[] evidences;\\n        address[] drawnJurors;\\n        bool closed;\\n    }\\n\\n    struct Dispute {\\n        uint256 createdAt;\\n        uint256 orderId;\\n        uint256 ruling;\\n        uint256 ruledAt;\\n        uint256[] timestamps;\\n        DisputeState state;\\n        Round[] rounds;\\n    }\\n\\n    struct Review {\\n        uint256 authorId;\\n        string metadata;\\n    }\\n\\n    struct ServiceProvider {\\n        address wallet;\\n        string endpoint;\\n    }\\n\\n    struct EntryParams {\\n        uint256 currencyValue;\\n        uint256 timeAdded;\\n        uint256 xpEarned;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CreationParams {\\n        uint256 currencyValue;\\n        uint256 xpEarned;\\n    }\\n\\n    struct OrderPriceParams {\\n        uint256 trialFlat;\\n        uint256 trialPercent;\\n        uint256 proceedFlat;\\n        uint256 proceedPercent;\\n    }\\n\\n    struct FeeParams {\\n        uint256 flat;\\n        uint256 percent;\\n    }\\n\\n    struct RetributionParams {\\n        uint256 affiliate;\\n        uint256 lvl0AffiliateShare;\\n    }\\n\\n    struct DisputeParams {\\n        uint256 minStake;\\n        uint256 alpha;\\n        uint256 feePerJuror;\\n        uint256 maxVotes;\\n    }\\n}\\n\",\"keccak256\":\"0xcfaef75a0e523972dd8c603f9857cec50d6df304986b553e97374a1f5ea49ab4\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/InputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary InputTypes {\\n    struct CreateUserInput {\\n        uint256 newId;\\n        string metadata;\\n        uint256 inviterId;\\n        address wallet;\\n    }\\n\\n    struct CreateGigInput {\\n        uint256 newId;\\n        DataTypes.Package[3] packages;\\n        string metadata;\\n    }\\n\\n    struct OrderFeesInput {\\n        DataTypes.FeeParams buyerFees;\\n        DataTypes.FeeParams sellerFees;\\n    }\\n\\n    struct OrderRelationInput {\\n        uint256 newId;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n    }\\n\\n    struct CreateOrderInput {\\n        uint256 sellerId;\\n        uint256 buyerId;\\n        uint256 gigId;\\n        uint256 packageId;\\n        string brief;\\n    }\\n\\n    struct ExecuteCreateOrderInput {\\n        uint256 price;\\n        string metadata;\\n        string brief;\\n        OrderFeesInput fees;\\n        OrderRelationInput relations;\\n        IERC20 currency;\\n    }\\n\\n    struct ExecuteCreateDisputeInput {\\n        uint256 newId;\\n        uint256 orderId;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 maxVotes;\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 evidenceUntil;\\n        address[] drawnJurors;\\n    }\\n\\n    struct ExecuteNextRoundInput {\\n        uint256 evidenceUntil;\\n        uint256 maxVotes;\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        address[] drawnJurors;\\n    }\\n\\n    struct BecomeBuyerInput {\\n        address account;\\n        uint256 buyerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct BecomeSellerInput {\\n        address account;\\n        uint256 sellerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CalcInvitersRewardsInput {\\n        uint256 currencyValue;\\n        uint256 affiliateShare;\\n        uint256 lvl0AffiliateShare;\\n    }\\n\\n    struct ProcessPaymentInput {\\n        address caller;\\n        address inviter0;\\n        address inviter1;\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n\\n    struct AddRoundInput {\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 maxVotes;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        address[] drawnJurors;\\n    }\\n\\n    struct ClaimAsJudgeInput {\\n        address account;\\n        uint256 min;\\n        uint256 max;\\n        uint256 winningChoice;\\n        uint256 amountOfCorrectVotes;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 penalties;\\n    }\\n}\\n\",\"keccak256\":\"0x35530d36f783f74500f955dd636a712344d9abded4893c0233790072e22c5217\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/OutputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary OutputTypes {\\n    struct CalcInvitersRewardsOutput {\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n\\n    struct PrepareBecomeRoleOutput {\\n        address inviter0;\\n        address inviter1;\\n        DataTypes.EntryParams entryParams;\\n        DataTypes.RetributionParams retributionParams;\\n        CalcInvitersRewardsOutput rewards;\\n    }\\n\\n    struct GigOutput {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        uint256[] reviewIds;\\n        uint256[] orderIds;\\n        DataTypes.Package[3] packages;\\n    }\\n\\n    struct UserOutput {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 userId;\\n        address wallet;\\n        uint256[] gigIds;\\n        uint256[] offerIds;\\n        uint256[] bidIds;\\n        uint256[] buyerOrderIds;\\n        uint256[] gigReviewsIds;\\n        uint256[] userReviewsIds;\\n        uint256[] reviewsIds;\\n    }\\n\\n    struct OrderOutput {\\n        string metadata;\\n        string brief;\\n        uint256 orderId;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        uint256 disputeId;\\n        uint256[] reviewIds;\\n        bool disputed;\\n        DataTypes.Invoice invoice;\\n        DataTypes.OrderState state;\\n    }\\n\\n    struct RoundOutput {\\n        uint256 roundId;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 appealFeeRewards;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 maxVotes;\\n        uint256 penalties;\\n        uint256 winningChoice;\\n        uint256 totalRepartitions;\\n        uint256 totalVoted;\\n        uint256 totalCommited;\\n        uint256[11] counts;\\n        uint256[] evidenceSubmitters;\\n        uint256 appealedBy;\\n        DataTypes.Vote[] votes;\\n        DataTypes.Evidence[] evidences;\\n        address[] drawnJurors;\\n        address[] judgesClaimed;\\n        bool closed;\\n    }\\n\\n    struct DisputeOutput {\\n        uint256 createdAt;\\n        uint256 disputeId;\\n        uint256 orderId;\\n        uint256 ruling;\\n        uint256 ruledAt;\\n        uint256[] timestamps;\\n        DataTypes.DisputeState state;\\n        RoundOutput[] rounds;\\n    }\\n\\n    struct PopulatedGig {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        DataTypes.Review[] reviews;\\n        DataTypes.Package[] packages;\\n    }\\n\\n    struct CalcDisputeDelaysFromBlock {\\n        uint256 evidenceUntil;\\n        uint256 commitUntil;\\n        uint256 voteUntil;\\n        uint256 appealUntil;\\n    }\\n\\n    struct PopulatedUser {\\n        uint256 userId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 bswanBalance;\\n        uint256 usdcBalance;\\n        uint256 xpBalance;\\n        uint256[] gigIds;\\n        address wallet;\\n        bool isBuyer;\\n        bool isSeller;\\n        bool isJudge;\\n        UserOutput[] inviters;\\n    }\\n\\n    struct ExecuteClaimAsJudgeOutput {\\n        bool isVoteCorrect;\\n        bool isVoteInRange;\\n        uint256 amountFromDisputeFees;\\n        uint256 amountFromJurorsTokensAtStake;\\n        uint256 tokensAtStakePerJuror;\\n    }\\n}\\n\",\"keccak256\":\"0xa192ee71347e59a631ae11918bd24a1cfd96b8c55d0a7d982ec7e36e4006b2cc\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063715018a611610104578063b87ff37f116100a2578063daea85c511610071578063daea85c5146103fb578063e5b5019a1461040e578063ecccd07814610417578063f2fde38b1461042c57600080fd5b8063b87ff37f146103af578063cfd8d6c0146103c2578063d6c912be146103d5578063dac21a0c146103e857600080fd5b80638da5cb5b116100de5780638da5cb5b14610365578063985fadc814610376578063b470778314610389578063b817bcf71461039c57600080fd5b8063715018a61461033757806379a558e71461033f5780637e69b7b01461035257600080fd5b806318f385181161017c57806341c0e1b51161014b57806341c0e1b5146102dc57806343511e7f146102e45780634516b7561461030457806349c8ba911461032457600080fd5b806318f385181461029057806319872f76146102a35780632b495ff5146102b657806331ce2048146102c957600080fd5b806310987b77116101b857806310987b771461023f57806311e0c07b14610247578063171a9bb21461026a5780631848effa1461027d57600080fd5b8063038fb573146101df5780630542975c146101f45780630f2513581461021e575b600080fd5b6101f26101ed366004612d56565b61043f565b005b6004546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b61023161022c366004612dae565b610604565b604051908152602001610215565b6102316106a4565b61025a610255366004612dc7565b6106b7565b6040519015158152602001610215565b6101f2610278366004612dae565b610743565b600454610201906001600160a01b031681565b61025a61029e366004612e00565b610a8b565b6102016102b1366004612dae565b610b12565b6101f26102c4366004612e37565b610b91565b6102316102d7366004612e59565b610d3b565b6101f2610e6b565b6102f76102f2366004612ec5565b610e93565b6040516102159190612ee2565b610317610312366004612dae565b610f36565b604051610215919061333d565b6101f2610332366004612e37565b61105c565b6101f2611230565b61025a61034d366004612ec5565b611244565b6101f2610360366004612dae565b6112fa565b6003546001600160a01b0316610201565b61025a610384366004613350565b6115f9565b6101f2610397366004613380565b61169d565b61025a6103aa366004612ec5565b611a11565b6101f26103bd3660046133c6565b611ac8565b6101f26103d0366004612ec5565b611beb565b6101f26103e3366004612dae565b611d39565b6101f26103f636600461340b565b611f06565b6101f2610409366004612ec5565b61202b565b61023160055481565b61041f61212d565b6040516102159190613481565b6101f261043a366004612ec5565b6121dc565b6000610451632aa9a2a960e11b610b12565b905061046283836000015183610a8b565b60405180604001604052806002815260200161066760f31b815250906104a45760405162461bcd60e51b815260040161049b91906134e3565b60405180910390fd5b5060405163115e1e5f60e01b8152600481018590526002602482015260009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063115e1e5f9060440160206040518083038186803b1580156104fa57600080fd5b505af415801561050e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053291906134f6565b9050600073__$499c06b2b29ab2ab1aba66b7d414a45a21$__63101ee79183866040518363ffffffff1660e01b815260040161056f92919061350f565b60206040518083038186803b15801561058757600080fd5b505af415801561059b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bf919061355a565b90508060405180604001604052806002815260200161333160f01b815250906105fb5760405162461bcd60e51b815260040161049b91906134e3565b50505050505050565b60006106176427a92222a960d91b610b12565b6001600160a01b03166342b50a7a836040518263ffffffff1660e01b815260040161064491815260200190565b60006040518083038186803b15801561065c57600080fd5b505afa158015610670573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261069891908101906136cb565b61012001515192915050565b6000806106b16000612255565b92915050565b60405163fbd2817f60e01b815260048101849052602481018390526000906001600160a01b0383169063fbd2817f9060440160206040518083038186803b15801561070157600080fd5b505afa158015610715573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610739919061355a565b90505b9392505050565b600061076674282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610b12565b6001600160a01b0316631cb647056040518163ffffffff1660e01b815260040160a06040518083038186803b15801561079e57600080fd5b505afa1580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d691906137ee565b60405163115e1e5f60e01b8152600481018490526002602482015290915060009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063115e1e5f9060440160206040518083038186803b15801561082e57600080fd5b505af4158015610842573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086691906134f6565b600581015490915060ff16600481600481111561088557610885612f56565b1415604051806040016040528060028152602001611a1b60f11b815250906108c05760405162461bcd60e51b815260040161049b91906134e3565b5060008160048111156108d5576108d5612f56565b141561094957604051635f8fdbc560e01b815273__$499c06b2b29ab2ab1aba66b7d414a45a21$__90635f8fdbc590610914908590879060040161383e565b60006040518083038186803b15801561092c57600080fd5b505af4158015610940573d6000803e3d6000fd5b50505050610a85565b600181600481111561095d5761095d612f56565b14156109a8576060830151604051634f1c8c7360e11b815273__$499c06b2b29ab2ab1aba66b7d414a45a21$__91639e3918e691610914918691600401918252602082015260400190565b60028160048111156109bc576109bc612f56565b1415610a0757608083015160405163261c660160e21b815273__$499c06b2b29ab2ab1aba66b7d414a45a21$__91639871980491610914918691600401918252602082015260400190565b6003816004811115610a1b57610a1b612f56565b1415610a8557604051636a7809e560e01b81526004810183905273__$499c06b2b29ab2ab1aba66b7d414a45a21$__90636a7809e59060240160006040518083038186803b158015610a6c57600080fd5b505af4158015610a80573d6000803e3d6000fd5b505050505b50505050565b60405163dff3b49760e01b81526001600160a01b038481166004830152600091849184169063dff3b4979060240160206040518083038186803b158015610ad157600080fd5b505afa158015610ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0991906134f6565b14949350505050565b60048054604051630cc397bb60e11b81529182018390526000916001600160a01b03909116906319872f769060240160206040518083038186803b158015610b5957600080fd5b505afa158015610b6d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b19190613888565b60003360405163115e1e5f60e01b8152600481018590526002602482015290915060009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063115e1e5f9060440160206040518083038186803b158015610bec57600080fd5b505af4158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2491906134f6565b604051636ad1160f60e11b8152600481018290526001600160a01b03841660248201526044810185905290915060009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063d5a22c1e9060640160a06040518083038186803b158015610c8b57600080fd5b505af4158015610c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc391906138a5565b805190915015610cea57610ce58382608001518360400151846060015161225f565b610d34565b806020015115610d0257610ce5838260800151612376565b6040805180820182526002815261036360f41b6020820152905162461bcd60e51b815261049b91906004016134e3565b505b5050505050565b60006427a92222a960d91b610d4f81610b12565b6001600160a01b0316336001600160a01b03161460405180604001604052806002815260200161199b60f11b81525090610d9c5760405162461bcd60e51b815260040161049b91906134e3565b506000610da76106a4565b90506000610dcc74282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610b12565b90506000816001600160a01b03166382db8b076040518163ffffffff1660e01b815260040160806040518083038186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e419190613903565b9050610e52838b8b8b8b87876123ea565b610e5d83888861043f565b509098975050505050505050565b6004546001600160a01b03163314610e8557610e85613968565b6004546001600160a01b0316ff5b610ec56040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b816001600160a01b0316631cb647056040518163ffffffff1660e01b815260040160a06040518083038186803b158015610efe57600080fd5b505afa158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b191906137ee565b610f3e612ad5565b60405163115e1e5f60e01b8152600481018390526002602482015260009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063115e1e5f9060440160206040518083038186803b158015610f9357600080fd5b505af4158015610fa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcb91906134f6565b60405163a191f9b360e01b8152600481018290526024810185905290915073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063a191f9b39060440160006040518083038186803b15801561102057600080fd5b505af4158015611034573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261073c9190810190613e44565b60003360405163115e1e5f60e01b8152600481018590526002602482015290915060009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063115e1e5f9060440160206040518083038186803b1580156110b757600080fd5b505af41580156110cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ef91906134f6565b90506000611103632aa9a2a960e11b610b12565b60405163dff3b49760e01b81526001600160a01b038581166004830152919091169063dff3b4979060240160206040518083038186803b15801561114657600080fd5b505afa15801561115a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117e91906134f6565b60405163381bdf9d60e21b815260048101849052602481018290526044810186905290915060009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063e06f7e749060640160206040518083038186803b1580156111dd57600080fd5b505af41580156111f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121591906134f6565b9050610d32818561122b6211105560ea1b610b12565b6125b7565b6112386125d0565b611242600061262a565b565b600061125864212aaca2a960d91b836115f9565b80156106b1575042611270632aa9a2a960e11b610b12565b6040516334e1097b60e11b81526001600160a01b03858116600483015291909116906369c212f69060240160006040518083038186803b1580156112b357600080fd5b505afa1580156112c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112ef9190810190613f18565b604001511192915050565b33600061130d632aa9a2a960e11b610b12565b60405163dff3b49760e01b81526001600160a01b03848116600483015291925060009183169063dff3b4979060240160206040518083038186803b15801561135457600080fd5b505afa158015611368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138c91906134f6565b905060006113b174282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610b12565b6001600160a01b03166382db8b076040518163ffffffff1660e01b815260040160806040518083038186803b1580156113e957600080fd5b505afa1580156113fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114219190613903565b60405163115e1e5f60e01b8152600481018790526002602482015290915060009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063115e1e5f9060440160206040518083038186803b15801561147957600080fd5b505af415801561148d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b191906134f6565b6040808401519051632966b8e960e21b815291925060009173__$499c06b2b29ab2ab1aba66b7d414a45a21$__9163a59ae3a4916114fc918691600401918252602082015260400190565b60206040518083038186803b15801561151457600080fd5b505af4158015611528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154c91906134f6565b9050600061155a823361267c565b60405163392a44a560e11b815260048101859052602481018290526044810187905290915073__$499c06b2b29ab2ab1aba66b7d414a45a21$__90637254894a9060640160206040518083038186803b1580156115b657600080fd5b505af41580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ee919061355a565b505050505050505050565b6000806116136a20a1a62fa6a0a720a3a2a960a91b610b12565b604051632474521560e21b8152600481018690526001600160a01b03858116602483015291909116906391d148549060440160206040518083038186803b15801561165d57600080fd5b505afa158015611671573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611695919061355a565b949350505050565b60003360405163115e1e5f60e01b8152600481018590526002602482015290915060009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063115e1e5f9060440160206040518083038186803b1580156116f857600080fd5b505af415801561170c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173091906134f6565b9050600061175574282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610b12565b6001600160a01b0316631cb647056040518163ffffffff1660e01b815260040160a06040518083038186803b15801561178d57600080fd5b505afa1580156117a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c591906137ee565b905060006117ea74282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610b12565b6001600160a01b03166382db8b076040518163ffffffff1660e01b815260040160806040518083038186803b15801561182257600080fd5b505afa158015611836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185a9190613903565b60068401549091506000906118709060016140f4565b90508373__$499c06b2b29ab2ab1aba66b7d414a45a21$__63425791c490916040518060a00160405280876020015181526020018587606001516118b4919061410c565b81526020016118e186886060015189604001516118d1919061410c565b6118db919061410c565b8b61267c565b81528651602080890151604051633e8973e560e01b8152600481019390935260248301529091019073__$d4e29236ef5669bc8e4309ccc6f37ccd7f$__90633e8973e59060440160206040518083038186803b15801561194057600080fd5b505af4158015611954573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197891906134f6565b8152602001611995868860600151611990919061410c565b6127f7565b8152506040518363ffffffff1660e01b81526004016119b592919061412b565b60206040518083038186803b1580156119cd57600080fd5b505af41580156119e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a05919061355a565b506105fb87868861043f565b6000611a266529a2a62622a960d11b836115f9565b80156106b1575042611a3e632aa9a2a960e11b610b12565b6040516334e1097b60e11b81526001600160a01b03858116600483015291909116906369c212f69060240160006040518083038186803b158015611a8157600080fd5b505afa158015611a95573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611abd9190810190613f18565b608001511192915050565b60003360405163115e1e5f60e01b8152600481018690526002602482015290915060009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063115e1e5f9060440160206040518083038186803b158015611b2357600080fd5b505af4158015611b37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5b91906134f6565b60405163369de64f60e01b815290915073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063369de64f90611b9b908490889088908890600401614175565b60206040518083038186803b158015611bb357600080fd5b505af4158015611bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d32919061355a565b6001600160a01b0381161580611c0b57506004546001600160a01b031633145b80611c975750336001600160a01b0316306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c5457600080fd5b505afa158015611c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8c9190613888565b6001600160a01b0316145b611d175760405162461bcd60e51b815260206004820152604560248201527f43616e206f6e6c792062652063616c6c6564206966206164647265737365735060448201527f726f766964657220697320656d7074792c206d73672e73656e646572206f722060648201526437bbb732b960d91b608482015260a40161049b565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60405163115e1e5f60e01b8152600481018290526002602482015260009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063115e1e5f9060440160206040518083038186803b158015611d8e57600080fd5b505af4158015611da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc691906134f6565b90506000806000808473__$499c06b2b29ab2ab1aba66b7d414a45a21$__63ebc3655d90916040518263ffffffff1660e01b8152600401611e0991815260200190565b60806040518083038186803b158015611e2157600080fd5b505af4158015611e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5991906141ad565b93509350935093506000611e746427a92222a960d91b610b12565b60405163641a8c4160e11b8152600481018790526024810186905260448101859052606481018490529091506001600160a01b0382169063c835188290608401602060405180830381600087803b158015611ece57600080fd5b505af1158015611ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a80919061355a565b60003360405163115e1e5f60e01b8152600481018790526002602482015290915060009073__$499c06b2b29ab2ab1aba66b7d414a45a21$__9063115e1e5f9060440160206040518083038186803b158015611f6157600080fd5b505af4158015611f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9991906134f6565b6040516390bc2a9160e01b815290915073__$499c06b2b29ab2ab1aba66b7d414a45a21$__906390bc2a9190611fdb90849089908990899089906004016141e3565b60206040518083038186803b158015611ff357600080fd5b505af4158015612007573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fb919061355a565b6d282927aa27a1a7a62fa0a226a4a760911b61204781336115f9565b6120935760405162461bcd60e51b815260206004820152601c60248201527f5265717569726573206d73672e73656e6465722068617320726f6c6500000000604482015260640161049b565b60006120a46211105560ea1b610b12565b60055460405163095ea7b360e01b81526001600160a01b038084166004830152602482019290925291925084169063095ea7b390604401602060405180830381600087803b1580156120f557600080fd5b505af1158015612109573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a85919061355a565b606060006121396106a4565b90506000816001600160401b0381111561215557612155612b40565b60405190808252806020026020018201604052801561218e57816020015b61217b612ad5565b8152602001906001900390816121735790505b50905060005b828110156121d5576121a581610f36565b8282815181106121b7576121b761422f565b602002602001018190525080806121cd90614245565b915050612194565b5092915050565b6121e46125d0565b6001600160a01b0381166122495760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161049b565b6122528161262a565b50565b60006106b1825490565b6000612271634a55525960e01b610b12565b905060006122846211105560ea1b610b12565b60405163225bcbd160e11b8152600481018790526001600160a01b038881166024830152919250908316906344b797a290604401600060405180830381600087803b1580156122d257600080fd5b505af11580156122e6573d6000803e3d6000fd5b505050506122f58483836125b7565b6001600160a01b03821663fd9c600961230e85876140f4565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0389166024820152604401600060405180830381600087803b15801561235657600080fd5b505af115801561236a573d6000803e3d6000fd5b50505050505050505050565b6000612388634a55525960e01b610b12565b60405163225bcbd160e11b8152600481018490526001600160a01b038581166024830152919250908216906344b797a290604401600060405180830381600087803b1580156123d657600080fd5b505af11580156105fb573d6000803e3d6000fd5b600073__$499c06b2b29ab2ab1aba66b7d414a45a21$__639d403dc5600060026040518061012001604052808d81526020018c81526020018b81526020018a81526020018760600151815260200161244f886060015189604001516118db919061410c565b815287516020808a0151604051633e8973e560e01b8152600481019390935260248301529091019073__$d4e29236ef5669bc8e4309ccc6f37ccd7f$",
  "libraries": {
    "DisputeLogic": "0x8B7C8410331C9671F885311993341F9fae11C9ea",
    "DisputeDataLogic": "0x6A7c5564889CA0270EAc6FaC8Ae0e2dd0c8a6d70",
    "RoundLogic": "0xf4179131036CB2a497a80710DF574ecc6D341499",
    "InviterLogic": "0x21Ee093B0f6547F86398a92aCc59681897E4E84c",
    "SortitionSumTreeFactory": "0x62D1fa835756F14a9A689A4eaccc1808ec90b1EC",
    "JuryLogic": "0x90D47f46ebC998318dC4Dfe3845f6cd29e964c98"
  },
  "devdoc": {
    "author": "Blockswan",
    "details": "To be covered by a proxy contract, owned by the addressProvider of the specific marketplaceAll admin functions are callable by the protocolConfigurator contract defined also in the   addressProvider*",
    "kind": "dev",
    "methods": {
      "ADDRESSES_PROVIDER()": {
        "returns": {
          "_0": "The address of the AddressProvider"
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "provider": "The address of the AddressProvider"
        }
      },
      "fetchContract(bytes32)": {
        "params": {
          "_name": "the bytes32 name of the contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setProvider(address)": {
        "params": {
          "_providerAddress": "The address of the AddressProvider"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Dispute contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ADDRESSES_PROVIDER()": {
        "notice": "Returns the contract address of the IAddressProvider"
      },
      "fetchContract(bytes32)": {
        "notice": "fetch the contract address from the ADDRESSS_PROVIDERthrows error if address === 0"
      },
      "kill()": {
        "notice": "kill the current address provider, only callable by the AddressProvider"
      },
      "setProvider(address)": {
        "notice": "set the provider address of the ProviderContract"
      }
    },
    "notice": "Dispute data within an Blockswan protocol's marketplace - Users can:   # raise a dispute via the Dispute contract   # send evidence to a dispute   # commit a vote on a dispute   # vote on a dispute   # appeal to a dispute resolution  # execute a ruling on a dispute",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11002,
        "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
        "label": "_disputeIds",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(UintSet)4200_storage"
      },
      {
        "astId": 11007,
        "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
        "label": "_disputes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Dispute)19322_storage)"
      },
      {
        "astId": 5588,
        "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9094,
        "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
        "label": "ADDRESS_PROVIDER",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IAddressProvider)6093"
      },
      {
        "astId": 9101,
        "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
        "label": "MAX_UINT",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Evidence)19237_storage)dyn_storage": {
        "base": "t_struct(Evidence)19237_storage",
        "encoding": "dynamic_array",
        "label": "struct DataTypes.Evidence[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Round)19303_storage)dyn_storage": {
        "base": "t_struct(Round)19303_storage",
        "encoding": "dynamic_array",
        "label": "struct DataTypes.Round[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Vote)19250_storage)dyn_storage": {
        "base": "t_struct(Vote)19250_storage",
        "encoding": "dynamic_array",
        "label": "struct DataTypes.Vote[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)11_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[11]",
        "numberOfBytes": "352"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressProvider)6093": {
        "encoding": "inplace",
        "label": "contract IAddressProvider",
        "numberOfBytes": "20"
      },
      "t_enum(DisputeState)19120": {
        "encoding": "inplace",
        "label": "enum DataTypes.DisputeState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Dispute)19322_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.Dispute)",
        "numberOfBytes": "32",
        "value": "t_struct(Dispute)19322_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4043_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4042,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3728_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Dispute)19322_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Dispute",
        "members": [
          {
            "astId": 19305,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "createdAt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19307,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "orderId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19309,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "ruling",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19311,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "ruledAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19314,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "timestamps",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 19317,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "state",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(DisputeState)19120"
          },
          {
            "astId": 19321,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "rounds",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_struct(Round)19303_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Evidence)19237_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Evidence",
        "members": [
          {
            "astId": 19232,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "userId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19234,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "role",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 19236,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "metadata",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Round)19303_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Round",
        "members": [
          {
            "astId": 19257,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "procecutorId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19259,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "defendantId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19261,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "appealFeeRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19263,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "maxVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19265,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "tokensAtStakePerJuror",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 19267,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "totalFeesForJurors",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 19269,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "penalties",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 19271,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "winningChoice",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 19273,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "totalRepartitions",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 19275,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "totalVoted",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 19277,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "totalCommited",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 19279,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "appealedBy",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 19283,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "counts",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_uint256)11_storage"
          },
          {
            "astId": 19286,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "evidenceSubmitters",
            "offset": 0,
            "slot": "23",
            "type": "t_struct(UintSet)4200_storage"
          },
          {
            "astId": 19289,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "judgesClaimed",
            "offset": 0,
            "slot": "25",
            "type": "t_struct(AddressSet)4043_storage"
          },
          {
            "astId": 19293,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "votes",
            "offset": 0,
            "slot": "27",
            "type": "t_array(t_struct(Vote)19250_storage)dyn_storage"
          },
          {
            "astId": 19297,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "evidences",
            "offset": 0,
            "slot": "28",
            "type": "t_array(t_struct(Evidence)19237_storage)dyn_storage"
          },
          {
            "astId": 19300,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "drawnJurors",
            "offset": 0,
            "slot": "29",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 19302,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "closed",
            "offset": 0,
            "slot": "30",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "992"
      },
      "t_struct(Set)3728_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3723,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3727,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)4200_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 4199,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3728_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Vote)19250_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Vote",
        "members": [
          {
            "astId": 19239,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 19241,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "commit",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 19243,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "choice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19245,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "weight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19247,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "justification",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 19249,
            "contract": "contracts/protocol/dispute/Dispute.sol:Dispute",
            "label": "hasVoted",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}