{
  "address": "0x6418479cc723c4121c86E0ECC459a73547C932e1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jurorWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weightOfCorrectVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "disputePrice",
          "type": "uint256"
        }
      ],
      "name": "calcEarnedFromDisputeFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x007d4b0ce4ee36f453e6861f8f39e4f8a0d39cfb8f29b553fc0294a49f2db357",
  "receipt": {
    "to": null,
    "from": "0x8D3BD47c94b340E0151376ABF9D76C74c471E213",
    "contractAddress": "0x6418479cc723c4121c86E0ECC459a73547C932e1",
    "transactionIndex": 1,
    "gasUsed": "2826403",
    "logsBloom": "0x
    "blockHash": "0xf7b7059f0321fd7d24c112b1ba998095d1db67b9cb88e5f42d8efa4cf13a8125",
    "transactionHash": "0x007d4b0ce4ee36f453e6861f8f39e4f8a0d39cfb8f29b553fc0294a49f2db357",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 32900033,
        "transactionHash": "0x007d4b0ce4ee36f453e6861f8f39e4f8a0d39cfb8f29b553fc0294a49f2db357",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008d3bd47c94b340e0151376abf9d76c74c471e213",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000c8d3f897f9375d0000000000000000000000000000000000000000000000001f588ed89143cb0c7000000000000000000000000000000000000000000000e4eb0e4f688cb9a76b8000000000000000000000000000000000000000000000001e8fbadff94a93af7000000000000000000000000000000000000000000000e4ebd7236124b2dec88",
        "logIndex": 3,
        "blockHash": "0xf7b7059f0321fd7d24c112b1ba998095d1db67b9cb88e5f42d8efa4cf13a8125"
      }
    ],
    "blockNumber": 32900033,
    "cumulativeGasUsed": "2954413",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "540ab05e3117b642ab74c32eb85f094d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jurorWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weightOfCorrectVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputePrice\",\"type\":\"uint256\"}],\"name\":\"calcEarnedFromDisputeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Blockswan\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Round logic library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Implements the logic for round specific functions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/libraries/logics/RoundLogic.sol\":\"RoundLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/imports/aave/contracts/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/*^\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary PercentageMath {\\n    // Maximum percentage factor (100.00%)\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     **/\\n    function percentMul(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        assembly {\\n            if iszero(\\n                or(\\n                    iszero(percentage),\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\\n                PERCENTAGE_FACTOR\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     **/\\n    function percentDiv(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(\\n                                sub(not(0), div(percentage, 2)),\\n                                PERCENTAGE_FACTOR\\n                            )\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\\n                percentage\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x25d639d6a4c8aca57f987e5d94d761273dff9df8dcdeb7c8cefbb6250ecec927\",\"license\":\"BUSL-1.1\"},\"contracts/imports/gnosis/contracts/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../../openzeppelin/contracts/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developer^\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(from, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(freeMemoryPointer, 36),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTransferResult(\\n        IERC20 token\\n    ) private view returns (bool success) {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n            // Non-standard ERC20 transfer without return.\\n            case 0 {\\n                // NOTE: When the return data size is 0, verify that there\\n                // is code at the address. This is done in order to maintain\\n                // compatibility with Solidity calling conventions.\\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                if iszero(extcodesize(token)) {\\n                    revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                }\\n\\n                success := 1\\n            }\\n            // Standard ERC20 transfer returning boolean success value.\\n            case 32 {\\n                returndatacopy(0, 0, returndatasize())\\n\\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                // as `true` for a boolean. In order to stay compatible with\\n                // OpenZeppelin's `SafeERC20` library which is known to work\\n                // with the existing ERC20 implementation we care about,\\n                // make sure we return success for any non-zero return value\\n                // from the `transfer*` call.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            default {\\n                revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16a97de85622232442771b5974e025bbac9d4bb56fde737f58f3b363ac09ef5\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/imports/openzeppelin/contracts/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\",\"keccak256\":\"0x632d89cfbd5134bb48ab9f27f8acb3ef6230858240a06c01860523508cce9502\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n      \\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\",\"keccak256\":\"0xc70dcac795ccbf6d71c8749ad70836deef10bb12af9216d7c63399e11dd00186\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\",\"keccak256\":\"0xbe08f54c573afa66d30bddd5781ad651fa0ac388458375e4c4c3f04cf2baf6b1\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbe7e8c250bbebe46299f337b29c535ce00d67fe289eb03d84ebbd74934eec19f\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressProvider.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title The interface for contracts to interact with the Blockswan Address Provider contract\\ninterface IAddressProvider {\\n    /**\\n     * @dev Emitted when a new marketplaceId is set.\\n     * @param oldMarketplaceId The address of the old marketplaceId\\n     * @param newMarketplaceId The address of the new marketplaceId\\n     */\\n    event MarketplaceIdSet(\\n        string indexed oldMarketplaceId,\\n        string indexed newMarketplaceId\\n    );\\n\\n    /**\\n     * @dev Emitted when a new contract is added to the AddressProvider.\\n     * @param _name The name assigned in the AddressProvider.\\n     * @param _address The address of the new contract\\n     */\\n    event ContractAdded(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a new contract is removed from the AddressProvider.\\n     * @param _name The contract name removed in the AddressProvider.\\n     * @param _address The address of the removed contract\\n     */\\n    event ContractRemoved(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a contract is upgraded in the AddressProvider.\\n     * @param _name The contract name upraded in the AddressProvider.\\n     * @param _oldAddress The old address prior upgrade\\n     * @param _newAddress The new address after upgrade\\n     */\\n    event ContractUpgraded(\\n        bytes32 _name,\\n        address _oldAddress,\\n        address _newAddress\\n    );\\n\\n    /**\\n     * @notice returns contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     * @return contractAddr - address of contract registered under given provider key\\n     */\\n    function getContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice overloaded getContract to return explicit version of contract */\\n    function getContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    function getContractVersionCount(\\n        bytes32 _name\\n    ) external view returns (uint);\\n\\n    /**\\n     * @dev addContract does two things:\\n     *      1.) registers the address of given ProviderContract in the registry\\n     *      2.) sets the registry address in given ProviderContract so only\\n     *          the registry can call functions on given contract\\n     */\\n    function addContract(bytes32 _name, address _address) external;\\n\\n    /**\\n     * @dev removes contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     */\\n    function removeContract(bytes32 _name) external;\\n\\n    /**\\n     * @notice replaces contract address registered under given key with provided address\\n     * @param _name - registry key for lookup\\n     * @param _newAddress - new contract address to register under given key\\n     */\\n    function upgradeContract(bytes32 _name, address _newAddress) external;\\n}\\n\",\"keccak256\":\"0x46fd1f2889b6a5fbd60209f90b44ced918175d5ef3b05e7d8dd526a4afd77bdc\",\"license\":\"MIT\"},\"contracts/interfaces/IJury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../protocol/libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../protocol/libraries/types/InputTypes.sol\\\";\\n\\n/**\\n * @title IJury\\n * @author Blockswan\\n * @notice Defines the basic interface for a blockswan jury contract.\\n **/\\ninterface IJury {\\n    /**\\n     * @notice Randomly draws X jurors from the jurors pool\\n     * using entropy made with the blockhash and the disputeId among other things.\\n     * @param numberOfJurors The number of jurors to draw\\n   \\n     * @return jurors The list of jurors address\\n     */\\n\\n    function drawJurors(\\n        uint256 numberOfJurors\\n    ) external view returns (address[] memory jurors);\\n\\n    /**\\n     *\\n     * @param accounts The list of jurors to freeze\\n     */\\n\\n    function freezeTokens(address[] memory accounts) external;\\n\\n    /**\\n     * @param amount The amount to unfreeze\\n     * @param account The juror to unfreeze\\n     */\\n\\n    function unfreezeTokens(uint256 amount, address account) external;\\n\\n    /**\\n     * @param amount The amount of tokens added to the stake\\n     * @param juror The juror to reward\\n     */\\n    function rewardJuror(uint256 amount, address juror) external;\\n}\\n\",\"keccak256\":\"0x231e99b4594fbc9617adc601b2f261468fb5be029ece5f38da8cb68575b2af3c\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors  library\\n * @author Blockswan\\n * @notice Defines the error messages emitted by the different contracts of the Blockswan protocol\\n */\\nlibrary Errors {\\n    string public constant INVALID_ADDRESS_PROVIDER_ID = \\\"1\\\"; // The addresses provider is not valid\\n    string public constant ADDRESS_PROVIDER_ALREADY_ADDED = \\\"2\\\"; // This addresses provider already exists\\n    string public constant ADDRESS_PROVIDER_NOT_REGISTERED = \\\"3\\\"; // 'This addresses provider is not registered'\\n    string public constant CONTRACT_NAME_ALREADY_USED = \\\"4\\\"; // 'Requires that given _name does not already have non-zero registered contract address'\\n    string public constant ZERO_ADDRESS_IS_INVALID = \\\"5\\\"; // the address provided is 0x00\\n    string public constant INDEX_OUT_OF_RANGE = \\\"6\\\"; // the index provided is out of range\\n    string public constant ADDRESS_ALREADY_USED = \\\"7\\\"; // 'The address provided has already been unsed to initialise an account'\\n    string public constant INVALID_USER_ID = \\\"8\\\"; // 'The userId is incorrect'\\n    string public constant RESTRICTED_TO_BUYER = \\\"9\\\"; // this function can't  be called by buyers\\n    string public constant INVALID_INVITER_ID = \\\"10\\\"; // The inviter ID provided is incorrect\\n    string public constant FAILED_BECOMING_BUYER = \\\"11\\\"; // The execution to becomeBuyer failed\\n    string public constant RESTRICTED_TO_SELLER = \\\"12\\\"; // this function can't  be called by sellers\\n    string public constant FAILED_BECOMING_SELLER = \\\"13\\\"; // The execution to becomeSeller failed\\n    string public constant NO_MATCHING_XP_KEY = \\\"14\\\"; // There is no xp value to give for this byte32\\n    string public constant GIG_ID_ALREADY_EXISING = \\\"15\\\"; // There is already an id for this gig.\\n    string public constant ONLY_SELLER = \\\"16\\\"; // Only account with the seller role can call the functions\\n    string public constant ONLY_BUYER = \\\"17\\\"; // Only buyers can call those functions.\\n    string public constant NOT_GIG_OWNER = \\\"18\\\"; // The id provided does not match with the gig owner id\\n    string public constant CALLER_NOT_SELLER_ID = \\\"19\\\"; // The seller id provided is not matching with the account address calling the function\\n    string public constant CALLER_NOT_BUYER_ID = \\\"20\\\"; // The buyer id provided is not matching with the account address calling the function\\n    string public constant NOT_ORDER_SELLER = \\\"21\\\"; // The id provided is not the order seller\\n    string public constant NOT_ORDER_BUYER = \\\"22\\\"; // The id provided is not the order buyer\\n    string public constant INVALID_ORDER_STATE = \\\"23\\\"; // The function can't be called under the current order state\\n    string public constant SELF_REFUND_DELAY_NOT_OVER = \\\"24\\\"; // The self refund delay is not over\\n    string public constant NOT_ORDER_ACTOR = \\\"25\\\"; // The account address calling the function is not matching with the buyerId nor sellerId.\\n    string public constant DISPUTE_NOT_CREATED = \\\"26\\\"; // The dispute has not been created yet\\n    string public constant JURY_STAKE_NOT_ENOUGH = \\\"27\\\"; // The jury stake is not enough\\n    string public constant FAILED_TO_STAKE_JURY = \\\"28\\\"; // The jury stake failed\\n    string public constant FAILED_TO_WITHDRAW_JURY = \\\"29\\\"; // The jury withdraw failed\\n    string public constant ROUND_EVIDENCE_ALREADY_SUBMITTED = \\\"30\\\"; // The evidence has already been submitted\\n    string public constant EVIDENCE_NOT_SUBMITTED = \\\"31\\\"; // The evidence has not been submitted\\n    string public constant DS_EVIDENCE_PERIOD_OVER = \\\"32\\\"; // The evidence period is over\\n    // string public constant DS_VOTING_PERIOD_OVER = \\\"33\\\"; // The voting period is over\\n    // string public constant DS_VOTING_PERIOD_NOT_OVER = \\\"34\\\"; // The voting period is not over\\n    // string public constant DS_VOTING_PERIOD_NOT_STARTED = \\\"35\\\"; // The voting period has not started yet\\n    string public constant ONLY_PROVIDER_ALLOWED = \\\"36\\\"; // Only the provider can call this function\\n    string public constant DS_EVIDENCE_SENDER_NOT_PARTY = \\\"37\\\"; // The sender is not a party of the dispute\\n    string public constant CALLER_NOT_USER = \\\"38\\\"; // The caller is not the user Id\\n    string public constant DS_EVIDENCE_ROLE_NOT_VALID = \\\"39\\\"; // The role is not valid\\n    string public constant RD_ROUND_DOES_NOT_EXIST = \\\"40\\\"; // The round does not exist\\n    string public constant DS_IN_EXECUTION_PERIOD = \\\"46\\\"; //     The dispute is in execution state\\n    string public constant VOTE_REVEAL_INCORRECT = \\\"47\\\"; //     The vote reveal is incorrect\\n    string public constant ROUND_VOTE_ALREADY_COMMITED = \\\"48\\\"; //     The vote has already been commited\\n    string public constant ROUND_VOTE_NOT_COMMITED = \\\"49\\\"; //     The vote has not been commited\\n    string public constant ROUND_VOTE_ALREADY_REVEALED = \\\"50\\\"; //     The vote has already been revealed\\n    string public constant RD_ACCOUNT_NOT_DRAWN_JUROR = \\\"51\\\"; //     The account is not a drawn juror\\n    string public constant DS_COMMIT_STATE_REQUIRED = \\\"52\\\"; //    The dispute is not in commit state\\n    string public constant DS_TIME_NOT_PASSED = \\\"53\\\"; //   The time has not passed\\n    string public constant DS_INVALID_STATE = \\\"54\\\"; //   The state is invalid\\n    string public constant VOTE_INVALID_CHOICE = \\\"55\\\"; //  The vote choice is invalid\\n    string public constant DS_NO_COMMITMENTS_MADE_FOR_ROUND = \\\"56\\\"; //  No commitments were made for the round\\n    string public constant DS_NO_VOTES_MADE_FOR_ROUND = \\\"57\\\"; //  No votes were made for the round\\n    string public constant RD_VOTE_NOT_FOUND = \\\"58\\\"; //  The vote was not found\\n    string public constant ROUND_NOT_CLOSED = \\\"59\\\"; //  The round is not closed\\n    string public constant VOTE_INCORRECT = \\\"60\\\"; //  The vote is incorrect\\n    string public constant ROUND_NOT_APPEALED = \\\"61\\\"; //  The round is not appealed\\n    string public constant ROUND_ID_INVALID = \\\"62\\\"; //  The round id is invalid\\n    string public constant CLAIM_NOT_ALLOWED = \\\"63\\\"; //  The claim is not allowed\\n    string public constant ROUND_IS_APPEALED = \\\"64\\\"; //  The round is appealed\\n    string public constant DS_DISPUTE_ALREADY_RULED = \\\"65\\\"; //  The dispute is already ruled\\n}\\n\",\"keccak256\":\"0x2fdca5575c0847027beb5918556b66679442a8bf7ac8119f9c06de7060ab4bb1\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/helpers/RoleKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary RoleKeys {\\n    // ---- ADMIN ROLES  ------\\n    bytes32 public constant PROTOCOL_ADMIN_ROLE = \\\"PROTOCOL_ADMIN\\\";\\n    bytes32 public constant BUYER_ADMIN_ROLE = \\\"BUYER_ADMIN\\\";\\n    bytes32 public constant SELLER_ADMIN_ROLE = \\\"SELLER_ADMIN\\\";\\n    // ----  ROLES  ------\\n    bytes32 public constant BUYER_ROLE = \\\"BUYER\\\";\\n    bytes32 public constant SELLER_ROLE = \\\"SELLER\\\";\\n    bytes32 public constant JUDGE_ROLE = \\\"JUDGE\\\";\\n    bytes32 public constant BLACKLIST_ROLE = \\\"BLACKLIST\\\";\\n    bytes32 public constant WHITELIST_ROLE = \\\"WHITELIST\\\";\\n    bytes32 public constant XP_GIVER_ROLE = \\\"XP_GIVER\\\";\\n}\\n\",\"keccak256\":\"0x96ba28ef5c4c14bc1ef86a62e3a2bb1ea859abda8a57d053e2d25a335c58aeae\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/RoundDataLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title Round Data logic library\\n * @author Blockswan\\n * @notice Implements the logic for round data specific functions\\n */\\n\\nlibrary RoundDataLogic {\\n    using Counters for Counters.Counter;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    function setTokensAtStakePerJuror(\\n        DataTypes.Round storage round,\\n        uint256 tokensAtStakePerJuror\\n    ) external returns (bool) {\\n        round.tokensAtStakePerJuror = tokensAtStakePerJuror;\\n        return true;\\n    }\\n\\n    function setWinningChoice(\\n        DataTypes.Round storage round,\\n        uint256 winningChoice\\n    ) external returns (bool) {\\n        round.winningChoice = winningChoice;\\n        return true;\\n    }\\n\\n    function setTotalFeesForJurors(\\n        DataTypes.Round storage round,\\n        uint256 totalFeesForJurors\\n    ) external returns (bool) {\\n        round.totalFeesForJurors = totalFeesForJurors;\\n        return true;\\n    }\\n\\n    function setAppealFees(\\n        DataTypes.Round storage round,\\n        uint256 appealFeeRewards\\n    ) external returns (bool) {\\n        round.appealFeeRewards = appealFeeRewards;\\n        return true;\\n    }\\n\\n    function setMaxVotes(\\n        DataTypes.Round storage round,\\n        uint256 maxVotes\\n    ) external returns (bool) {\\n        round.maxVotes = maxVotes;\\n        return true;\\n    }\\n\\n    function setDrawnJurors(\\n        DataTypes.Round storage round,\\n        address[] memory drawnJurors\\n    ) external returns (bool) {\\n        for (uint256 i = 0; i < drawnJurors.length; i++) {\\n            round.drawnJurors.push(drawnJurors[i]);\\n        }\\n        return true;\\n    }\\n\\n    function getJurorWeight(\\n        DataTypes.Round storage round,\\n        address juror\\n    ) internal view returns (uint256 weight) {\\n        for (uint256 i = 0; i < round.drawnJurors.length; i++) {\\n            if (round.drawnJurors[i] == juror) {\\n                weight += 1;\\n            }\\n        }\\n    }\\n\\n    function addEvidence(\\n        DataTypes.Round storage round,\\n        DataTypes.Evidence memory evidence\\n    ) external returns (bool) {\\n        round.evidences.push(evidence);\\n        round.evidenceSubmitters.add(evidence.userId);\\n        return true;\\n    }\\n\\n    function setProcecutorId(\\n        DataTypes.Round storage round,\\n        uint256 procecutorId\\n    ) external returns (bool) {\\n        round.procecutorId = procecutorId;\\n        return true;\\n    }\\n\\n    function setDefendantId(\\n        DataTypes.Round storage round,\\n        uint256 defendantId\\n    ) external returns (bool) {\\n        round.defendantId = defendantId;\\n        return true;\\n    }\\n\\n    function isProcecutor(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) external view returns (bool) {\\n        return (round.procecutorId == userId);\\n    }\\n\\n    function isDefendant(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) external view returns (bool) {\\n        return (round.defendantId == userId);\\n    }\\n\\n    function isAppealed(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.appealFeeRewards > 0;\\n    }\\n\\n    function hasSubmittedEvidence(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) internal view returns (bool) {\\n        return round.evidenceSubmitters.contains(userId);\\n    }\\n\\n    function getEvidencesCount(\\n        DataTypes.Round storage round\\n    ) internal view returns (uint256) {\\n        return round.evidences.length;\\n    }\\n\\n    function setAppealedBy(\\n        DataTypes.Round storage round,\\n        uint256 appealedBy\\n    ) external returns (bool) {\\n        round.appealedBy = appealedBy;\\n        return true;\\n    }\\n\\n    function isJuror(\\n        DataTypes.Round storage round,\\n        address account\\n    ) external view returns (bool) {\\n        for (uint256 i = 0; i < round.maxVotes; i++) {\\n            if (round.drawnJurors[i] == account) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function hasRevealed(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (bool) {\\n        DataTypes.Vote memory vote = fetchVoteByAccount(round, account);\\n        return vote.hasVoted;\\n    }\\n\\n    function hasCommited(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (bool) {\\n        DataTypes.Vote memory vote = fetchVoteByAccount(round, account);\\n        return vote.commit != 0x0;\\n    }\\n\\n    function setTotalPenalties(\\n        DataTypes.Round storage round,\\n        uint256 penalties\\n    ) external returns (bool) {\\n        round.penalties = penalties;\\n        return true;\\n    }\\n\\n    function incrementTotalVoted(\\n        DataTypes.Round storage round,\\n        uint256 weight\\n    ) external returns (bool) {\\n        round.totalVoted += weight;\\n        return true;\\n    }\\n\\n    function incrementTotalCommited(\\n        DataTypes.Round storage round,\\n        uint256 weight\\n    ) external returns (bool) {\\n        round.totalCommited += weight;\\n        return true;\\n    }\\n\\n    function areAllVotesCommitted(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.totalCommited == round.maxVotes;\\n    }\\n\\n    function areAllVotesRevealed(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.totalVoted == round.maxVotes;\\n    }\\n\\n    function getVoteByAccount(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (DataTypes.Vote storage) {\\n        uint256 i = 0;\\n        for (i = 0; i < round.votes.length; i++) {\\n            if (round.votes[i].account == account) {\\n                return round.votes[i];\\n            }\\n        }\\n        return round.votes[i];\\n    }\\n\\n    function tryGetVoteByAccount(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (DataTypes.Vote storage, bool exists) {\\n        for (uint256 i = 0; i < round.votes.length; i++) {\\n            if (round.votes[i].account == account) {\\n                return (round.votes[i], true);\\n            }\\n        }\\n        return (round.votes[0], false);\\n    }\\n\\n    function incrementChoiceCount(\\n        DataTypes.Round storage round,\\n        uint256 choice,\\n        uint256 weight\\n    ) external {\\n        round.counts[choice] += weight;\\n    }\\n\\n    function fetchVoteByAccount(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (DataTypes.Vote memory) {\\n        uint256 length = round.votes.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (round.votes[i].account == account) {\\n                return round.votes[i];\\n            }\\n        }\\n        return\\n            DataTypes.Vote(\\n                account,\\n                0x0,\\n                0,\\n                getJurorWeight(round, account),\\n                \\\"\\\",\\n                false\\n            );\\n    }\\n\\n    function getWinningChoice(\\n        DataTypes.Round storage round\\n    ) internal view returns (uint256) {\\n        uint256 winningChoice = 0;\\n        uint256 winningCount = 0;\\n        for (uint256 i = 0; i < round.counts.length; i++) {\\n            if (round.counts[i] > winningCount) {\\n                winningChoice = i;\\n                winningCount = round.counts[i];\\n            }\\n        }\\n        return winningChoice;\\n    }\\n\\n    function getAmountNotVoted(\\n        DataTypes.Round storage round\\n    ) public view returns (uint256) {\\n        return round.maxVotes - round.totalVoted;\\n    }\\n\\n    function getMinRange(uint256 winningChoice) public pure returns (uint256) {\\n        return winningChoice == 0 ? 0 : winningChoice - 1;\\n    }\\n\\n    function getMaxRange(uint256 winningChoice) public pure returns (uint256) {\\n        return winningChoice == 10 ? 10 : winningChoice + 1;\\n    }\\n\\n    function getRanges(\\n        uint256 winningChoice\\n    ) public pure returns (uint256, uint256) {\\n        return (getMinRange(winningChoice), getMaxRange(winningChoice));\\n    }\\n\\n    function setAppealFeeRewards(\\n        DataTypes.Round storage round,\\n        uint256 appealFeeRewards\\n    ) external returns (bool) {\\n        round.appealFeeRewards = appealFeeRewards;\\n        return true;\\n    }\\n\\n    function setAppealFeeClaimed(\\n        DataTypes.Round storage round\\n    ) external returns (bool) {\\n        round.appealFeeRewards = 0;\\n        return true;\\n    }\\n\\n    function close(DataTypes.Round storage round) external returns (bool) {\\n        round.closed = true;\\n        return true;\\n    }\\n\\n    function isClosed(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.closed;\\n    }\\n\\n    function getAmountOfCorrectVote(\\n        DataTypes.Round storage round,\\n        uint256 winningChoice\\n    ) external view returns (uint256) {\\n        return round.counts[winningChoice];\\n    }\\n\\n    function getAmountOfIncorrectVote(\\n        DataTypes.Round storage round,\\n        uint256 min,\\n        uint256 max\\n    ) external view returns (uint256 incorrectVotes) {\\n        incorrectVotes = round.maxVotes - round.totalVoted;\\n        for (uint256 i = 0; i < round.counts.length; i++) {\\n            if (!(i >= min && i <= max)) {\\n                incorrectVotes += round.counts[i];\\n            }\\n        }\\n    }\\n\\n    function addJudgesClaimed(\\n        DataTypes.Round storage round,\\n        address account\\n    ) external returns (bool) {\\n        round.judgesClaimed.add(account);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xe2b09b674d8265b2875aaa1eb14c7ed3d79803a97de7837766151e1c1fc68319\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/RoundLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {RoleKeys} from \\\"../helpers/RoleKeys.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {PercentageMath} from \\\"../../../imports/aave/contracts/PercentageMath.sol\\\";\\nimport {RoundDataLogic} from \\\"./RoundDataLogic.sol\\\";\\nimport {VoteLogic} from \\\"./VoteLogic.sol\\\";\\n\\nimport {IJury} from \\\"../../../interfaces/IJury.sol\\\";\\n\\n/**\\n * @title Round logic library\\n * @author Blockswan\\n * @notice Implements the logic for round specific functions\\n */\\nlibrary RoundLogic {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Counters for Counters.Counter;\\n    using PercentageMath for uint256;\\n    using RoundDataLogic for DataTypes.Round;\\n    using VoteLogic for DataTypes.Vote;\\n\\n    modifier onlyJuror(DataTypes.Round storage round, address account) {\\n        require(round.isJuror(account), Errors.RD_ACCOUNT_NOT_DRAWN_JUROR);\\n        _;\\n    }\\n\\n    modifier onlyClosedRound(DataTypes.Round storage round) {\\n        require(round.isClosed(), Errors.ROUND_NOT_CLOSED);\\n        _;\\n    }\\n\\n    modifier onlyAppealedRound(DataTypes.Round storage round) {\\n        require(round.isAppealed(), Errors.ROUND_NOT_APPEALED);\\n        _;\\n    }\\n\\n    modifier onlyNotAppealedRound(DataTypes.Round storage round) {\\n        require(!round.isAppealed(), Errors.ROUND_IS_APPEALED);\\n        _;\\n    }\\n\\n    modifier onlyNotCommited(DataTypes.Round storage round, address account) {\\n        require(\\n            !round.hasCommited(account),\\n            Errors.ROUND_VOTE_ALREADY_COMMITED\\n        );\\n        _;\\n    }\\n\\n    modifier onlyNotSumbittedEvidence(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) {\\n        require(\\n            !round.hasSubmittedEvidence(userId),\\n            Errors.ROUND_EVIDENCE_ALREADY_SUBMITTED\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCommited(DataTypes.Round storage round, address account) {\\n        require(round.hasCommited(account), Errors.ROUND_VOTE_NOT_COMMITED);\\n        _;\\n    }\\n\\n    modifier onlyNotRevealed(DataTypes.Round storage round, address account) {\\n        require(\\n            !round.hasRevealed(account),\\n            Errors.ROUND_VOTE_ALREADY_REVEALED\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCorrectRole(bytes32 role) {\\n        require(\\n            role == RoleKeys.BUYER_ROLE || role == RoleKeys.SELLER_ROLE,\\n            Errors.DS_EVIDENCE_ROLE_NOT_VALID\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRoundActor(DataTypes.Round storage round, uint256 userId) {\\n        require(\\n            round.isProcecutor(userId) || round.isDefendant(userId),\\n            Errors.DS_EVIDENCE_SENDER_NOT_PARTY\\n        );\\n        _;\\n    }\\n\\n    // add a round\\n    function addRound(\\n        DataTypes.Round[] storage rounds,\\n        InputTypes.AddRoundInput memory params\\n    ) external returns (bool) {\\n        rounds.push();\\n        DataTypes.Round storage newRound = rounds[rounds.length - 1];\\n        newRound.setProcecutorId(params.procecutorId);\\n        newRound.setDefendantId(params.defendantId);\\n        newRound.setMaxVotes(params.maxVotes);\\n        newRound.setTotalFeesForJurors(params.totalFeesForJurors);\\n        newRound.setDrawnJurors(params.drawnJurors);\\n        newRound.setTokensAtStakePerJuror(params.tokensAtStakePerJuror);\\n        return true;\\n    }\\n\\n    function submitEvidence(\\n        DataTypes.Round storage round,\\n        DataTypes.Evidence memory evidence\\n    )\\n        external\\n        onlyRoundActor(round, evidence.userId)\\n        onlyNotSumbittedEvidence(round, evidence.userId)\\n        onlyCorrectRole(evidence.role)\\n        returns (bool)\\n    {\\n        if (round.getEvidencesCount() == 1) {\\n            require(\\n                evidence.role != round.evidences[0].role,\\n                Errors.DS_EVIDENCE_ROLE_NOT_VALID\\n            );\\n        }\\n        round.addEvidence(evidence);\\n        return true;\\n    }\\n\\n    function areEvidencesSubmitted(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.getEvidencesCount() == 2;\\n    }\\n\\n    function commitVote(\\n        DataTypes.Round storage round,\\n        address account,\\n        uint256 choice,\\n        string memory salt\\n    )\\n        external\\n        onlyJuror(round, account)\\n        onlyNotCommited(round, account)\\n        returns (bool)\\n    {\\n        uint256 weight = round.getJurorWeight(account);\\n        DataTypes.Vote memory newVote = VoteLogic.commit(\\n            account,\\n            choice,\\n            weight,\\n            salt\\n        );\\n        round.votes.push(newVote);\\n        round.incrementTotalCommited(weight);\\n        return true;\\n    }\\n\\n    function revealVote(\\n        DataTypes.Round storage round,\\n        address account,\\n        uint256 choice,\\n        string memory salt,\\n        string memory justification\\n    )\\n        external\\n        onlyJuror(round, account)\\n        onlyCommited(round, account)\\n        onlyNotRevealed(round, account)\\n    {\\n        uint256 weight = round.getJurorWeight(account);\\n        round.incrementTotalVoted(weight);\\n        round.incrementChoiceCount(choice, weight);\\n        {\\n            (DataTypes.Vote storage vote, bool exists) = round\\n                .tryGetVoteByAccount(account);\\n            require(exists, Errors.RD_VOTE_NOT_FOUND);\\n            vote.reveal(choice, salt, justification);\\n        }\\n    }\\n\\n    function appeal(\\n        DataTypes.Round storage round,\\n        uint256 appealFeeRewards,\\n        uint256 procecutorId\\n    ) external onlyRoundActor(round, procecutorId) {\\n        round.setAppealFeeRewards(appealFeeRewards);\\n        round.setAppealedBy(procecutorId);\\n    }\\n\\n    function claimAsJudge(\\n        DataTypes.Round storage round,\\n        InputTypes.ClaimAsJudgeInput memory params\\n    )\\n        external\\n        onlyJuror(round, params.account)\\n        onlyClosedRound(round)\\n        returns (OutputTypes.ExecuteClaimAsJudgeOutput memory output)\\n    {\\n        DataTypes.Vote memory vote = round.fetchVoteByAccount(params.account);\\n        {\\n            output = OutputTypes.ExecuteClaimAsJudgeOutput({\\n                isVoteCorrect: vote.isVoteCorrect(params.winningChoice),\\n                isVoteInRange: vote.isBetweenRange(params.min, params.max),\\n                amountFromDisputeFees: calcEarnedFromDisputeFees(\\n                    vote.weight,\\n                    params.amountOfCorrectVotes,\\n                    params.totalFeesForJurors\\n                ),\\n                amountFromJurorsTokensAtStake: calcEarnedFromDisputeFees(\\n                    vote.weight,\\n                    params.amountOfCorrectVotes,\\n                    params.penalties\\n                ),\\n                tokensAtStakePerJuror: params.tokensAtStakePerJuror\\n            });\\n        }\\n        round.addJudgesClaimed(params.account);\\n    }\\n\\n    function claimAppealFeeRewards(\\n        DataTypes.Round storage round,\\n        DataTypes.Round storage previousRound,\\n        uint256 userId\\n    )\\n        external\\n        onlyRoundActor(previousRound, userId)\\n        onlyAppealedRound(previousRound)\\n        returns (uint256 appealFeeRewards, bool isClaimable)\\n    {\\n        appealFeeRewards = previousRound.appealFeeRewards;\\n        isClaimable = checkIfClaimAppealIsPossible(\\n            round.winningChoice,\\n            previousRound.winningChoice,\\n            round.isProcecutor(userId)\\n        );\\n        previousRound.setAppealFeeClaimed();\\n    }\\n\\n    function claimRuling(\\n        DataTypes.Round storage round\\n    )\\n        external\\n        view\\n        onlyNotAppealedRound(round)\\n        returns (uint256 ruling, uint256 procecutorId, uint256 defendantId)\\n    {\\n        ruling = round.winningChoice;\\n        procecutorId = round.procecutorId;\\n        defendantId = round.defendantId;\\n    }\\n\\n    function checkIfClaimAppealIsPossible(\\n        uint256 winningChoice,\\n        uint256 previousWinningChoice,\\n        bool calledByProcecutor\\n    ) internal pure returns (bool) {\\n        if (calledByProcecutor) {\\n            return winningChoice > previousWinningChoice;\\n        } else {\\n            return winningChoice <= previousWinningChoice;\\n        }\\n    }\\n\\n    function calcEarnedFromDisputeFees(\\n        uint256 jurorWeight,\\n        uint256 weightOfCorrectVotes,\\n        uint256 disputePrice\\n    ) public pure returns (uint256) {\\n        uint res = (disputePrice * jurorWeight) / weightOfCorrectVotes;\\n        return res;\\n    }\\n\\n    function calcPenaltiesAmount(\\n        DataTypes.Round storage round,\\n        uint256 min,\\n        uint256 max\\n    ) external view returns (uint256 penaltiesAmount) {\\n        uint256 amountOfIncorrectVotes = round.getAmountOfIncorrectVote(\\n            min,\\n            max\\n        );\\n        penaltiesAmount = amountOfIncorrectVotes * round.tokensAtStakePerJuror;\\n    }\\n\\n    function format(\\n        DataTypes.Round storage round,\\n        uint256 id\\n    ) public view returns (OutputTypes.RoundOutput memory) {\\n        return (\\n            OutputTypes.RoundOutput({\\n                roundId: id,\\n                procecutorId: round.procecutorId,\\n                defendantId: round.defendantId,\\n                appealFeeRewards: round.appealFeeRewards,\\n                tokensAtStakePerJuror: round.tokensAtStakePerJuror,\\n                totalFeesForJurors: round.totalFeesForJurors,\\n                maxVotes: round.maxVotes,\\n                penalties: round.penalties,\\n                winningChoice: round.winningChoice,\\n                totalRepartitions: round.totalRepartitions,\\n                totalVoted: round.totalVoted,\\n                totalCommited: round.totalCommited,\\n                counts: round.counts,\\n                evidenceSubmitters: round.evidenceSubmitters.values(),\\n                appealedBy: round.appealedBy,\\n                votes: round.votes,\\n                evidences: round.evidences,\\n                drawnJurors: round.drawnJurors,\\n                judgesClaimed: round.judgesClaimed.values(),\\n                closed: round.closed\\n            })\\n        );\\n    }\\n\\n    function formatAll(\\n        DataTypes.Round[] storage rounds\\n    ) external view returns (OutputTypes.RoundOutput[] memory) {\\n        OutputTypes.RoundOutput[] memory output = new OutputTypes.RoundOutput[](\\n            rounds.length\\n        );\\n        for (uint256 i = 0; i < rounds.length; i++) {\\n            output[i] = format(rounds[i], i);\\n        }\\n        return output;\\n    }\\n}\\n\",\"keccak256\":\"0xf6a72669f0634b624113bdc94638ad5d1313529391d3ffc66cb2eacdb3130c62\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/VoteDataLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\n\\n/**\\n * @title VoteData logic library\\n * @author Blockswan\\n * @notice Implements the logic for vote data specific functions\\n */\\nlibrary VoteDataLogic {\\n    function setJustification(\\n        DataTypes.Vote storage vote,\\n        string memory justification\\n    ) internal returns (bool) {\\n        vote.justification = justification;\\n        return true;\\n    }\\n\\n    function setCommit(\\n        DataTypes.Vote storage vote,\\n        bytes32 commitment\\n    ) internal returns (bool) {\\n        vote.commit = commitment;\\n        return true;\\n    }\\n\\n    function setChoice(\\n        DataTypes.Vote storage vote,\\n        uint256 choice\\n    ) internal returns (bool) {\\n        vote.choice = choice;\\n        return true;\\n    }\\n\\n    function setAccount(\\n        DataTypes.Vote storage vote,\\n        address account\\n    ) internal returns (bool) {\\n        vote.account = account;\\n        return true;\\n    }\\n\\n    function setVoted(DataTypes.Vote storage vote) internal returns (bool) {\\n        vote.hasVoted = true;\\n        return true;\\n    }\\n\\n    function setWeight(\\n        DataTypes.Vote storage vote,\\n        uint256 weight\\n    ) internal returns (bool) {\\n        vote.weight = weight;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xc1147da549f5811faab7374a04df9b5a06b1645afdf1ffd029dd9f328a4f4d81\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/VoteLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\nimport {VoteDataLogic} from \\\"./VoteDataLogic.sol\\\";\\n\\n/**\\n * @title Vote logic library\\n * @author Blockswan\\n * @notice Implements the logic for vote specific functions\\n */\\nlibrary VoteLogic {\\n    using VoteDataLogic for DataTypes.Vote;\\n\\n    modifier onlyValidChoice(uint256 choice) {\\n        require(choice >= 0 && choice <= 10, Errors.VOTE_INVALID_CHOICE);\\n        _;\\n    }\\n\\n    modifier onlyValidReveal(\\n        DataTypes.Vote storage vote,\\n        uint256 choice,\\n        string memory salt\\n    ) {\\n        require(\\n            isRevealCorrect(vote.account, choice, salt, vote.commit),\\n            Errors.VOTE_REVEAL_INCORRECT\\n        );\\n        _;\\n    }\\n\\n    function encodeChoice(\\n        address account,\\n        uint256 choice,\\n        string memory salt\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(account, choice, salt));\\n    }\\n\\n    function isRevealCorrect(\\n        address account,\\n        uint256 choice,\\n        string memory salt,\\n        bytes32 commitment\\n    ) internal pure returns (bool) {\\n        return encodeChoice(account, choice, salt) == commitment;\\n    }\\n\\n    function isVoteCorrect(\\n        DataTypes.Vote storage vote,\\n        uint256 choice\\n    ) internal view returns (bool) {\\n        return vote.choice == choice;\\n    }\\n\\n    function commit(\\n        address account,\\n        uint256 choice,\\n        uint256 weight,\\n        string memory salt\\n    ) external pure returns (DataTypes.Vote memory newVote) {\\n        newVote = DataTypes.Vote({\\n            account: account,\\n            choice: 0,\\n            justification: \\\"\\\",\\n            commit: encodeChoice(account, choice, salt),\\n            weight: weight,\\n            hasVoted: false\\n        });\\n    }\\n\\n    function reveal(\\n        DataTypes.Vote storage vote,\\n        uint256 choice,\\n        string memory salt,\\n        string memory justification\\n    )\\n        external\\n        onlyValidChoice(choice)\\n        onlyValidReveal(vote, choice, salt)\\n        returns (bool)\\n    {\\n        vote.setChoice(choice);\\n        vote.setJustification(justification);\\n        vote.setVoted();\\n        return true;\\n    }\\n\\n    function isBetweenRange(\\n        DataTypes.Vote memory vote,\\n        uint256 minRange,\\n        uint256 maxRange\\n    ) external pure returns (bool) {\\n        return vote.choice >= minRange && vote.choice <= maxRange;\\n    }\\n\\n    function isVoteCorrect(\\n        DataTypes.Vote memory vote,\\n        uint256 winningChoice\\n    ) external pure returns (bool) {\\n        return vote.choice == winningChoice;\\n    }\\n}\\n\",\"keccak256\":\"0x6660ed5831dd045732438ad40c9eac0574e7902068326642de43e94590b4daa9\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\n\\nlibrary DataTypes {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n\\n    enum OrderState {\\n        UNCONFIRMED,\\n        CONFIRMED,\\n        DISPUTED,\\n        DONE\\n    }\\n\\n    enum DisputeState {\\n        EVIDENCE,\\n        COMMIT,\\n        VOTE,\\n        APPEAL,\\n        EXECUTION\\n    }\\n\\n    struct DelayTimestamp {\\n        uint256 selfRefund;\\n        uint256 evidence;\\n        uint256 commit;\\n        uint256 vote;\\n        uint256 appeal;\\n    }\\n\\n    struct User {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        EnumerableSet.UintSet gigIds;\\n        EnumerableSet.UintSet offerIds;\\n        EnumerableSet.UintSet bidIds;\\n        EnumerableSet.UintSet buyerOrderIds;\\n        EnumerableSet.UintSet gigReviewsIds;\\n        EnumerableSet.UintSet userReviewsIds;\\n        EnumerableSet.UintSet reviewsIds;\\n    }\\n\\n    struct Package {\\n        uint256 price;\\n        uint256 timeDelivery;\\n    }\\n\\n    struct Gig {\\n        string metadata;\\n        uint256 createdAt;\\n        bool isPaused;\\n        EnumerableSet.UintSet reviewIds;\\n        EnumerableSet.UintSet orderIds;\\n        Counters.Counter successSell;\\n        Counters.Counter failedSell;\\n        Package[3] packages;\\n    }\\n\\n    struct Invoice {\\n        uint256 price;\\n        uint256 buyerFees;\\n        uint256 sellerFees;\\n        uint256 createdAt;\\n        IERC20 currency;\\n    }\\n\\n    struct Order {\\n        string metadata;\\n        string brief;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        uint256 disputeId;\\n        bool disputed;\\n        Invoice invoice;\\n        OrderState state;\\n        EnumerableSet.UintSet reviewIds;\\n    }\\n\\n    struct Evidence {\\n        uint256 userId;\\n        bytes32 role;\\n        string metadata;\\n    }\\n\\n    struct Vote {\\n        address account;\\n        bytes32 commit;\\n        uint256 choice;\\n        uint256 weight;\\n        string justification;\\n        bool hasVoted;\\n    }\\n\\n    struct Juror {\\n        uint256 stakedTokens;\\n        uint256 freezedTokens;\\n    }\\n\\n    struct Round {\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 appealFeeRewards;\\n        uint256 maxVotes;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 penalties;\\n        uint256 winningChoice;\\n        uint256 totalRepartitions;\\n        uint256 totalVoted;\\n        uint256 totalCommited;\\n        uint256 appealedBy;\\n        uint256[11] counts;\\n        EnumerableSet.UintSet evidenceSubmitters;\\n        EnumerableSet.AddressSet judgesClaimed;\\n        Vote[] votes;\\n        Evidence[] evidences;\\n        address[] drawnJurors;\\n        bool closed;\\n    }\\n\\n    struct Dispute {\\n        uint256 createdAt;\\n        uint256 orderId;\\n        uint256 ruling;\\n        uint256 ruledAt;\\n        uint256[] timestamps;\\n        DisputeState state;\\n        Round[] rounds;\\n    }\\n\\n    struct Review {\\n        uint256 authorId;\\n        string metadata;\\n    }\\n\\n    struct ServiceProvider {\\n        address wallet;\\n        string endpoint;\\n    }\\n\\n    struct EntryParams {\\n        uint256 currencyValue;\\n        uint256 timeAdded;\\n        uint256 xpEarned;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CreationParams {\\n        uint256 currencyValue;\\n        uint256 xpEarned;\\n    }\\n\\n    struct OrderPriceParams {\\n        uint256 trialFlat;\\n        uint256 trialPercent;\\n        uint256 proceedFlat;\\n        uint256 proceedPercent;\\n    }\\n\\n    struct FeeParams {\\n        uint256 flat;\\n        uint256 percent;\\n    }\\n\\n    struct RetributionParams {\\n        uint256 affiliate;\\n        uint256 lvl0AffiliateShare;\\n    }\\n\\n    struct DisputeParams {\\n        uint256 minStake;\\n        uint256 alpha;\\n        uint256 feePerJuror;\\n        uint256 maxVotes;\\n    }\\n}\\n\",\"keccak256\":\"0x6e4e2c885030600a71149b4d83d2970b0f7ac310f89636734fa96fb2f12b9456\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/InputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary InputTypes {\\n    struct CreateUserInput {\\n        uint256 newId;\\n        string metadata;\\n        uint256 inviterId;\\n        address wallet;\\n    }\\n\\n    struct CreateGigInput {\\n        uint256 newId;\\n        DataTypes.Package[3] packages;\\n        string metadata;\\n    }\\n\\n    struct OrderFeesInput {\\n        DataTypes.FeeParams buyerFees;\\n        DataTypes.FeeParams sellerFees;\\n    }\\n\\n    struct OrderRelationInput {\\n        uint256 newId;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n    }\\n\\n    struct CreateOrderInput {\\n        uint256 sellerId;\\n        uint256 buyerId;\\n        uint256 gigId;\\n        uint256 packageId;\\n        string brief;\\n    }\\n\\n    struct ExecuteCreateOrderInput {\\n        uint256 price;\\n        string metadata;\\n        string brief;\\n        OrderFeesInput fees;\\n        OrderRelationInput relations;\\n        IERC20 currency;\\n    }\\n\\n    struct ExecuteCreateDisputeInput {\\n        uint256 newId;\\n        uint256 orderId;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 maxVotes;\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 evidenceUntil;\\n        address[] drawnJurors;\\n    }\\n\\n    struct ExecuteNextRoundInput {\\n        uint256 evidenceUntil;\\n        uint256 maxVotes;\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        address[] drawnJurors;\\n    }\\n\\n    struct BecomeBuyerInput {\\n        address account;\\n        uint256 buyerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct BecomeSellerInput {\\n        address account;\\n        uint256 sellerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CalcInvitersRewardsInput {\\n        uint256 currencyValue;\\n        uint256 affiliateShare;\\n        uint256 lvl0AffiliateShare;\\n    }\\n\\n    struct ProcessPaymentInput {\\n        address caller;\\n        address inviter0;\\n        address inviter1;\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n\\n    struct AddRoundInput {\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 maxVotes;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        address[] drawnJurors;\\n    }\\n\\n    struct ClaimAsJudgeInput {\\n        address account;\\n        uint256 min;\\n        uint256 max;\\n        uint256 winningChoice;\\n        uint256 amountOfCorrectVotes;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 penalties;\\n    }\\n}\\n\",\"keccak256\":\"0x1252a66975aff762ff5773cdc5cbfe9e95003a0cc6b2e9879ff119fbe60dcea4\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/OutputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary OutputTypes {\\n    struct CalcInvitersRewardsOutput {\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n\\n    struct PrepareBecomeRoleOutput {\\n        address inviter0;\\n        address inviter1;\\n        DataTypes.EntryParams entryParams;\\n        DataTypes.RetributionParams retributionParams;\\n        CalcInvitersRewardsOutput rewards;\\n    }\\n\\n    struct GigOutput {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        uint256[] reviewIds;\\n        uint256[] orderIds;\\n        DataTypes.Package[3] packages;\\n    }\\n\\n    struct UserOutput {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 userId;\\n        address wallet;\\n        uint256[] gigIds;\\n        uint256[] offerIds;\\n        uint256[] bidIds;\\n        uint256[] buyerOrderIds;\\n        uint256[] gigReviewsIds;\\n        uint256[] userReviewsIds;\\n        uint256[] reviewsIds;\\n    }\\n\\n    struct OrderOutput {\\n        string metadata;\\n        string brief;\\n        uint256 orderId;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        uint256 disputeId;\\n        uint256[] reviewIds;\\n        bool disputed;\\n        DataTypes.Invoice invoice;\\n        DataTypes.OrderState state;\\n    }\\n\\n    struct RoundOutput {\\n        uint256 roundId;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 appealFeeRewards;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 maxVotes;\\n        uint256 penalties;\\n        uint256 winningChoice;\\n        uint256 totalRepartitions;\\n        uint256 totalVoted;\\n        uint256 totalCommited;\\n        uint256[11] counts;\\n        uint256[] evidenceSubmitters;\\n        uint256 appealedBy;\\n        DataTypes.Vote[] votes;\\n        DataTypes.Evidence[] evidences;\\n        address[] drawnJurors;\\n        address[] judgesClaimed;\\n        bool closed;\\n    }\\n\\n    struct DisputeOutput {\\n        uint256 createdAt;\\n        uint256 disputeId;\\n        uint256 orderId;\\n        uint256 ruling;\\n        uint256 ruledAt;\\n        uint256[] timestamps;\\n        DataTypes.DisputeState state;\\n        RoundOutput[] rounds;\\n    }\\n\\n    struct PopulatedGig {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        DataTypes.Review[] reviews;\\n        DataTypes.Package[] packages;\\n    }\\n\\n    struct CalcDisputeDelaysFromBlock {\\n        uint256 evidenceUntil;\\n        uint256 commitUntil;\\n        uint256 voteUntil;\\n        uint256 appealUntil;\\n    }\\n\\n    struct PopulatedUser {\\n        uint256 userId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 bswanBalance;\\n        uint256 usdcBalance;\\n        uint256 xpBalance;\\n        uint256[] gigIds;\\n        address wallet;\\n        bool isBuyer;\\n        bool isSeller;\\n        bool isJudge;\\n        UserOutput[] inviters;\\n    }\\n\\n    struct ExecuteClaimAsJudgeOutput {\\n        bool isVoteCorrect;\\n        bool isVoteInRange;\\n        uint256 amountFromDisputeFees;\\n        uint256 amountFromJurorsTokensAtStake;\\n        uint256 tokensAtStakePerJuror;\\n    }\\n}\\n\",\"keccak256\":\"0x0c0945bb78e9789cffdcd04fc3518ee653b826dbb948ffeaf6026f94309ac295\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61322b61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100d85760003560e01c806363a072ba11610096578063bba2165211610070578063bba2165214610232578063c0b088f714610252578063d979c08c14610265578063e6053cff14610285576100d8565b806363a072ba146101c55780639cd25fc5146101f2578063ba30c1a714610212576100d8565b8062ffd605146100dd57806301d84af51461010857806304fb8e1a1461013557806308a83d86146101635780632fd658b614610183578063327d2e01146101a5575b600080fd5b6100f06100eb3660046126e0565b610298565b6040516100ff93929190612fc6565b60405180910390f35b81801561011457600080fd5b506101286101233660046128b9565b610382565b6040516100ff9190612f15565b81801561014157600080fd5b50610155610150366004612a0b565b61073b565b6040516100ff92919061305f565b610176610171366004612a0b565b610a91565b6040516100ff9190612f66565b81801561018f57600080fd5b506101a361019e366004612a0b565b610ab4565b005b6101b86101b33660046126e0565b610d25565b6040516100ff9190612e97565b8180156101d157600080fd5b506101e56101e036600461296a565b610e19565b6040516100ff9190612ef7565b610205610200366004612a36565b611139565b6040516100ff9190612f53565b81801561021e57600080fd5b506101e561022d3660046127d1565b6114dc565b81801561023e57600080fd5b506101a361024d366004612832565b6117be565b610176610260366004612a0b565b611b0b565b81801561027157600080fd5b506101e56102803660046126f8565b611bb6565b6101e56102933660046126e0565b611f59565b60008060008380737481003653ea47b7889C8eAb8d7c2A0577aFbd1263b265233890916040518263ffffffff1660e01b81526004016102d79190612f66565b60206040518083038186803b1580156102ef57600080fd5b505af4158015610303573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032791906127b7565b15604051806040016040528060028152602001610d8d60f21b8152509061036a5760405162461bcd60e51b81526004016103619190612f02565b60405180910390fd5b50505050600782015482546001909301549093909150565b61038a6123d3565b815160405163c52af8e960e01b8152849190737481003653ea47b7889C8eAb8d7c2A0577aFbd129063c52af8e9906103c89085908590600401612f6f565b60206040518083038186803b1580156103e057600080fd5b505af41580156103f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041891906127b7565b60405180604001604052806002815260200161353160f01b815250906104515760405162461bcd60e51b81526004016103619190612f02565b50604051637f8dc8e760e01b81528590737481003653ea47b7889C8eAb8d7c2A0577aFbd1290637f8dc8e79061048b908490600401612f66565b60206040518083038186803b1580156104a357600080fd5b505af41580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db91906127b7565b60405180604001604052806002815260200161353960f01b815250906105145760405162461bcd60e51b81526004016103619190612f02565b508451600090610525908890611f6d565b90506040518060a001604052808273D3203312c4A766BB00C63e357233b4780C2d815D630a6c668c90918a606001516040518363ffffffff1660e01b8152600401610571929190612fdc565b60206040518083038186803b15801561058957600080fd5b505af415801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c191906127b7565b151581526020888101516040808b015190516339b7870160e21b8152929093019273D3203312c4A766BB00C63e357233b4780C2d815D9263e6de1c049261060c928892600401612ffe565b60206040518083038186803b15801561062457600080fd5b505af4158015610638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065c91906127b7565b1515815260200161067a836060015189608001518a60c00151610a91565b8152602001610696836060015189608001518a60e00151610a91565b815260a088015160209091015286516040516357708ca360e11b8152919650737481003653ea47b7889C8eAb8d7c2A0577aFbd129163aee11946916106e0918b9190600401612f6f565b60206040518083038186803b1580156106f857600080fd5b505af415801561070c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073091906127b7565b505050505092915050565b600080838381737481003653ea47b7889C8eAb8d7c2A0577aFbd12635347e6b89091836040518363ffffffff1660e01b815260040161077b929190612fb8565b60206040518083038186803b15801561079357600080fd5b505af41580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb91906127b7565b8061085a575060405163e4dfdc1b60e01b8152737481003653ea47b7889C8eAb8d7c2A0577aFbd129063e4dfdc1b9061080a9085908590600401612fb8565b60206040518083038186803b15801561082257600080fd5b505af4158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a91906127b7565b60405180604001604052806002815260200161333760f01b815250906108935760405162461bcd60e51b81526004016103619190612f02565b5060405163164ca46760e31b81528690737481003653ea47b7889C8eAb8d7c2A0577aFbd129063b2652338906108cd908490600401612f66565b60206040518083038186803b1580156108e557600080fd5b505af41580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d91906127b7565b60405180604001604052806002815260200161363160f01b815250906109565760405162461bcd60e51b81526004016103619190612f02565b5060028701546007808a015490890154604051630a68fcd760e31b81529297506109fb92737481003653ea47b7889C8eAb8d7c2A0577aFbd1290635347e6b8906109a6908e908d90600401612fb8565b60206040518083038186803b1580156109be57600080fd5b505af41580156109d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f691906127b7565b612173565b60405163132f1cc960e31b8152909450737481003653ea47b7889C8eAb8d7c2A0577aFbd1290639978e64890610a35908a90600401612f66565b60206040518083038186803b158015610a4d57600080fd5b505af4158015610a61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8591906127b7565b50505050935093915050565b60008083610a9f86856130f9565b610aa991906130d9565b9150505b9392505050565b604051630a68fcd760e31b815283908290737481003653ea47b7889C8eAb8d7c2A0577aFbd1290635347e6b890610af19085908590600401612fb8565b60206040518083038186803b158015610b0957600080fd5b505af4158015610b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4191906127b7565b80610bd0575060405163e4dfdc1b60e01b8152737481003653ea47b7889C8eAb8d7c2A0577aFbd129063e4dfdc1b90610b809085908590600401612fb8565b60206040518083038186803b158015610b9857600080fd5b505af4158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd091906127b7565b60405180604001604052806002815260200161333760f01b81525090610c095760405162461bcd60e51b81526004016103619190612f02565b50604051637db039b360e11b8152737481003653ea47b7889C8eAb8d7c2A0577aFbd129063fb60736690610c439088908890600401612fb8565b60206040518083038186803b158015610c5b57600080fd5b505af4158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9391906127b7565b5060405163766b344160e11b8152737481003653ea47b7889C8eAb8d7c2A0577aFbd129063ecd6688290610ccd9088908790600401612fb8565b60206040518083038186803b158015610ce557600080fd5b505af4158015610cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1d91906127b7565b505050505050565b805460609060009067ffffffffffffffff811115610d5357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d8c57816020015b610d79612406565b815260200190600190039081610d715790505b50905060005b8354811015610e1057610dd2848281548110610dbe57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601f020182611139565b828281518110610df257634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610e0890613196565b915050610d92565b5090505b919050565b8051604051630a68fcd760e31b81526000918491737481003653ea47b7889C8eAb8d7c2A0577aFbd1290635347e6b890610e599085908590600401612fb8565b60206040518083038186803b158015610e7157600080fd5b505af4158015610e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea991906127b7565b80610f38575060405163e4dfdc1b60e01b8152737481003653ea47b7889C8eAb8d7c2A0577aFbd129063e4dfdc1b90610ee89085908590600401612fb8565b60206040518083038186803b158015610f0057600080fd5b505af4158015610f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3891906127b7565b60405180604001604052806002815260200161333760f01b81525090610f715760405162461bcd60e51b81526004016103619190612f02565b5083518590610f80828261218e565b1560405180604001604052806002815260200161033360f41b81525090610fba5760405162461bcd60e51b81526004016103619190612f02565b50856020015164212aaca2a960d91b811480610fde57506529a2a62622a960d11b81145b60405180604001604052806002815260200161333960f01b815250906110175760405162461bcd60e51b81526004016103619190612f02565b506110218861219d565b600114156110a15787601c0160008154811061104d57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600101548760200151141560405180604001604052806002815260200161333960f01b8152509061109f5760405162461bcd60e51b81526004016103619190612f02565b505b6040516396571bfd60e01b8152737481003653ea47b7889C8eAb8d7c2A0577aFbd12906396571bfd906110da908b908b90600401612f9f565b60206040518083038186803b1580156110f257600080fd5b505af4158015611106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112a91906127b7565b50600198975050505050505050565b611141612406565b6040805161028081018252838152845460208201526001850154818301526002850154606082015260048501546080820152600585015460a0820152600385015460c0820152600685015460e0820152600785015461010082015260088501546101208201526009850154610140820152600a85015461016080830191909152825190810192839052909161018083019190600c870190600b9082845b8154815260200190600101908083116111de5750505050508152602001611207856017016121a4565b815260200184600b0154815260200184601b01805480602002602001604051908101604052809291908181526020016000905b828210156113455760008481526020908190206040805160c0810182526006860290920180546001600160a01b03168352600181015493830193909352600283015490820152600382015460608201526004820180549192916080840191906112a29061315b565b80601f01602080910402602001604051908101604052809291908181526020018280546112ce9061315b565b801561131b5780601f106112f05761010080835404028352916020019161131b565b820191906000526020600020905b8154815290600101906020018083116112fe57829003601f168201915b50505091835250506005919091015460ff161515602091820152908252600192909201910161123a565b50505050815260200184601c01805480602002602001604051908101604052809291908181526020016000905b8282101561144a578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820180546113b99061315b565b80601f01602080910402602001604051908101604052809291908181526020018280546113e59061315b565b80156114325780601f1061140757610100808354040283529160200191611432565b820191906000526020600020905b81548152906001019060200180831161141557829003601f168201915b50505050508152505081526020019060010190611372565b50505050815260200184601d018054806020026020016040519081016040528092919081815260200182805480156114ab57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161148d575b505050505081526020016114c1856019016121a4565b8152601e85015460ff16151560209091015290505b92915050565b60405163c52af8e960e01b815260009085908590737481003653ea47b7889C8eAb8d7c2A0577aFbd129063c52af8e99061151c9085908590600401612f6f565b60206040518083038186803b15801561153457600080fd5b505af4158015611548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156c91906127b7565b60405180604001604052806002815260200161353160f01b815250906115a55760405162461bcd60e51b81526004016103619190612f02565b5086866115b282826121b1565b1560405180604001604052806002815260200161068760f31b815250906115ec5760405162461bcd60e51b81526004016103619190612f02565b5060006115f98a8a6121cc565b9050600073D3203312c4A766BB00C63e357233b4780C2d815D6334d8dbe28b8b858c6040518563ffffffff1660e01b815260040161163a9493929190612e60565b60006040518083038186803b15801561165257600080fd5b505af4158015611666573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261168e9190810190612a57565b601b8c018054600180820183556000928352602092839020845160069093020180546001600160a01b0319166001600160a01b03909316929092178255838301519082015560408301516002820155606083015160038201556080830151805193945084939192611707926004850192909101906124a7565b5060a091909101516005909101805460ff1916911515919091179055604051630368443b60e01b8152737481003653ea47b7889C8eAb8d7c2A0577aFbd1290630368443b9061175c908e908690600401612fb8565b60206040518083038186803b15801561177457600080fd5b505af4158015611788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ac91906127b7565b5060019b9a5050505050505050505050565b60405163c52af8e960e01b815285908590737481003653ea47b7889C8eAb8d7c2A0577aFbd129063c52af8e9906117fb9085908590600401612f6f565b60206040518083038186803b15801561181357600080fd5b505af4158015611827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184b91906127b7565b60405180604001604052806002815260200161353160f01b815250906118845760405162461bcd60e51b81526004016103619190612f02565b50868661189182826121b1565b60405180604001604052806002815260200161343960f01b815250906118ca5760405162461bcd60e51b81526004016103619190612f02565b5088886118d7828261224b565b1560405180604001604052806002815260200161035360f41b815250906119115760405162461bcd60e51b81526004016103619190612f02565b50600061191e8c8c6121cc565b6040516361bfa34160e01b8152909150737481003653ea47b7889C8eAb8d7c2A0577aFbd12906361bfa3419061195a908f908590600401612fb8565b60206040518083038186803b15801561197257600080fd5b505af4158015611986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119aa91906127b7565b50604051630f82d3f160e11b8152737481003653ea47b7889C8eAb8d7c2A0577aFbd1290631f05a7e2906119e6908f908e908690600401612fc6565b60006040518083038186803b1580156119fe57600080fd5b505af4158015611a12573d6000803e3d6000fd5b50505050600080611a2c8d8f61226490919063ffffffff16565b91509150806040518060400160405280600281526020016106a760f31b81525090611a6a5760405162461bcd60e51b81526004016103619190612f02565b508173D3203312c4A766BB00C63e357233b4780C2d815D630b97b41790918e8e8e6040518563ffffffff1660e01b8152600401611aaa9493929190613023565b60206040518083038186803b158015611ac257600080fd5b505af4158015611ad6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afa91906127b7565b505050505050505050505050505050565b604051637e084e3b60e01b81526000908190737481003653ea47b7889C8eAb8d7c2A0577aFbd1290637e084e3b90611b4b90889088908890600401612fc6565b60206040518083038186803b158015611b6357600080fd5b505af4158015611b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9b9190612b16565b9050846004015481611bad91906130f9565b95945050505050565b8154600190810180845560008481529182918591611bd391613118565b81548110611bf157634e487b7160e01b600052603260045260246000fd5b90600052602060002090601f0201905080737481003653ea47b7889C8eAb8d7c2A0577aFbd1263cc8a0498909185606001516040518363ffffffff1660e01b8152600401611c40929190612fb8565b60206040518083038186803b158015611c5857600080fd5b505af4158015611c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9091906127b7565b50608083015160405163011abfa960e61b8152737481003653ea47b7889C8eAb8d7c2A0577aFbd12916346afea4091611ccd918591600401612fb8565b60206040518083038186803b158015611ce557600080fd5b505af4158015611cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1d91906127b7565b506040808401519051636bf55b2760e11b8152737481003653ea47b7889C8eAb8d7c2A0577aFbd129163d7eab64e91611d5a918591600401612fb8565b60206040518083038186803b158015611d7257600080fd5b505af4158015611d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611daa91906127b7565b508251604051636b8af67360e01b8152737481003653ea47b7889C8eAb8d7c2A0577aFbd1291636b8af67391611de4918591600401612fb8565b60206040518083038186803b158015611dfc57600080fd5b505af4158015611e10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3491906127b7565b5060a083015160405163194ebd5360e01b8152737481003653ea47b7889C8eAb8d7c2A0577aFbd129163194ebd5391611e71918591600401612f86565b60206040518083038186803b158015611e8957600080fd5b505af4158015611e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec191906127b7565b50602083015160405163a2e0e17960e01b8152737481003653ea47b7889C8eAb8d7c2A0577aFbd129163a2e0e17991611efe918591600401612fb8565b60206040518083038186803b158015611f1657600080fd5b505af4158015611f2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4e91906127b7565b506001949350505050565b6000611f648261219d565b60021492915050565b611f7561252b565b601b83015460005b8181101561211a57836001600160a01b031685601b018281548110611fb257634e487b7160e01b600052603260045260246000fd5b60009182526020909120600690910201546001600160a01b031614156121085784601b018181548110611ff557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016040518060c00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160018201548152602001600282015481526020016003820154815260200160048201805461206b9061315b565b80601f01602080910402602001604051908101604052809291908181526020018280546120979061315b565b80156120e45780601f106120b9576101008083540402835291602001916120e4565b820191906000526020600020905b8154815290600101906020018083116120c757829003601f168201915b50505091835250506005919091015460ff16151560209091015292506114d6915050565b8061211281613196565b915050611f7d565b506040518060c00160405280846001600160a01b031681526020016000801b81526020016000815260200161214f86866121cc565b81526040805160208082018352600080835290840191909152910152949350505050565b600081156121845750818311610aad565b5081831115610aad565b6000610aad6017840183612353565b601c015490565b60606000610aad8361235f565b6000806121be8484611f6d565b602001511515949350505050565b6000805b601d84015481101561224457826001600160a01b031684601d01828154811061220957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614156122325761222f6001836130c1565b91505b8061223c81613196565b9150506121d0565b5092915050565b6000806122588484611f6d565b60a00151949350505050565b60008060005b601b85015481101561231257836001600160a01b031685601b0182815481106122a357634e487b7160e01b600052603260045260246000fd5b60009182526020909120600690910201546001600160a01b031614156123005784601b0181815481106122e657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016001925092505061234c565b8061230a81613196565b91505061226a565b5083601b0160008154811061233757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016000915091505b9250929050565b6000610aad83836123bb565b6060816000018054806020026020016040519081016040528092919081815260200182805480156123af57602002820191906000526020600020905b81548152602001906001019080831161239b575b50505050509050919050565b60009081526001919091016020526040902054151590565b6040518060a001604052806000151581526020016000151581526020016000815260200160008152602001600081525090565b60405180610280016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200161246e61255f565b81526020016060815260200160008152602001606081526020016060815260200160608152602001606081526020016000151581525090565b8280546124b39061315b565b90600052602060002090601f0160209004810192826124d5576000855561251b565b82601f106124ee57805160ff191683800117855561251b565b8280016001018555821561251b579182015b8281111561251b578251825591602001919060010190612500565b5061252792915061257e565b5090565b6040805160c0810182526000808252602082018190529181018290526060808201839052608082015260a081019190915290565b604051806101600160405280600b906020820280368337509192915050565b5b80821115612527576000815560010161257f565b8035610e14816131dd565b8051610e14816131dd565b600082601f8301126125b9578081fd5b8135602067ffffffffffffffff8211156125d5576125d56131c7565b8082026125e382820161306f565b8381528281019086840183880185018910156125fd578687fd5b8693505b85841015612628578035612614816131dd565b835260019390930192918401918401612601565b50979650505050505050565b80518015158114610e1457600080fd5b600082601f830112612654578081fd5b813561266761266282613099565b61306f565b81815284602083860101111561267b578283fd5b816020850160208301379081016020019190915292915050565b600082601f8301126126a5578081fd5b81516126b361266282613099565b8181528460208386010111156126c7578283fd5b6126d882602083016020870161312f565b949350505050565b6000602082840312156126f1578081fd5b5035919050565b6000806040838503121561270a578081fd5b82359150602083013567ffffffffffffffff80821115612728578283fd5b9084019060c0828703121561273b578283fd5b60405160c081018181108382111715612756576127566131c7565b8060405250823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013582811115612798578485fd5b6127a4888286016125a9565b60a0830152508093505050509250929050565b6000602082840312156127c8578081fd5b610aad82612634565b600080600080608085870312156127e6578182fd5b8435935060208501356127f8816131dd565b925060408501359150606085013567ffffffffffffffff81111561281a578182fd5b61282687828801612644565b91505092959194509250565b600080600080600060a08688031215612849578283fd5b85359450602086013561285b816131dd565b935060408601359250606086013567ffffffffffffffff8082111561287e578283fd5b61288a89838a01612644565b9350608088013591508082111561289f578283fd5b506128ac88828901612644565b9150509295509295909350565b6000808284036101208112156128cd578283fd5b8335925061010080601f19830112156128e4578283fd5b604051915080820182811067ffffffffffffffff82111715612908576129086131c7565b60405261291760208601612593565b825260408501356020830152606085013560408301526080850135606083015260a0850135608083015260c085013560a083015260e085013560c08301528085013560e083015250809150509250929050565b6000806040838503121561297c578182fd5b82359150602083013567ffffffffffffffff8082111561299a578283fd5b90840190606082870312156129ad578283fd5b6040516060810181811083821117156129c8576129c86131c7565b806040525082358152602083013560208201526040830135828111156129ec578485fd5b6129f888828601612644565b6040830152508093505050509250929050565b600080600060608486031215612a1f578081fd5b505081359360208301359350604090920135919050565b60008060408385031215612a48578182fd5b50508035926020909101359150565b600060208284031215612a68578081fd5b815167ffffffffffffffff80821115612a7f578283fd5b9083019060c08286031215612a92578283fd5b60405160c081018181108382111715612aad57612aad6131c7565b604052612ab98361259e565b8152602083015160208201526040830151604082015260608301516060820152608083015182811115612aea578485fd5b612af687828601612695565b608083015250612b0860a08401612634565b60a082015295945050505050565b600060208284031215612b27578081fd5b5051919050565b6000815180845260208085019450808401835b83811015612b665781516001600160a01b031687529582019590820190600101612b41565b509495945050505050565b6000815180845260208085018081965082840281019150828601855b85811015612bb7578284038952612ba5848351612c94565b98850198935090840190600101612b8d565b5091979650505050505050565b6000815180845260208085018081965082840281019150828601855b85811015612bb7578284038952612bf8848351612e05565b98850198935090840190600101612be0565b8060005b600b811015612c2d578151845260209384019390910190600101612c0e565b50505050565b6000815180845260208085019450808401835b83811015612b6657815187529582019590820190600101612c46565b15159052565b60008151808452612c8081602086016020860161312f565b601f01601f19169290920160200192915050565b600081518352602082015160208401526040820151606060408501526126d86060850182612c68565b60006103c0825184526020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151818601525061014080840151818601525061016080840151818601525061018080840151612d4f82870182612c0a565b50506101a0830151816102e0860152612d6a82860182612c33565b9150506101c08301516103008501526101e0830151848203610320860152612d928282612bc4565b915050610200830151848203610340860152612dae8282612b71565b915050610220830151848203610360860152612dca8282612b2e565b915050610240830151848203610380860152612de68282612b2e565b915050610260830151612dfd6103a0860182612c62565b509392505050565b600060018060a01b038251168352602082015160208401526040820151604084015260608201516060840152608082015160c06080850152612e4a60c0850182612c68565b60a0938401511515949093019390935250919050565b600060018060a01b038616825284602083015283604083015260806060830152612e8d6080830184612c68565b9695505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612eea57603f19888603018452612ed8858351612cbd565b94509285019290850190600101612ebc565b5092979650505050505050565b901515815260200190565b600060208252610aad6020830184612c68565b600060a08201905082511515825260208301511515602083015260408301516040830152606083015160608301526080830151608083015292915050565b600060208252610aad6020830184612cbd565b90815260200190565b9182526001600160a01b0316602082015260400190565b6000838252604060208301526126d86040830184612b2e565b6000838252604060208301526126d86040830184612c94565b918252602082015260400190565b9283526020830191909152604082015260600190565b600060408252612fef6040830185612e05565b90508260208301529392505050565b6000606082526130116060830186612e05565b60208301949094525060400152919050565b6000858252846020830152608060408301526130426080830185612c68565b82810360608401526130548185612c68565b979650505050505050565b9182521515602082015260400190565b60405181810167ffffffffffffffff81118282101715613091576130916131c7565b604052919050565b600067ffffffffffffffff8211156130b3576130b36131c7565b50601f01601f191660200190565b600082198211156130d4576130d46131b1565b500190565b6000826130f457634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613113576131136131b1565b500290565b60008282101561312a5761312a6131b1565b500390565b60005b8381101561314a578181015183820152602001613132565b83811115612c2d5750506000910152565b60028104600182168061316f57607f821691505b6020821081141561319057634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156131aa576131aa6131b1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146131f257600080fd5b5056fea2646970667358221220398c17dfa31e10a693cff0c603fb14817a454249471686f2d510eac7eb128a8e64736f6c63430008000033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100d85760003560e01c806363a072ba11610096578063bba2165211610070578063bba2165214610232578063c0b088f714610252578063d979c08c14610265578063e6053cff14610285576100d8565b806363a072ba146101c55780639cd25fc5146101f2578063ba30c1a714610212576100d8565b8062ffd605146100dd57806301d84af51461010857806304fb8e1a1461013557806308a83d86146101635780632fd658b614610183578063327d2e01146101a5575b600080fd5b6100f06100eb3660046126e0565b610298565b6040516100ff93929190612fc6565b60405180910390f35b81801561011457600080fd5b506101286101233660046128b9565b610382565b6040516100ff9190612f15565b81801561014157600080fd5b50610155610150366004612a0b565b61073b565b6040516100ff92919061305f565b610176610171366004612a0b565b610a91565b6040516100ff9190612f66565b81801561018f57600080fd5b506101a361019e366004612a0b565b610ab4565b005b6101b86101b33660046126e0565b610d25565b6040516100ff9190612e97565b8180156101d157600080fd5b506101e56101e036600461296a565b610e19565b6040516100ff9190612ef7565b610205610200366004612a36565b611139565b6040516100ff9190612f53565b81801561021e57600080fd5b506101e561022d3660046127d1565b6114dc565b81801561023e57600080fd5b506101a361024d366004612832565b6117be565b610176610260366004612a0b565b611b0b565b81801561027157600080fd5b506101e56102803660046126f8565b611bb6565b6101e56102933660046126e0565b611f59565b6000806000838073__$af828e0c356433108d8dfb596a8a6763fb$__63b265233890916040518263ffffffff1660e01b81526004016102d79190612f66565b60206040518083038186803b1580156102ef57600080fd5b505af4158015610303573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032791906127b7565b15604051806040016040528060028152602001610d8d60f21b8152509061036a5760405162461bcd60e51b81526004016103619190612f02565b60405180910390fd5b50505050600782015482546001909301549093909150565b61038a6123d3565b815160405163c52af8e960e01b815284919073__$af828e0c356433108d8dfb596a8a6763fb$__9063c52af8e9906103c89085908590600401612f6f565b60206040518083038186803b1580156103e057600080fd5b505af41580156103f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041891906127b7565b60405180604001604052806002815260200161353160f01b815250906104515760405162461bcd60e51b81526004016103619190612f02565b50604051637f8dc8e760e01b8152859073__$af828e0c356433108d8dfb596a8a6763fb$__90637f8dc8e79061048b908490600401612f66565b60206040518083038186803b1580156104a357600080fd5b505af41580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db91906127b7565b60405180604001604052806002815260200161353960f01b815250906105145760405162461bcd60e51b81526004016103619190612f02565b508451600090610525908890611f6d565b90506040518060a001604052808273__$c72e2124387635ea261ddf644a00cf602f$__630a6c668c90918a606001516040518363ffffffff1660e01b8152600401610571929190612fdc565b60206040518083038186803b15801561058957600080fd5b505af415801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c191906127b7565b151581526020888101516040808b015190516339b7870160e21b8152929093019273__$c72e2124387635ea261ddf644a00cf602f$__9263e6de1c049261060c928892600401612ffe565b60206040518083038186803b15801561062457600080fd5b505af4158015610638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065c91906127b7565b1515815260200161067a836060015189608001518a60c00151610a91565b8152602001610696836060015189608001518a60e00151610a91565b815260a088015160209091015286516040516357708ca360e11b815291965073__$af828e0c356433108d8dfb596a8a6763fb$__9163aee11946916106e0918b9190600401612f6f565b60206040518083038186803b1580156106f857600080fd5b505af415801561070c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073091906127b7565b505050505092915050565b60008083838173__$af828e0c356433108d8dfb596a8a6763fb$__635347e6b89091836040518363ffffffff1660e01b815260040161077b929190612fb8565b60206040518083038186803b15801561079357600080fd5b505af41580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb91906127b7565b8061085a575060405163e4dfdc1b60e01b815273__$af828e0c356433108d8dfb596a8a6763fb$__9063e4dfdc1b9061080a9085908590600401612fb8565b60206040518083038186803b15801561082257600080fd5b505af4158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a91906127b7565b60405180604001604052806002815260200161333760f01b815250906108935760405162461bcd60e51b81526004016103619190612f02565b5060405163164ca46760e31b8152869073__$af828e0c356433108d8dfb596a8a6763fb$__9063b2652338906108cd908490600401612f66565b60206040518083038186803b1580156108e557600080fd5b505af41580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d91906127b7565b60405180604001604052806002815260200161363160f01b815250906109565760405162461bcd60e51b81526004016103619190612f02565b5060028701546007808a015490890154604051630a68fcd760e31b81529297506109fb9273__$af828e0c356433108d8dfb596a8a6763fb$__90635347e6b8906109a6908e908d90600401612fb8565b60206040518083038186803b1580156109be57600080fd5b505af41580156109d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f691906127b7565b612173565b60405163132f1cc960e31b815290945073__$af828e0c356433108d8dfb596a8a6763fb$__90639978e64890610a35908a90600401612f66565b60206040518083038186803b158015610a4d57600080fd5b505af4158015610a61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8591906127b7565b50505050935093915050565b60008083610a9f86856130f9565b610aa991906130d9565b9150505b9392505050565b604051630a68fcd760e31b81528390829073__$af828e0c356433108d8dfb596a8a6763fb$__90635347e6b890610af19085908590600401612fb8565b60206040518083038186803b158015610b0957600080fd5b505af4158015610b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4191906127b7565b80610bd0575060405163e4dfdc1b60e01b815273__$af828e0c356433108d8dfb596a8a6763fb$__9063e4dfdc1b90610b809085908590600401612fb8565b60206040518083038186803b158015610b9857600080fd5b505af4158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd091906127b7565b60405180604001604052806002815260200161333760f01b81525090610c095760405162461bcd60e51b81526004016103619190612f02565b50604051637db039b360e11b815273__$af828e0c356433108d8dfb596a8a6763fb$__9063fb60736690610c439088908890600401612fb8565b60206040518083038186803b158015610c5b57600080fd5b505af4158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9391906127b7565b5060405163766b344160e11b815273__$af828e0c356433108d8dfb596a8a6763fb$__9063ecd6688290610ccd9088908790600401612fb8565b60206040518083038186803b158015610ce557600080fd5b505af4158015610cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1d91906127b7565b505050505050565b805460609060009067ffffffffffffffff811115610d5357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d8c57816020015b610d79612406565b815260200190600190039081610d715790505b50905060005b8354811015610e1057610dd2848281548110610dbe57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601f020182611139565b828281518110610df257634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610e0890613196565b915050610d92565b5090505b919050565b8051604051630a68fcd760e31b8152600091849173__$af828e0c356433108d8dfb596a8a6763fb$__90635347e6b890610e599085908590600401612fb8565b60206040518083038186803b158015610e7157600080fd5b505af4158015610e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea991906127b7565b80610f38575060405163e4dfdc1b60e01b815273__$af828e0c356433108d8dfb596a8a6763fb$__9063e4dfdc1b90610ee89085908590600401612fb8565b60206040518083038186803b158015610f0057600080fd5b505af4158015610f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3891906127b7565b60405180604001604052806002815260200161333760f01b81525090610f715760405162461bcd60e51b81526004016103619190612f02565b5083518590610f80828261218e565b1560405180604001604052806002815260200161033360f41b81525090610fba5760405162461bcd60e51b81526004016103619190612f02565b50856020015164212aaca2a960d91b811480610fde57506529a2a62622a960d11b81145b60405180604001604052806002815260200161333960f01b815250906110175760405162461bcd60e51b81526004016103619190612f02565b506110218861219d565b600114156110a15787601c0160008154811061104d57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600101548760200151141560405180604001604052806002815260200161333960f01b8152509061109f5760405162461bcd60e51b81526004016103619190612f02565b505b6040516396571bfd60e01b815273__$af828e0c356433108d8dfb596a8a6763fb$__906396571bfd906110da908b908b90600401612f9f565b60206040518083038186803b1580156110f257600080fd5b505af4158015611106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112a91906127b7565b50600198975050505050505050565b611141612406565b6040805161028081018252838152845460208201526001850154818301526002850154606082015260048501546080820152600585015460a0820152600385015460c0820152600685015460e0820152600785015461010082015260088501546101208201526009850154610140820152600a85015461016080830191909152825190810192839052909161018083019190600c870190600b9082845b8154815260200190600101908083116111de5750505050508152602001611207856017016121a4565b815260200184600b0154815260200184601b01805480602002602001604051908101604052809291908181526020016000905b828210156113455760008481526020908190206040805160c0810182526006860290920180546001600160a01b03168352600181015493830193909352600283015490820152600382015460608201526004820180549192916080840191906112a29061315b565b80601f01602080910402602001604051908101604052809291908181526020018280546112ce9061315b565b801561131b5780601f106112f05761010080835404028352916020019161131b565b820191906000526020600020905b8154815290600101906020018083116112fe57829003601f168201915b50505091835250506005919091015460ff161515602091820152908252600192909201910161123a565b50505050815260200184601c01805480602002602001604051908101604052809291908181526020016000905b8282101561144a578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820180546113b99061315b565b80601f01602080910402602001604051908101604052809291908181526020018280546113e59061315b565b80156114325780601f1061140757610100808354040283529160200191611432565b820191906000526020600020905b81548152906001019060200180831161141557829003601f168201915b50505050508152505081526020019060010190611372565b50505050815260200184601d018054806020026020016040519081016040528092919081815260200182805480156114ab57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161148d575b505050505081526020016114c1856019016121a4565b8152601e85015460ff16151560209091015290505b92915050565b60405163c52af8e960e01b81526000908590859073__$af828e0c356433108d8dfb596a8a6763fb$__9063c52af8e99061151c9085908590600401612f6f565b60206040518083038186803b15801561153457600080fd5b505af4158015611548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156c91906127b7565b60405180604001604052806002815260200161353160f01b815250906115a55760405162461bcd60e51b81526004016103619190612f02565b5086866115b282826121b1565b1560405180604001604052806002815260200161068760f31b815250906115ec5760405162461bcd60e51b81526004016103619190612f02565b5060006115f98a8a6121cc565b9050600073__$c72e2124387635ea261ddf644a00cf602f$__6334d8dbe28b8b858c6040518563ffffffff1660e01b815260040161163a9493929190612e60565b60006040518083038186803b15801561165257600080fd5b505af4158015611666573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261168e9190810190612a57565b601b8c018054600180820183556000928352602092839020845160069093020180546001600160a01b0319166001600160a01b03909316929092178255838301519082015560408301516002820155606083015160038201556080830151805193945084939192611707926004850192909101906124a7565b5060a091909101516005909101805460ff1916911515919091179055604051630368443b60e01b815273__$af828e0c356433108d8dfb596a8a6763fb$__90630368443b9061175c908e908690600401612fb8565b60206040518083038186803b15801561177457600080fd5b505af4158015611788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ac91906127b7565b5060019b9a5050505050505050505050565b60405163c52af8e960e01b81528590859073__$af828e0c356433108d8dfb596a8a6763fb$__9063c52af8e9906117fb9085908590600401612f6f565b60206040518083038186803b15801561181357600080fd5b505af4158015611827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184b91906127b7565b60405180604001604052806002815260200161353160f01b815250906118845760405162461bcd60e51b81526004016103619190612f02565b50868661189182826121b1565b60405180604001604052806002815260200161343960f01b815250906118ca5760405162461bcd60e51b81526004016103619190612f02565b5088886118d7828261224b565b1560405180604001604052806002815260200161035360f41b815250906119115760405162461bcd60e51b81526004016103619190612f02565b50600061191e8c8c6121cc565b6040516361bfa34160e01b815290915073__$af828e0c356433108d8dfb596a8a6763fb$__906361bfa3419061195a908f908590600401612fb8565b60206040518083038186803b15801561197257600080fd5b505af4158015611986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119aa91906127b7565b50604051630f82d3f160e11b815273__$af828e0c356433108d8dfb596a8a6763fb$__90631f05a7e2906119e6908f908e908690600401612fc6565b60006040518083038186803b1580156119fe57600080fd5b505af4158015611a12573d6000803e3d6000fd5b50505050600080611a2c8d8f61226490919063ffffffff16565b91509150806040518060400160405280600281526020016106a760f31b81525090611a6a5760405162461bcd60e51b81526004016103619190612f02565b508173__$c72e2124387635ea261ddf644a00cf602f$__630b97b41790918e8e8e6040518563ffffffff1660e01b8152600401611aaa9493929190613023565b60206040518083038186803b158015611ac257600080fd5b505af4158015611ad6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afa91906127b7565b505050505050505050505050505050565b604051637e084e3b60e01b8152600090819073__$af828e0c356433108d8dfb596a8a6763fb$__90637e084e3b90611b4b90889088908890600401612fc6565b60206040518083038186803b158015611b6357600080fd5b505af4158015611b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9b9190612b16565b9050846004015481611bad91906130f9565b95945050505050565b8154600190810180845560008481529182918591611bd391613118565b81548110611bf157634e487b7160e01b600052603260045260246000fd5b90600052602060002090601f020190508073__$af828e0c356433108d8dfb596a8a6763fb$__63cc8a0498909185606001516040518363ffffffff1660e01b8152600401611c40929190612fb8565b60206040518083038186803b158015611c5857600080fd5b505af4158015611c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9091906127b7565b50608083015160405163011abfa960e61b815273__$af828e0c356433108d8dfb596a8a6763fb$__916346afea4091611ccd918591600401612fb8565b60206040518083038186803b158015611ce557600080fd5b505af4158015611cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1d91906127b7565b506040808401519051636bf55b2760e11b815273__$af828e0c356433108d8dfb596a8a6763fb$__9163d7eab64e91611d5a918591600401612fb8565b60206040518083038186803b158015611d7257600080fd5b505af4158015611d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611daa91906127b7565b508251604051636b8af67360e01b815273__$af828e0c356433108d8dfb596a8a6763fb$__91636b8af67391611de4918591600401612fb8565b60206040518083038186803b158015611dfc57600080fd5b505af4158015611e10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3491906127b7565b5060a083015160405163194ebd5360e01b815273__$af828e0c356433108d8dfb596a8a6763fb$__9163194ebd5391611e71918591600401612f86565b60206040518083038186803b158015611e8957600080fd5b505af4158015611e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec191906127b7565b50602083015160405163a2e0e17960e01b815273__$af828e0c356433108d8dfb596a8a6763fb$__9163a2e0e17991611efe918591600401612fb8565b60206040518083038186803b158015611f1657600080fd5b505af4158015611f2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4e91906127b7565b506001949350505050565b6000611f648261219d565b60021492915050565b611f7561252b565b601b83015460005b8181101561211a57836001600160a01b031685601b018281548110611fb257634e487b7160e01b600052603260045260246000fd5b60009182526020909120600690910201546001600160a01b031614156121085784601b018181548110611ff557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016040518060c00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160018201548152602001600282015481526020016003820154815260200160048201805461206b9061315b565b80601f01602080910402602001604051908101604052809291908181526020018280546120979061315b565b80156120e45780601f106120b9576101008083540402835291602001916120e4565b820191906000526020600020905b8154815290600101906020018083116120c757829003601f168201915b50505091835250506005919091015460ff16151560209091015292506114d6915050565b8061211281613196565b915050611f7d565b506040518060c00160405280846001600160a01b031681526020016000801b81526020016000815260200161214f86866121cc565b81526040805160208082018352600080835290840191909152910152949350505050565b600081156121845750818311610aad565b5081831115610aad565b6000610aad6017840183612353565b601c015490565b60606000610aad8361235f565b6000806121be8484611f6d565b602001511515949350505050565b6000805b601d84015481101561224457826001600160a01b031684601d01828154811061220957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614156122325761222f6001836130c1565b91505b8061223c81613196565b9150506121d0565b5092915050565b6000806122588484611f6d565b60a00151949350505050565b60008060005b601b85015481101561231257836001600160a01b031685601b0182815481106122a357634e487b7160e01b600052603260045260246000fd5b60009182526020909120600690910201546001600160a01b031614156123005784601b0181815481106122e657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016001925092505061234c565b8061230a81613196565b91505061226a565b5083601b0160008154811061233757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016000915091505b9250929050565b6000610aad83836123bb565b6060816000018054806020026020016040519081016040528092919081815260200182805480156123af57602002820191906000526020600020905b81548152602001906001019080831161239b575b50505050509050919050565b60009081526001919091016020526040902054151590565b6040518060a001604052806000151581526020016000151581526020016000815260200160008152602001600081525090565b60405180610280016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200161246e61255f565b81526020016060815260200160008152602001606081526020016060815260200160608152602001606081526020016000151581525090565b8280546124b39061315b565b90600052602060002090601f0160209004810192826124d5576000855561251b565b82601f106124ee57805160ff191683800117855561251b565b8280016001018555821561251b579182015b8281111561251b578251825591602001919060010190612500565b5061252792915061257e565b5090565b6040805160c0810182526000808252602082018190529181018290526060808201839052608082015260a081019190915290565b604051806101600160405280600b906020820280368337509192915050565b5b80821115612527576000815560010161257f565b8035610e14816131dd565b8051610e14816131dd565b600082601f8301126125b9578081fd5b8135602067ffffffffffffffff8211156125d5576125d56131c7565b8082026125e382820161306f565b8381528281019086840183880185018910156125fd578687fd5b8693505b85841015612628578035612614816131dd565b835260019390930192918401918401612601565b50979650505050505050565b80518015158114610e1457600080fd5b600082601f830112612654578081fd5b813561266761266282613099565b61306f565b81815284602083860101111561267b578283fd5b816020850160208301379081016020019190915292915050565b600082601f8301126126a5578081fd5b81516126b361266282613099565b8181528460208386010111156126c7578283fd5b6126d882602083016020870161312f565b949350505050565b6000602082840312156126f1578081fd5b5035919050565b6000806040838503121561270a578081fd5b82359150602083013567ffffffffffffffff80821115612728578283fd5b9084019060c0828703121561273b578283fd5b60405160c081018181108382111715612756576127566131c7565b8060405250823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013582811115612798578485fd5b6127a4888286016125a9565b60a0830152508093505050509250929050565b6000602082840312156127c8578081fd5b610aad82612634565b600080600080608085870312156127e6578182fd5b8435935060208501356127f8816131dd565b925060408501359150606085013567ffffffffffffffff81111561281a578182fd5b61282687828801612644565b91505092959194509250565b600080600080600060a08688031215612849578283fd5b85359450602086013561285b816131dd565b935060408601359250606086013567ffffffffffffffff8082111561287e578283fd5b61288a89838a01612644565b9350608088013591508082111561289f578283fd5b506128ac88828901612644565b9150509295509295909350565b6000808284036101208112156128cd578283fd5b8335925061010080601f19830112156128e4578283fd5b604051915080820182811067ffffffffffffffff82111715612908576129086131c7565b60405261291760208601612593565b825260408501356020830152606085013560408301526080850135606083015260a0850135608083015260c085013560a083015260e085013560c08301528085013560e083015250809150509250929050565b6000806040838503121561297c578182fd5b82359150602083013567ffffffffffffffff8082111561299a578283fd5b90840190606082870312156129ad578283fd5b6040516060810181811083821117156129c8576129c86131c7565b806040525082358152602083013560208201526040830135828111156129ec578485fd5b6129f888828601612644565b6040830152508093505050509250929050565b600080600060608486031215612a1f578081fd5b505081359360208301359350604090920135919050565b60008060408385031215612a48578182fd5b50508035926020909101359150565b600060208284031215612a68578081fd5b815167ffffffffffffffff80821115612a7f578283fd5b9083019060c08286031215612a92578283fd5b60405160c081018181108382111715612aad57612aad6131c7565b604052612ab98361259e565b8152602083015160208201526040830151604082015260608301516060820152608083015182811115612aea578485fd5b612af687828601612695565b608083015250612b0860a08401612634565b60a082015295945050505050565b600060208284031215612b27578081fd5b5051919050565b6000815180845260208085019450808401835b83811015612b665781516001600160a01b031687529582019590820190600101612b41565b509495945050505050565b6000815180845260208085018081965082840281019150828601855b85811015612bb7578284038952612ba5848351612c94565b98850198935090840190600101612b8d565b5091979650505050505050565b6000815180845260208085018081965082840281019150828601855b85811015612bb7578284038952612bf8848351612e05565b98850198935090840190600101612be0565b8060005b600b811015612c2d578151845260209384019390910190600101612c0e565b50505050565b6000815180845260208085019450808401835b83811015612b6657815187529582019590820190600101612c46565b15159052565b60008151808452612c8081602086016020860161312f565b601f01601f19169290920160200192915050565b600081518352602082015160208401526040820151606060408501526126d86060850182612c68565b60006103c0825184526020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151818601525061014080840151818601525061016080840151818601525061018080840151612d4f82870182612c0a565b50506101a0830151816102e0860152612d6a82860182612c33565b9150506101c08301516103008501526101e0830151848203610320860152612d928282612bc4565b915050610200830151848203610340860152612dae8282612b71565b915050610220830151848203610360860152612dca8282612b2e565b915050610240830151848203610380860152612de68282612b2e565b915050610260830151612dfd6103a0860182612c62565b509392505050565b600060018060a01b038251168352602082015160208401526040820151604084015260608201516060840152608082015160c06080850152612e4a60c0850182612c68565b60a0938401511515949093019390935250919050565b600060018060a01b038616825284602083015283604083015260806060830152612e8d6080830184612c68565b9695505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612eea57603f19888603018452612ed8858351612cbd565b94509285019290850190600101612ebc565b5092979650505050505050565b901515815260200190565b600060208252610aad6020830184612c68565b600060a08201905082511515825260208301511515602083015260408301516040830152606083015160608301526080830151608083015292915050565b600060208252610aad6020830184612cbd565b90815260200190565b9182526001600160a01b0316602082015260400190565b6000838252604060208301526126d86040830184612b2e565b6000838252604060208301526126d86040830184612c94565b918252602082015260400190565b9283526020830191909152604082015260600190565b600060408252612fef6040830185612e05565b90508260208301529392505050565b6000606082526130116060830186612e05565b60208301949094525060400152919050565b6000858252846020830152608060408301526130426080830185612c68565b82810360608401526130548185612c68565b979650505050505050565b9182521515602082015260400190565b60405181810167ffffffffffffffff81118282101715613091576130916131c7565b604052919050565b600067ffffffffffffffff8211156130b3576130b36131c7565b50601f01601f191660200190565b600082198211156130d4576130d46131b1565b500190565b6000826130f457634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613113576131136131b1565b500290565b60008282101561312a5761312a6131b1565b500390565b60005b8381101561314a578181015183820152602001613132565b83811115612c2d5750506000910152565b60028104600182168061316f57607f821691505b6020821081141561319057634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156131aa576131aa6131b1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146131f257600080fd5b5056fea2646970667358221220398c17dfa31e10a693cff0c603fb14817a454249471686f2d510eac7eb128a8e64736f6c63430008000033",
  "libraries": {
    "RoundDataLogic": "0x7481003653ea47b7889C8eAb8d7c2A0577aFbd12",
    "VoteLogic": "0xD3203312c4A766BB00C63e357233b4780C2d815D"
  },
  "devdoc": {
    "author": "Blockswan",
    "kind": "dev",
    "methods": {},
    "title": "Round logic library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Implements the logic for round specific functions",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}