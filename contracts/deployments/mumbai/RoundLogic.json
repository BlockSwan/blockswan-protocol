{
  "address": "0xf4179131036CB2a497a80710DF574ecc6D341499",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jurorWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weightOfCorrectVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "disputePrice",
          "type": "uint256"
        }
      ],
      "name": "calcEarnedFromDisputeFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x007287f3cbcfe0f310dc6b0a9522d1cfd8aa7ff040180bc05e414b594c2cd2d1",
  "receipt": {
    "to": null,
    "from": "0x8D3BD47c94b340E0151376ABF9D76C74c471E213",
    "contractAddress": "0xf4179131036CB2a497a80710DF574ecc6D341499",
    "transactionIndex": 0,
    "gasUsed": "2792765",
    "logsBloom": "0x
    "blockHash": "0xc72b1271842c018ee01fef4cf7cbe93d6ee02215398dd261be88d1efec29d9ba",
    "transactionHash": "0x007287f3cbcfe0f310dc6b0a9522d1cfd8aa7ff040180bc05e414b594c2cd2d1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 33113374,
        "transactionHash": "0x007287f3cbcfe0f310dc6b0a9522d1cfd8aa7ff040180bc05e414b594c2cd2d1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008d3bd47c94b340e0151376abf9d76c74c471e213",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000f80c1fcffcb4c300000000000000000000000000000000000000000000000006bd95a1169cb30c7000000000000000000000000000000000000000000001c57d448c48a819900e10000000000000000000000000000000000000000000000005c58981469ffe497000000000000000000000000000000000000000000001c57e3c9868781644d11",
        "logIndex": 0,
        "blockHash": "0xc72b1271842c018ee01fef4cf7cbe93d6ee02215398dd261be88d1efec29d9ba"
      }
    ],
    "blockNumber": 33113374,
    "cumulativeGasUsed": "2792765",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "075f2457e796c8d70088564501ef535f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jurorWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weightOfCorrectVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputePrice\",\"type\":\"uint256\"}],\"name\":\"calcEarnedFromDisputeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Blockswan\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Round logic library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Implements the logic for round specific functions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/libraries/logics/RoundLogic.sol\":\"RoundLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/imports/aave/contracts/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.9;\\n\\n/*^\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary PercentageMath {\\n    // Maximum percentage factor (100.00%)\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     **/\\n    function percentMul(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        assembly {\\n            if iszero(\\n                or(\\n                    iszero(percentage),\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\\n                PERCENTAGE_FACTOR\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     **/\\n    function percentDiv(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(\\n                                sub(not(0), div(percentage, 2)),\\n                                PERCENTAGE_FACTOR\\n                            )\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\\n                percentage\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf4a696c6b026c9a9747823566eeca034b0c2314b9d4d373cb664a5d5f21e7797\",\"license\":\"BUSL-1.1\"},\"contracts/imports/gnosis/contracts/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"../../openzeppelin/contracts/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developer^\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(from, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(freeMemoryPointer, 36),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTransferResult(\\n        IERC20 token\\n    ) private view returns (bool success) {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n            // Non-standard ERC20 transfer without return.\\n            case 0 {\\n                // NOTE: When the return data size is 0, verify that there\\n                // is code at the address. This is done in order to maintain\\n                // compatibility with Solidity calling conventions.\\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                if iszero(extcodesize(token)) {\\n                    revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                }\\n\\n                success := 1\\n            }\\n            // Standard ERC20 transfer returning boolean success value.\\n            case 32 {\\n                returndatacopy(0, 0, returndatasize())\\n\\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                // as `true` for a boolean. In order to stay compatible with\\n                // OpenZeppelin's `SafeERC20` library which is known to work\\n                // with the existing ERC20 implementation we care about,\\n                // make sure we return success for any non-zero return value\\n                // from the `transfer*` call.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            default {\\n                revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41990e4782d1ef388823346bdf9b3a660db63b631e342e4b1a9cadcb78795511\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/imports/openzeppelin/contracts/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xae75c35531456b603dbd5a30d88f89ccaa7303c19a7a3f3bcac27a12a941994a\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.9;\\n\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n      \\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x18e34c1997590b80cab78121aedf411593ffb78c5e2f9993acf66cc2b09fef85\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x70f56a53e5708fa00e6e9a6b4fd6234f44a56902bc44c702e44a5e9bfc32a7ce\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3b8562a2f5cf54ea27029e202bdc4945438fc44bc840c01e6027fb10a196634a\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressProvider.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title The interface for contracts to interact with the Blockswan Address Provider contract\\ninterface IAddressProvider {\\n    /**\\n     * @dev Emitted when a new marketplaceId is set.\\n     * @param oldMarketplaceId The address of the old marketplaceId\\n     * @param newMarketplaceId The address of the new marketplaceId\\n     */\\n    event MarketplaceIdSet(\\n        string indexed oldMarketplaceId,\\n        string indexed newMarketplaceId\\n    );\\n\\n    /**\\n     * @dev Emitted when a new contract is added to the AddressProvider.\\n     * @param _name The name assigned in the AddressProvider.\\n     * @param _address The address of the new contract\\n     */\\n    event ContractAdded(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a new contract is removed from the AddressProvider.\\n     * @param _name The contract name removed in the AddressProvider.\\n     * @param _address The address of the removed contract\\n     */\\n    event ContractRemoved(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a contract is upgraded in the AddressProvider.\\n     * @param _name The contract name upraded in the AddressProvider.\\n     * @param _oldAddress The old address prior upgrade\\n     * @param _newAddress The new address after upgrade\\n     */\\n    event ContractUpgraded(\\n        bytes32 _name,\\n        address _oldAddress,\\n        address _newAddress\\n    );\\n\\n    /**\\n     * @notice returns contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     * @return contractAddr - address of contract registered under given provider key\\n     */\\n    function getContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice overloaded getContract to return explicit version of contract */\\n    function getContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    function getContractVersionCount(\\n        bytes32 _name\\n    ) external view returns (uint);\\n\\n    /**\\n     * @dev addContract does two things:\\n     *      1.) registers the address of given ProviderContract in the registry\\n     *      2.) sets the registry address in given ProviderContract so only\\n     *          the registry can call functions on given contract\\n     */\\n    function addContract(bytes32 _name, address _address) external;\\n\\n    /**\\n     * @dev removes contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     */\\n    function removeContract(bytes32 _name) external;\\n\\n    /**\\n     * @notice replaces contract address registered under given key with provided address\\n     * @param _name - registry key for lookup\\n     * @param _newAddress - new contract address to register under given key\\n     */\\n    function upgradeContract(bytes32 _name, address _newAddress) external;\\n}\\n\",\"keccak256\":\"0x79465c1c2649358699708bbaf5f0ac84a8003bb2fa352fd827b4faec2da65bb0\",\"license\":\"MIT\"},\"contracts/interfaces/IJury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../protocol/libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../protocol/libraries/types/InputTypes.sol\\\";\\n\\n/**\\n * @title IJury\\n * @author Blockswan\\n * @notice Defines the basic interface for a blockswan jury contract.\\n **/\\ninterface IJury {\\n    /**\\n     * @notice Randomly draws X jurors from the jurors pool\\n     * using entropy made with the blockhash and the disputeId among other things.\\n     * @param numberOfJurors The number of jurors to draw\\n   \\n     * @return jurors The list of jurors address\\n     */\\n\\n    function drawJurors(\\n        uint256 numberOfJurors\\n    ) external view returns (address[] memory jurors);\\n\\n    /**\\n     *\\n     * @param accounts The list of jurors to freeze\\n     */\\n\\n    function freezeTokens(address[] memory accounts) external;\\n\\n    /**\\n     * @param amount The amount to unfreeze\\n     * @param account The juror to unfreeze\\n     */\\n\\n    function unfreezeTokens(uint256 amount, address account) external;\\n\\n    /**\\n     * @param amount The amount of tokens added to the stake\\n     * @param juror The juror to reward\\n     */\\n    function rewardJuror(uint256 amount, address juror) external;\\n}\\n\",\"keccak256\":\"0xb77e565cfe71591942b5b8d26bcfa6f16859c57df2e2def8a33ce134fe7da45d\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Errors  library\\n * @author Blockswan\\n * @notice Defines the error messages emitted by the different contracts of the Blockswan protocol\\n */\\nlibrary Errors {\\n    string public constant INVALID_ADDRESS_PROVIDER_ID = \\\"1\\\"; // The addresses provider is not valid\\n    string public constant ADDRESS_PROVIDER_ALREADY_ADDED = \\\"2\\\"; // This addresses provider already exists\\n    string public constant ADDRESS_PROVIDER_NOT_REGISTERED = \\\"3\\\"; // 'This addresses provider is not registered'\\n    string public constant CONTRACT_NAME_ALREADY_USED = \\\"4\\\"; // 'Requires that given _name does not already have non-zero registered contract address'\\n    string public constant ZERO_ADDRESS_IS_INVALID = \\\"5\\\"; // the address provided is 0x00\\n    string public constant INDEX_OUT_OF_RANGE = \\\"6\\\"; // the index provided is out of range\\n    string public constant ADDRESS_ALREADY_USED = \\\"7\\\"; // 'The address provided has already been unsed to initialise an account'\\n    string public constant INVALID_USER_ID = \\\"8\\\"; // 'The userId is incorrect'\\n    string public constant RESTRICTED_TO_BUYER = \\\"9\\\"; // this function can't  be called by buyers\\n    string public constant INVALID_INVITER_ID = \\\"10\\\"; // The inviter ID provided is incorrect\\n    string public constant FAILED_BECOMING_BUYER = \\\"11\\\"; // The execution to becomeBuyer failed\\n    string public constant RESTRICTED_TO_SELLER = \\\"12\\\"; // this function can't  be called by sellers\\n    string public constant FAILED_BECOMING_SELLER = \\\"13\\\"; // The execution to becomeSeller failed\\n    string public constant NO_MATCHING_XP_KEY = \\\"14\\\"; // There is no xp value to give for this byte32\\n    string public constant GIG_ID_ALREADY_EXISING = \\\"15\\\"; // There is already an id for this gig.\\n    string public constant ONLY_SELLER = \\\"16\\\"; // Only account with the seller role can call the functions\\n    string public constant ONLY_BUYER = \\\"17\\\"; // Only buyers can call those functions.\\n    string public constant NOT_GIG_OWNER = \\\"18\\\"; // The id provided does not match with the gig owner id\\n    string public constant CALLER_NOT_SELLER_ID = \\\"19\\\"; // The seller id provided is not matching with the account address calling the function\\n    string public constant CALLER_NOT_BUYER_ID = \\\"20\\\"; // The buyer id provided is not matching with the account address calling the function\\n    string public constant NOT_ORDER_SELLER = \\\"21\\\"; // The id provided is not the order seller\\n    string public constant NOT_ORDER_BUYER = \\\"22\\\"; // The id provided is not the order buyer\\n    string public constant INVALID_ORDER_STATE = \\\"23\\\"; // The function can't be called under the current order state\\n    string public constant SELF_REFUND_DELAY_NOT_OVER = \\\"24\\\"; // The self refund delay is not over\\n    string public constant NOT_ORDER_ACTOR = \\\"25\\\"; // The account address calling the function is not matching with the buyerId nor sellerId.\\n    string public constant DISPUTE_NOT_CREATED = \\\"26\\\"; // The dispute has not been created yet\\n    string public constant JURY_STAKE_NOT_ENOUGH = \\\"27\\\"; // The jury stake is not enough\\n    string public constant FAILED_TO_STAKE_JURY = \\\"28\\\"; // The jury stake failed\\n    string public constant FAILED_TO_WITHDRAW_JURY = \\\"29\\\"; // The jury withdraw failed\\n    string public constant ROUND_EVIDENCE_ALREADY_SUBMITTED = \\\"30\\\"; // The evidence has already been submitted\\n    string public constant EVIDENCE_NOT_SUBMITTED = \\\"31\\\"; // The evidence has not been submitted\\n    string public constant DS_EVIDENCE_PERIOD_OVER = \\\"32\\\"; // The evidence period is over\\n    // string public constant DS_VOTING_PERIOD_OVER = \\\"33\\\"; // The voting period is over\\n    // string public constant DS_VOTING_PERIOD_NOT_OVER = \\\"34\\\"; // The voting period is not over\\n    // string public constant DS_VOTING_PERIOD_NOT_STARTED = \\\"35\\\"; // The voting period has not started yet\\n    string public constant ONLY_PROVIDER_ALLOWED = \\\"36\\\"; // Only the provider can call this function\\n    string public constant DS_EVIDENCE_SENDER_NOT_PARTY = \\\"37\\\"; // The sender is not a party of the dispute\\n    string public constant CALLER_NOT_USER = \\\"38\\\"; // The caller is not the user Id\\n    string public constant DS_EVIDENCE_ROLE_NOT_VALID = \\\"39\\\"; // The role is not valid\\n    string public constant RD_ROUND_DOES_NOT_EXIST = \\\"40\\\"; // The round does not exist\\n    string public constant DS_IN_EXECUTION_PERIOD = \\\"46\\\"; //     The dispute is in execution state\\n    string public constant VOTE_REVEAL_INCORRECT = \\\"47\\\"; //     The vote reveal is incorrect\\n    string public constant ROUND_VOTE_ALREADY_COMMITED = \\\"48\\\"; //     The vote has already been commited\\n    string public constant ROUND_VOTE_NOT_COMMITED = \\\"49\\\"; //     The vote has not been commited\\n    string public constant ROUND_VOTE_ALREADY_REVEALED = \\\"50\\\"; //     The vote has already been revealed\\n    string public constant RD_ACCOUNT_NOT_DRAWN_JUROR = \\\"51\\\"; //     The account is not a drawn juror\\n    string public constant DS_COMMIT_STATE_REQUIRED = \\\"52\\\"; //    The dispute is not in commit state\\n    string public constant DS_TIME_NOT_PASSED = \\\"53\\\"; //   The time has not passed\\n    string public constant DS_INVALID_STATE = \\\"54\\\"; //   The state is invalid\\n    string public constant VOTE_INVALID_CHOICE = \\\"55\\\"; //  The vote choice is invalid\\n    string public constant DS_NO_COMMITMENTS_MADE_FOR_ROUND = \\\"56\\\"; //  No commitments were made for the round\\n    string public constant DS_NO_VOTES_MADE_FOR_ROUND = \\\"57\\\"; //  No votes were made for the round\\n    string public constant RD_VOTE_NOT_FOUND = \\\"58\\\"; //  The vote was not found\\n    string public constant ROUND_NOT_CLOSED = \\\"59\\\"; //  The round is not closed\\n    string public constant VOTE_INCORRECT = \\\"60\\\"; //  The vote is incorrect\\n    string public constant ROUND_NOT_APPEALED = \\\"61\\\"; //  The round is not appealed\\n    string public constant ROUND_ID_INVALID = \\\"62\\\"; //  The round id is invalid\\n    string public constant CLAIM_NOT_ALLOWED = \\\"63\\\"; //  The claim is not allowed\\n    string public constant ROUND_IS_APPEALED = \\\"64\\\"; //  The round is appealed\\n    string public constant DS_DISPUTE_ALREADY_RULED = \\\"65\\\"; //  The dispute is already ruled\\n}\\n\",\"keccak256\":\"0x006a08fc9f61bb5b5f34aba81b29feff39671d8d23647e159b5aae7cd8755cc2\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/helpers/RoleKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoleKeys {\\n    // ---- ADMIN ROLES  ------\\n    bytes32 public constant PROTOCOL_ADMIN_ROLE = \\\"PROTOCOL_ADMIN\\\";\\n    bytes32 public constant BUYER_ADMIN_ROLE = \\\"BUYER_ADMIN\\\";\\n    bytes32 public constant SELLER_ADMIN_ROLE = \\\"SELLER_ADMIN\\\";\\n    // ----  ROLES  ------\\n    bytes32 public constant BUYER_ROLE = \\\"BUYER\\\";\\n    bytes32 public constant SELLER_ROLE = \\\"SELLER\\\";\\n    bytes32 public constant JUDGE_ROLE = \\\"JUDGE\\\";\\n    bytes32 public constant BLACKLIST_ROLE = \\\"BLACKLIST\\\";\\n    bytes32 public constant WHITELIST_ROLE = \\\"WHITELIST\\\";\\n    bytes32 public constant XP_GIVER_ROLE = \\\"XP_GIVER\\\";\\n}\\n\",\"keccak256\":\"0xe8a691a194d701426456deeea9b7b85d815e8cbaaac4c2c7e623dbec9c7e9d91\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/RoundDataLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title Round Data logic library\\n * @author Blockswan\\n * @notice Implements the logic for round data specific functions\\n */\\n\\nlibrary RoundDataLogic {\\n    using Counters for Counters.Counter;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    function setTokensAtStakePerJuror(\\n        DataTypes.Round storage round,\\n        uint256 tokensAtStakePerJuror\\n    ) external returns (bool) {\\n        round.tokensAtStakePerJuror = tokensAtStakePerJuror;\\n        return true;\\n    }\\n\\n    function setWinningChoice(\\n        DataTypes.Round storage round,\\n        uint256 winningChoice\\n    ) external returns (bool) {\\n        round.winningChoice = winningChoice;\\n        return true;\\n    }\\n\\n    function setTotalFeesForJurors(\\n        DataTypes.Round storage round,\\n        uint256 totalFeesForJurors\\n    ) external returns (bool) {\\n        round.totalFeesForJurors = totalFeesForJurors;\\n        return true;\\n    }\\n\\n    function setAppealFees(\\n        DataTypes.Round storage round,\\n        uint256 appealFeeRewards\\n    ) external returns (bool) {\\n        round.appealFeeRewards = appealFeeRewards;\\n        return true;\\n    }\\n\\n    function setMaxVotes(\\n        DataTypes.Round storage round,\\n        uint256 maxVotes\\n    ) external returns (bool) {\\n        round.maxVotes = maxVotes;\\n        return true;\\n    }\\n\\n    function setDrawnJurors(\\n        DataTypes.Round storage round,\\n        address[] memory drawnJurors\\n    ) external returns (bool) {\\n        for (uint256 i = 0; i < drawnJurors.length; i++) {\\n            round.drawnJurors.push(drawnJurors[i]);\\n        }\\n        return true;\\n    }\\n\\n    function getJurorWeight(\\n        DataTypes.Round storage round,\\n        address juror\\n    ) internal view returns (uint256 weight) {\\n        for (uint256 i = 0; i < round.drawnJurors.length; i++) {\\n            if (round.drawnJurors[i] == juror) {\\n                weight += 1;\\n            }\\n        }\\n    }\\n\\n    function addEvidence(\\n        DataTypes.Round storage round,\\n        DataTypes.Evidence memory evidence\\n    ) external returns (bool) {\\n        round.evidences.push(evidence);\\n        round.evidenceSubmitters.add(evidence.userId);\\n        return true;\\n    }\\n\\n    function setProcecutorId(\\n        DataTypes.Round storage round,\\n        uint256 procecutorId\\n    ) external returns (bool) {\\n        round.procecutorId = procecutorId;\\n        return true;\\n    }\\n\\n    function setDefendantId(\\n        DataTypes.Round storage round,\\n        uint256 defendantId\\n    ) external returns (bool) {\\n        round.defendantId = defendantId;\\n        return true;\\n    }\\n\\n    function isProcecutor(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) external view returns (bool) {\\n        return (round.procecutorId == userId);\\n    }\\n\\n    function isDefendant(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) external view returns (bool) {\\n        return (round.defendantId == userId);\\n    }\\n\\n    function isAppealed(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.appealFeeRewards > 0;\\n    }\\n\\n    function hasSubmittedEvidence(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) internal view returns (bool) {\\n        return round.evidenceSubmitters.contains(userId);\\n    }\\n\\n    function getEvidencesCount(\\n        DataTypes.Round storage round\\n    ) internal view returns (uint256) {\\n        return round.evidences.length;\\n    }\\n\\n    function setAppealedBy(\\n        DataTypes.Round storage round,\\n        uint256 appealedBy\\n    ) external returns (bool) {\\n        round.appealedBy = appealedBy;\\n        return true;\\n    }\\n\\n    function isJuror(\\n        DataTypes.Round storage round,\\n        address account\\n    ) external view returns (bool) {\\n        for (uint256 i = 0; i < round.maxVotes; i++) {\\n            if (round.drawnJurors[i] == account) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function hasRevealed(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (bool) {\\n        DataTypes.Vote memory vote = fetchVoteByAccount(round, account);\\n        return vote.hasVoted;\\n    }\\n\\n    function hasCommited(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (bool) {\\n        DataTypes.Vote memory vote = fetchVoteByAccount(round, account);\\n        return vote.commit != 0x0;\\n    }\\n\\n    function setTotalPenalties(\\n        DataTypes.Round storage round,\\n        uint256 penalties\\n    ) external returns (bool) {\\n        round.penalties = penalties;\\n        return true;\\n    }\\n\\n    function incrementTotalVoted(\\n        DataTypes.Round storage round,\\n        uint256 weight\\n    ) external returns (bool) {\\n        round.totalVoted += weight;\\n        return true;\\n    }\\n\\n    function incrementTotalCommited(\\n        DataTypes.Round storage round,\\n        uint256 weight\\n    ) external returns (bool) {\\n        round.totalCommited += weight;\\n        return true;\\n    }\\n\\n    function areAllVotesCommitted(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.totalCommited == round.maxVotes;\\n    }\\n\\n    function areAllVotesRevealed(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.totalVoted == round.maxVotes;\\n    }\\n\\n    function getVoteByAccount(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (DataTypes.Vote storage) {\\n        uint256 i = 0;\\n        for (i = 0; i < round.votes.length; i++) {\\n            if (round.votes[i].account == account) {\\n                return round.votes[i];\\n            }\\n        }\\n        return round.votes[i];\\n    }\\n\\n    function tryGetVoteByAccount(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (DataTypes.Vote storage, bool exists) {\\n        for (uint256 i = 0; i < round.votes.length; i++) {\\n            if (round.votes[i].account == account) {\\n                return (round.votes[i], true);\\n            }\\n        }\\n        return (round.votes[0], false);\\n    }\\n\\n    function incrementChoiceCount(\\n        DataTypes.Round storage round,\\n        uint256 choice,\\n        uint256 weight\\n    ) external {\\n        round.counts[choice] += weight;\\n    }\\n\\n    function fetchVoteByAccount(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (DataTypes.Vote memory) {\\n        uint256 length = round.votes.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (round.votes[i].account == account) {\\n                return round.votes[i];\\n            }\\n        }\\n        return\\n            DataTypes.Vote(\\n                account,\\n                0x0,\\n                0,\\n                getJurorWeight(round, account),\\n                \\\"\\\",\\n                false\\n            );\\n    }\\n\\n    function getWinningChoice(\\n        DataTypes.Round storage round\\n    ) internal view returns (uint256) {\\n        uint256 winningChoice = 0;\\n        uint256 winningCount = 0;\\n        for (uint256 i = 0; i < round.counts.length; i++) {\\n            if (round.counts[i] > winningCount) {\\n                winningChoice = i;\\n                winningCount = round.counts[i];\\n            }\\n        }\\n        return winningChoice;\\n    }\\n\\n    function getAmountNotVoted(\\n        DataTypes.Round storage round\\n    ) public view returns (uint256) {\\n        return round.maxVotes - round.totalVoted;\\n    }\\n\\n    function getMinRange(uint256 winningChoice) public pure returns (uint256) {\\n        return winningChoice == 0 ? 0 : winningChoice - 1;\\n    }\\n\\n    function getMaxRange(uint256 winningChoice) public pure returns (uint256) {\\n        return winningChoice == 10 ? 10 : winningChoice + 1;\\n    }\\n\\n    function getRanges(\\n        uint256 winningChoice\\n    ) public pure returns (uint256, uint256) {\\n        return (getMinRange(winningChoice), getMaxRange(winningChoice));\\n    }\\n\\n    function setAppealFeeRewards(\\n        DataTypes.Round storage round,\\n        uint256 appealFeeRewards\\n    ) external returns (bool) {\\n        round.appealFeeRewards = appealFeeRewards;\\n        return true;\\n    }\\n\\n    function setAppealFeeClaimed(\\n        DataTypes.Round storage round\\n    ) external returns (bool) {\\n        round.appealFeeRewards = 0;\\n        return true;\\n    }\\n\\n    function close(DataTypes.Round storage round) external returns (bool) {\\n        round.closed = true;\\n        return true;\\n    }\\n\\n    function isClosed(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.closed;\\n    }\\n\\n    function getAmountOfCorrectVote(\\n        DataTypes.Round storage round,\\n        uint256 winningChoice\\n    ) external view returns (uint256) {\\n        return round.counts[winningChoice];\\n    }\\n\\n    function getAmountOfIncorrectVote(\\n        DataTypes.Round storage round,\\n        uint256 min,\\n        uint256 max\\n    ) external view returns (uint256 incorrectVotes) {\\n        incorrectVotes = round.maxVotes - round.totalVoted;\\n        for (uint256 i = 0; i < round.counts.length; i++) {\\n            if (!(i >= min && i <= max)) {\\n                incorrectVotes += round.counts[i];\\n            }\\n        }\\n    }\\n\\n    function addJudgesClaimed(\\n        DataTypes.Round storage round,\\n        address account\\n    ) external returns (bool) {\\n        round.judgesClaimed.add(account);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x39827cdfb90f818151ea7f6a761a32096585931d5e93e1930c9c9ad4905dfe58\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/RoundLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {RoleKeys} from \\\"../helpers/RoleKeys.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {PercentageMath} from \\\"../../../imports/aave/contracts/PercentageMath.sol\\\";\\nimport {RoundDataLogic} from \\\"./RoundDataLogic.sol\\\";\\nimport {VoteLogic} from \\\"./VoteLogic.sol\\\";\\n\\nimport {IJury} from \\\"../../../interfaces/IJury.sol\\\";\\n\\n/**\\n * @title Round logic library\\n * @author Blockswan\\n * @notice Implements the logic for round specific functions\\n */\\nlibrary RoundLogic {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Counters for Counters.Counter;\\n    using PercentageMath for uint256;\\n    using RoundDataLogic for DataTypes.Round;\\n    using VoteLogic for DataTypes.Vote;\\n\\n    modifier onlyJuror(DataTypes.Round storage round, address account) {\\n        require(round.isJuror(account), Errors.RD_ACCOUNT_NOT_DRAWN_JUROR);\\n        _;\\n    }\\n\\n    modifier onlyClosedRound(DataTypes.Round storage round) {\\n        require(round.isClosed(), Errors.ROUND_NOT_CLOSED);\\n        _;\\n    }\\n\\n    modifier onlyAppealedRound(DataTypes.Round storage round) {\\n        require(round.isAppealed(), Errors.ROUND_NOT_APPEALED);\\n        _;\\n    }\\n\\n    modifier onlyNotAppealedRound(DataTypes.Round storage round) {\\n        require(!round.isAppealed(), Errors.ROUND_IS_APPEALED);\\n        _;\\n    }\\n\\n    modifier onlyNotCommited(DataTypes.Round storage round, address account) {\\n        require(\\n            !round.hasCommited(account),\\n            Errors.ROUND_VOTE_ALREADY_COMMITED\\n        );\\n        _;\\n    }\\n\\n    modifier onlyNotSumbittedEvidence(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) {\\n        require(\\n            !round.hasSubmittedEvidence(userId),\\n            Errors.ROUND_EVIDENCE_ALREADY_SUBMITTED\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCommited(DataTypes.Round storage round, address account) {\\n        require(round.hasCommited(account), Errors.ROUND_VOTE_NOT_COMMITED);\\n        _;\\n    }\\n\\n    modifier onlyNotRevealed(DataTypes.Round storage round, address account) {\\n        require(\\n            !round.hasRevealed(account),\\n            Errors.ROUND_VOTE_ALREADY_REVEALED\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCorrectRole(bytes32 role) {\\n        require(\\n            role == RoleKeys.BUYER_ROLE || role == RoleKeys.SELLER_ROLE,\\n            Errors.DS_EVIDENCE_ROLE_NOT_VALID\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRoundActor(DataTypes.Round storage round, uint256 userId) {\\n        require(\\n            round.isProcecutor(userId) || round.isDefendant(userId),\\n            Errors.DS_EVIDENCE_SENDER_NOT_PARTY\\n        );\\n        _;\\n    }\\n\\n    // add a round\\n    function addRound(\\n        DataTypes.Round[] storage rounds,\\n        InputTypes.AddRoundInput memory params\\n    ) external returns (bool) {\\n        rounds.push();\\n        DataTypes.Round storage newRound = rounds[rounds.length - 1];\\n        newRound.setProcecutorId(params.procecutorId);\\n        newRound.setDefendantId(params.defendantId);\\n        newRound.setMaxVotes(params.maxVotes);\\n        newRound.setTotalFeesForJurors(params.totalFeesForJurors);\\n        newRound.setDrawnJurors(params.drawnJurors);\\n        newRound.setTokensAtStakePerJuror(params.tokensAtStakePerJuror);\\n        return true;\\n    }\\n\\n    function submitEvidence(\\n        DataTypes.Round storage round,\\n        DataTypes.Evidence memory evidence\\n    )\\n        external\\n        onlyRoundActor(round, evidence.userId)\\n        onlyNotSumbittedEvidence(round, evidence.userId)\\n        onlyCorrectRole(evidence.role)\\n        returns (bool)\\n    {\\n        if (round.getEvidencesCount() == 1) {\\n            require(\\n                evidence.role != round.evidences[0].role,\\n                Errors.DS_EVIDENCE_ROLE_NOT_VALID\\n            );\\n        }\\n        round.addEvidence(evidence);\\n        return true;\\n    }\\n\\n    function areEvidencesSubmitted(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.getEvidencesCount() == 2;\\n    }\\n\\n    function commitVote(\\n        DataTypes.Round storage round,\\n        address account,\\n        uint256 choice,\\n        string memory salt\\n    )\\n        external\\n        onlyJuror(round, account)\\n        onlyNotCommited(round, account)\\n        returns (bool)\\n    {\\n        uint256 weight = round.getJurorWeight(account);\\n        DataTypes.Vote memory newVote = VoteLogic.commit(\\n            account,\\n            choice,\\n            weight,\\n            salt\\n        );\\n        round.votes.push(newVote);\\n        round.incrementTotalCommited(weight);\\n        return true;\\n    }\\n\\n    function revealVote(\\n        DataTypes.Round storage round,\\n        address account,\\n        uint256 choice,\\n        string memory salt,\\n        string memory justification\\n    )\\n        external\\n        onlyJuror(round, account)\\n        onlyCommited(round, account)\\n        onlyNotRevealed(round, account)\\n    {\\n        uint256 weight = round.getJurorWeight(account);\\n        round.incrementTotalVoted(weight);\\n        round.incrementChoiceCount(choice, weight);\\n        {\\n            (DataTypes.Vote storage vote, bool exists) = round\\n                .tryGetVoteByAccount(account);\\n            require(exists, Errors.RD_VOTE_NOT_FOUND);\\n            vote.reveal(choice, salt, justification);\\n        }\\n    }\\n\\n    function appeal(\\n        DataTypes.Round storage round,\\n        uint256 appealFeeRewards,\\n        uint256 procecutorId\\n    ) external onlyRoundActor(round, procecutorId) {\\n        round.setAppealFeeRewards(appealFeeRewards);\\n        round.setAppealedBy(procecutorId);\\n    }\\n\\n    function claimAsJudge(\\n        DataTypes.Round storage round,\\n        InputTypes.ClaimAsJudgeInput memory params\\n    )\\n        external\\n        onlyJuror(round, params.account)\\n        onlyClosedRound(round)\\n        returns (OutputTypes.ExecuteClaimAsJudgeOutput memory output)\\n    {\\n        DataTypes.Vote memory vote = round.fetchVoteByAccount(params.account);\\n        {\\n            output = OutputTypes.ExecuteClaimAsJudgeOutput({\\n                isVoteCorrect: vote.isVoteCorrect(params.winningChoice),\\n                isVoteInRange: vote.isBetweenRange(params.min, params.max),\\n                amountFromDisputeFees: calcEarnedFromDisputeFees(\\n                    vote.weight,\\n                    params.amountOfCorrectVotes,\\n                    params.totalFeesForJurors\\n                ),\\n                amountFromJurorsTokensAtStake: calcEarnedFromDisputeFees(\\n                    vote.weight,\\n                    params.amountOfCorrectVotes,\\n                    params.penalties\\n                ),\\n                tokensAtStakePerJuror: params.tokensAtStakePerJuror\\n            });\\n        }\\n        round.addJudgesClaimed(params.account);\\n    }\\n\\n    function claimAppealFeeRewards(\\n        DataTypes.Round storage round,\\n        DataTypes.Round storage previousRound,\\n        uint256 userId\\n    )\\n        external\\n        onlyRoundActor(previousRound, userId)\\n        onlyAppealedRound(previousRound)\\n        returns (uint256 appealFeeRewards, bool isClaimable)\\n    {\\n        appealFeeRewards = previousRound.appealFeeRewards;\\n        isClaimable = checkIfClaimAppealIsPossible(\\n            round.winningChoice,\\n            previousRound.winningChoice,\\n            round.isProcecutor(userId)\\n        );\\n        previousRound.setAppealFeeClaimed();\\n    }\\n\\n    function claimRuling(\\n        DataTypes.Round storage round\\n    )\\n        external\\n        view\\n        onlyNotAppealedRound(round)\\n        returns (uint256 ruling, uint256 procecutorId, uint256 defendantId)\\n    {\\n        ruling = round.winningChoice;\\n        procecutorId = round.procecutorId;\\n        defendantId = round.defendantId;\\n    }\\n\\n    function checkIfClaimAppealIsPossible(\\n        uint256 winningChoice,\\n        uint256 previousWinningChoice,\\n        bool calledByProcecutor\\n    ) internal pure returns (bool) {\\n        if (calledByProcecutor) {\\n            return winningChoice > previousWinningChoice;\\n        } else {\\n            return winningChoice <= previousWinningChoice;\\n        }\\n    }\\n\\n    function calcEarnedFromDisputeFees(\\n        uint256 jurorWeight,\\n        uint256 weightOfCorrectVotes,\\n        uint256 disputePrice\\n    ) public pure returns (uint256) {\\n        uint res = (disputePrice * jurorWeight) / weightOfCorrectVotes;\\n        return res;\\n    }\\n\\n    function calcPenaltiesAmount(\\n        DataTypes.Round storage round,\\n        uint256 min,\\n        uint256 max\\n    ) external view returns (uint256 penaltiesAmount) {\\n        uint256 amountOfIncorrectVotes = round.getAmountOfIncorrectVote(\\n            min,\\n            max\\n        );\\n        penaltiesAmount = amountOfIncorrectVotes * round.tokensAtStakePerJuror;\\n    }\\n\\n    function format(\\n        DataTypes.Round storage round,\\n        uint256 id\\n    ) public view returns (OutputTypes.RoundOutput memory) {\\n        return (\\n            OutputTypes.RoundOutput({\\n                roundId: id,\\n                procecutorId: round.procecutorId,\\n                defendantId: round.defendantId,\\n                appealFeeRewards: round.appealFeeRewards,\\n                tokensAtStakePerJuror: round.tokensAtStakePerJuror,\\n                totalFeesForJurors: round.totalFeesForJurors,\\n                maxVotes: round.maxVotes,\\n                penalties: round.penalties,\\n                winningChoice: round.winningChoice,\\n                totalRepartitions: round.totalRepartitions,\\n                totalVoted: round.totalVoted,\\n                totalCommited: round.totalCommited,\\n                counts: round.counts,\\n                evidenceSubmitters: round.evidenceSubmitters.values(),\\n                appealedBy: round.appealedBy,\\n                votes: round.votes,\\n                evidences: round.evidences,\\n                drawnJurors: round.drawnJurors,\\n                judgesClaimed: round.judgesClaimed.values(),\\n                closed: round.closed\\n            })\\n        );\\n    }\\n\\n    function formatAll(\\n        DataTypes.Round[] storage rounds\\n    ) external view returns (OutputTypes.RoundOutput[] memory) {\\n        OutputTypes.RoundOutput[] memory output = new OutputTypes.RoundOutput[](\\n            rounds.length\\n        );\\n        for (uint256 i = 0; i < rounds.length; i++) {\\n            output[i] = format(rounds[i], i);\\n        }\\n        return output;\\n    }\\n}\\n\",\"keccak256\":\"0x686bec91451fccd45b27ba954d95ba589073272f80fe48445d90e1648b9ad6e4\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/VoteDataLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\n\\n/**\\n * @title VoteData logic library\\n * @author Blockswan\\n * @notice Implements the logic for vote data specific functions\\n */\\nlibrary VoteDataLogic {\\n    function setJustification(\\n        DataTypes.Vote storage vote,\\n        string memory justification\\n    ) internal returns (bool) {\\n        vote.justification = justification;\\n        return true;\\n    }\\n\\n    function setCommit(\\n        DataTypes.Vote storage vote,\\n        bytes32 commitment\\n    ) internal returns (bool) {\\n        vote.commit = commitment;\\n        return true;\\n    }\\n\\n    function setChoice(\\n        DataTypes.Vote storage vote,\\n        uint256 choice\\n    ) internal returns (bool) {\\n        vote.choice = choice;\\n        return true;\\n    }\\n\\n    function setAccount(\\n        DataTypes.Vote storage vote,\\n        address account\\n    ) internal returns (bool) {\\n        vote.account = account;\\n        return true;\\n    }\\n\\n    function setVoted(DataTypes.Vote storage vote) internal returns (bool) {\\n        vote.hasVoted = true;\\n        return true;\\n    }\\n\\n    function setWeight(\\n        DataTypes.Vote storage vote,\\n        uint256 weight\\n    ) internal returns (bool) {\\n        vote.weight = weight;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x6942c9f57558bfcd230b9deb3c4190b6c4664903670adef0c4487b635b6f9b92\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/VoteLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\nimport {VoteDataLogic} from \\\"./VoteDataLogic.sol\\\";\\n\\n/**\\n * @title Vote logic library\\n * @author Blockswan\\n * @notice Implements the logic for vote specific functions\\n */\\nlibrary VoteLogic {\\n    using VoteDataLogic for DataTypes.Vote;\\n\\n    modifier onlyValidChoice(uint256 choice) {\\n        require(choice >= 0 && choice <= 10, Errors.VOTE_INVALID_CHOICE);\\n        _;\\n    }\\n\\n    modifier onlyValidReveal(\\n        DataTypes.Vote storage vote,\\n        uint256 choice,\\n        string memory salt\\n    ) {\\n        require(\\n            isRevealCorrect(vote.account, choice, salt, vote.commit),\\n            Errors.VOTE_REVEAL_INCORRECT\\n        );\\n        _;\\n    }\\n\\n    function encodeChoice(\\n        address account,\\n        uint256 choice,\\n        string memory salt\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(account, choice, salt));\\n    }\\n\\n    function isRevealCorrect(\\n        address account,\\n        uint256 choice,\\n        string memory salt,\\n        bytes32 commitment\\n    ) internal pure returns (bool) {\\n        return encodeChoice(account, choice, salt) == commitment;\\n    }\\n\\n    function isVoteCorrect(\\n        DataTypes.Vote storage vote,\\n        uint256 choice\\n    ) internal view returns (bool) {\\n        return vote.choice == choice;\\n    }\\n\\n    function commit(\\n        address account,\\n        uint256 choice,\\n        uint256 weight,\\n        string memory salt\\n    ) external pure returns (DataTypes.Vote memory newVote) {\\n        newVote = DataTypes.Vote({\\n            account: account,\\n            choice: 0,\\n            justification: \\\"\\\",\\n            commit: encodeChoice(account, choice, salt),\\n            weight: weight,\\n            hasVoted: false\\n        });\\n    }\\n\\n    function reveal(\\n        DataTypes.Vote storage vote,\\n        uint256 choice,\\n        string memory salt,\\n        string memory justification\\n    )\\n        external\\n        onlyValidChoice(choice)\\n        onlyValidReveal(vote, choice, salt)\\n        returns (bool)\\n    {\\n        vote.setChoice(choice);\\n        vote.setJustification(justification);\\n        vote.setVoted();\\n        return true;\\n    }\\n\\n    function isBetweenRange(\\n        DataTypes.Vote memory vote,\\n        uint256 minRange,\\n        uint256 maxRange\\n    ) external pure returns (bool) {\\n        return vote.choice >= minRange && vote.choice <= maxRange;\\n    }\\n\\n    function isVoteCorrect(\\n        DataTypes.Vote memory vote,\\n        uint256 winningChoice\\n    ) external pure returns (bool) {\\n        return vote.choice == winningChoice;\\n    }\\n}\\n\",\"keccak256\":\"0xb900260c751ca9ffee96f4a799b5e793769e6285b9ab1adce6bc60f3eece460f\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\n\\nlibrary DataTypes {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n\\n    enum OrderState {\\n        UNCONFIRMED,\\n        CONFIRMED,\\n        DISPUTED,\\n        DONE\\n    }\\n\\n    enum DisputeState {\\n        EVIDENCE,\\n        COMMIT,\\n        VOTE,\\n        APPEAL,\\n        EXECUTION\\n    }\\n\\n    struct DelayTimestamp {\\n        uint256 selfRefund;\\n        uint256 evidence;\\n        uint256 commit;\\n        uint256 vote;\\n        uint256 appeal;\\n    }\\n\\n    struct User {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        EnumerableSet.UintSet gigIds;\\n        EnumerableSet.UintSet offerIds;\\n        EnumerableSet.UintSet bidIds;\\n        EnumerableSet.UintSet buyerOrderIds;\\n        EnumerableSet.UintSet gigReviewsIds;\\n        EnumerableSet.UintSet userReviewsIds;\\n        EnumerableSet.UintSet reviewsIds;\\n    }\\n\\n    struct Package {\\n        uint256 price;\\n        uint256 timeDelivery;\\n    }\\n\\n    struct Gig {\\n        string metadata;\\n        uint256 createdAt;\\n        bool isPaused;\\n        EnumerableSet.UintSet reviewIds;\\n        EnumerableSet.UintSet orderIds;\\n        Counters.Counter successSell;\\n        Counters.Counter failedSell;\\n        Package[3] packages;\\n    }\\n\\n    struct Invoice {\\n        uint256 price;\\n        uint256 buyerFees;\\n        uint256 sellerFees;\\n        uint256 createdAt;\\n        IERC20 currency;\\n    }\\n\\n    struct Order {\\n        string metadata;\\n        string brief;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        uint256 disputeId;\\n        bool disputed;\\n        Invoice invoice;\\n        OrderState state;\\n        EnumerableSet.UintSet reviewIds;\\n    }\\n\\n    struct Evidence {\\n        uint256 userId;\\n        bytes32 role;\\n        string metadata;\\n    }\\n\\n    struct Vote {\\n        address account;\\n        bytes32 commit;\\n        uint256 choice;\\n        uint256 weight;\\n        string justification;\\n        bool hasVoted;\\n    }\\n\\n    struct Juror {\\n        uint256 stakedTokens;\\n        uint256 freezedTokens;\\n    }\\n\\n    struct Round {\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 appealFeeRewards;\\n        uint256 maxVotes;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 penalties;\\n        uint256 winningChoice;\\n        uint256 totalRepartitions;\\n        uint256 totalVoted;\\n        uint256 totalCommited;\\n        uint256 appealedBy;\\n        uint256[11] counts;\\n        EnumerableSet.UintSet evidenceSubmitters;\\n        EnumerableSet.AddressSet judgesClaimed;\\n        Vote[] votes;\\n        Evidence[] evidences;\\n        address[] drawnJurors;\\n        bool closed;\\n    }\\n\\n    struct Dispute {\\n        uint256 createdAt;\\n        uint256 orderId;\\n        uint256 ruling;\\n        uint256 ruledAt;\\n        uint256[] timestamps;\\n        DisputeState state;\\n        Round[] rounds;\\n    }\\n\\n    struct Review {\\n        uint256 authorId;\\n        string metadata;\\n    }\\n\\n    struct ServiceProvider {\\n        address wallet;\\n        string endpoint;\\n    }\\n\\n    struct EntryParams {\\n        uint256 currencyValue;\\n        uint256 timeAdded;\\n        uint256 xpEarned;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CreationParams {\\n        uint256 currencyValue;\\n        uint256 xpEarned;\\n    }\\n\\n    struct OrderPriceParams {\\n        uint256 trialFlat;\\n        uint256 trialPercent;\\n        uint256 proceedFlat;\\n        uint256 proceedPercent;\\n    }\\n\\n    struct FeeParams {\\n        uint256 flat;\\n        uint256 percent;\\n    }\\n\\n    struct RetributionParams {\\n        uint256 affiliate;\\n        uint256 lvl0AffiliateShare;\\n    }\\n\\n    struct DisputeParams {\\n        uint256 minStake;\\n        uint256 alpha;\\n        uint256 feePerJuror;\\n        uint256 maxVotes;\\n    }\\n}\\n\",\"keccak256\":\"0xcfaef75a0e523972dd8c603f9857cec50d6df304986b553e97374a1f5ea49ab4\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/InputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary InputTypes {\\n    struct CreateUserInput {\\n        uint256 newId;\\n        string metadata;\\n        uint256 inviterId;\\n        address wallet;\\n    }\\n\\n    struct CreateGigInput {\\n        uint256 newId;\\n        DataTypes.Package[3] packages;\\n        string metadata;\\n    }\\n\\n    struct OrderFeesInput {\\n        DataTypes.FeeParams buyerFees;\\n        DataTypes.FeeParams sellerFees;\\n    }\\n\\n    struct OrderRelationInput {\\n        uint256 newId;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n    }\\n\\n    struct CreateOrderInput {\\n        uint256 sellerId;\\n        uint256 buyerId;\\n        uint256 gigId;\\n        uint256 packageId;\\n        string brief;\\n    }\\n\\n    struct ExecuteCreateOrderInput {\\n        uint256 price;\\n        string metadata;\\n        string brief;\\n        OrderFeesInput fees;\\n        OrderRelationInput relations;\\n        IERC20 currency;\\n    }\\n\\n    struct ExecuteCreateDisputeInput {\\n        uint256 newId;\\n        uint256 orderId;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 maxVotes;\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 evidenceUntil;\\n        address[] drawnJurors;\\n    }\\n\\n    struct ExecuteNextRoundInput {\\n        uint256 evidenceUntil;\\n        uint256 maxVotes;\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        address[] drawnJurors;\\n    }\\n\\n    struct BecomeBuyerInput {\\n        address account;\\n        uint256 buyerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct BecomeSellerInput {\\n        address account;\\n        uint256 sellerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CalcInvitersRewardsInput {\\n        uint256 currencyValue;\\n        uint256 affiliateShare;\\n        uint256 lvl0AffiliateShare;\\n    }\\n\\n    struct ProcessPaymentInput {\\n        address caller;\\n        address inviter0;\\n        address inviter1;\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n\\n    struct AddRoundInput {\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 maxVotes;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        address[] drawnJurors;\\n    }\\n\\n    struct ClaimAsJudgeInput {\\n        address account;\\n        uint256 min;\\n        uint256 max;\\n        uint256 winningChoice;\\n        uint256 amountOfCorrectVotes;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 penalties;\\n    }\\n}\\n\",\"keccak256\":\"0x35530d36f783f74500f955dd636a712344d9abded4893c0233790072e22c5217\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/OutputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary OutputTypes {\\n    struct CalcInvitersRewardsOutput {\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n\\n    struct PrepareBecomeRoleOutput {\\n        address inviter0;\\n        address inviter1;\\n        DataTypes.EntryParams entryParams;\\n        DataTypes.RetributionParams retributionParams;\\n        CalcInvitersRewardsOutput rewards;\\n    }\\n\\n    struct GigOutput {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        uint256[] reviewIds;\\n        uint256[] orderIds;\\n        DataTypes.Package[3] packages;\\n    }\\n\\n    struct UserOutput {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 userId;\\n        address wallet;\\n        uint256[] gigIds;\\n        uint256[] offerIds;\\n        uint256[] bidIds;\\n        uint256[] buyerOrderIds;\\n        uint256[] gigReviewsIds;\\n        uint256[] userReviewsIds;\\n        uint256[] reviewsIds;\\n    }\\n\\n    struct OrderOutput {\\n        string metadata;\\n        string brief;\\n        uint256 orderId;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        uint256 disputeId;\\n        uint256[] reviewIds;\\n        bool disputed;\\n        DataTypes.Invoice invoice;\\n        DataTypes.OrderState state;\\n    }\\n\\n    struct RoundOutput {\\n        uint256 roundId;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 appealFeeRewards;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 maxVotes;\\n        uint256 penalties;\\n        uint256 winningChoice;\\n        uint256 totalRepartitions;\\n        uint256 totalVoted;\\n        uint256 totalCommited;\\n        uint256[11] counts;\\n        uint256[] evidenceSubmitters;\\n        uint256 appealedBy;\\n        DataTypes.Vote[] votes;\\n        DataTypes.Evidence[] evidences;\\n        address[] drawnJurors;\\n        address[] judgesClaimed;\\n        bool closed;\\n    }\\n\\n    struct DisputeOutput {\\n        uint256 createdAt;\\n        uint256 disputeId;\\n        uint256 orderId;\\n        uint256 ruling;\\n        uint256 ruledAt;\\n        uint256[] timestamps;\\n        DataTypes.DisputeState state;\\n        RoundOutput[] rounds;\\n    }\\n\\n    struct PopulatedGig {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        DataTypes.Review[] reviews;\\n        DataTypes.Package[] packages;\\n    }\\n\\n    struct CalcDisputeDelaysFromBlock {\\n        uint256 evidenceUntil;\\n        uint256 commitUntil;\\n        uint256 voteUntil;\\n        uint256 appealUntil;\\n    }\\n\\n    struct PopulatedUser {\\n        uint256 userId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 bswanBalance;\\n        uint256 usdcBalance;\\n        uint256 xpBalance;\\n        uint256[] gigIds;\\n        address wallet;\\n        bool isBuyer;\\n        bool isSeller;\\n        bool isJudge;\\n        UserOutput[] inviters;\\n    }\\n\\n    struct ExecuteClaimAsJudgeOutput {\\n        bool isVoteCorrect;\\n        bool isVoteInRange;\\n        uint256 amountFromDisputeFees;\\n        uint256 amountFromJurorsTokensAtStake;\\n        uint256 tokensAtStakePerJuror;\\n    }\\n}\\n\",\"keccak256\":\"0xa192ee71347e59a631ae11918bd24a1cfd96b8c55d0a7d982ec7e36e4006b2cc\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61318e61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100d85760003560e01c806363a072ba11610096578063bba2165211610070578063bba216521461027e578063c0b088f71461029e578063d979c08c146102b1578063e6053cff146102d157600080fd5b806363a072ba1461020e5780639cd25fc51461023e578063ba30c1a71461025e57600080fd5b8062ffd605146100dd57806301d84af51461011057806304fb8e1a1461017657806308a83d86146101ab5780632fd658b6146101cc578063327d2e01146101ee575b600080fd5b6100f06100eb366004612574565b6102e4565b604080519384526020840192909252908201526060015b60405180910390f35b81801561011c57600080fd5b5061013061012b366004612639565b6103cb565b6040516101079190600060a08201905082511515825260208301511515602083015260408301516040830152606083015160608301526080830151608083015292915050565b81801561018257600080fd5b506101966101913660046126d3565b6107c2565b60408051928352901515602083015201610107565b6101be6101b93660046126d3565b610b15565b604051908152602001610107565b8180156101d857600080fd5b506101ec6101e73660046126d3565b610b38565b005b6102016101fc366004612574565b610dad565b6040516101079190612a66565b81801561021a57600080fd5b5061022e610229366004612b46565b610e75565b6040519015158152602001610107565b61025161024c366004612beb565b611185565b6040516101079190612c0d565b81801561026a57600080fd5b5061022e610279366004612c20565b611528565b81801561028a57600080fd5b506101ec610299366004612c83565b611814565b6101be6102ac3660046126d3565b611b71565b8180156102bd57600080fd5b5061022e6102cc366004612d0d565b611c22565b61022e6102df366004612574565b611fe4565b60405163164ca46760e31b815260048101829052600090819081908490735aEe4cd78536d7062AaAA8ceC280162abf4B79F49063b26523389060240160206040518083038186803b15801561033857600080fd5b505af415801561034c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103709190612e3d565b15604051806040016040528060028152602001610d8d60f21b815250906103b35760405162461bcd60e51b81526004016103aa9190612e58565b60405180910390fd5b50505050600782015482546001909301549093909150565b6104016040518060a001604052806000151581526020016000151581526020016000815260200160008152602001600081525090565b815160405163c52af8e960e01b8152600481018590526001600160a01b0382166024820152849190735aEe4cd78536d7062AaAA8ceC280162abf4B79F49063c52af8e99060440160206040518083038186803b15801561046057600080fd5b505af4158015610474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104989190612e3d565b60405180604001604052806002815260200161353160f01b815250906104d15760405162461bcd60e51b81526004016103aa9190612e58565b50604051637f8dc8e760e01b8152600481018690528590735aEe4cd78536d7062AaAA8ceC280162abf4B79F490637f8dc8e79060240160206040518083038186803b15801561051f57600080fd5b505af4158015610533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105579190612e3d565b60405180604001604052806002815260200161353960f01b815250906105905760405162461bcd60e51b81526004016103aa9190612e58565b5084516000906105a1908890611ffa565b90506040518060a0016040528082736aCb93c19af3c035b27e9e357F27999843624C74630a6c668c90918a606001516040518363ffffffff1660e01b81526004016105ed929190612e6b565b60206040518083038186803b15801561060557600080fd5b505af4158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d9190612e3d565b151581526020888101516040808b015190516339b7870160e21b81529290930192736aCb93c19af3c035b27e9e357F27999843624C749263e6de1c0492610688928892600401612e8d565b60206040518083038186803b1580156106a057600080fd5b505af41580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d89190612e3d565b151581526020016106f6836060015189608001518a60c00151610b15565b8152602001610712836060015189608001518a60e00151610b15565b815260a088015160209091015286516040516357708ca360e11b8152600481018a90526001600160a01b039091166024820152909550735aEe4cd78536d7062AaAA8ceC280162abf4B79F49063aee119469060440160206040518083038186803b15801561077f57600080fd5b505af4158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b79190612e3d565b505050505092915050565b604051630a68fcd760e31b81526004810183905260248101829052600090819084908490735aEe4cd78536d7062AaAA8ceC280162abf4B79F490635347e6b89060440160206040518083038186803b15801561081d57600080fd5b505af4158015610831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108559190612e3d565b806108e5575060405163e4dfdc1b60e01b81526004810183905260248101829052735aEe4cd78536d7062AaAA8ceC280162abf4B79F49063e4dfdc1b9060440160206040518083038186803b1580156108ad57600080fd5b505af41580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e59190612e3d565b60405180604001604052806002815260200161333760f01b8152509061091e5760405162461bcd60e51b81526004016103aa9190612e58565b5060405163164ca46760e31b8152600481018790528690735aEe4cd78536d7062AaAA8ceC280162abf4B79F49063b26523389060240160206040518083038186803b15801561096c57600080fd5b505af4158015610980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a49190612e3d565b60405180604001604052806002815260200161363160f01b815250906109dd5760405162461bcd60e51b81526004016103aa9190612e58565b50600287015460078981015490890154604051630a68fcd760e31b8152600481018c9052602481018a9052929750610a8392735aEe4cd78536d7062AaAA8ceC280162abf4B79F490635347e6b89060440160206040518083038186803b158015610a4657600080fd5b505af4158015610a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7e9190612e3d565b61220d565b60405163132f1cc960e31b815260048101899052909450735aEe4cd78536d7062AaAA8ceC280162abf4B79F490639978e6489060240160206040518083038186803b158015610ad157600080fd5b505af4158015610ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b099190612e3d565b50505050935093915050565b60008083610b238685612ec8565b610b2d9190612ee7565b9150505b9392505050565b604051630a68fcd760e31b8152600481018490526024810182905283908290735aEe4cd78536d7062AaAA8ceC280162abf4B79F490635347e6b89060440160206040518083038186803b158015610b8e57600080fd5b505af4158015610ba2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc69190612e3d565b80610c56575060405163e4dfdc1b60e01b81526004810183905260248101829052735aEe4cd78536d7062AaAA8ceC280162abf4B79F49063e4dfdc1b9060440160206040518083038186803b158015610c1e57600080fd5b505af4158015610c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c569190612e3d565b60405180604001604052806002815260200161333760f01b81525090610c8f5760405162461bcd60e51b81526004016103aa9190612e58565b50604051637db039b360e11b81526004810186905260248101859052735aEe4cd78536d7062AaAA8ceC280162abf4B79F49063fb6073669060440160206040518083038186803b158015610ce257600080fd5b505af4158015610cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1a9190612e3d565b5060405163766b344160e11b81526004810186905260248101849052735aEe4cd78536d7062AaAA8ceC280162abf4B79F49063ecd668829060440160206040518083038186803b158015610d6d57600080fd5b505af4158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da59190612e3d565b505050505050565b805460609060009067ffffffffffffffff811115610dcd57610dcd61258d565b604051908082528060200260200182016040528015610e0657816020015b610df361241b565b815260200190600190039081610deb5790505b50905060005b8354811015610e6e57610e3e848281548110610e2a57610e2a612f09565b90600052602060002090601f020182611185565b828281518110610e5057610e50612f09565b60200260200101819052508080610e6690612f1f565b915050610e0c565b5092915050565b8051604051630a68fcd760e31b815260048101849052602481018290526000918491735aEe4cd78536d7062AaAA8ceC280162abf4B79F490635347e6b89060440160206040518083038186803b158015610ece57600080fd5b505af4158015610ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f069190612e3d565b80610f96575060405163e4dfdc1b60e01b81526004810183905260248101829052735aEe4cd78536d7062AaAA8ceC280162abf4B79F49063e4dfdc1b9060440160206040518083038186803b158015610f5e57600080fd5b505af4158015610f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f969190612e3d565b60405180604001604052806002815260200161333760f01b81525090610fcf5760405162461bcd60e51b81526004016103aa9190612e58565b5083518590610fde8282612228565b1560405180604001604052806002815260200161033360f41b815250906110185760405162461bcd60e51b81526004016103aa9190612e58565b50856020015164212aaca2a960d91b81148061103c57506529a2a62622a960d11b81145b60405180604001604052806002815260200161333960f01b815250906110755760405162461bcd60e51b81526004016103aa9190612e58565b50601c880154600114156110ed5787601c0160008154811061109957611099612f09565b9060005260206000209060030201600101548760200151141560405180604001604052806002815260200161333960f01b815250906110eb5760405162461bcd60e51b81526004016103aa9190612e58565b505b6040516396571bfd60e01b8152735aEe4cd78536d7062AaAA8ceC280162abf4B79F4906396571bfd90611126908b908b90600401612f3a565b60206040518083038186803b15801561113e57600080fd5b505af4158015611152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111769190612e3d565b50600198975050505050505050565b61118d61241b565b6040805161028081018252838152845460208201526001850154818301526002850154606082015260048501546080820152600585015460a0820152600385015460c0820152600685015460e0820152600785015461010082015260088501546101208201526009850154610140820152600a85015461016080830191909152825190810192839052909161018083019190600c870190600b9082845b81548152602001906001019080831161122a575050505050815260200161125385601701612237565b815260200184600b0154815260200184601b01805480602002602001604051908101604052809291908181526020016000905b828210156113915760008481526020908190206040805160c0810182526006860290920180546001600160a01b03168352600181015493830193909352600283015490820152600382015460608201526004820180549192916080840191906112ee90612f53565b80601f016020809104026020016040519081016040528092919081815260200182805461131a90612f53565b80156113675780601f1061133c57610100808354040283529160200191611367565b820191906000526020600020905b81548152906001019060200180831161134a57829003601f168201915b50505091835250506005919091015460ff1615156020918201529082526001929092019101611286565b50505050815260200184601c01805480602002602001604051908101604052809291908181526020016000905b828210156114965783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201805461140590612f53565b80601f016020809104026020016040519081016040528092919081815260200182805461143190612f53565b801561147e5780601f106114535761010080835404028352916020019161147e565b820191906000526020600020905b81548152906001019060200180831161146157829003601f168201915b505050505081525050815260200190600101906113be565b50505050815260200184601d018054806020026020016040519081016040528092919081815260200182805480156114f757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116114d9575b5050505050815260200161150d85601901612237565b8152601e85015460ff16151560209091015290505b92915050565b60405163c52af8e960e01b8152600481018590526001600160a01b038416602482015260009085908590735aEe4cd78536d7062AaAA8ceC280162abf4B79F49063c52af8e99060440160206040518083038186803b15801561158957600080fd5b505af415801561159d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c19190612e3d565b60405180604001604052806002815260200161353160f01b815250906115fa5760405162461bcd60e51b81526004016103aa9190612e58565b5086866116078282612244565b1560405180604001604052806002815260200161068760f31b815250906116415760405162461bcd60e51b81526004016103aa9190612e58565b50600061164e8a8a61225f565b90506000736aCb93c19af3c035b27e9e357F27999843624C746334d8dbe28b8b858c6040518563ffffffff1660e01b815260040161168f9493929190612f8e565b60006040518083038186803b1580156116a757600080fd5b505af41580156116bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116e3919081019061300a565b601b8c018054600180820183556000928352602092839020845160069093020180546001600160a01b0319166001600160a01b0390931692909217825583830151908201556040830151600282015560608301516003820155608083015180519394508493919261175c926004850192909101906124bc565b5060a091909101516005909101805460ff1916911515919091179055604051630368443b60e01b8152600481018c905260248101839052735aEe4cd78536d7062AaAA8ceC280162abf4B79F490630368443b9060440160206040518083038186803b1580156117ca57600080fd5b505af41580156117de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118029190612e3d565b5060019b9a5050505050505050505050565b60405163c52af8e960e01b8152600481018690526001600160a01b038516602482015285908590735aEe4cd78536d7062AaAA8ceC280162abf4B79F49063c52af8e99060440160206040518083038186803b15801561187257600080fd5b505af4158015611886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118aa9190612e3d565b60405180604001604052806002815260200161353160f01b815250906118e35760405162461bcd60e51b81526004016103aa9190612e58565b5086866118f08282612244565b60405180604001604052806002815260200161343960f01b815250906119295760405162461bcd60e51b81526004016103aa9190612e58565b50888861193682826122c9565b1560405180604001604052806002815260200161035360f41b815250906119705760405162461bcd60e51b81526004016103aa9190612e58565b50600061197d8c8c61225f565b6040516361bfa34160e01b8152600481018e905260248101829052909150735aEe4cd78536d7062AaAA8ceC280162abf4B79F4906361bfa3419060440160206040518083038186803b1580156119d257600080fd5b505af41580156119e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0a9190612e3d565b50604051630f82d3f160e11b8152600481018d9052602481018b905260448101829052735aEe4cd78536d7062AaAA8ceC280162abf4B79F490631f05a7e29060640160006040518083038186803b158015611a6457600080fd5b505af4158015611a78573d6000803e3d6000fd5b50505050600080611a928d8f6122e290919063ffffffff16565b91509150806040518060400160405280600281526020016106a760f31b81525090611ad05760405162461bcd60e51b81526004016103aa9190612e58565b5081736aCb93c19af3c035b27e9e357F27999843624C74630b97b41790918e8e8e6040518563ffffffff1660e01b8152600401611b1094939291906130bb565b60206040518083038186803b158015611b2857600080fd5b505af4158015611b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b609190612e3d565b505050505050505050505050505050565b604051637e084e3b60e01b81526004810184905260248101839052604481018290526000908190735aEe4cd78536d7062AaAA8ceC280162abf4B79F490637e084e3b9060640160206040518083038186803b158015611bcf57600080fd5b505af4158015611be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0791906130f7565b9050846004015481611c199190612ec8565b95945050505050565b8154600190810180845560008481529182918591611c3f91613110565b81548110611c4f57611c4f612f09565b90600052602060002090601f0201905080735aEe4cd78536d7062AaAA8ceC280162abf4B79F463cc8a0498909185606001516040518363ffffffff1660e01b8152600401611ca7929190918252602082015260400190565b60206040518083038186803b158015611cbf57600080fd5b505af4158015611cd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf79190612e3d565b50608083015160405163011abfa960e61b8152735aEe4cd78536d7062AaAA8ceC280162abf4B79F4916346afea4091611d3d918591600401918252602082015260400190565b60206040518083038186803b158015611d5557600080fd5b505af4158015611d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8d9190612e3d565b506040808401519051636bf55b2760e11b8152735aEe4cd78536d7062AaAA8ceC280162abf4B79F49163d7eab64e91611dd3918591600401918252602082015260400190565b60206040518083038186803b158015611deb57600080fd5b505af4158015611dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e239190612e3d565b508251604051636b8af67360e01b8152735aEe4cd78536d7062AaAA8ceC280162abf4B79F491636b8af67391611e66918591600401918252602082015260400190565b60206040518083038186803b158015611e7e57600080fd5b505af4158015611e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb69190612e3d565b5060a083015160405163194ebd5360e01b8152735aEe4cd78536d7062AaAA8ceC280162abf4B79F49163194ebd5391611ef3918591600401613127565b60206040518083038186803b158015611f0b57600080fd5b505af4158015611f1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f439190612e3d565b50602083015160405163a2e0e17960e01b8152735aEe4cd78536d7062AaAA8ceC280162abf4B79F49163a2e0e17991611f89918591600401918252602082015260400190565b60206040518083038186803b158015611fa157600080fd5b505af4158015611fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd99190612e3d565b506001949350505050565b6000611ff182601c015490565b60021492915050565b6040805160c0810182526000808252602082018190529181018290526060808201839052608082015260a0810191909152601b83015460005b818110156121b457836001600160a01b031685601b01828154811061205a5761205a612f09565b60009182526020909120600690910201546001600160a01b031614156121a25784601b01818154811061208f5761208f612f09565b90600052602060002090600602016040518060c00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160018201548152602001600282015481526020016003820154815260200160048201805461210590612f53565b80601f016020809104026020016040519081016040528092919081815260200182805461213190612f53565b801561217e5780601f106121535761010080835404028352916020019161217e565b820191906000526020600020905b81548152906001019060200180831161216157829003601f168201915b50505091835250506005919091015460ff1615156020909101529250611522915050565b806121ac81612f1f565b915050612033565b506040518060c00160405280846001600160a01b031681526020016000801b8152602001600081526020016121e9868661225f565b81526040805160208082018352600080835290840191909152910152949350505050565b6000811561221e5750818311610b31565b5081831115610b31565b6000610b3160178401836123a7565b60606000610b31836123bf565b6000806122518484611ffa565b602001511515949350505050565b6000805b601d840154811015610e6e57826001600160a01b031684601d01828154811061228e5761228e612f09565b6000918252602090912001546001600160a01b031614156122b7576122b4600183613140565b91505b806122c181612f1f565b915050612263565b6000806122d68484611ffa565b60a00151949350505050565b60008060005b601b85015481101561237457836001600160a01b031685601b01828154811061231357612313612f09565b60009182526020909120600690910201546001600160a01b031614156123625784601b01818154811061234857612348612f09565b9060005260206000209060060201600192509250506123a0565b8061236c81612f1f565b9150506122e8565b5083601b0160008154811061238b5761238b612f09565b90600052602060002090600602016000915091505b9250929050565b60008181526001830160205260408120541515610b31565b60608160000180548060200260200160405190810160405280929190818152602001828054801561240f57602002820191906000526020600020905b8154815260200190600101908083116123fb575b50505050509050919050565b604051806102800160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001612483612540565b81526020016060815260200160008152602001606081526020016060815260200160608152602001606081526020016000151581525090565b8280546124c890612f53565b90600052602060002090601f0160209004810192826124ea5760008555612530565b82601f1061250357805160ff1916838001178555612530565b82800160010185558215612530579182015b82811115612530578251825591602001919060010190612515565b5061253c92915061255f565b5090565b604051806101600160405280600b906020820280368337509192915050565b5b8082111561253c5760008155600101612560565b60006020828403121561258657600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff811182821017156125c7576125c761258d565b60405290565b60405160c0810167ffffffffffffffff811182821017156125c7576125c761258d565b604051601f8201601f1916810167ffffffffffffffff811182821017156126195761261961258d565b604052919050565b6001600160a01b038116811461263657600080fd5b50565b60008082840361012081121561264e57600080fd5b8335925061010080601f198301121561266657600080fd5b61266e6125a3565b9150602085013561267e81612621565b8083525060408501356020830152606085013560408301526080850135606083015260a0850135608083015260c085013560a083015260e085013560c08301528085013560e083015250809150509250929050565b6000806000606084860312156126e857600080fd5b505081359360208301359350604090920135919050565b8060005b600b811015612722578151845260209384019390910190600101612703565b50505050565b600081518084526020808501945080840160005b838110156127585781518752958201959082019060010161273c565b509495945050505050565b60005b8381101561277e578181015183820152602001612766565b838111156127225750506000910152565b600081518084526127a7816020860160208601612763565b601f01601f19169290920160200192915050565b60018060a01b0381511682526020810151602083015260408101516040830152606081015160608301526000608082015160c0608085015261280060c085018261278f565b60a0938401511515949093019390935250919050565b600081518084526020808501808196508360051b8101915082860160005b8581101561285e57828403895261284c8483516127bb565b98850198935090840190600101612834565b5091979650505050505050565b80518252602081015160208301526000604082015160606040850152612894606085018261278f565b949350505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561285e5782840389526128d284835161286b565b988501989350908401906001016128ba565b600081518084526020808501945080840160005b838110156127585781516001600160a01b0316875295820195908201906001016128f8565b60006103c0825184526020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e0850152610100808401518186015250610120808401518186015250610140808401518186015250610160808401518186015250610180808401516129af828701826126ff565b50506101a0830151816102e08601526129ca82860182612728565b9150506101c08301516103008501526101e08301518482036103208601526129f28282612816565b915050610200830151848203610340860152612a0e828261289c565b915050610220830151848203610360860152612a2a82826128e4565b915050610240830151848203610380860152612a4682826128e4565b915050610260830151612a5e6103a086018215159052565b509392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612abb57603f19888603018452612aa985835161291d565b94509285019290850190600101612a8d565b5092979650505050505050565b600067ffffffffffffffff821115612ae257612ae261258d565b50601f01601f191660200190565b600082601f830112612b0157600080fd5b8135612b14612b0f82612ac8565b6125f0565b818152846020838601011115612b2957600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612b5957600080fd5b82359150602083013567ffffffffffffffff80821115612b7857600080fd5b9084019060608287031215612b8c57600080fd5b604051606081018181108382111715612ba757612ba761258d565b80604052508235815260208301356020820152604083013582811115612bcc57600080fd5b612bd888828601612af0565b6040830152508093505050509250929050565b60008060408385031215612bfe57600080fd5b50508035926020909101359150565b602081526000610b31602083018461291d565b60008060008060808587031215612c3657600080fd5b843593506020850135612c4881612621565b925060408501359150606085013567ffffffffffffffff811115612c6b57600080fd5b612c7787828801612af0565b91505092959194509250565b600080600080600060a08688031215612c9b57600080fd5b853594506020860135612cad81612621565b935060408601359250606086013567ffffffffffffffff80821115612cd157600080fd5b612cdd89838a01612af0565b93506080880135915080821115612cf357600080fd5b50612d0088828901612af0565b9150509295509295909350565b60008060408385031215612d2057600080fd5b8235915060208084013567ffffffffffffffff80821115612d4057600080fd5b9085019060c08288031215612d5457600080fd5b612d5c6125cd565b82358152838301358482015260408301356040820152606083013560608201526080830135608082015260a083013582811115612d9857600080fd5b80840193505087601f840112612dad57600080fd5b823582811115612dbf57612dbf61258d565b8060051b9250612dd08584016125f0565b818152928401850192858101908a851115612dea57600080fd5b948601945b84861015612e145785359250612e0483612621565b8282529486019490860190612def565b60a084015250959890975095505050505050565b80518015158114612e3857600080fd5b919050565b600060208284031215612e4f57600080fd5b610b3182612e28565b602081526000610b31602083018461278f565b604081526000612e7e60408301856127bb565b90508260208301529392505050565b606081526000612ea060608301866127bb565b60208301949094525060400152919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612ee257612ee2612eb2565b500290565b600082612f0457634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612f3357612f33612eb2565b5060010190565b828152604060208201526000612894604083018461286b565b600181811c90821680612f6757607f821691505b60208210811415612f8857634e487b7160e01b600052602260045260246000fd5b50919050565b60018060a01b0385168152836020820152826040820152608060608201526000612fbb608083018461278f565b9695505050505050565b600082601f830112612fd657600080fd5b8151612fe4612b0f82612ac8565b818152846020838601011115612ff957600080fd5b612894826020830160208701612763565b60006020828403121561301c57600080fd5b815167ffffffffffffffff8082111561303457600080fd5b9083019060c0828603121561304857600080fd5b6130506125cd565b825161305b81612621565b8082525060208301516020820152604083015160408201526060830151606082015260808301518281111561308f57600080fd5b61309b87828601612fc5565b6080830152506130ad60a08401612e28565b60a082015295945050505050565b8481528360208201526080604082015260006130da608083018561278f565b82810360608401526130ec818561278f565b979650505050505050565b60006020828403121561310957600080fd5b5051919050565b60008282101561312257613122612eb2565b500390565b82815260406020820152600061289460408301846128e4565b6000821982111561315357613153612eb2565b50019056fea26469706673582212209ad3f91ec4449468accf67668e6cd07b7d50546af46886085215dffd697329db64736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100d85760003560e01c806363a072ba11610096578063bba2165211610070578063bba216521461027e578063c0b088f71461029e578063d979c08c146102b1578063e6053cff146102d157600080fd5b806363a072ba1461020e5780639cd25fc51461023e578063ba30c1a71461025e57600080fd5b8062ffd605146100dd57806301d84af51461011057806304fb8e1a1461017657806308a83d86146101ab5780632fd658b6146101cc578063327d2e01146101ee575b600080fd5b6100f06100eb366004612574565b6102e4565b604080519384526020840192909252908201526060015b60405180910390f35b81801561011c57600080fd5b5061013061012b366004612639565b6103cb565b6040516101079190600060a08201905082511515825260208301511515602083015260408301516040830152606083015160608301526080830151608083015292915050565b81801561018257600080fd5b506101966101913660046126d3565b6107c2565b60408051928352901515602083015201610107565b6101be6101b93660046126d3565b610b15565b604051908152602001610107565b8180156101d857600080fd5b506101ec6101e73660046126d3565b610b38565b005b6102016101fc366004612574565b610dad565b6040516101079190612a66565b81801561021a57600080fd5b5061022e610229366004612b46565b610e75565b6040519015158152602001610107565b61025161024c366004612beb565b611185565b6040516101079190612c0d565b81801561026a57600080fd5b5061022e610279366004612c20565b611528565b81801561028a57600080fd5b506101ec610299366004612c83565b611814565b6101be6102ac3660046126d3565b611b71565b8180156102bd57600080fd5b5061022e6102cc366004612d0d565b611c22565b61022e6102df366004612574565b611fe4565b60405163164ca46760e31b81526004810182905260009081908190849073__$af828e0c356433108d8dfb596a8a6763fb$__9063b26523389060240160206040518083038186803b15801561033857600080fd5b505af415801561034c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103709190612e3d565b15604051806040016040528060028152602001610d8d60f21b815250906103b35760405162461bcd60e51b81526004016103aa9190612e58565b60405180910390fd5b50505050600782015482546001909301549093909150565b6104016040518060a001604052806000151581526020016000151581526020016000815260200160008152602001600081525090565b815160405163c52af8e960e01b8152600481018590526001600160a01b038216602482015284919073__$af828e0c356433108d8dfb596a8a6763fb$__9063c52af8e99060440160206040518083038186803b15801561046057600080fd5b505af4158015610474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104989190612e3d565b60405180604001604052806002815260200161353160f01b815250906104d15760405162461bcd60e51b81526004016103aa9190612e58565b50604051637f8dc8e760e01b815260048101869052859073__$af828e0c356433108d8dfb596a8a6763fb$__90637f8dc8e79060240160206040518083038186803b15801561051f57600080fd5b505af4158015610533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105579190612e3d565b60405180604001604052806002815260200161353960f01b815250906105905760405162461bcd60e51b81526004016103aa9190612e58565b5084516000906105a1908890611ffa565b90506040518060a001604052808273__$c72e2124387635ea261ddf644a00cf602f$__630a6c668c90918a606001516040518363ffffffff1660e01b81526004016105ed929190612e6b565b60206040518083038186803b15801561060557600080fd5b505af4158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d9190612e3d565b151581526020888101516040808b015190516339b7870160e21b8152929093019273__$c72e2124387635ea261ddf644a00cf602f$__9263e6de1c0492610688928892600401612e8d565b60206040518083038186803b1580156106a057600080fd5b505af41580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d89190612e3d565b151581526020016106f6836060015189608001518a60c00151610b15565b8152602001610712836060015189608001518a60e00151610b15565b815260a088015160209091015286516040516357708ca360e11b8152600481018a90526001600160a01b03909116602482015290955073__$af828e0c356433108d8dfb596a8a6763fb$__9063aee119469060440160206040518083038186803b15801561077f57600080fd5b505af4158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b79190612e3d565b505050505092915050565b604051630a68fcd760e31b8152600481018390526024810182905260009081908490849073__$af828e0c356433108d8dfb596a8a6763fb$__90635347e6b89060440160206040518083038186803b15801561081d57600080fd5b505af4158015610831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108559190612e3d565b806108e5575060405163e4dfdc1b60e01b8152600481018390526024810182905273__$af828e0c356433108d8dfb596a8a6763fb$__9063e4dfdc1b9060440160206040518083038186803b1580156108ad57600080fd5b505af41580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e59190612e3d565b60405180604001604052806002815260200161333760f01b8152509061091e5760405162461bcd60e51b81526004016103aa9190612e58565b5060405163164ca46760e31b815260048101879052869073__$af828e0c356433108d8dfb596a8a6763fb$__9063b26523389060240160206040518083038186803b15801561096c57600080fd5b505af4158015610980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a49190612e3d565b60405180604001604052806002815260200161363160f01b815250906109dd5760405162461bcd60e51b81526004016103aa9190612e58565b50600287015460078981015490890154604051630a68fcd760e31b8152600481018c9052602481018a9052929750610a839273__$af828e0c356433108d8dfb596a8a6763fb$__90635347e6b89060440160206040518083038186803b158015610a4657600080fd5b505af4158015610a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7e9190612e3d565b61220d565b60405163132f1cc960e31b81526004810189905290945073__$af828e0c356433108d8dfb596a8a6763fb$__90639978e6489060240160206040518083038186803b158015610ad157600080fd5b505af4158015610ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b099190612e3d565b50505050935093915050565b60008083610b238685612ec8565b610b2d9190612ee7565b9150505b9392505050565b604051630a68fcd760e31b815260048101849052602481018290528390829073__$af828e0c356433108d8dfb596a8a6763fb$__90635347e6b89060440160206040518083038186803b158015610b8e57600080fd5b505af4158015610ba2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc69190612e3d565b80610c56575060405163e4dfdc1b60e01b8152600481018390526024810182905273__$af828e0c356433108d8dfb596a8a6763fb$__9063e4dfdc1b9060440160206040518083038186803b158015610c1e57600080fd5b505af4158015610c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c569190612e3d565b60405180604001604052806002815260200161333760f01b81525090610c8f5760405162461bcd60e51b81526004016103aa9190612e58565b50604051637db039b360e11b8152600481018690526024810185905273__$af828e0c356433108d8dfb596a8a6763fb$__9063fb6073669060440160206040518083038186803b158015610ce257600080fd5b505af4158015610cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1a9190612e3d565b5060405163766b344160e11b8152600481018690526024810184905273__$af828e0c356433108d8dfb596a8a6763fb$__9063ecd668829060440160206040518083038186803b158015610d6d57600080fd5b505af4158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da59190612e3d565b505050505050565b805460609060009067ffffffffffffffff811115610dcd57610dcd61258d565b604051908082528060200260200182016040528015610e0657816020015b610df361241b565b815260200190600190039081610deb5790505b50905060005b8354811015610e6e57610e3e848281548110610e2a57610e2a612f09565b90600052602060002090601f020182611185565b828281518110610e5057610e50612f09565b60200260200101819052508080610e6690612f1f565b915050610e0c565b5092915050565b8051604051630a68fcd760e31b81526004810184905260248101829052600091849173__$af828e0c356433108d8dfb596a8a6763fb$__90635347e6b89060440160206040518083038186803b158015610ece57600080fd5b505af4158015610ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f069190612e3d565b80610f96575060405163e4dfdc1b60e01b8152600481018390526024810182905273__$af828e0c356433108d8dfb596a8a6763fb$__9063e4dfdc1b9060440160206040518083038186803b158015610f5e57600080fd5b505af4158015610f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f969190612e3d565b60405180604001604052806002815260200161333760f01b81525090610fcf5760405162461bcd60e51b81526004016103aa9190612e58565b5083518590610fde8282612228565b1560405180604001604052806002815260200161033360f41b815250906110185760405162461bcd60e51b81526004016103aa9190612e58565b50856020015164212aaca2a960d91b81148061103c57506529a2a62622a960d11b81145b60405180604001604052806002815260200161333960f01b815250906110755760405162461bcd60e51b81526004016103aa9190612e58565b50601c880154600114156110ed5787601c0160008154811061109957611099612f09565b9060005260206000209060030201600101548760200151141560405180604001604052806002815260200161333960f01b815250906110eb5760405162461bcd60e51b81526004016103aa9190612e58565b505b6040516396571bfd60e01b815273__$af828e0c356433108d8dfb596a8a6763fb$__906396571bfd90611126908b908b90600401612f3a565b60206040518083038186803b15801561113e57600080fd5b505af4158015611152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111769190612e3d565b50600198975050505050505050565b61118d61241b565b6040805161028081018252838152845460208201526001850154818301526002850154606082015260048501546080820152600585015460a0820152600385015460c0820152600685015460e0820152600785015461010082015260088501546101208201526009850154610140820152600a85015461016080830191909152825190810192839052909161018083019190600c870190600b9082845b81548152602001906001019080831161122a575050505050815260200161125385601701612237565b815260200184600b0154815260200184601b01805480602002602001604051908101604052809291908181526020016000905b828210156113915760008481526020908190206040805160c0810182526006860290920180546001600160a01b03168352600181015493830193909352600283015490820152600382015460608201526004820180549192916080840191906112ee90612f53565b80601f016020809104026020016040519081016040528092919081815260200182805461131a90612f53565b80156113675780601f1061133c57610100808354040283529160200191611367565b820191906000526020600020905b81548152906001019060200180831161134a57829003601f168201915b50505091835250506005919091015460ff1615156020918201529082526001929092019101611286565b50505050815260200184601c01805480602002602001604051908101604052809291908181526020016000905b828210156114965783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201805461140590612f53565b80601f016020809104026020016040519081016040528092919081815260200182805461143190612f53565b801561147e5780601f106114535761010080835404028352916020019161147e565b820191906000526020600020905b81548152906001019060200180831161146157829003601f168201915b505050505081525050815260200190600101906113be565b50505050815260200184601d018054806020026020016040519081016040528092919081815260200182805480156114f757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116114d9575b5050505050815260200161150d85601901612237565b8152601e85015460ff16151560209091015290505b92915050565b60405163c52af8e960e01b8152600481018590526001600160a01b03841660248201526000908590859073__$af828e0c356433108d8dfb596a8a6763fb$__9063c52af8e99060440160206040518083038186803b15801561158957600080fd5b505af415801561159d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c19190612e3d565b60405180604001604052806002815260200161353160f01b815250906115fa5760405162461bcd60e51b81526004016103aa9190612e58565b5086866116078282612244565b1560405180604001604052806002815260200161068760f31b815250906116415760405162461bcd60e51b81526004016103aa9190612e58565b50600061164e8a8a61225f565b9050600073__$c72e2124387635ea261ddf644a00cf602f$__6334d8dbe28b8b858c6040518563ffffffff1660e01b815260040161168f9493929190612f8e565b60006040518083038186803b1580156116a757600080fd5b505af41580156116bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116e3919081019061300a565b601b8c018054600180820183556000928352602092839020845160069093020180546001600160a01b0319166001600160a01b0390931692909217825583830151908201556040830151600282015560608301516003820155608083015180519394508493919261175c926004850192909101906124bc565b5060a091909101516005909101805460ff1916911515919091179055604051630368443b60e01b8152600481018c90526024810183905273__$af828e0c356433108d8dfb596a8a6763fb$__90630368443b9060440160206040518083038186803b1580156117ca57600080fd5b505af41580156117de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118029190612e3d565b5060019b9a5050505050505050505050565b60405163c52af8e960e01b8152600481018690526001600160a01b03851660248201528590859073__$af828e0c356433108d8dfb596a8a6763fb$__9063c52af8e99060440160206040518083038186803b15801561187257600080fd5b505af4158015611886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118aa9190612e3d565b60405180604001604052806002815260200161353160f01b815250906118e35760405162461bcd60e51b81526004016103aa9190612e58565b5086866118f08282612244565b60405180604001604052806002815260200161343960f01b815250906119295760405162461bcd60e51b81526004016103aa9190612e58565b50888861193682826122c9565b1560405180604001604052806002815260200161035360f41b815250906119705760405162461bcd60e51b81526004016103aa9190612e58565b50600061197d8c8c61225f565b6040516361bfa34160e01b8152600481018e90526024810182905290915073__$af828e0c356433108d8dfb596a8a6763fb$__906361bfa3419060440160206040518083038186803b1580156119d257600080fd5b505af41580156119e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0a9190612e3d565b50604051630f82d3f160e11b8152600481018d9052602481018b90526044810182905273__$af828e0c356433108d8dfb596a8a6763fb$__90631f05a7e29060640160006040518083038186803b158015611a6457600080fd5b505af4158015611a78573d6000803e3d6000fd5b50505050600080611a928d8f6122e290919063ffffffff16565b91509150806040518060400160405280600281526020016106a760f31b81525090611ad05760405162461bcd60e51b81526004016103aa9190612e58565b508173__$c72e2124387635ea261ddf644a00cf602f$__630b97b41790918e8e8e6040518563ffffffff1660e01b8152600401611b1094939291906130bb565b60206040518083038186803b158015611b2857600080fd5b505af4158015611b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b609190612e3d565b505050505050505050505050505050565b604051637e084e3b60e01b8152600481018490526024810183905260448101829052600090819073__$af828e0c356433108d8dfb596a8a6763fb$__90637e084e3b9060640160206040518083038186803b158015611bcf57600080fd5b505af4158015611be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0791906130f7565b9050846004015481611c199190612ec8565b95945050505050565b8154600190810180845560008481529182918591611c3f91613110565b81548110611c4f57611c4f612f09565b90600052602060002090601f020190508073__$af828e0c356433108d8dfb596a8a6763fb$__63cc8a0498909185606001516040518363ffffffff1660e01b8152600401611ca7929190918252602082015260400190565b60206040518083038186803b158015611cbf57600080fd5b505af4158015611cd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf79190612e3d565b50608083015160405163011abfa960e61b815273__$af828e0c356433108d8dfb596a8a6763fb$__916346afea4091611d3d918591600401918252602082015260400190565b60206040518083038186803b158015611d5557600080fd5b505af4158015611d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8d9190612e3d565b506040808401519051636bf55b2760e11b815273__$af828e0c356433108d8dfb596a8a6763fb$__9163d7eab64e91611dd3918591600401918252602082015260400190565b60206040518083038186803b158015611deb57600080fd5b505af4158015611dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e239190612e3d565b508251604051636b8af67360e01b815273__$af828e0c356433108d8dfb596a8a6763fb$__91636b8af67391611e66918591600401918252602082015260400190565b60206040518083038186803b158015611e7e57600080fd5b505af4158015611e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb69190612e3d565b5060a083015160405163194ebd5360e01b815273__$af828e0c356433108d8dfb596a8a6763fb$__9163194ebd5391611ef3918591600401613127565b60206040518083038186803b158015611f0b57600080fd5b505af4158015611f1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f439190612e3d565b50602083015160405163a2e0e17960e01b815273__$af828e0c356433108d8dfb596a8a6763fb$__9163a2e0e17991611f89918591600401918252602082015260400190565b60206040518083038186803b158015611fa157600080fd5b505af4158015611fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd99190612e3d565b506001949350505050565b6000611ff182601c015490565b60021492915050565b6040805160c0810182526000808252602082018190529181018290526060808201839052608082015260a0810191909152601b83015460005b818110156121b457836001600160a01b031685601b01828154811061205a5761205a612f09565b60009182526020909120600690910201546001600160a01b031614156121a25784601b01818154811061208f5761208f612f09565b90600052602060002090600602016040518060c00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160018201548152602001600282015481526020016003820154815260200160048201805461210590612f53565b80601f016020809104026020016040519081016040528092919081815260200182805461213190612f53565b801561217e5780601f106121535761010080835404028352916020019161217e565b820191906000526020600020905b81548152906001019060200180831161216157829003601f168201915b50505091835250506005919091015460ff1615156020909101529250611522915050565b806121ac81612f1f565b915050612033565b506040518060c00160405280846001600160a01b031681526020016000801b8152602001600081526020016121e9868661225f565b81526040805160208082018352600080835290840191909152910152949350505050565b6000811561221e5750818311610b31565b5081831115610b31565b6000610b3160178401836123a7565b60606000610b31836123bf565b6000806122518484611ffa565b602001511515949350505050565b6000805b601d840154811015610e6e57826001600160a01b031684601d01828154811061228e5761228e612f09565b6000918252602090912001546001600160a01b031614156122b7576122b4600183613140565b91505b806122c181612f1f565b915050612263565b6000806122d68484611ffa565b60a00151949350505050565b60008060005b601b85015481101561237457836001600160a01b031685601b01828154811061231357612313612f09565b60009182526020909120600690910201546001600160a01b031614156123625784601b01818154811061234857612348612f09565b9060005260206000209060060201600192509250506123a0565b8061236c81612f1f565b9150506122e8565b5083601b0160008154811061238b5761238b612f09565b90600052602060002090600602016000915091505b9250929050565b60008181526001830160205260408120541515610b31565b60608160000180548060200260200160405190810160405280929190818152602001828054801561240f57602002820191906000526020600020905b8154815260200190600101908083116123fb575b50505050509050919050565b604051806102800160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001612483612540565b81526020016060815260200160008152602001606081526020016060815260200160608152602001606081526020016000151581525090565b8280546124c890612f53565b90600052602060002090601f0160209004810192826124ea5760008555612530565b82601f1061250357805160ff1916838001178555612530565b82800160010185558215612530579182015b82811115612530578251825591602001919060010190612515565b5061253c92915061255f565b5090565b604051806101600160405280600b906020820280368337509192915050565b5b8082111561253c5760008155600101612560565b60006020828403121561258657600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff811182821017156125c7576125c761258d565b60405290565b60405160c0810167ffffffffffffffff811182821017156125c7576125c761258d565b604051601f8201601f1916810167ffffffffffffffff811182821017156126195761261961258d565b604052919050565b6001600160a01b038116811461263657600080fd5b50565b60008082840361012081121561264e57600080fd5b8335925061010080601f198301121561266657600080fd5b61266e6125a3565b9150602085013561267e81612621565b8083525060408501356020830152606085013560408301526080850135606083015260a0850135608083015260c085013560a083015260e085013560c08301528085013560e083015250809150509250929050565b6000806000606084860312156126e857600080fd5b505081359360208301359350604090920135919050565b8060005b600b811015612722578151845260209384019390910190600101612703565b50505050565b600081518084526020808501945080840160005b838110156127585781518752958201959082019060010161273c565b509495945050505050565b60005b8381101561277e578181015183820152602001612766565b838111156127225750506000910152565b600081518084526127a7816020860160208601612763565b601f01601f19169290920160200192915050565b60018060a01b0381511682526020810151602083015260408101516040830152606081015160608301526000608082015160c0608085015261280060c085018261278f565b60a0938401511515949093019390935250919050565b600081518084526020808501808196508360051b8101915082860160005b8581101561285e57828403895261284c8483516127bb565b98850198935090840190600101612834565b5091979650505050505050565b80518252602081015160208301526000604082015160606040850152612894606085018261278f565b949350505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561285e5782840389526128d284835161286b565b988501989350908401906001016128ba565b600081518084526020808501945080840160005b838110156127585781516001600160a01b0316875295820195908201906001016128f8565b60006103c0825184526020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e0850152610100808401518186015250610120808401518186015250610140808401518186015250610160808401518186015250610180808401516129af828701826126ff565b50506101a0830151816102e08601526129ca82860182612728565b9150506101c08301516103008501526101e08301518482036103208601526129f28282612816565b915050610200830151848203610340860152612a0e828261289c565b915050610220830151848203610360860152612a2a82826128e4565b915050610240830151848203610380860152612a4682826128e4565b915050610260830151612a5e6103a086018215159052565b509392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612abb57603f19888603018452612aa985835161291d565b94509285019290850190600101612a8d565b5092979650505050505050565b600067ffffffffffffffff821115612ae257612ae261258d565b50601f01601f191660200190565b600082601f830112612b0157600080fd5b8135612b14612b0f82612ac8565b6125f0565b818152846020838601011115612b2957600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612b5957600080fd5b82359150602083013567ffffffffffffffff80821115612b7857600080fd5b9084019060608287031215612b8c57600080fd5b604051606081018181108382111715612ba757612ba761258d565b80604052508235815260208301356020820152604083013582811115612bcc57600080fd5b612bd888828601612af0565b6040830152508093505050509250929050565b60008060408385031215612bfe57600080fd5b50508035926020909101359150565b602081526000610b31602083018461291d565b60008060008060808587031215612c3657600080fd5b843593506020850135612c4881612621565b925060408501359150606085013567ffffffffffffffff811115612c6b57600080fd5b612c7787828801612af0565b91505092959194509250565b600080600080600060a08688031215612c9b57600080fd5b853594506020860135612cad81612621565b935060408601359250606086013567ffffffffffffffff80821115612cd157600080fd5b612cdd89838a01612af0565b93506080880135915080821115612cf357600080fd5b50612d0088828901612af0565b9150509295509295909350565b60008060408385031215612d2057600080fd5b8235915060208084013567ffffffffffffffff80821115612d4057600080fd5b9085019060c08288031215612d5457600080fd5b612d5c6125cd565b82358152838301358482015260408301356040820152606083013560608201526080830135608082015260a083013582811115612d9857600080fd5b80840193505087601f840112612dad57600080fd5b823582811115612dbf57612dbf61258d565b8060051b9250612dd08584016125f0565b818152928401850192858101908a851115612dea57600080fd5b948601945b84861015612e145785359250612e0483612621565b8282529486019490860190612def565b60a084015250959890975095505050505050565b80518015158114612e3857600080fd5b919050565b600060208284031215612e4f57600080fd5b610b3182612e28565b602081526000610b31602083018461278f565b604081526000612e7e60408301856127bb565b90508260208301529392505050565b606081526000612ea060608301866127bb565b60208301949094525060400152919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612ee257612ee2612eb2565b500290565b600082612f0457634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612f3357612f33612eb2565b5060010190565b828152604060208201526000612894604083018461286b565b600181811c90821680612f6757607f821691505b60208210811415612f8857634e487b7160e01b600052602260045260246000fd5b50919050565b60018060a01b0385168152836020820152826040820152608060608201526000612fbb608083018461278f565b9695505050505050565b600082601f830112612fd657600080fd5b8151612fe4612b0f82612ac8565b818152846020838601011115612ff957600080fd5b612894826020830160208701612763565b60006020828403121561301c57600080fd5b815167ffffffffffffffff8082111561303457600080fd5b9083019060c0828603121561304857600080fd5b6130506125cd565b825161305b81612621565b8082525060208301516020820152604083015160408201526060830151606082015260808301518281111561308f57600080fd5b61309b87828601612fc5565b6080830152506130ad60a08401612e28565b60a082015295945050505050565b8481528360208201526080604082015260006130da608083018561278f565b82810360608401526130ec818561278f565b979650505050505050565b60006020828403121561310957600080fd5b5051919050565b60008282101561312257613122612eb2565b500390565b82815260406020820152600061289460408301846128e4565b6000821982111561315357613153612eb2565b50019056fea26469706673582212209ad3f91ec4449468accf67668e6cd07b7d50546af46886085215dffd697329db64736f6c63430008090033",
  "libraries": {
    "RoundDataLogic": "0x5aEe4cd78536d7062AaAA8ceC280162abf4B79F4",
    "VoteLogic": "0x6aCb93c19af3c035b27e9e357F27999843624C74"
  },
  "devdoc": {
    "author": "Blockswan",
    "kind": "dev",
    "methods": {},
    "title": "Round logic library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Implements the logic for round specific functions",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}