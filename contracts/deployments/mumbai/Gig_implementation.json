{
  "address": "0x06A5c9f5E4908a16B2D2Eb1a511388934f3E462e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "provider",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeDelivery",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.Package[3]",
          "name": "packages",
          "type": "tuple[3]"
        }
      ],
      "name": "createGig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newOrderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gigId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "packageId",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeDelivery",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.Package",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "name": "fetchContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gigId",
          "type": "uint256"
        }
      ],
      "name": "getGigById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "gigId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "successSell",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "failedSell",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "reviewIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "orderIds",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timeDelivery",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.Package[3]",
              "name": "packages",
              "type": "tuple[3]"
            }
          ],
          "internalType": "struct OutputTypes.GigOutput",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGigList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "gigId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "successSell",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "failedSell",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "reviewIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "orderIds",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timeDelivery",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.Package[3]",
              "name": "packages",
              "type": "tuple[3]"
            }
          ],
          "internalType": "struct OutputTypes.GigOutput[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGigsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getInvitersAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasProtocolRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gigId",
          "type": "uint256"
        },
        {
          "internalType": "contract IUser",
          "name": "UserContract",
          "type": "address"
        }
      ],
      "name": "isGigOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isStillBuyer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isStillSeller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "_providerAddress",
          "type": "address"
        }
      ],
      "name": "setProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc71a70f27428d919dfc4094867cbbba5e0930ebfe4af59d4447c37c451e139b3",
  "receipt": {
    "to": null,
    "from": "0x8D3BD47c94b340E0151376ABF9D76C74c471E213",
    "contractAddress": "0x06A5c9f5E4908a16B2D2Eb1a511388934f3E462e",
    "transactionIndex": 0,
    "gasUsed": "2083824",
    "logsBloom": "0x
    "blockHash": "0xb005226114f06ec062b7a3bd960be7b4d2db7092c92f9cd625758613bc31931e",
    "transactionHash": "0xc71a70f27428d919dfc4094867cbbba5e0930ebfe4af59d4447c37c451e139b3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32902360,
        "transactionHash": "0xc71a70f27428d919dfc4094867cbbba5e0930ebfe4af59d4447c37c451e139b3",
        "address": "0x06A5c9f5E4908a16B2D2Eb1a511388934f3E462e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d3bd47c94b340e0151376abf9d76c74c471e213"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb005226114f06ec062b7a3bd960be7b4d2db7092c92f9cd625758613bc31931e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 32902360,
        "transactionHash": "0xc71a70f27428d919dfc4094867cbbba5e0930ebfe4af59d4447c37c451e139b3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008d3bd47c94b340e0151376abf9d76c74c471e213",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000b914ac143c941000000000000000000000000000000000000000000000000017b22d440721d50c700000000000000000000000000000000000000000000038572cc5dfbd8d19f090000000000000000000000000000000000000000000000016f91897f2e540fc70000000000000000000000000000000000000000000003857e5da8bd1c9ae009",
        "logIndex": 1,
        "blockHash": "0xb005226114f06ec062b7a3bd960be7b4d2db7092c92f9cd625758613bc31931e"
      }
    ],
    "blockNumber": 32902360,
    "cumulativeGasUsed": "2083824",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc4b6Cd0bc2BBF47077d321d3c878c31b01e17aD5"
  ],
  "numDeployments": 1,
  "solcInputHash": "540ab05e3117b642ab74c32eb85f094d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeDelivery\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.Package[3]\",\"name\":\"packages\",\"type\":\"tuple[3]\"}],\"name\":\"createGig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newOrderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gigId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeDelivery\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.Package\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"fetchContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gigId\",\"type\":\"uint256\"}],\"name\":\"getGigById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gigId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"failedSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"reviewIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeDelivery\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.Package[3]\",\"name\":\"packages\",\"type\":\"tuple[3]\"}],\"internalType\":\"struct OutputTypes.GigOutput\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGigList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gigId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"failedSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"reviewIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeDelivery\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.Package[3]\",\"name\":\"packages\",\"type\":\"tuple[3]\"}],\"internalType\":\"struct OutputTypes.GigOutput[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGigsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getInvitersAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasProtocolRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gigId\",\"type\":\"uint256\"},{\"internalType\":\"contract IUser\",\"name\":\"UserContract\",\"type\":\"address\"}],\"name\":\"isGigOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isStillBuyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isStillSeller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"_providerAddress\",\"type\":\"address\"}],\"name\":\"setProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Blockswan\",\"details\":\"To be covered by a proxy contract, owned by the addressProvider of the specific marketplaceAll admin functions are callable by the protocolConfigurator contract defined also in the   addressProvider*\",\"kind\":\"dev\",\"methods\":{\"ADDRESSES_PROVIDER()\":{\"returns\":{\"_0\":\"The address of the AddressProvider\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"provider\":\"The address of the AddressProvider\"}},\"fetchContract(bytes32)\":{\"params\":{\"_name\":\"the bytes32 name of the contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setProvider(address)\":{\"params\":{\"_providerAddress\":\"The address of the AddressProvider\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Gig contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ADDRESSES_PROVIDER()\":{\"notice\":\"Returns the contract address of the IAddressProvider\"},\"fetchContract(bytes32)\":{\"notice\":\"fetch the contract address from the ADDRESSS_PROVIDERthrows error if address === 0\"},\"kill()\":{\"notice\":\"kill the current address provider, only callable by the AddressProvider\"},\"setProvider(address)\":{\"notice\":\"set the provider address of the ProviderContract\"}},\"notice\":\"User data within an Blockswan protocol's marketplace - Users can:   # create gigs   # edit gigs   # invite users   # choose affiliates\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/gig/Gig.sol\":\"Gig\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/imports/aave/contracts/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/*^\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary PercentageMath {\\n    // Maximum percentage factor (100.00%)\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     **/\\n    function percentMul(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        assembly {\\n            if iszero(\\n                or(\\n                    iszero(percentage),\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\\n                PERCENTAGE_FACTOR\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     **/\\n    function percentDiv(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(\\n                                sub(not(0), div(percentage, 2)),\\n                                PERCENTAGE_FACTOR\\n                            )\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\\n                percentage\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x25d639d6a4c8aca57f987e5d94d761273dff9df8dcdeb7c8cefbb6250ecec927\",\"license\":\"BUSL-1.1\"},\"contracts/imports/gnosis/contracts/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../../openzeppelin/contracts/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developer^\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(from, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(freeMemoryPointer, 36),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTransferResult(\\n        IERC20 token\\n    ) private view returns (bool success) {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n            // Non-standard ERC20 transfer without return.\\n            case 0 {\\n                // NOTE: When the return data size is 0, verify that there\\n                // is code at the address. This is done in order to maintain\\n                // compatibility with Solidity calling conventions.\\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                if iszero(extcodesize(token)) {\\n                    revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                }\\n\\n                success := 1\\n            }\\n            // Standard ERC20 transfer returning boolean success value.\\n            case 32 {\\n                returndatacopy(0, 0, returndatasize())\\n\\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                // as `true` for a boolean. In order to stay compatible with\\n                // OpenZeppelin's `SafeERC20` library which is known to work\\n                // with the existing ERC20 implementation we care about,\\n                // make sure we return success for any non-zero return value\\n                // from the `transfer*` call.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            default {\\n                revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16a97de85622232442771b5974e025bbac9d4bb56fde737f58f3b363ac09ef5\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/imports/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\",\"keccak256\":\"0x632d89cfbd5134bb48ab9f27f8acb3ef6230858240a06c01860523508cce9502\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n      \\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\",\"keccak256\":\"0xc70dcac795ccbf6d71c8749ad70836deef10bb12af9216d7c63399e11dd00186\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\",\"keccak256\":\"0xbe08f54c573afa66d30bddd5781ad651fa0ac388458375e4c4c3f04cf2baf6b1\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\",\"keccak256\":\"0x6edba116c3de120257f96a0e2cf286645d5b3317a06a20cbf933f1fa2166d7f6\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\",\"keccak256\":\"0x9f78e6c3f521399028621916f4fb097a485c053041141af27c978b67e6fb769a\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbe7e8c250bbebe46299f337b29c535ce00d67fe289eb03d84ebbd74934eec19f\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x3e3b5b4dd5f5483461605d0fa56c249517effc2500a4f6da288d6baabf01ed4d\",\"license\":\"MIT\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {IAccessControlEnumerable} from \\\"../imports/openzeppelin/contracts/IAccessControlEnumerable.sol\\\";\\n\\n/**\\n * @title IACLManager\\n * @author Blockswan\\n * @notice Defines the basic interface for the ACLManager\\n **/\\ninterface IACLManager is IAccessControlEnumerable {\\n    /**\\n     * @notice Set the role as admin of a specific role.\\n     * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\\n     * @param role The role to be managed by the admin role\\n     * @param adminRole The admin role\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0xd78c8b8344352eda17c37b4474398fcf7c2f08c6855c87de8d6e9439e4e1ca16\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressProvider.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title The interface for contracts to interact with the Blockswan Address Provider contract\\ninterface IAddressProvider {\\n    /**\\n     * @dev Emitted when a new marketplaceId is set.\\n     * @param oldMarketplaceId The address of the old marketplaceId\\n     * @param newMarketplaceId The address of the new marketplaceId\\n     */\\n    event MarketplaceIdSet(\\n        string indexed oldMarketplaceId,\\n        string indexed newMarketplaceId\\n    );\\n\\n    /**\\n     * @dev Emitted when a new contract is added to the AddressProvider.\\n     * @param _name The name assigned in the AddressProvider.\\n     * @param _address The address of the new contract\\n     */\\n    event ContractAdded(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a new contract is removed from the AddressProvider.\\n     * @param _name The contract name removed in the AddressProvider.\\n     * @param _address The address of the removed contract\\n     */\\n    event ContractRemoved(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a contract is upgraded in the AddressProvider.\\n     * @param _name The contract name upraded in the AddressProvider.\\n     * @param _oldAddress The old address prior upgrade\\n     * @param _newAddress The new address after upgrade\\n     */\\n    event ContractUpgraded(\\n        bytes32 _name,\\n        address _oldAddress,\\n        address _newAddress\\n    );\\n\\n    /**\\n     * @notice returns contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     * @return contractAddr - address of contract registered under given provider key\\n     */\\n    function getContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice overloaded getContract to return explicit version of contract */\\n    function getContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    function getContractVersionCount(\\n        bytes32 _name\\n    ) external view returns (uint);\\n\\n    /**\\n     * @dev addContract does two things:\\n     *      1.) registers the address of given ProviderContract in the registry\\n     *      2.) sets the registry address in given ProviderContract so only\\n     *          the registry can call functions on given contract\\n     */\\n    function addContract(bytes32 _name, address _address) external;\\n\\n    /**\\n     * @dev removes contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     */\\n    function removeContract(bytes32 _name) external;\\n\\n    /**\\n     * @notice replaces contract address registered under given key with provided address\\n     * @param _name - registry key for lookup\\n     * @param _newAddress - new contract address to register under given key\\n     */\\n    function upgradeContract(bytes32 _name, address _newAddress) external;\\n}\\n\",\"keccak256\":\"0x46fd1f2889b6a5fbd60209f90b44ced918175d5ef3b05e7d8dd526a4afd77bdc\",\"license\":\"MIT\"},\"contracts/interfaces/IBSWAN.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IBSWAN\\n * @author Blockswan\\n * @notice Defines the basic interface for the Blockswan Trust\\n **/\\ninterface IBSWAN is IERC20 {\\n    /**\\n     * @notice Update the DAT config.\\n     * @param _newOwner The new owner of the DAT\\n     * @param _revenueCommitmentBasisPoints the share of revenues tranfered to the buyback reserve\\n     * @param _minInvestment the min investment required in currency value\\n     */\\n    function updateConfig(\\n        address payable _newOwner,\\n        uint256 _revenueCommitmentBasisPoints,\\n        uint256 _minInvestment\\n    ) external;\\n\\n    /**\\n     * @notice Update the DAT config.\\n     * @param _currencyValue the quantity of currency to buy\\n     * @return tokenValue the quantity of BSWAN bought for the _currencyValue\\n     */\\n    function estimateBuyValue(\\n        uint256 _currencyValue\\n    ) external view returns (uint256);\\n\\n    /** @notice Purchase BSWAN tokens with the given amount of currency.\\n     * @param _to The account to receive the BSWAN tokens from this purchase.\\n     * @param _currencyValue How much currency to spend in order to buy BSWAN.\\n     * @param _minTokensBought Buy at least this many BSWAN tokens or the transaction reverts.\\n     * @dev _minTokensBought is necessary as the price will change if some elses transaction mines after\\n     * yours was submitted.\\n     */\\n    function buy(\\n        address _to,\\n        uint256 _currencyValue,\\n        uint256 _minTokensBought\\n    ) external payable;\\n\\n    /// Pay\\n    function estimatePayValue(\\n        uint256 _currencyValue\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Pay the organization on-chain.\\n     * @param _to The account which receives tokens for the contribution. If this address\\n     * is not authorized to receive tokens then they will be sent to the beneficiary account instead.\\n     * @param _currencyValue How much currency which was paid.\\n     */\\n    function pay(address _to, uint _currencyValue) external payable;\\n\\n    /// @notice The address of the token used as reserve in the bonding curve\\n    /// (e.g. the DAI contract)\\n    function currency() external returns (IERC20);\\n}\\n\",\"keccak256\":\"0xb07e5fcfdebb6b3f050ad1f172eb7923d06ce3727af5528f4acc236f87d9b146\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {IAccessControlEnumerable} from \\\"../imports/openzeppelin/contracts/IAccessControlEnumerable.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IProtocolConfigurator\\n * @author Blockswan\\n * @notice Defines the basic interface for the ProtocolConfigurator\\n **/\\ninterface IProtocolConfigurator {\\n    /**\\n     * @notice Retrieves the parameters when enterering the protocol as a buyer.\\n     * @return parameters The paramaters  when accessing the role status\\n     */\\n    function getBuyerEntryParams()\\n        external\\n        view\\n        returns (DataTypes.EntryParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getBuyerEntryParams(\\n        uint256 version\\n    ) external view returns (DataTypes.EntryParams memory);\\n\\n    /**\\n     * @notice Update the  parameters when enterering the protocol as as buyer.\\n     * @param newParams The new buyer entry paramaters\\n     */\\n    function updateBuyerEntryParams(\\n        DataTypes.EntryParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when enterering the protocol as a seller.\\n     * @return parameters The paramaters  when accessing the role status\\n     */\\n    function getSellerEntryParams()\\n        external\\n        view\\n        returns (DataTypes.EntryParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getSellerEntryParams(\\n        uint256 version\\n    ) external view returns (DataTypes.EntryParams memory);\\n\\n    /**\\n     * @notice Update the  parameters when enterering the protocol as as seller.\\n     * @param newParams The new buyer entry paramaters\\n     */\\n    function updateSellerEntryParams(\\n        DataTypes.EntryParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the retribution percentage values of the protocol.\\n     * @return retributions The retribution percentage values of the protocol.\\n     */\\n    function getRetributionParams()\\n        external\\n        view\\n        returns (DataTypes.RetributionParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getRetributionParams(\\n        uint256 version\\n    ) external view returns (DataTypes.RetributionParams memory);\\n\\n    /**\\n     * @notice Update the retributin  parameters of the protocol.\\n     * @param newParams The new retribution paramaters\\n     */\\n    function updateRetributionParams(\\n        DataTypes.RetributionParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when creating a gig.\\n     * @return parameters The parameters when creating a gig\\n     */\\n    function getGigCreationParams()\\n        external\\n        view\\n        returns (DataTypes.CreationParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getGigCreationParams(\\n        uint256 version\\n    ) external view returns (DataTypes.CreationParams memory);\\n\\n    /**\\n     * @notice Update the gig creation parameters of the protocol.\\n     * @param newParams The new gig creation paramaters\\n     */\\n    function updateGigCreationParams(\\n        DataTypes.CreationParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when creating an order.\\n     * @return parameters The parameters when creating an order.\\n     */\\n    function getOrderCreationParams()\\n        external\\n        view\\n        returns (DataTypes.FeeParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getOrderCreationParams(\\n        uint256 version\\n    ) external view returns (DataTypes.FeeParams memory);\\n\\n    /**\\n     * @notice Update the order creation parameters of the protocol.\\n     * @param newParams The new order creation paramaters\\n     */\\n    function updateOrderCreationParams(\\n        DataTypes.FeeParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters fees for the seller after an order.\\n     * @return parameters The seller parameters upon odder completion\\n     */\\n    function getSellerOrderFees()\\n        external\\n        view\\n        returns (DataTypes.FeeParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getSellerOrderFees(\\n        uint256 version\\n    ) external view returns (DataTypes.FeeParams memory);\\n\\n    /**\\n     * @notice Update the order creation parameters of the protocol applied to a seller.\\n     * @param newParams The new sellerr-applied order creation paramaters\\n     */\\n    function updateSellerOrderFees(\\n        DataTypes.FeeParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the protocol delay timestamp.\\n     * @return parameters The delay timestamp parametes\\n     */\\n    function getDelayTimestamp()\\n        external\\n        view\\n        returns (DataTypes.DelayTimestamp memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getDelayTimestamp(\\n        uint256 version\\n    ) external view returns (DataTypes.DelayTimestamp memory);\\n\\n    /**\\n     * @notice Update the delays timestamp parameters of the protocol.\\n     * @param newParams The new order creation paramaters\\n     */\\n    function updateDelayTimestamp(\\n        DataTypes.DelayTimestamp memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the protocol dispute parameters.\\n     * @return parameters The dispute parameters\\n     */\\n    function getDisputeParams()\\n        external\\n        view\\n        returns (DataTypes.DisputeParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getDisputeParams(\\n        uint256 version\\n    ) external view returns (DataTypes.DisputeParams memory);\\n\\n    /**\\n     * @notice Update the dispute parameters of the protocol.\\n     * @param newParams The new dispute paramaters\\n     */\\n    function updateDisputeParams(\\n        DataTypes.DisputeParams memory newParams\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb8bbe515aae7479fdbe271803de8544045a36c6969f52b76a998701af5d153cc\",\"license\":\"MIT\"},\"contracts/interfaces/IProviderContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\n\\ninterface IProviderContract {\\n    /**\\n     * @notice set the provider address of the ProviderContract\\n     * @param _providerAddress The address of the AddressProvider\\n     */\\n    function setProvider(IAddressProvider _providerAddress) external;\\n\\n    /**\\n     * @notice fetch the contract address from the ADDRESSS_PROVIDER\\n     * @notice throws error if address === 0\\n     * @param _name the bytes32 name of the contract\\n     */\\n    function fetchContract(bytes32 _name) external view returns (address);\\n\\n    /**\\n     * @notice kill the current address provider, only callable by the AddressProvider\\n     */\\n    function kill() external;\\n\\n    /**\\n     * @notice Returns the contract address of the IAddressProvider\\n     * @return The address of the AddressProvider\\n     */\\n    function ADDRESSES_PROVIDER() external view returns (IAddressProvider);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the protocol_admin role\\n    //  * @return The id of the protocol_admin role\\n    //  */\\n    // function PROTOCOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the buyer role\\n    //  * @return The id of the buyer role\\n    //  */\\n    // function BUYER_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the seller role\\n    //  * @return The id of the seller role\\n    //  */\\n    // function SELLER_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the judge role\\n    //  * @return The id of the judge role\\n    //  */\\n    // function JUDGE_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the Blacklist role\\n    //  * @return The id of the Blacklist role\\n    //  */\\n    // function BLACKLIST_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the whitelist role\\n    //  * @return The id of the whitelist role\\n    //  */\\n    // function WHITELIST_ROLE() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xebb668acafab498b830a453d31cb524d4472e8f73905a214c27228f75e7a955d\",\"license\":\"MIT\"},\"contracts/interfaces/IUser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../protocol/libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../protocol/libraries/types/InputTypes.sol\\\";\\n\\n/**\\n * @title IUser\\n * @author Blockswan\\n * @notice Defines the basic interface for an blockswan user.\\n **/\\ninterface IUser {\\n    /**\\n     * @dev Emitted when a new user is created.\\n     * @param userId The id of the user\\n     * @param userAddress The wallet addresss of the user\\n     * @param userData The data associated with the user\\n     */\\n    event UserAdded(\\n        uint256 indexed userId,\\n        address indexed userAddress,\\n        InputTypes.CreateUserInput userData\\n    );\\n\\n    /**\\n     * @dev Emitted when an user is edited.\\n     * @param userId The id of the user\\n     * @param userAddress The wallet addresss of the user\\n     * @param userData The data associated with the user\\n     */\\n    event UserEdited(\\n        uint256 indexed userId,\\n        address indexed userAddress,\\n        OutputTypes.UserOutput userData\\n    );\\n\\n    /**\\n     * @notice Returns the user id from a given address.\\n     * @param account The address of the user\\n     * @return userId The userId associated to the account address\\n     **/\\n    function getIdByAddress(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user data.\\n     * @param userId The id of the user.\\n     * @return User The data associated to the user it\\n     **/\\n    function getUserById(\\n        uint256 userId\\n    ) external view returns (OutputTypes.UserOutput memory);\\n\\n    /**\\n     * @notice Returns the user for a given public key.\\n     * @param pubKey The address as parameter.\\n     * @return User the user linked to the public key\\n     **/\\n    function getUserByAddress(\\n        address pubKey\\n    ) external view returns (OutputTypes.UserOutput memory);\\n\\n    /**\\n     * @notice Returns the list of all initialized users.\\n     * @dev It does not include dropped users\\n     * @return A data array of the underlying user.\\n     **/\\n    function getUserList()\\n        external\\n        view\\n        returns (OutputTypes.UserOutput[] memory);\\n\\n    /**\\n     * @notice Returns the current revision of the contract\\n     * @return the current revision\\n     **/\\n    function getUsersCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user wallet address.\\n     * @param userId The id of the user.\\n     * @return userAddress the wallet of the user\\n     **/\\n    function getAddressById(uint256 userId) external view returns (address);\\n\\n    /**\\n     * @notice Create a new users with the msg.sender wallet\\n     * @param metadata the user related information\\n     * @param inviterId the userID of whom invited the newUser\\n     **/\\n    function createUser(string memory metadata, uint256 inviterId) external;\\n\\n    /**\\n     * @notice retrieves the inviters wallet for a given wallet account\\n     * @param account the wallet to get the inviters from\\n     * @return address the pubkey of inviter0\\n     * @return address the pubkey of inviter1\\n     **/\\n    function getInvitersByUserAddress(\\n        address account\\n    ) external view returns (address, address);\\n\\n    /**\\n     * @notice add the gig id to the user gigIds set.\\n     * @param caller the wallet creating the gig.\\n     * @param newGigId the new gig id.\\n     * @return success the relation has been addded.\\n     **/\\n    function createGig(\\n        address caller,\\n        uint256 newGigId\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice add the order id to the user buyerOrderIds set.\\n     * @param buyerId the id of the buyer\\n     * @param newOrderId the new gig orderId.\\n     * @return success the relation has been addded.\\n     **/\\n    function createBuyerOrder(\\n        uint256 buyerId,\\n        uint256 newOrderId\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice retrieves the inviters wallet for a given userId\\n     * @param userId the user id to get the inviters from\\n     * @return address the pubkey of inviter0\\n     * @return address the pubkey of inviter1\\n     **/\\n    function getInvitersById(\\n        uint256 userId\\n    ) external view returns (address, address);\\n\\n    /**\\n     * @notice return true if the gigId is owned by the given userId\\n     * @param userId the user id to check if he own the gig\\n     * @param gigId the gigId\\n     * @return bool if the gigId is owned by the given userId\\n     **/\\n    function isGigOwner(\\n        uint256 userId,\\n        uint256 gigId\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x628d9f386d3ecb2d8de7171eba630317a4e9a90fe531f228438cb00a31dbb59b\",\"license\":\"MIT\"},\"contracts/interfaces/IXP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IXP\\n * @author Blockswan\\n * @notice Defines the basic interface for the Experience\\n **/\\ninterface IXP is IERC20 {\\n    /**\\n     * @notice set the xp amount to earn for a bytes32 key action\\n     * @param xpKey The key associated to the xp to earn\\n     * @param xpToReceive the xp to earn for the key action\\n     */\\n    function setXpAmount(bytes32 xpKey, uint256 xpToReceive) external;\\n\\n    /**\\n     * @notice get the xp amount to earn for a bytes32 key action\\n     * @param xpKey The action key as bytes32\\n     * @return success There is an action matching the key\\n     * @return _amount the xp to earn for the key action\\n     */\\n    function getXpAmount(bytes32 xpKey) external returns (bool, uint256);\\n\\n    /**\\n     * @notice mint the xp amount to earn for a bytes32 key action\\n     * @param xpKey The action key as bytes32\\n     * @param to the addres receiving the XP\\n     */\\n    function mint(bytes32 xpKey, address to) external;\\n}\\n\",\"keccak256\":\"0xb8822f9fc46596a40318b26aaef973805c016c364ddfaadc338e36fa1d93dad9\",\"license\":\"MIT\"},\"contracts/protocol/configuration/ProviderContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {Ownable} from \\\"../../imports/openzeppelin/contracts/Ownable.sol\\\";\\nimport {IERC20} from \\\"../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {IAddressProvider} from \\\"../../interfaces/IAddressProvider.sol\\\";\\nimport {IProtocolConfigurator} from \\\"../../interfaces/IProtocolConfigurator.sol\\\";\\n\\nimport {IProviderContract} from \\\"../../interfaces/IProviderContract.sol\\\";\\nimport {IACLManager} from \\\"../../interfaces/IACLManager.sol\\\";\\nimport {IBSWAN} from \\\"../../interfaces/IBSWAN.sol\\\";\\nimport {IXP} from \\\"../../interfaces/IXP.sol\\\";\\nimport {IUser} from \\\"../../interfaces/IUser.sol\\\";\\nimport {InputTypes} from \\\"../libraries/types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {RegistryKeys} from \\\"../libraries/helpers/RegistryKeys.sol\\\";\\nimport {RoleKeys} from \\\"../libraries/helpers/RoleKeys.sol\\\";\\n\\n/**\\n * @title Parent class to all contracts used to check that a contract is registerable\\n * @notice ProviderContract is Ownable so the deployer can re-register it against new registries\\n * @dev The Provider uses this to talk to all contracts that inherit from this contract.\\n */\\n\\ncontract ProviderContract is Ownable, IProviderContract {\\n    using GPv2SafeERC20 for IERC20;\\n    IAddressProvider public ADDRESS_PROVIDER;\\n\\n    uint256 public MAX_UINT = 2 ** 256 - 1;\\n\\n    /// @notice all contracts that inherit from ProviderContract are automatically Ownable()\\n    /// @dev internal constructor makes ProviderContract abstract\\n    constructor(IAddressProvider provider) Ownable() {\\n        require(\\n            address(provider) != address(0x00),\\n            Errors.ZERO_ADDRESS_IS_INVALID\\n        );\\n\\n        ADDRESS_PROVIDER = IAddressProvider(provider);\\n    }\\n\\n    /// @notice only allow  contracts to be called by the respective agent.\\n    ///     i.e. GigStorage methods can only be invoked by GigFactory.\\n    modifier onlyProvider(bytes32 _name) {\\n        require(\\n            _msgSender() == fetchContract(_name),\\n            Errors.ONLY_PROVIDER_ALLOWED\\n        );\\n        _;\\n    }\\n\\n    /// @notice only allow function contracts to be called by the respective role.\\n    ///     i.e. GigStorage methods can only be invoked by BUYER_ROLE.\\n    modifier onlyProtocolRole(bytes32 _role) {\\n        require(\\n            hasProtocolRole(_role, _msgSender()),\\n            \\\"Requires msg.sender has role\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyStillBuyer() {\\n        require(isStillBuyer(_msgSender()), Errors.ONLY_BUYER);\\n        _;\\n    }\\n\\n    modifier onlyStillSeller() {\\n        require(isStillSeller(_msgSender()), Errors.ONLY_SELLER);\\n        _;\\n    }\\n\\n    function hasProtocolRole(\\n        bytes32 _role,\\n        address account\\n    ) public view returns (bool) {\\n        bool hasRole = IACLManager(fetchContract(RegistryKeys.ACL_MANAGER))\\n            .hasRole(_role, account);\\n        return hasRole;\\n    }\\n\\n    // function hasProtocolRoles(\\n    //     bytes32[] memory _roles,\\n    //     address account\\n    // ) public view returns (bool) {\\n    //     for (uint256 i; i < _roles.length; i++) {\\n    //         bool hasRole = IACLManager(fetchContract(RegistryKeys.ACL_MANAGER))\\n    //             .hasRole(_roles[i], account);\\n    //         if (hasRole) {\\n    //             return true;\\n    //         }\\n    //     }\\n    //     return false;\\n    // }\\n\\n    function isStillBuyer(address account) public view returns (bool) {\\n        return\\n            hasProtocolRole(RoleKeys.BUYER_ROLE, account) &&\\n            IUser(fetchContract(RegistryKeys.USER))\\n                .getUserByAddress(account)\\n                .buyerUntil >\\n            block.timestamp;\\n    }\\n\\n    function isStillSeller(address account) public view returns (bool) {\\n        return\\n            hasProtocolRole(RoleKeys.SELLER_ROLE, account) &&\\n            IUser(fetchContract(RegistryKeys.USER))\\n                .getUserByAddress(account)\\n                .sellerUntil >\\n            block.timestamp;\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function setProvider(IAddressProvider _providerAddress) public override {\\n        require(\\n            address(_providerAddress) == address(0x00) ||\\n                address(ADDRESS_PROVIDER) == msg.sender ||\\n                this.owner() == msg.sender,\\n            \\\"Can only be called if addressesProvider is empty, msg.sender or owner\\\"\\n        );\\n        ADDRESS_PROVIDER = _providerAddress;\\n    }\\n\\n    function fetchContract(\\n        bytes32 _name\\n    ) public view override returns (address) {\\n        return address(IAddressProvider(ADDRESS_PROVIDER).fetchContract(_name));\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function kill() external override {\\n        assert(msg.sender == address(ADDRESS_PROVIDER));\\n        selfdestruct(payable(address(ADDRESS_PROVIDER)));\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        override\\n        returns (IAddressProvider)\\n    {\\n        return ADDRESS_PROVIDER;\\n    }\\n\\n    function grantProtocolRole(bytes32 _role, address account) internal {\\n        IACLManager(fetchContract(RegistryKeys.ACL_MANAGER)).grantRole(\\n            _role,\\n            account\\n        );\\n    }\\n\\n    function approve(\\n        address erc20\\n    ) public onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        address dat = fetchContract(RegistryKeys.DAT);\\n        IERC20(erc20).approve(dat, MAX_UINT);\\n    }\\n\\n    function _pay(\\n        InputTypes.ProcessPaymentInput memory params,\\n        IBSWAN dat\\n    ) internal {\\n        dat.pay(params.inviter0, params.inviter0Rewards);\\n        dat.pay(params.inviter1, params.inviter1Rewards);\\n        dat.pay(address(0), params.remainingRewards);\\n    }\\n\\n    function _processPayment(\\n        InputTypes.ProcessPaymentInput memory params\\n    ) internal {\\n        IBSWAN dat = IBSWAN(fetchContract(RegistryKeys.DAT));\\n        uint256 total = params.inviter0Rewards +\\n            params.inviter1Rewards +\\n            params.remainingRewards;\\n        IERC20(dat.currency()).safeTransferFrom(\\n            params.caller,\\n            address(this),\\n            total\\n        );\\n        _pay(params, dat);\\n    }\\n\\n    function _giveXP(bytes32 _key, address _to) internal {\\n        IXP(fetchContract(RegistryKeys.XP)).mint(_key, _to);\\n    }\\n\\n    function getProtocolRetributionParams()\\n        internal\\n        view\\n        returns (DataTypes.RetributionParams memory)\\n    {\\n        return\\n            IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            ).getRetributionParams();\\n    }\\n\\n    function getProtocolDelayTimestamp()\\n        internal\\n        view\\n        returns (DataTypes.DelayTimestamp memory)\\n    {\\n        return\\n            IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            ).getDelayTimestamp();\\n    }\\n\\n    function isGigOwner(\\n        uint256 userId,\\n        uint256 gigId,\\n        IUser UserContract\\n    ) public view returns (bool) {\\n        return UserContract.isGigOwner(userId, gigId);\\n    }\\n}\\n\",\"keccak256\":\"0xe89f0da0eaa29f3c35cccd741f92e6ba07819973ff63dd30d3d3ecaa8da787a0\",\"license\":\"MIT\"},\"contracts/protocol/gig/Gig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Counters} from \\\"../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {EnumerableSet} from \\\"../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {InputTypes} from \\\"../libraries/types/InputTypes.sol\\\";\\nimport {OutputTypes} from \\\"../libraries/types/OutputTypes.sol\\\";\\nimport {GigLogic} from \\\"../libraries/logics/GigLogic.sol\\\";\\nimport {InviterLogic} from \\\"../libraries/logics/InviterLogic.sol\\\";\\nimport {GigStorage} from \\\"./GigStorage.sol\\\";\\nimport {ProviderContract} from \\\"../configuration/ProviderContract.sol\\\";\\nimport {IAddressProvider} from \\\"../../interfaces/IAddressProvider.sol\\\";\\nimport {IUser} from \\\"../../interfaces/IUser.sol\\\";\\nimport {IBSWAN} from \\\"../../interfaces/IBSWAN.sol\\\";\\n\\nimport {IProtocolConfigurator} from \\\"../../interfaces/IProtocolConfigurator.sol\\\";\\nimport {XPKeys} from \\\"../libraries/helpers/XPKeys.sol\\\";\\nimport {RegistryKeys} from \\\"../libraries/helpers/RegistryKeys.sol\\\";\\n\\n/**\\n * @title Gig contract\\n * @author Blockswan\\n * @notice  User data within an Blockswan protocol's marketplace\\n * - Users can:\\n *   # create gigs\\n *   # edit gigs\\n *   # invite users\\n *   # choose affiliates\\n * @dev To be covered by a proxy contract, owned by the addressProvider of the specific marketplace\\n * @dev All admin functions are callable by the protocolConfigurator contract defined also in the\\n *   addressProvider\\n **/\\ncontract Gig is GigStorage, ProviderContract {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using GigLogic for DataTypes.Gig;\\n    using Counters for Counters.Counter;\\n\\n    /**\\n     * @dev Constructor.\\n     * @param provider The address of the AddressProvider\\n     */\\n    constructor(IAddressProvider provider) ProviderContract(provider) {}\\n\\n    function getGigsCount() public view virtual returns (uint256) {\\n        uint256 count = _gigIds.length();\\n        return count;\\n    }\\n\\n    function getGigById(\\n        uint256 gigId\\n    ) public view virtual returns (OutputTypes.GigOutput memory) {\\n        DataTypes.Gig storage gig = GigLogic.getGigById(gigId, _gigs);\\n        return gig.format(gigId);\\n    }\\n\\n    function getGigList()\\n        external\\n        view\\n        virtual\\n        returns (OutputTypes.GigOutput[] memory)\\n    {\\n        uint256 len = getGigsCount();\\n        OutputTypes.GigOutput[] memory gigList = new OutputTypes.GigOutput[](\\n            len\\n        );\\n        for (uint256 i = 0; i < len; i++) {\\n            gigList[i] = getGigById(i);\\n        }\\n        return gigList;\\n    }\\n\\n    function createGig(\\n        string memory metadata,\\n        DataTypes.Package[3] memory packages\\n    ) external onlyStillSeller {\\n        address caller = _msgSender();\\n        uint256 newId = getGigsCount();\\n        bool isCreated = GigLogic.executeCreateGig(\\n            _gigIds,\\n            _gigs,\\n            InputTypes.CreateGigInput({\\n                newId: newId,\\n                packages: packages,\\n                metadata: metadata\\n            })\\n        );\\n        bool relationSuccess = IUser(fetchContract(RegistryKeys.USER))\\n            .createGig(caller, newId);\\n        require(isCreated && relationSuccess, \\\"failed to create gig\\\");\\n        _giveXP(XPKeys.CREATE_GIG, caller);\\n        (address inviter0, address inviter1) = getInvitersAddresses(caller);\\n        DataTypes.RetributionParams\\n            memory retributionParams = getProtocolRetributionParams();\\n        DataTypes.CreationParams\\n            memory gigCreationParams = getGigCreationParams();\\n        OutputTypes.CalcInvitersRewardsOutput memory rewards = InviterLogic\\n            .calcInvitersRewards(\\n                InputTypes.CalcInvitersRewardsInput({\\n                    currencyValue: gigCreationParams.currencyValue,\\n                    affiliateShare: retributionParams.affiliate,\\n                    lvl0AffiliateShare: retributionParams.lvl0AffiliateShare\\n                })\\n            );\\n        _processPayment(\\n            InputTypes.ProcessPaymentInput({\\n                caller: caller,\\n                inviter0: inviter0,\\n                inviter1: inviter1,\\n                inviter0Rewards: rewards.inviter0Rewards,\\n                inviter1Rewards: rewards.inviter1Rewards,\\n                remainingRewards: rewards.remainingRewards\\n            })\\n        );\\n    }\\n\\n    function getInvitersAddresses(\\n        address account\\n    ) public view returns (address, address) {\\n        return\\n            IUser(fetchContract(RegistryKeys.USER)).getInvitersByUserAddress(\\n                account\\n            );\\n    }\\n\\n    function getGigCreationParams()\\n        internal\\n        view\\n        returns (DataTypes.CreationParams memory)\\n    {\\n        return\\n            IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            ).getGigCreationParams();\\n    }\\n\\n    function createOrder(\\n        uint256 newOrderId,\\n        uint256 gigId,\\n        uint256 packageId\\n    )\\n        external\\n        onlyProvider(RegistryKeys.ORDER)\\n        returns (bool, string memory, DataTypes.Package memory)\\n    {\\n        DataTypes.Gig storage gig = GigLogic.getGigById(gigId, _gigs);\\n        require(_isCorrectPackage(gig.packages[packageId]), \\\"Invalid Package\\\");\\n        bool success = gig.executeCreateOrder(newOrderId);\\n        return (success, gig.metadata, gig.packages[packageId]);\\n    }\\n\\n    function _isCorrectPackage(\\n        DataTypes.Package memory package\\n    ) internal pure returns (bool) {\\n        return package.price > 0 && package.timeDelivery > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x57e4418dc8fb1e6b76dfd46c0ff6c1e4b2f6063eecdfd9e847c125453c864071\",\"license\":\"MIT\"},\"contracts/protocol/gig/GigStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title GigStorage\\n * @author Blockswan\\n * @notice Contract used as storage of the gig contract.\\n * @dev It defines the storage layout of the gig contract.\\n */\\ncontract GigStorage {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    // set of gig Ids\\n    EnumerableSet.UintSet internal _gigIds;\\n\\n    // Map of the gig id to the gig data (gigId => Gig)\\n    mapping(uint256 => DataTypes.Gig) internal _gigs;\\n}\\n\",\"keccak256\":\"0x6c15666cbf088d3efc73357a633764edeb423558a05d7e7543534b27f29a2bf0\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors  library\\n * @author Blockswan\\n * @notice Defines the error messages emitted by the different contracts of the Blockswan protocol\\n */\\nlibrary Errors {\\n    string public constant INVALID_ADDRESS_PROVIDER_ID = \\\"1\\\"; // The addresses provider is not valid\\n    string public constant ADDRESS_PROVIDER_ALREADY_ADDED = \\\"2\\\"; // This addresses provider already exists\\n    string public constant ADDRESS_PROVIDER_NOT_REGISTERED = \\\"3\\\"; // 'This addresses provider is not registered'\\n    string public constant CONTRACT_NAME_ALREADY_USED = \\\"4\\\"; // 'Requires that given _name does not already have non-zero registered contract address'\\n    string public constant ZERO_ADDRESS_IS_INVALID = \\\"5\\\"; // the address provided is 0x00\\n    string public constant INDEX_OUT_OF_RANGE = \\\"6\\\"; // the index provided is out of range\\n    string public constant ADDRESS_ALREADY_USED = \\\"7\\\"; // 'The address provided has already been unsed to initialise an account'\\n    string public constant INVALID_USER_ID = \\\"8\\\"; // 'The userId is incorrect'\\n    string public constant RESTRICTED_TO_BUYER = \\\"9\\\"; // this function can't  be called by buyers\\n    string public constant INVALID_INVITER_ID = \\\"10\\\"; // The inviter ID provided is incorrect\\n    string public constant FAILED_BECOMING_BUYER = \\\"11\\\"; // The execution to becomeBuyer failed\\n    string public constant RESTRICTED_TO_SELLER = \\\"12\\\"; // this function can't  be called by sellers\\n    string public constant FAILED_BECOMING_SELLER = \\\"13\\\"; // The execution to becomeSeller failed\\n    string public constant NO_MATCHING_XP_KEY = \\\"14\\\"; // There is no xp value to give for this byte32\\n    string public constant GIG_ID_ALREADY_EXISING = \\\"15\\\"; // There is already an id for this gig.\\n    string public constant ONLY_SELLER = \\\"16\\\"; // Only account with the seller role can call the functions\\n    string public constant ONLY_BUYER = \\\"17\\\"; // Only buyers can call those functions.\\n    string public constant NOT_GIG_OWNER = \\\"18\\\"; // The id provided does not match with the gig owner id\\n    string public constant CALLER_NOT_SELLER_ID = \\\"19\\\"; // The seller id provided is not matching with the account address calling the function\\n    string public constant CALLER_NOT_BUYER_ID = \\\"20\\\"; // The buyer id provided is not matching with the account address calling the function\\n    string public constant NOT_ORDER_SELLER = \\\"21\\\"; // The id provided is not the order seller\\n    string public constant NOT_ORDER_BUYER = \\\"22\\\"; // The id provided is not the order buyer\\n    string public constant INVALID_ORDER_STATE = \\\"23\\\"; // The function can't be called under the current order state\\n    string public constant SELF_REFUND_DELAY_NOT_OVER = \\\"24\\\"; // The self refund delay is not over\\n    string public constant NOT_ORDER_ACTOR = \\\"25\\\"; // The account address calling the function is not matching with the buyerId nor sellerId.\\n    string public constant DISPUTE_NOT_CREATED = \\\"26\\\"; // The dispute has not been created yet\\n    string public constant JURY_STAKE_NOT_ENOUGH = \\\"27\\\"; // The jury stake is not enough\\n    string public constant FAILED_TO_STAKE_JURY = \\\"28\\\"; // The jury stake failed\\n    string public constant FAILED_TO_WITHDRAW_JURY = \\\"29\\\"; // The jury withdraw failed\\n    string public constant ROUND_EVIDENCE_ALREADY_SUBMITTED = \\\"30\\\"; // The evidence has already been submitted\\n    string public constant EVIDENCE_NOT_SUBMITTED = \\\"31\\\"; // The evidence has not been submitted\\n    string public constant DS_EVIDENCE_PERIOD_OVER = \\\"32\\\"; // The evidence period is over\\n    // string public constant DS_VOTING_PERIOD_OVER = \\\"33\\\"; // The voting period is over\\n    // string public constant DS_VOTING_PERIOD_NOT_OVER = \\\"34\\\"; // The voting period is not over\\n    // string public constant DS_VOTING_PERIOD_NOT_STARTED = \\\"35\\\"; // The voting period has not started yet\\n    string public constant ONLY_PROVIDER_ALLOWED = \\\"36\\\"; // Only the provider can call this function\\n    string public constant DS_EVIDENCE_SENDER_NOT_PARTY = \\\"37\\\"; // The sender is not a party of the dispute\\n    string public constant CALLER_NOT_USER = \\\"38\\\"; // The caller is not the user Id\\n    string public constant DS_EVIDENCE_ROLE_NOT_VALID = \\\"39\\\"; // The role is not valid\\n    string public constant RD_ROUND_DOES_NOT_EXIST = \\\"40\\\"; // The round does not exist\\n    string public constant DS_IN_EXECUTION_PERIOD = \\\"46\\\"; //     The dispute is in execution state\\n    string public constant VOTE_REVEAL_INCORRECT = \\\"47\\\"; //     The vote reveal is incorrect\\n    string public constant ROUND_VOTE_ALREADY_COMMITED = \\\"48\\\"; //     The vote has already been commited\\n    string public constant ROUND_VOTE_NOT_COMMITED = \\\"49\\\"; //     The vote has not been commited\\n    string public constant ROUND_VOTE_ALREADY_REVEALED = \\\"50\\\"; //     The vote has already been revealed\\n    string public constant RD_ACCOUNT_NOT_DRAWN_JUROR = \\\"51\\\"; //     The account is not a drawn juror\\n    string public constant DS_COMMIT_STATE_REQUIRED = \\\"52\\\"; //    The dispute is not in commit state\\n    string public constant DS_TIME_NOT_PASSED = \\\"53\\\"; //   The time has not passed\\n    string public constant DS_INVALID_STATE = \\\"54\\\"; //   The state is invalid\\n    string public constant VOTE_INVALID_CHOICE = \\\"55\\\"; //  The vote choice is invalid\\n    string public constant DS_NO_COMMITMENTS_MADE_FOR_ROUND = \\\"56\\\"; //  No commitments were made for the round\\n    string public constant DS_NO_VOTES_MADE_FOR_ROUND = \\\"57\\\"; //  No votes were made for the round\\n    string public constant RD_VOTE_NOT_FOUND = \\\"58\\\"; //  The vote was not found\\n    string public constant ROUND_NOT_CLOSED = \\\"59\\\"; //  The round is not closed\\n    string public constant VOTE_INCORRECT = \\\"60\\\"; //  The vote is incorrect\\n    string public constant ROUND_NOT_APPEALED = \\\"61\\\"; //  The round is not appealed\\n    string public constant ROUND_ID_INVALID = \\\"62\\\"; //  The round id is invalid\\n    string public constant CLAIM_NOT_ALLOWED = \\\"63\\\"; //  The claim is not allowed\\n    string public constant ROUND_IS_APPEALED = \\\"64\\\"; //  The round is appealed\\n    string public constant DS_DISPUTE_ALREADY_RULED = \\\"65\\\"; //  The dispute is already ruled\\n}\\n\",\"keccak256\":\"0x2fdca5575c0847027beb5918556b66679442a8bf7ac8119f9c06de7060ab4bb1\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/helpers/RegistryKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary RegistryKeys {\\n    /// REGISTRY\\n    //  ----  CONTRACT ------\\n    bytes32 public constant GIG = \\\"GIG\\\";\\n    bytes32 public constant ORDER = \\\"ORDER\\\";\\n    bytes32 public constant USER = \\\"USER\\\";\\n    bytes32 public constant DISPUTE = \\\"DISPUTE\\\";\\n    bytes32 public constant JURY = \\\"JURY\\\";\\n    bytes32 public constant PROTOCOL_CONFIGURATOR = \\\"PROTOCOL_CONFIGURATOR\\\";\\n    bytes32 public constant DAT = \\\"DAT\\\";\\n    bytes32 public constant ACL_MANAGER = \\\"ACL_MANAGER\\\";\\n    bytes32 public constant DATA_PROVIDER = \\\"DATA_PROVIDER\\\";\\n    bytes32 public constant XP = \\\"XP\\\";\\n    // ---- NON CONTRACT ------\\n    bytes32 public constant ACL_ADMIN = \\\"ACL_ADMIN\\\";\\n\\n    bytes32 public constant TREE_KEY = \\\"Blockswan/SortitionSumTrees\\\";\\n}\\n\",\"keccak256\":\"0x22aa7c202e3cd58ddc3ba544daf7de1dc01306f9b64c0e689f485100e235267e\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/RoleKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary RoleKeys {\\n    // ---- ADMIN ROLES  ------\\n    bytes32 public constant PROTOCOL_ADMIN_ROLE = \\\"PROTOCOL_ADMIN\\\";\\n    bytes32 public constant BUYER_ADMIN_ROLE = \\\"BUYER_ADMIN\\\";\\n    bytes32 public constant SELLER_ADMIN_ROLE = \\\"SELLER_ADMIN\\\";\\n    // ----  ROLES  ------\\n    bytes32 public constant BUYER_ROLE = \\\"BUYER\\\";\\n    bytes32 public constant SELLER_ROLE = \\\"SELLER\\\";\\n    bytes32 public constant JUDGE_ROLE = \\\"JUDGE\\\";\\n    bytes32 public constant BLACKLIST_ROLE = \\\"BLACKLIST\\\";\\n    bytes32 public constant WHITELIST_ROLE = \\\"WHITELIST\\\";\\n    bytes32 public constant XP_GIVER_ROLE = \\\"XP_GIVER\\\";\\n}\\n\",\"keccak256\":\"0x96ba28ef5c4c14bc1ef86a62e3a2bb1ea859abda8a57d053e2d25a335c58aeae\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/XPKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary XPKeys {\\n    bytes32 public constant BECOME_BUYER = \\\"BECOME_BUYER\\\";\\n    bytes32 public constant BECOME_SELLER = \\\"BECOME_SELLER\\\";\\n    bytes32 public constant CREATE_GIG = \\\"CREATE_GIG\\\";\\n    bytes32 public constant CREATE_ORDER = \\\"CREATE_ORDER\\\";\\n    bytes32 public constant PAY_ORDER = \\\"PAY_ORDER\\\";\\n}\\n\",\"keccak256\":\"0xb289d8aee389335698fe40c35b798c8537f15defc239fc539c9a82907065e07e\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/GigDataLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\n\\n/**\\n * @title GigData logic library\\n * @author Blockswan\\n * @notice Implements the logic for gig data specific functions\\n */\\nlibrary GigDataLogic {\\n    using Counters for Counters.Counter;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function updateMetadata(\\n        DataTypes.Gig storage gig,\\n        string memory metadata\\n    ) external returns (bool) {\\n        gig.metadata = metadata;\\n        return true;\\n    }\\n\\n    function setCreatedAt(DataTypes.Gig storage gig) external returns (bool) {\\n        gig.createdAt = block.timestamp;\\n        return true;\\n    }\\n\\n    function addReview(\\n        DataTypes.Gig storage gig,\\n        uint256 reviewId\\n    ) external returns (bool) {\\n        gig.reviewIds.add(reviewId);\\n        return true;\\n    }\\n\\n    function removeReview(\\n        DataTypes.Gig storage gig,\\n        uint256 reviewId\\n    ) external returns (bool) {\\n        gig.reviewIds.remove(reviewId);\\n        return true;\\n    }\\n\\n    function addOrder(\\n        DataTypes.Gig storage gig,\\n        uint256 orderId\\n    ) external returns (bool) {\\n        gig.orderIds.add(orderId);\\n        return true;\\n    }\\n\\n    function removeOrder(\\n        DataTypes.Gig storage gig,\\n        uint256 orderId\\n    ) external returns (bool) {\\n        gig.orderIds.remove(orderId);\\n        return true;\\n    }\\n\\n    function incrSuccessSell(\\n        DataTypes.Gig storage gig\\n    ) external returns (bool) {\\n        gig.successSell.increment();\\n        return true;\\n    }\\n\\n    function incrFailedSell(DataTypes.Gig storage gig) external returns (bool) {\\n        gig.failedSell.increment();\\n        return true;\\n    }\\n\\n    function updatePackages(\\n        DataTypes.Gig storage gig,\\n        DataTypes.Package[3] memory packages\\n    ) external returns (bool) {\\n        for (uint256 i = 0; i < 3; i++) {\\n            gig.packages[i] = packages[i];\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xc0508f17e0c5b091612cac194dbbb165007f73b53883d5f60cfd20d3fb5ef045\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/GigLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\nimport {GigDataLogic} from \\\"./GigDataLogic.sol\\\";\\n\\n/**\\n * @title Gig logic library\\n * @author Blockswan\\n * @notice Implements the logic for gig specific functions\\n */\\nlibrary GigLogic {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using GigDataLogic for DataTypes.Gig;\\n    using Counters for Counters.Counter;\\n\\n    function getGigById(\\n        uint256 gigId,\\n        mapping(uint256 => DataTypes.Gig) storage gigs\\n    ) public view returns (DataTypes.Gig storage) {\\n        return gigs[gigId];\\n    }\\n\\n    function executeCreateGig(\\n        EnumerableSet.UintSet storage gigIds,\\n        mapping(uint256 => DataTypes.Gig) storage gigs,\\n        InputTypes.CreateGigInput memory params\\n    ) external returns (bool) {\\n        bool added = gigIds.add(params.newId);\\n        DataTypes.Gig storage newGig = getGigById(params.newId, gigs);\\n        newGig.setCreatedAt();\\n        newGig.updateMetadata(params.metadata);\\n        newGig.updatePackages(params.packages);\\n        require(added, Errors.GIG_ID_ALREADY_EXISING);\\n        return true;\\n    }\\n\\n    function executeCreateOrder(\\n        DataTypes.Gig storage gig,\\n        uint256 orderId\\n    ) external returns (bool) {\\n        gig.addOrder(orderId);\\n        return true;\\n    }\\n\\n    function format(\\n        DataTypes.Gig storage gig,\\n        uint256 id\\n    ) external view returns (OutputTypes.GigOutput memory) {\\n        return (\\n            OutputTypes.GigOutput({\\n                gigId: id,\\n                metadata: gig.metadata,\\n                createdAt: gig.createdAt,\\n                successSell: gig.successSell.current(),\\n                failedSell: gig.failedSell.current(),\\n                reviewIds: gig.reviewIds.values(),\\n                orderIds: gig.orderIds.values(),\\n                packages: [gig.packages[0], gig.packages[1], gig.packages[2]]\\n            })\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcb74285b7fba2338e0612ef19797049f6ef396142ccd7b7919f04fdd9db87323\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/InviterLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {PercentageMath} from \\\"../../../imports/aave/contracts/PercentageMath.sol\\\";\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title Inviter logic library\\n * @author Blockswan\\n * @notice Implements the logic for inviter specific functions\\n */\\nlibrary InviterLogic {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using PercentageMath for uint256;\\n\\n    function addInviter(\\n        DataTypes.User storage user,\\n        uint256 inviterId\\n    ) external returns (bool) {\\n        user.inviterId = inviterId;\\n        return (true);\\n    }\\n\\n    function getInviterAddress(\\n        DataTypes.User storage user,\\n        EnumerableSet.AddressSet storage userIdToAddress\\n    ) public view returns (address) {\\n        return (userIdToAddress.at(user.inviterId));\\n    }\\n\\n    function getInvitersAddresses(\\n        DataTypes.User storage user,\\n        EnumerableSet.AddressSet storage userIdToAddress,\\n        mapping(address => DataTypes.User) storage users\\n    ) public view returns (address, address) {\\n        address inviter0 = getInviterAddress(user, userIdToAddress);\\n        address inviter1 = getInviterAddress(users[inviter0], userIdToAddress);\\n        return (inviter0, inviter1);\\n    }\\n\\n    function calcInviterRewards(\\n        uint256 currencyValue,\\n        uint256 affiliateShare\\n    ) public pure returns (uint256) {\\n        return currencyValue.percentMul(affiliateShare);\\n    }\\n\\n    function calcInvitersRewards(\\n        InputTypes.CalcInvitersRewardsInput memory params\\n    ) external pure returns (OutputTypes.CalcInvitersRewardsOutput memory) {\\n        uint256 totalRewards = calcInviterRewards(\\n            params.currencyValue,\\n            params.affiliateShare\\n        );\\n        uint256 inviter0Rewards = totalRewards.percentMul(\\n            params.lvl0AffiliateShare\\n        );\\n        uint256 inviter1Rewards = totalRewards - inviter0Rewards;\\n\\n        return (\\n            OutputTypes.CalcInvitersRewardsOutput({\\n                inviter0Rewards: inviter0Rewards,\\n                inviter1Rewards: inviter1Rewards,\\n                remainingRewards: params.currencyValue - totalRewards\\n            })\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3ea5d8ab2ffdc0349f99bea7a352b577eb42ac8508598c93e9f4213b70d38ce3\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\n\\nlibrary DataTypes {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n\\n    enum OrderState {\\n        UNCONFIRMED,\\n        CONFIRMED,\\n        DISPUTED,\\n        DONE\\n    }\\n\\n    enum DisputeState {\\n        EVIDENCE,\\n        COMMIT,\\n        VOTE,\\n        APPEAL,\\n        EXECUTION\\n    }\\n\\n    struct DelayTimestamp {\\n        uint256 selfRefund;\\n        uint256 evidence;\\n        uint256 commit;\\n        uint256 vote;\\n        uint256 appeal;\\n    }\\n\\n    struct User {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        EnumerableSet.UintSet gigIds;\\n        EnumerableSet.UintSet offerIds;\\n        EnumerableSet.UintSet bidIds;\\n        EnumerableSet.UintSet buyerOrderIds;\\n        EnumerableSet.UintSet gigReviewsIds;\\n        EnumerableSet.UintSet userReviewsIds;\\n        EnumerableSet.UintSet reviewsIds;\\n    }\\n\\n    struct Package {\\n        uint256 price;\\n        uint256 timeDelivery;\\n    }\\n\\n    struct Gig {\\n        string metadata;\\n        uint256 createdAt;\\n        bool isPaused;\\n        EnumerableSet.UintSet reviewIds;\\n        EnumerableSet.UintSet orderIds;\\n        Counters.Counter successSell;\\n        Counters.Counter failedSell;\\n        Package[3] packages;\\n    }\\n\\n    struct Invoice {\\n        uint256 price;\\n        uint256 buyerFees;\\n        uint256 sellerFees;\\n        uint256 createdAt;\\n        IERC20 currency;\\n    }\\n\\n    struct Order {\\n        string metadata;\\n        string brief;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        uint256 disputeId;\\n        bool disputed;\\n        Invoice invoice;\\n        OrderState state;\\n        EnumerableSet.UintSet reviewIds;\\n    }\\n\\n    struct Evidence {\\n        uint256 userId;\\n        bytes32 role;\\n        string metadata;\\n    }\\n\\n    struct Vote {\\n        address account;\\n        bytes32 commit;\\n        uint256 choice;\\n        uint256 weight;\\n        string justification;\\n        bool hasVoted;\\n    }\\n\\n    struct Juror {\\n        uint256 stakedTokens;\\n        uint256 freezedTokens;\\n    }\\n\\n    struct Round {\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 appealFeeRewards;\\n        uint256 maxVotes;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 penalties;\\n        uint256 winningChoice;\\n        uint256 totalRepartitions;\\n        uint256 totalVoted;\\n        uint256 totalCommited;\\n        uint256 appealedBy;\\n        uint256[11] counts;\\n        EnumerableSet.UintSet evidenceSubmitters;\\n        EnumerableSet.AddressSet judgesClaimed;\\n        Vote[] votes;\\n        Evidence[] evidences;\\n        address[] drawnJurors;\\n        bool closed;\\n    }\\n\\n    struct Dispute {\\n        uint256 createdAt;\\n        uint256 orderId;\\n        uint256 ruling;\\n        uint256 ruledAt;\\n        uint256[] timestamps;\\n        DisputeState state;\\n        Round[] rounds;\\n    }\\n\\n    struct Review {\\n        uint256 authorId;\\n        string metadata;\\n    }\\n\\n    struct ServiceProvider {\\n        address wallet;\\n        string endpoint;\\n    }\\n\\n    struct EntryParams {\\n        uint256 currencyValue;\\n        uint256 timeAdded;\\n        uint256 xpEarned;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CreationParams {\\n        uint256 currencyValue;\\n        uint256 xpEarned;\\n    }\\n\\n    struct OrderPriceParams {\\n        uint256 trialFlat;\\n        uint256 trialPercent;\\n        uint256 proceedFlat;\\n        uint256 proceedPercent;\\n    }\\n\\n    struct FeeParams {\\n        uint256 flat;\\n        uint256 percent;\\n    }\\n\\n    struct RetributionParams {\\n        uint256 affiliate;\\n        uint256 lvl0AffiliateShare;\\n    }\\n\\n    struct DisputeParams {\\n        uint256 minStake;\\n        uint256 alpha;\\n        uint256 feePerJuror;\\n        uint256 maxVotes;\\n    }\\n}\\n\",\"keccak256\":\"0x6e4e2c885030600a71149b4d83d2970b0f7ac310f89636734fa96fb2f12b9456\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/InputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary InputTypes {\\n    struct CreateUserInput {\\n        uint256 newId;\\n        string metadata;\\n        uint256 inviterId;\\n        address wallet;\\n    }\\n\\n    struct CreateGigInput {\\n        uint256 newId;\\n        DataTypes.Package[3] packages;\\n        string metadata;\\n    }\\n\\n    struct OrderFeesInput {\\n        DataTypes.FeeParams buyerFees;\\n        DataTypes.FeeParams sellerFees;\\n    }\\n\\n    struct OrderRelationInput {\\n        uint256 newId;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n    }\\n\\n    struct CreateOrderInput {\\n        uint256 sellerId;\\n        uint256 buyerId;\\n        uint256 gigId;\\n        uint256 packageId;\\n        string brief;\\n    }\\n\\n    struct ExecuteCreateOrderInput {\\n        uint256 price;\\n        string metadata;\\n        string brief;\\n        OrderFeesInput fees;\\n        OrderRelationInput relations;\\n        IERC20 currency;\\n    }\\n\\n    struct ExecuteCreateDisputeInput {\\n        uint256 newId;\\n        uint256 orderId;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 maxVotes;\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 evidenceUntil;\\n        address[] drawnJurors;\\n    }\\n\\n    struct ExecuteNextRoundInput {\\n        uint256 evidenceUntil;\\n        uint256 maxVotes;\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        address[] drawnJurors;\\n    }\\n\\n    struct BecomeBuyerInput {\\n        address account;\\n        uint256 buyerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct BecomeSellerInput {\\n        address account;\\n        uint256 sellerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CalcInvitersRewardsInput {\\n        uint256 currencyValue;\\n        uint256 affiliateShare;\\n        uint256 lvl0AffiliateShare;\\n    }\\n\\n    struct ProcessPaymentInput {\\n        address caller;\\n        address inviter0;\\n        address inviter1;\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n\\n    struct AddRoundInput {\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 maxVotes;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        address[] drawnJurors;\\n    }\\n\\n    struct ClaimAsJudgeInput {\\n        address account;\\n        uint256 min;\\n        uint256 max;\\n        uint256 winningChoice;\\n        uint256 amountOfCorrectVotes;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 penalties;\\n    }\\n}\\n\",\"keccak256\":\"0x1252a66975aff762ff5773cdc5cbfe9e95003a0cc6b2e9879ff119fbe60dcea4\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/OutputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary OutputTypes {\\n    struct CalcInvitersRewardsOutput {\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n\\n    struct PrepareBecomeRoleOutput {\\n        address inviter0;\\n        address inviter1;\\n        DataTypes.EntryParams entryParams;\\n        DataTypes.RetributionParams retributionParams;\\n        CalcInvitersRewardsOutput rewards;\\n    }\\n\\n    struct GigOutput {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        uint256[] reviewIds;\\n        uint256[] orderIds;\\n        DataTypes.Package[3] packages;\\n    }\\n\\n    struct UserOutput {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 userId;\\n        address wallet;\\n        uint256[] gigIds;\\n        uint256[] offerIds;\\n        uint256[] bidIds;\\n        uint256[] buyerOrderIds;\\n        uint256[] gigReviewsIds;\\n        uint256[] userReviewsIds;\\n        uint256[] reviewsIds;\\n    }\\n\\n    struct OrderOutput {\\n        string metadata;\\n        string brief;\\n        uint256 orderId;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        uint256 disputeId;\\n        uint256[] reviewIds;\\n        bool disputed;\\n        DataTypes.Invoice invoice;\\n        DataTypes.OrderState state;\\n    }\\n\\n    struct RoundOutput {\\n        uint256 roundId;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 appealFeeRewards;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 maxVotes;\\n        uint256 penalties;\\n        uint256 winningChoice;\\n        uint256 totalRepartitions;\\n        uint256 totalVoted;\\n        uint256 totalCommited;\\n        uint256[11] counts;\\n        uint256[] evidenceSubmitters;\\n        uint256 appealedBy;\\n        DataTypes.Vote[] votes;\\n        DataTypes.Evidence[] evidences;\\n        address[] drawnJurors;\\n        address[] judgesClaimed;\\n        bool closed;\\n    }\\n\\n    struct DisputeOutput {\\n        uint256 createdAt;\\n        uint256 disputeId;\\n        uint256 orderId;\\n        uint256 ruling;\\n        uint256 ruledAt;\\n        uint256[] timestamps;\\n        DataTypes.DisputeState state;\\n        RoundOutput[] rounds;\\n    }\\n\\n    struct PopulatedGig {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        DataTypes.Review[] reviews;\\n        DataTypes.Package[] packages;\\n    }\\n\\n    struct CalcDisputeDelaysFromBlock {\\n        uint256 evidenceUntil;\\n        uint256 commitUntil;\\n        uint256 voteUntil;\\n        uint256 appealUntil;\\n    }\\n\\n    struct PopulatedUser {\\n        uint256 userId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 bswanBalance;\\n        uint256 usdcBalance;\\n        uint256 xpBalance;\\n        uint256[] gigIds;\\n        address wallet;\\n        bool isBuyer;\\n        bool isSeller;\\n        bool isJudge;\\n        UserOutput[] inviters;\\n    }\\n\\n    struct ExecuteClaimAsJudgeOutput {\\n        bool isVoteCorrect;\\n        bool isVoteInRange;\\n        uint256 amountFromDisputeFees;\\n        uint256 amountFromJurorsTokensAtStake;\\n        uint256 tokensAtStakePerJuror;\\n    }\\n}\\n\",\"keccak256\":\"0x0c0945bb78e9789cffdcd04fc3518ee653b826dbb948ffeaf6026f94309ac295\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000196005553480156200001757600080fd5b506040516200250f3803806200250f8339810160408190526200003a9162000118565b806200004f62000049620000c2565b620000c6565b6040805180820190915260018152603560f81b60208201526001600160a01b0382166200009a5760405162461bcd60e51b815260040162000091919062000148565b60405180910390fd5b50600480546001600160a01b0319166001600160a01b0392909216919091179055506200019e565b3390565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200012a578081fd5b81516001600160a01b038116811462000141578182fd5b9392505050565b6000602080835283518082850152825b81811015620001765785810183015185820160400152820162000158565b81811115620001885783604083870101525b50601f01601f1916929092016040019392505050565b61236180620001ae6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063985fadc8116100ad578063cfd8d6c011610071578063cfd8d6c01461025d578063d107c21214610270578063daea85c514610290578063e5b5019a146102a3578063f2fde38b146102ab5761012c565b8063985fadc8146101e15780639a2dc738146101f4578063a1ba444d14610207578063a5a8a61014610229578063b817bcf71461024a5761012c565b806341c0e1b5116100f457806341c0e1b51461019f578063715018a6146101a957806379a558e7146101b15780638da5cb5b146101c45780639011b9cc146101cc5761012c565b80630542975c1461013157806311e0c07b1461014f5780631848effa1461016f57806319872f76146101775780631af140e81461018a575b600080fd5b6101396102be565b6040516101469190611e75565b60405180910390f35b61016261015d366004611cec565b6102cd565b6040516101469190611f1c565b610139610356565b61013961018536600461186d565b610365565b6101926103ef565b6040516101469190611ebc565b6101a76104bb565b005b6101a76104f1565b6101626101bf3660046117dc565b610505565b6101396105bb565b6101d46105ca565b6040516101469190611f51565b6101626101ef366004611885565b6105dd565b6101a76102023660046118a9565b610624565b61021a610215366004611d24565b610941565b60405161014693929190611f27565b61023c6102373660046117dc565b610c1a565b604051610146929190611e89565b6101626102583660046117dc565b610cb0565b6101a761026b3660046117dc565b610d67565b61028361027e36600461186d565b610e51565b6040516101469190612150565b6101a761029e3660046117dc565b610f7d565b6101d4611053565b6101a76102b93660046117dc565b611059565b6004546001600160a01b031690565b60405163fbd2817f60e01b81526000906001600160a01b0383169063fbd2817f906102fe9087908790600401612163565b60206040518083038186803b15801561031657600080fd5b505afa15801561032a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e919061184d565b949350505050565b6004546001600160a01b031681565b60048054604051630cc397bb60e11b81526000926001600160a01b03909216916319872f769161039791869101611f51565b60206040518083038186803b1580156103af57600080fd5b505afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e791906117f8565b90505b919050565b606060006103fb6105ca565b905060008167ffffffffffffffff81111561042657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561045f57816020015b61044c6115ac565b8152602001906001900390816104445790505b50905060005b828110156104b45761047681610e51565b82828151811061049657634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806104ac906122cf565b915050610465565b5091505090565b6004546001600160a01b031633146104e357634e487b7160e01b600052600160045260246000fd5b6004546001600160a01b0316ff5b6104f9611093565b61050360006110d2565b565b600061051964212aaca2a960d91b836105dd565b80156103e7575042610531632aa9a2a960e11b610365565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b815260040161055c9190611e75565b60006040518083038186803b15801561057457600080fd5b505afa158015610588573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105b09190810190611b2b565b604001511192915050565b6003546001600160a01b031690565b6000806105d76000611124565b91505090565b6000806105f76a20a1a62fa6a0a720a3a2a960a91b610365565b6001600160a01b03166391d1485485856040518363ffffffff1660e01b81526004016102fe929190611f5a565b61062f61025861112f565b60405180604001604052806002815260200161189b60f11b815250906106715760405162461bcd60e51b81526004016106689190611f71565b60405180910390fd5b50600061067c61112f565b905060006106886105ca565b90506000737E7F545B89D9cc9CD49FF0a830CA251acdEBC887636810420d6000600260405180606001604052808781526020018981526020018a8152506040518463ffffffff1660e01b81526004016106e393929190612171565b60206040518083038186803b1580156106fb57600080fd5b505af415801561070f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610733919061184d565b90506000610747632aa9a2a960e11b610365565b6001600160a01b031663adcd2d2185856040518363ffffffff1660e01b8152600401610774929190611ea3565b602060405180830381600087803b15801561078e57600080fd5b505af11580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c6919061184d565b90508180156107d25750805b6107ee5760405162461bcd60e51b815260040161066890612035565b610805694352454154455f47494760b01b85611133565b60008061081186610c1a565b91509150600061081f6111a4565b9050600061082b611241565b6040805160608101825282518152845160208083019190915285015181830152905163013a9d5b60e01b81529192506000917385F0Fe200F946f76fc92AD911b4D21c196D8b71B9163013a9d5b91610886919060040161212f565b60606040518083038186803b15801561089e57600080fd5b505af41580156108b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d691906119b0565b90506109346040518060c001604052808b6001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b03168152602001836000015181526020018360200151815260200183604001518152506112a1565b5050505050505050505050565b6000606061094d6115f6565b6427a92222a960d91b61095f81610365565b6001600160a01b031661097061112f565b6001600160a01b03161460405180604001604052806002815260200161199b60f11b815250906109b35760405162461bcd60e51b81526004016106689190611f71565b50604051631813c0cb60e21b8152600090737E7F545B89D9cc9CD49FF0a830CA251acdEBC8879063604f032c906109f1908a90600290600401612163565b60206040518083038186803b158015610a0957600080fd5b505af4158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190611b13565b9050610a91816009018760038110610a6957634e487b7160e01b600052603260045260246000fd5b6002020160405180604001604052908160008201548152602001600182015481525050611378565b610aad5760405162461bcd60e51b815260040161066890612063565b60405163aa371aeb60e01b8152600090737E7F545B89D9cc9CD49FF0a830CA251acdEBC8879063aa371aeb90610ae99085908d90600401612163565b60206040518083038186803b158015610b0157600080fd5b505af4158015610b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b39919061184d565b90508082600981018960038110610b6057634e487b7160e01b600052603260045260246000fd5b60020201818054610b709061229a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9c9061229a565b8015610be95780601f10610bbe57610100808354040283529160200191610be9565b820191906000526020600020905b815481529060010190602001808311610bcc57829003601f168201915b50506040805180820190915285548152600190950154602086015250949e919d50919b509950505050505050505050565b600080610c2d632aa9a2a960e11b610365565b6001600160a01b031663dd06ef02846040518263ffffffff1660e01b8152600401610c589190611e75565b604080518083038186803b158015610c6f57600080fd5b505afa158015610c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca79190611814565b91509150915091565b6000610cc56529a2a62622a960d11b836105dd565b80156103e7575042610cdd632aa9a2a960e11b610365565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b8152600401610d089190611e75565b60006040518083038186803b158015610d2057600080fd5b505afa158015610d34573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d5c9190810190611b2b565b608001511192915050565b6001600160a01b0381161580610d8757506004546001600160a01b031633145b80610e135750336001600160a01b0316306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dd057600080fd5b505afa158015610de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0891906117f8565b6001600160a01b0316145b610e2f5760405162461bcd60e51b815260040161066890611fca565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610e596115ac565b604051631813c0cb60e21b8152600090737E7F545B89D9cc9CD49FF0a830CA251acdEBC8879063604f032c90610e96908690600290600401612163565b60206040518083038186803b158015610eae57600080fd5b505af4158015610ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee69190611b13565b60405163561a6ee760e01b8152909150737E7F545B89D9cc9CD49FF0a830CA251acdEBC8879063561a6ee790610f229084908790600401612163565b60006040518083038186803b158015610f3a57600080fd5b505af4158015610f4e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f769190810190611a26565b9392505050565b6d282927aa27a1a7a62fa0a226a4a760911b610f9b816101ef61112f565b610fb75760405162461bcd60e51b8152600401610668906120f8565b6000610fc86211105560ea1b610365565b60055460405163095ea7b360e01b81529192506001600160a01b0385169163095ea7b391610ffb91859190600401611ea3565b602060405180830381600087803b15801561101557600080fd5b505af1158015611029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104d919061184d565b50505050565b60055481565b611061611093565b6001600160a01b0381166110875760405162461bcd60e51b815260040161066890611f84565b611090816110d2565b50565b61109b61112f565b6001600160a01b03166110ac6105bb565b6001600160a01b0316146105035760405162461bcd60e51b8152600401610668906120c3565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006103e782611390565b3390565b61114161058560f41b610365565b6001600160a01b031663293c6a3a83836040518363ffffffff1660e01b815260040161116e929190611f5a565b600060405180830381600087803b15801561118857600080fd5b505af115801561119c573d6000803e3d6000fd5b505050505050565b6111ac6115f6565b6111cd74282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610365565b6001600160a01b0316639af1da486040518163ffffffff1660e01b8152600401604080518083038186803b15801561120457600080fd5b505afa158015611218573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123c9190611a0b565b905090565b6112496115f6565b61126a74282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610365565b6001600160a01b031663333274726040518163ffffffff1660e01b8152600401604080518083038186803b15801561120457600080fd5b60006112b26211105560ea1b610365565b905060008260a00151836080015184606001516112cf9190612256565b6112d99190612256565b905061136983600001513083856001600160a01b031663e5a6b10f6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561132057600080fd5b505af1158015611334573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135891906117f8565b6001600160a01b0316929190611394565b6113738383611406565b505050565b8051600090158015906103e757505060200151151590565b5490565b6040516323b872dd60e01b8082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af16113d9573d6000803e3d6000fd5b506113e385611505565b6113ff5760405162461bcd60e51b81526004016106689061208c565b5050505050565b60208201516060830151604051636203b43b60e11b81526001600160a01b0384169263c40768769261143a92600401611ea3565b600060405180830381600087803b15801561145457600080fd5b505af1158015611468573d6000803e3d6000fd5b50505060408084015160808501519151636203b43b60e11b81526001600160a01b038516935063c4076876926114a19291600401611ea3565b600060405180830381600087803b1580156114bb57600080fd5b505af11580156114cf573d6000803e3d6000fd5b5050505060a0820151604051636203b43b60e11b81526001600160a01b0383169163c40768769161116e91600091600401611ea3565b6000611529565b62461bcd60e51b6000526020600452806024528160445260646000fd5b3d80156115685760208114611599576115637f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f61150c565b6115a6565b823b611590576115907311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b601461150c565b600191506115a6565b3d6000803e600051151591505b50919050565b604051806101000160405280600081526020016060815260200160008152602001600081526020016000815260200160608152602001606081526020016115f1611610565b905290565b604051806040016040528060008152602001600081525090565b60405180606001604052806003905b6116276115f6565b81526020019060019003908161161f5790505090565b80516103ea81612316565b600082601f830112611658578081fd5b604080516060810181811067ffffffffffffffff8211171561167c5761167c612300565b8252808460c0810187101561168f578485fd5b845b60038110156116b8576116a4888361178e565b835260209092019190840190600101611691565b50919695505050505050565b600082601f8301126116d4578081fd5b8151602067ffffffffffffffff8211156116f0576116f0612300565b8082026116fe8282016121e3565b838152828101908684018388018501891015611718578687fd5b8693505b8584101561173a57805183526001939093019291840191840161171c565b50979650505050505050565b600082601f830112611756578081fd5b81516117696117648261222e565b6121e3565b81815284602083860101111561177d578283fd5b61034e82602083016020870161226e565b60006040828403121561179f578081fd5b6040516040810181811067ffffffffffffffff821117156117c2576117c2612300565b604052825181526020928301519281019290925250919050565b6000602082840312156117ed578081fd5b8135610f7681612316565b600060208284031215611809578081fd5b8151610f7681612316565b60008060408385031215611826578081fd5b825161183181612316565b602084015190925061184281612316565b809150509250929050565b60006020828403121561185e578081fd5b81518015158114610f76578182fd5b60006020828403121561187e578081fd5b5035919050565b60008060408385031215611897578182fd5b82359150602083013561184281612316565b60008060e083850312156118bb578182fd5b823567ffffffffffffffff808211156118d2578384fd5b818501915085601f8301126118e5578384fd5b813560206118f56117648361222e565b8281528882848701011115611908578687fd5b8282860183830137808301820196909652603f87018813611927578485fd5b600393506119376117648561220d565b9150818188018960e08a01111561194c578687fd5b865b868110156119a057604080838d031215611966578889fd5b8051818101818110898211171561197f5761197f612300565b8252833581528584013586820152865294840194919091019060010161194e565b5096999098509650505050505050565b6000606082840312156119c1578081fd5b6040516060810181811067ffffffffffffffff821117156119e4576119e4612300565b80604052508251815260208301516020820152604083015160408201528091505092915050565b600060408284031215611a1c578081fd5b610f76838361178e565b600060208284031215611a37578081fd5b815167ffffffffffffffff80821115611a4e578283fd5b908301906101a08286031215611a62578283fd5b611a6d6101006121e3565b82518152602083015182811115611a82578485fd5b611a8e87828601611746565b60208301525060408301516040820152606083015160608201526080830151608082015260a083015182811115611ac3578485fd5b611acf878286016116c4565b60a08301525060c083015182811115611ae6578485fd5b611af2878286016116c4565b60c083015250611b058660e08501611648565b60e082015295945050505050565b600060208284031215611b24578081fd5b5051919050565b600060208284031215611b3c578081fd5b815167ffffffffffffffff80821115611b53578283fd5b81840191506101e0808387031215611b69578384fd5b611b72816121e3565b9050825182811115611b82578485fd5b611b8e87828601611746565b8252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c0820152611bd960e0840161163d565b60e08201526101008084015183811115611bf1578586fd5b611bfd888287016116c4565b8284015250506101208084015183811115611c16578586fd5b611c22888287016116c4565b8284015250506101408084015183811115611c3b578586fd5b611c47888287016116c4565b8284015250506101608084015183811115611c60578586fd5b611c6c888287016116c4565b8284015250506101808084015183811115611c85578586fd5b611c91888287016116c4565b8284015250506101a08084015183811115611caa578586fd5b611cb6888287016116c4565b8284015250506101c08084015183811115611ccf578586fd5b611cdb888287016116c4565b918301919091525095945050505050565b600080600060608486031215611d00578081fd5b83359250602084013591506040840135611d1981612316565b809150509250925092565b600080600060608486031215611d38578081fd5b505081359360208301359350604090920135919050565b6000815180845260208085019450808401835b83811015611d7e57815187529582019590820190600101611d62565b509495945050505050565b60008151808452611da181602086016020860161226e565b601f01601f19169290920160200192915050565b60006101a0825184526020808401518282870152611dd583870182611d89565b92505060408085015181870152606085015160608701526080850151608087015260a085015186840360a0880152611e0d8482611d4f565b93505060c085015186840360c0880152611e278482611d4f565b93505060e085015160e08701855b6003811015611e5957611e49828451611e66565b9184019190830190600101611e35565b5093979650505050505050565b80518252602090810151910152565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015611f0f57603f19888603018452611efd858351611db5565b94509285019290850190600101611ee1565b5092979650505050505050565b901515815260200190565b6000841515825260806020830152611f426080830185611d89565b905061034e6040830184611e66565b90815260200190565b9182526001600160a01b0316602082015260400190565b600060208252610f766020830184611d89565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526045908201527f43616e206f6e6c792062652063616c6c6564206966206164647265737365735060408201527f726f766964657220697320656d7074792c206d73672e73656e646572206f722060608201526437bbb732b960d91b608082015260a00190565b6020808252601490820152736661696c656420746f206372656174652067696760601b604082015260600190565b6020808252600f908201526e496e76616c6964205061636b61676560881b604082015260600190565b60208082526019908201527f475076323a206661696c6564207472616e7366657246726f6d00000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601c908201527f5265717569726573206d73672e73656e6465722068617320726f6c6500000000604082015260600190565b81518152602080830151908201526040918201519181019190915260600190565b600060208252610f766020830184611db5565b918252602082015260400190565b6000848252602084818401526040606081850152845160608501528185015160808501845b60038110156121ba576121aa828451611e66565b9184019190830190600101612196565b50505084015161010061014085015290506121d9610160840182611d89565b9695505050505050565b60405181810167ffffffffffffffff8111828210171561220557612205612300565b604052919050565b600067ffffffffffffffff82111561222757612227612300565b5060200290565b600067ffffffffffffffff82111561224857612248612300565b50601f01601f191660200190565b60008219821115612269576122696122ea565b500190565b60005b83811015612289578181015183820152602001612271565b8381111561104d5750506000910152565b6002810460018216806122ae57607f821691505b602082108114156115a657634e487b7160e01b600052602260045260246000fd5b60006000198214156122e3576122e36122ea565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461109057600080fdfea2646970667358221220da4927291193d1c31b12523f924e3203691df80df24744026be752fcb129bf0464736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c8063985fadc8116100ad578063cfd8d6c011610071578063cfd8d6c01461025d578063d107c21214610270578063daea85c514610290578063e5b5019a146102a3578063f2fde38b146102ab5761012c565b8063985fadc8146101e15780639a2dc738146101f4578063a1ba444d14610207578063a5a8a61014610229578063b817bcf71461024a5761012c565b806341c0e1b5116100f457806341c0e1b51461019f578063715018a6146101a957806379a558e7146101b15780638da5cb5b146101c45780639011b9cc146101cc5761012c565b80630542975c1461013157806311e0c07b1461014f5780631848effa1461016f57806319872f76146101775780631af140e81461018a575b600080fd5b6101396102be565b6040516101469190611e75565b60405180910390f35b61016261015d366004611cec565b6102cd565b6040516101469190611f1c565b610139610356565b61013961018536600461186d565b610365565b6101926103ef565b6040516101469190611ebc565b6101a76104bb565b005b6101a76104f1565b6101626101bf3660046117dc565b610505565b6101396105bb565b6101d46105ca565b6040516101469190611f51565b6101626101ef366004611885565b6105dd565b6101a76102023660046118a9565b610624565b61021a610215366004611d24565b610941565b60405161014693929190611f27565b61023c6102373660046117dc565b610c1a565b604051610146929190611e89565b6101626102583660046117dc565b610cb0565b6101a761026b3660046117dc565b610d67565b61028361027e36600461186d565b610e51565b6040516101469190612150565b6101a761029e3660046117dc565b610f7d565b6101d4611053565b6101a76102b93660046117dc565b611059565b6004546001600160a01b031690565b60405163fbd2817f60e01b81526000906001600160a01b0383169063fbd2817f906102fe9087908790600401612163565b60206040518083038186803b15801561031657600080fd5b505afa15801561032a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e919061184d565b949350505050565b6004546001600160a01b031681565b60048054604051630cc397bb60e11b81526000926001600160a01b03909216916319872f769161039791869101611f51565b60206040518083038186803b1580156103af57600080fd5b505afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e791906117f8565b90505b919050565b606060006103fb6105ca565b905060008167ffffffffffffffff81111561042657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561045f57816020015b61044c6115ac565b8152602001906001900390816104445790505b50905060005b828110156104b45761047681610e51565b82828151811061049657634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806104ac906122cf565b915050610465565b5091505090565b6004546001600160a01b031633146104e357634e487b7160e01b600052600160045260246000fd5b6004546001600160a01b0316ff5b6104f9611093565b61050360006110d2565b565b600061051964212aaca2a960d91b836105dd565b80156103e7575042610531632aa9a2a960e11b610365565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b815260040161055c9190611e75565b60006040518083038186803b15801561057457600080fd5b505afa158015610588573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105b09190810190611b2b565b604001511192915050565b6003546001600160a01b031690565b6000806105d76000611124565b91505090565b6000806105f76a20a1a62fa6a0a720a3a2a960a91b610365565b6001600160a01b03166391d1485485856040518363ffffffff1660e01b81526004016102fe929190611f5a565b61062f61025861112f565b60405180604001604052806002815260200161189b60f11b815250906106715760405162461bcd60e51b81526004016106689190611f71565b60405180910390fd5b50600061067c61112f565b905060006106886105ca565b9050600073__$1c13fa74a81089071ad74f3376e739188f$__636810420d6000600260405180606001604052808781526020018981526020018a8152506040518463ffffffff1660e01b81526004016106e393929190612171565b60206040518083038186803b1580156106fb57600080fd5b505af415801561070f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610733919061184d565b90506000610747632aa9a2a960e11b610365565b6001600160a01b031663adcd2d2185856040518363ffffffff1660e01b8152600401610774929190611ea3565b602060405180830381600087803b15801561078e57600080fd5b505af11580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c6919061184d565b90508180156107d25750805b6107ee5760405162461bcd60e51b815260040161066890612035565b610805694352454154455f47494760b01b85611133565b60008061081186610c1a565b91509150600061081f6111a4565b9050600061082b611241565b6040805160608101825282518152845160208083019190915285015181830152905163013a9d5b60e01b815291925060009173__$30e2c0763bc74e29ca837c0a99f7d1b333$__9163013a9d5b91610886919060040161212f565b60606040518083038186803b15801561089e57600080fd5b505af41580156108b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d691906119b0565b90506109346040518060c001604052808b6001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b03168152602001836000015181526020018360200151815260200183604001518152506112a1565b5050505050505050505050565b6000606061094d6115f6565b6427a92222a960d91b61095f81610365565b6001600160a01b031661097061112f565b6001600160a01b03161460405180604001604052806002815260200161199b60f11b815250906109b35760405162461bcd60e51b81526004016106689190611f71565b50604051631813c0cb60e21b815260009073__$1c13fa74a81089071ad74f3376e739188f$__9063604f032c906109f1908a90600290600401612163565b60206040518083038186803b158015610a0957600080fd5b505af4158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190611b13565b9050610a91816009018760038110610a6957634e487b7160e01b600052603260045260246000fd5b6002020160405180604001604052908160008201548152602001600182015481525050611378565b610aad5760405162461bcd60e51b815260040161066890612063565b60405163aa371aeb60e01b815260009073__$1c13fa74a81089071ad74f3376e739188f$__9063aa371aeb90610ae99085908d90600401612163565b60206040518083038186803b158015610b0157600080fd5b505af4158015610b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b39919061184d565b90508082600981018960038110610b6057634e487b7160e01b600052603260045260246000fd5b60020201818054610b709061229a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9c9061229a565b8015610be95780601f10610bbe57610100808354040283529160200191610be9565b820191906000526020600020905b815481529060010190602001808311610bcc57829003601f168201915b50506040805180820190915285548152600190950154602086015250949e919d50919b509950505050505050505050565b600080610c2d632aa9a2a960e11b610365565b6001600160a01b031663dd06ef02846040518263ffffffff1660e01b8152600401610c589190611e75565b604080518083038186803b158015610c6f57600080fd5b505afa158015610c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca79190611814565b91509150915091565b6000610cc56529a2a62622a960d11b836105dd565b80156103e7575042610cdd632aa9a2a960e11b610365565b6001600160a01b03166369c212f6846040518263ffffffff1660e01b8152600401610d089190611e75565b60006040518083038186803b158015610d2057600080fd5b505afa158015610d34573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d5c9190810190611b2b565b608001511192915050565b6001600160a01b0381161580610d8757506004546001600160a01b031633145b80610e135750336001600160a01b0316306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dd057600080fd5b505afa158015610de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0891906117f8565b6001600160a01b0316145b610e2f5760405162461bcd60e51b815260040161066890611fca565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610e596115ac565b604051631813c0cb60e21b815260009073__$1c13fa74a81089071ad74f3376e739188f$__9063604f032c90610e96908690600290600401612163565b60206040518083038186803b158015610eae57600080fd5b505af4158015610ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee69190611b13565b60405163561a6ee760e01b815290915073__$1c13fa74a81089071ad74f3376e739188f$__9063561a6ee790610f229084908790600401612163565b60006040518083038186803b158015610f3a57600080fd5b505af4158015610f4e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f769190810190611a26565b9392505050565b6d282927aa27a1a7a62fa0a226a4a760911b610f9b816101ef61112f565b610fb75760405162461bcd60e51b8152600401610668906120f8565b6000610fc86211105560ea1b610365565b60055460405163095ea7b360e01b81529192506001600160a01b0385169163095ea7b391610ffb91859190600401611ea3565b602060405180830381600087803b15801561101557600080fd5b505af1158015611029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104d919061184d565b50505050565b60055481565b611061611093565b6001600160a01b0381166110875760405162461bcd60e51b815260040161066890611f84565b611090816110d2565b50565b61109b61112f565b6001600160a01b03166110ac6105bb565b6001600160a01b0316146105035760405162461bcd60e51b8152600401610668906120c3565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006103e782611390565b3390565b61114161058560f41b610365565b6001600160a01b031663293c6a3a83836040518363ffffffff1660e01b815260040161116e929190611f5a565b600060405180830381600087803b15801561118857600080fd5b505af115801561119c573d6000803e3d6000fd5b505050505050565b6111ac6115f6565b6111cd74282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610365565b6001600160a01b0316639af1da486040518163ffffffff1660e01b8152600401604080518083038186803b15801561120457600080fd5b505afa158015611218573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123c9190611a0b565b905090565b6112496115f6565b61126a74282927aa27a1a7a62fa1a7a72324a3aaa920aa27a960591b610365565b6001600160a01b031663333274726040518163ffffffff1660e01b8152600401604080518083038186803b15801561120457600080fd5b60006112b26211105560ea1b610365565b905060008260a00151836080015184606001516112cf9190612256565b6112d99190612256565b905061136983600001513083856001600160a01b031663e5a6b10f6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561132057600080fd5b505af1158015611334573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135891906117f8565b6001600160a01b0316929190611394565b6113738383611406565b505050565b8051600090158015906103e757505060200151151590565b5490565b6040516323b872dd60e01b8082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af16113d9573d6000803e3d6000fd5b506113e385611505565b6113ff5760405162461bcd60e51b81526004016106689061208c565b5050505050565b60208201516060830151604051636203b43b60e11b81526001600160a01b0384169263c40768769261143a92600401611ea3565b600060405180830381600087803b15801561145457600080fd5b505af1158015611468573d6000803e3d6000fd5b50505060408084015160808501519151636203b43b60e11b81526001600160a01b038516935063c4076876926114a19291600401611ea3565b600060405180830381600087803b1580156114bb57600080fd5b505af11580156114cf573d6000803e3d6000fd5b5050505060a0820151604051636203b43b60e11b81526001600160a01b0383169163c40768769161116e91600091600401611ea3565b6000611529565b62461bcd60e51b6000526020600452806024528160445260646000fd5b3d80156115685760208114611599576115637f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f61150c565b6115a6565b823b611590576115907311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b601461150c565b600191506115a6565b3d6000803e600051151591505b50919050565b604051806101000160405280600081526020016060815260200160008152602001600081526020016000815260200160608152602001606081526020016115f1611610565b905290565b604051806040016040528060008152602001600081525090565b60405180606001604052806003905b6116276115f6565b81526020019060019003908161161f5790505090565b80516103ea81612316565b600082601f830112611658578081fd5b604080516060810181811067ffffffffffffffff8211171561167c5761167c612300565b8252808460c0810187101561168f578485fd5b845b60038110156116b8576116a4888361178e565b835260209092019190840190600101611691565b50919695505050505050565b600082601f8301126116d4578081fd5b8151602067ffffffffffffffff8211156116f0576116f0612300565b8082026116fe8282016121e3565b838152828101908684018388018501891015611718578687fd5b8693505b8584101561173a57805183526001939093019291840191840161171c565b50979650505050505050565b600082601f830112611756578081fd5b81516117696117648261222e565b6121e3565b81815284602083860101111561177d578283fd5b61034e82602083016020870161226e565b60006040828403121561179f578081fd5b6040516040810181811067ffffffffffffffff821117156117c2576117c2612300565b604052825181526020928301519281019290925250919050565b6000602082840312156117ed578081fd5b8135610f7681612316565b600060208284031215611809578081fd5b8151610f7681612316565b60008060408385031215611826578081fd5b825161183181612316565b602084015190925061184281612316565b809150509250929050565b60006020828403121561185e578081fd5b81518015158114610f76578182fd5b60006020828403121561187e578081fd5b5035919050565b60008060408385031215611897578182fd5b82359150602083013561184281612316565b60008060e083850312156118bb578182fd5b823567ffffffffffffffff808211156118d2578384fd5b818501915085601f8301126118e5578384fd5b813560206118f56117648361222e565b8281528882848701011115611908578687fd5b8282860183830137808301820196909652603f87018813611927578485fd5b600393506119376117648561220d565b9150818188018960e08a01111561194c578687fd5b865b868110156119a057604080838d031215611966578889fd5b8051818101818110898211171561197f5761197f612300565b8252833581528584013586820152865294840194919091019060010161194e565b5096999098509650505050505050565b6000606082840312156119c1578081fd5b6040516060810181811067ffffffffffffffff821117156119e4576119e4612300565b80604052508251815260208301516020820152604083015160408201528091505092915050565b600060408284031215611a1c578081fd5b610f76838361178e565b600060208284031215611a37578081fd5b815167ffffffffffffffff80821115611a4e578283fd5b908301906101a08286031215611a62578283fd5b611a6d6101006121e3565b82518152602083015182811115611a82578485fd5b611a8e87828601611746565b60208301525060408301516040820152606083015160608201526080830151608082015260a083015182811115611ac3578485fd5b611acf878286016116c4565b60a08301525060c083015182811115611ae6578485fd5b611af2878286016116c4565b60c083015250611b058660e08501611648565b60e082015295945050505050565b600060208284031215611b24578081fd5b5051919050565b600060208284031215611b3c578081fd5b815167ffffffffffffffff80821115611b53578283fd5b81840191506101e0808387031215611b69578384fd5b611b72816121e3565b9050825182811115611b82578485fd5b611b8e87828601611746565b8252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c0820152611bd960e0840161163d565b60e08201526101008084015183811115611bf1578586fd5b611bfd888287016116c4565b8284015250506101208084015183811115611c16578586fd5b611c22888287016116c4565b8284015250506101408084015183811115611c3b578586fd5b611c47888287016116c4565b8284015250506101608084015183811115611c60578586fd5b611c6c888287016116c4565b8284015250506101808084015183811115611c85578586fd5b611c91888287016116c4565b8284015250506101a08084015183811115611caa578586fd5b611cb6888287016116c4565b8284015250506101c08084015183811115611ccf578586fd5b611cdb888287016116c4565b918301919091525095945050505050565b600080600060608486031215611d00578081fd5b83359250602084013591506040840135611d1981612316565b809150509250925092565b600080600060608486031215611d38578081fd5b505081359360208301359350604090920135919050565b6000815180845260208085019450808401835b83811015611d7e57815187529582019590820190600101611d62565b509495945050505050565b60008151808452611da181602086016020860161226e565b601f01601f19169290920160200192915050565b60006101a0825184526020808401518282870152611dd583870182611d89565b92505060408085015181870152606085015160608701526080850151608087015260a085015186840360a0880152611e0d8482611d4f565b93505060c085015186840360c0880152611e278482611d4f565b93505060e085015160e08701855b6003811015611e5957611e49828451611e66565b9184019190830190600101611e35565b5093979650505050505050565b80518252602090810151910152565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015611f0f57603f19888603018452611efd858351611db5565b94509285019290850190600101611ee1565b5092979650505050505050565b901515815260200190565b6000841515825260806020830152611f426080830185611d89565b905061034e6040830184611e66565b90815260200190565b9182526001600160a01b0316602082015260400190565b600060208252610f766020830184611d89565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526045908201527f43616e206f6e6c792062652063616c6c6564206966206164647265737365735060408201527f726f766964657220697320656d7074792c206d73672e73656e646572206f722060608201526437bbb732b960d91b608082015260a00190565b6020808252601490820152736661696c656420746f206372656174652067696760601b604082015260600190565b6020808252600f908201526e496e76616c6964205061636b61676560881b604082015260600190565b60208082526019908201527f475076323a206661696c6564207472616e7366657246726f6d00000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601c908201527f5265717569726573206d73672e73656e6465722068617320726f6c6500000000604082015260600190565b81518152602080830151908201526040918201519181019190915260600190565b600060208252610f766020830184611db5565b918252602082015260400190565b6000848252602084818401526040606081850152845160608501528185015160808501845b60038110156121ba576121aa828451611e66565b9184019190830190600101612196565b50505084015161010061014085015290506121d9610160840182611d89565b9695505050505050565b60405181810167ffffffffffffffff8111828210171561220557612205612300565b604052919050565b600067ffffffffffffffff82111561222757612227612300565b5060200290565b600067ffffffffffffffff82111561224857612248612300565b50601f01601f191660200190565b60008219821115612269576122696122ea565b500190565b60005b83811015612289578181015183820152602001612271565b8381111561104d5750506000910152565b6002810460018216806122ae57607f821691505b602082108114156115a657634e487b7160e01b600052602260045260246000fd5b60006000198214156122e3576122e36122ea565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461109057600080fdfea2646970667358221220da4927291193d1c31b12523f924e3203691df80df24744026be752fcb129bf0464736f6c63430008000033",
  "libraries": {
    "GigLogic": "0x7E7F545B89D9cc9CD49FF0a830CA251acdEBC887",
    "InviterLogic": "0x85F0Fe200F946f76fc92AD911b4D21c196D8b71B",
    "GigDataLogic": "0xccba1628A294c60B814B9Ff5F18dEEE2f6850eb4"
  },
  "devdoc": {
    "author": "Blockswan",
    "details": "To be covered by a proxy contract, owned by the addressProvider of the specific marketplaceAll admin functions are callable by the protocolConfigurator contract defined also in the   addressProvider*",
    "kind": "dev",
    "methods": {
      "ADDRESSES_PROVIDER()": {
        "returns": {
          "_0": "The address of the AddressProvider"
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "provider": "The address of the AddressProvider"
        }
      },
      "fetchContract(bytes32)": {
        "params": {
          "_name": "the bytes32 name of the contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setProvider(address)": {
        "params": {
          "_providerAddress": "The address of the AddressProvider"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Gig contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ADDRESSES_PROVIDER()": {
        "notice": "Returns the contract address of the IAddressProvider"
      },
      "fetchContract(bytes32)": {
        "notice": "fetch the contract address from the ADDRESSS_PROVIDERthrows error if address === 0"
      },
      "kill()": {
        "notice": "kill the current address provider, only callable by the AddressProvider"
      },
      "setProvider(address)": {
        "notice": "set the provider address of the ProviderContract"
      }
    },
    "notice": "User data within an Blockswan protocol's marketplace - Users can:   # create gigs   # edit gigs   # invite users   # choose affiliates",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10337,
        "contract": "contracts/protocol/gig/Gig.sol:Gig",
        "label": "_gigIds",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(UintSet)3606_storage"
      },
      {
        "astId": 10342,
        "contract": "contracts/protocol/gig/Gig.sol:Gig",
        "label": "_gigs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Gig)18124_storage)"
      },
      {
        "astId": 4823,
        "contract": "contracts/protocol/gig/Gig.sol:Gig",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8024,
        "contract": "contracts/protocol/gig/Gig.sol:Gig",
        "label": "ADDRESS_PROVIDER",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IAddressProvider)5328"
      },
      {
        "astId": 8031,
        "contract": "contracts/protocol/gig/Gig.sol:Gig",
        "label": "MAX_UINT",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Package)18100_storage)3_storage": {
        "base": "t_struct(Package)18100_storage",
        "encoding": "inplace",
        "label": "struct DataTypes.Package[3]",
        "numberOfBytes": "192"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressProvider)5328": {
        "encoding": "inplace",
        "label": "contract IAddressProvider",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Gig)18124_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.Gig)",
        "numberOfBytes": "32",
        "value": "t_struct(Gig)18124_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1313_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1312,
            "contract": "contracts/protocol/gig/Gig.sol:Gig",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Gig)18124_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Gig",
        "members": [
          {
            "astId": 18102,
            "contract": "contracts/protocol/gig/Gig.sol:Gig",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 18104,
            "contract": "contracts/protocol/gig/Gig.sol:Gig",
            "label": "createdAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18106,
            "contract": "contracts/protocol/gig/Gig.sol:Gig",
            "label": "isPaused",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 18109,
            "contract": "contracts/protocol/gig/Gig.sol:Gig",
            "label": "reviewIds",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(UintSet)3606_storage"
          },
          {
            "astId": 18112,
            "contract": "contracts/protocol/gig/Gig.sol:Gig",
            "label": "orderIds",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(UintSet)3606_storage"
          },
          {
            "astId": 18115,
            "contract": "contracts/protocol/gig/Gig.sol:Gig",
            "label": "successSell",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(Counter)1313_storage"
          },
          {
            "astId": 18118,
            "contract": "contracts/protocol/gig/Gig.sol:Gig",
            "label": "failedSell",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(Counter)1313_storage"
          },
          {
            "astId": 18123,
            "contract": "contracts/protocol/gig/Gig.sol:Gig",
            "label": "packages",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_struct(Package)18100_storage)3_storage"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(Package)18100_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Package",
        "members": [
          {
            "astId": 18097,
            "contract": "contracts/protocol/gig/Gig.sol:Gig",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18099,
            "contract": "contracts/protocol/gig/Gig.sol:Gig",
            "label": "timeDelivery",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3134_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3129,
            "contract": "contracts/protocol/gig/Gig.sol:Gig",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3133,
            "contract": "contracts/protocol/gig/Gig.sol:Gig",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)3606_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 3605,
            "contract": "contracts/protocol/gig/Gig.sol:Gig",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3134_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}