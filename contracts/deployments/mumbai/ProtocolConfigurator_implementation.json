{
  "address": "0xE41ca72Dd7FA789523fb9BF761CCc27858Ab110B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "provider",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "name": "fetchContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "getBuyerEntryParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "currencyValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeAdded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "xpEarned",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "invitationEarned",
              "type": "uint8"
            }
          ],
          "internalType": "struct DataTypes.EntryParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBuyerEntryParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "currencyValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeAdded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "xpEarned",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "invitationEarned",
              "type": "uint8"
            }
          ],
          "internalType": "struct DataTypes.EntryParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "getDelayTimestamp",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "selfRefund",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "evidence",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "appeal",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.DelayTimestamp",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDelayTimestamp",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "selfRefund",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "evidence",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "appeal",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.DelayTimestamp",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "getDisputeParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "alpha",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feePerJuror",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxVotes",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.DisputeParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDisputeParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "alpha",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feePerJuror",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxVotes",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.DisputeParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGigCreationParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "currencyValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "xpEarned",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.CreationParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "getGigCreationParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "currencyValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "xpEarned",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.CreationParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOrderCreationParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "flat",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "percent",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.FeeParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "getOrderCreationParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "flat",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "percent",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.FeeParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "getRetributionParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "affiliate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lvl0AffiliateShare",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.RetributionParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRetributionParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "affiliate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lvl0AffiliateShare",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.RetributionParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSellerEntryParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "currencyValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeAdded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "xpEarned",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "invitationEarned",
              "type": "uint8"
            }
          ],
          "internalType": "struct DataTypes.EntryParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "getSellerEntryParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "currencyValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeAdded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "xpEarned",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "invitationEarned",
              "type": "uint8"
            }
          ],
          "internalType": "struct DataTypes.EntryParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSellerOrderFees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "flat",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "percent",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.FeeParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "getSellerOrderFees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "flat",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "percent",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.FeeParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasProtocolRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gigId",
          "type": "uint256"
        },
        {
          "internalType": "contract IUser",
          "name": "UserContract",
          "type": "address"
        }
      ],
      "name": "isGigOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isStillBuyer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isStillSeller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "_providerAddress",
          "type": "address"
        }
      ],
      "name": "setProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "currencyValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeAdded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "xpEarned",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "invitationEarned",
              "type": "uint8"
            }
          ],
          "internalType": "struct DataTypes.EntryParams",
          "name": "newParams",
          "type": "tuple"
        }
      ],
      "name": "updateBuyerEntryParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "selfRefund",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "evidence",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vote",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "appeal",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.DelayTimestamp",
          "name": "newParams",
          "type": "tuple"
        }
      ],
      "name": "updateDelayTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "alpha",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feePerJuror",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxVotes",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.DisputeParams",
          "name": "newParams",
          "type": "tuple"
        }
      ],
      "name": "updateDisputeParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "currencyValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "xpEarned",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.CreationParams",
          "name": "newParams",
          "type": "tuple"
        }
      ],
      "name": "updateGigCreationParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "flat",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "percent",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.FeeParams",
          "name": "newParams",
          "type": "tuple"
        }
      ],
      "name": "updateOrderCreationParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "affiliate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lvl0AffiliateShare",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.RetributionParams",
          "name": "newParams",
          "type": "tuple"
        }
      ],
      "name": "updateRetributionParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "currencyValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeAdded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "xpEarned",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "invitationEarned",
              "type": "uint8"
            }
          ],
          "internalType": "struct DataTypes.EntryParams",
          "name": "newParams",
          "type": "tuple"
        }
      ],
      "name": "updateSellerEntryParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "flat",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "percent",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.FeeParams",
          "name": "newParams",
          "type": "tuple"
        }
      ],
      "name": "updateSellerOrderFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb2b8f59130054389c08029788f1db49cd8a16267dc6b9e093cf00df0759eaa63",
  "receipt": {
    "to": null,
    "from": "0x8D3BD47c94b340E0151376ABF9D76C74c471E213",
    "contractAddress": "0xE41ca72Dd7FA789523fb9BF761CCc27858Ab110B",
    "transactionIndex": 0,
    "gasUsed": "1956764",
    "logsBloom": "0x
    "blockHash": "0x53f344ee86b9c7c9e14bc925d44ed45036bd93cbf70e8266919ebf4ff42ab6e4",
    "transactionHash": "0xb2b8f59130054389c08029788f1db49cd8a16267dc6b9e093cf00df0759eaa63",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 33113457,
        "transactionHash": "0xb2b8f59130054389c08029788f1db49cd8a16267dc6b9e093cf00df0759eaa63",
        "address": "0xE41ca72Dd7FA789523fb9BF761CCc27858Ab110B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d3bd47c94b340e0151376abf9d76c74c471e213"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x53f344ee86b9c7c9e14bc925d44ed45036bd93cbf70e8266919ebf4ff42ab6e4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 33113457,
        "transactionHash": "0xb2b8f59130054389c08029788f1db49cd8a16267dc6b9e093cf00df0759eaa63",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008d3bd47c94b340e0151376abf9d76c74c471e213",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000adcba98a1d7c6400000000000000000000000000000000000000000000000002e2c2ac7ea7550c7000000000000000000000000000000000000000000001c57e897332440bfd844000000000000000000000000000000000000000000000000234f702f489d8a87000000000000000000000000000000000000000000001c57f373edbce2979e84",
        "logIndex": 1,
        "blockHash": "0x53f344ee86b9c7c9e14bc925d44ed45036bd93cbf70e8266919ebf4ff42ab6e4"
      }
    ],
    "blockNumber": 33113457,
    "cumulativeGasUsed": "1956764",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE80a26720a707C08fc5ED6184ef02B89C4DdEc19"
  ],
  "numDeployments": 2,
  "solcInputHash": "075f2457e796c8d70088564501ef535f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"fetchContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getBuyerEntryParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"invitationEarned\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.EntryParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerEntryParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"invitationEarned\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.EntryParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getDelayTimestamp\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"selfRefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"evidence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appeal\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.DelayTimestamp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDelayTimestamp\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"selfRefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"evidence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appeal\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.DelayTimestamp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getDisputeParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alpha\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePerJuror\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.DisputeParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDisputeParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alpha\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePerJuror\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.DisputeParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGigCreationParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.CreationParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getGigCreationParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.CreationParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrderCreationParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"flat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.FeeParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getOrderCreationParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"flat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.FeeParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getRetributionParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"affiliate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lvl0AffiliateShare\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.RetributionParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRetributionParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"affiliate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lvl0AffiliateShare\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.RetributionParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerEntryParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"invitationEarned\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.EntryParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getSellerEntryParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"invitationEarned\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.EntryParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerOrderFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"flat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.FeeParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getSellerOrderFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"flat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.FeeParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasProtocolRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gigId\",\"type\":\"uint256\"},{\"internalType\":\"contract IUser\",\"name\":\"UserContract\",\"type\":\"address\"}],\"name\":\"isGigOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isStillBuyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isStillSeller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"_providerAddress\",\"type\":\"address\"}],\"name\":\"setProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"invitationEarned\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.EntryParams\",\"name\":\"newParams\",\"type\":\"tuple\"}],\"name\":\"updateBuyerEntryParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"selfRefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"evidence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appeal\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.DelayTimestamp\",\"name\":\"newParams\",\"type\":\"tuple\"}],\"name\":\"updateDelayTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alpha\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePerJuror\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVotes\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.DisputeParams\",\"name\":\"newParams\",\"type\":\"tuple\"}],\"name\":\"updateDisputeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.CreationParams\",\"name\":\"newParams\",\"type\":\"tuple\"}],\"name\":\"updateGigCreationParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"flat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.FeeParams\",\"name\":\"newParams\",\"type\":\"tuple\"}],\"name\":\"updateOrderCreationParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"affiliate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lvl0AffiliateShare\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.RetributionParams\",\"name\":\"newParams\",\"type\":\"tuple\"}],\"name\":\"updateRetributionParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xpEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"invitationEarned\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.EntryParams\",\"name\":\"newParams\",\"type\":\"tuple\"}],\"name\":\"updateSellerEntryParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"flat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.FeeParams\",\"name\":\"newParams\",\"type\":\"tuple\"}],\"name\":\"updateSellerOrderFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Blockswan\",\"kind\":\"dev\",\"methods\":{\"ADDRESSES_PROVIDER()\":{\"returns\":{\"_0\":\"The address of the AddressProvider\"}},\"fetchContract(bytes32)\":{\"params\":{\"_name\":\"the bytes32 name of the contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setProvider(address)\":{\"params\":{\"_providerAddress\":\"The address of the AddressProvider\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Protocol Configurator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ADDRESSES_PROVIDER()\":{\"notice\":\"Returns the contract address of the IAddressProvider\"},\"fetchContract(bytes32)\":{\"notice\":\"fetch the contract address from the ADDRESSS_PROVIDERthrows error if address === 0\"},\"kill()\":{\"notice\":\"kill the current address provider, only callable by the AddressProvider\"},\"setProvider(address)\":{\"notice\":\"set the provider address of the ProviderContract\"}},\"notice\":\"Contains all the protocol configuration*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/configuration/ProtocolConfigurator.sol\":\"ProtocolConfigurator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/imports/gnosis/contracts/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"../../openzeppelin/contracts/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developer^\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(from, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(freeMemoryPointer, 36),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTransferResult(\\n        IERC20 token\\n    ) private view returns (bool success) {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n            // Non-standard ERC20 transfer without return.\\n            case 0 {\\n                // NOTE: When the return data size is 0, verify that there\\n                // is code at the address. This is done in order to maintain\\n                // compatibility with Solidity calling conventions.\\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                if iszero(extcodesize(token)) {\\n                    revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                }\\n\\n                success := 1\\n            }\\n            // Standard ERC20 transfer returning boolean success value.\\n            case 32 {\\n                returndatacopy(0, 0, returndatasize())\\n\\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                // as `true` for a boolean. In order to stay compatible with\\n                // OpenZeppelin's `SafeERC20` library which is known to work\\n                // with the existing ERC20 implementation we care about,\\n                // make sure we return success for any non-zero return value\\n                // from the `transfer*` call.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            default {\\n                revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41990e4782d1ef388823346bdf9b3a660db63b631e342e4b1a9cadcb78795511\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/imports/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8f3397c899641ccd9640d0074d4619bd88c568dab2cd4ecdea402039286bd8b3\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xae75c35531456b603dbd5a30d88f89ccaa7303c19a7a3f3bcac27a12a941994a\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.9;\\n\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n      \\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x18e34c1997590b80cab78121aedf411593ffb78c5e2f9993acf66cc2b09fef85\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x70f56a53e5708fa00e6e9a6b4fd6234f44a56902bc44c702e44a5e9bfc32a7ce\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x7331d74643fe3a19d8cfea8896b60a5176a8c15721c4b19ac88b745bbae9a5d6\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x53d6271c947e13a31e055d686c86925db100ca115e7f6067567dd43e9ebee357\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3b8562a2f5cf54ea27029e202bdc4945438fc44bc840c01e6027fb10a196634a\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x29a6b2b2ea467be6d14ef8c6de3fc72e91578bbd19eb0978a5a80460f4271713\",\"license\":\"MIT\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {IAccessControlEnumerable} from \\\"../imports/openzeppelin/contracts/IAccessControlEnumerable.sol\\\";\\n\\n/**\\n * @title IACLManager\\n * @author Blockswan\\n * @notice Defines the basic interface for the ACLManager\\n **/\\ninterface IACLManager is IAccessControlEnumerable {\\n    /**\\n     * @notice Set the role as admin of a specific role.\\n     * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\\n     * @param role The role to be managed by the admin role\\n     * @param adminRole The admin role\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x3f00841f2ec96bc18e710446d6fa9e89f75492aefd3db29edc861bb58a3c0425\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressProvider.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title The interface for contracts to interact with the Blockswan Address Provider contract\\ninterface IAddressProvider {\\n    /**\\n     * @dev Emitted when a new marketplaceId is set.\\n     * @param oldMarketplaceId The address of the old marketplaceId\\n     * @param newMarketplaceId The address of the new marketplaceId\\n     */\\n    event MarketplaceIdSet(\\n        string indexed oldMarketplaceId,\\n        string indexed newMarketplaceId\\n    );\\n\\n    /**\\n     * @dev Emitted when a new contract is added to the AddressProvider.\\n     * @param _name The name assigned in the AddressProvider.\\n     * @param _address The address of the new contract\\n     */\\n    event ContractAdded(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a new contract is removed from the AddressProvider.\\n     * @param _name The contract name removed in the AddressProvider.\\n     * @param _address The address of the removed contract\\n     */\\n    event ContractRemoved(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a contract is upgraded in the AddressProvider.\\n     * @param _name The contract name upraded in the AddressProvider.\\n     * @param _oldAddress The old address prior upgrade\\n     * @param _newAddress The new address after upgrade\\n     */\\n    event ContractUpgraded(\\n        bytes32 _name,\\n        address _oldAddress,\\n        address _newAddress\\n    );\\n\\n    /**\\n     * @notice returns contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     * @return contractAddr - address of contract registered under given provider key\\n     */\\n    function getContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice overloaded getContract to return explicit version of contract */\\n    function getContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    function getContractVersionCount(\\n        bytes32 _name\\n    ) external view returns (uint);\\n\\n    /**\\n     * @dev addContract does two things:\\n     *      1.) registers the address of given ProviderContract in the registry\\n     *      2.) sets the registry address in given ProviderContract so only\\n     *          the registry can call functions on given contract\\n     */\\n    function addContract(bytes32 _name, address _address) external;\\n\\n    /**\\n     * @dev removes contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     */\\n    function removeContract(bytes32 _name) external;\\n\\n    /**\\n     * @notice replaces contract address registered under given key with provided address\\n     * @param _name - registry key for lookup\\n     * @param _newAddress - new contract address to register under given key\\n     */\\n    function upgradeContract(bytes32 _name, address _newAddress) external;\\n}\\n\",\"keccak256\":\"0x79465c1c2649358699708bbaf5f0ac84a8003bb2fa352fd827b4faec2da65bb0\",\"license\":\"MIT\"},\"contracts/interfaces/IBSWAN.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IBSWAN\\n * @author Blockswan\\n * @notice Defines the basic interface for the Blockswan Trust\\n **/\\ninterface IBSWAN is IERC20 {\\n    /**\\n     * @notice Update the DAT config.\\n     * @param _newOwner The new owner of the DAT\\n     * @param _revenueCommitmentBasisPoints the share of revenues tranfered to the buyback reserve\\n     * @param _minInvestment the min investment required in currency value\\n     */\\n    function updateConfig(\\n        address payable _newOwner,\\n        uint256 _revenueCommitmentBasisPoints,\\n        uint256 _minInvestment\\n    ) external;\\n\\n    /**\\n     * @notice Update the DAT config.\\n     * @param _currencyValue the quantity of currency to buy\\n     * @return tokenValue the quantity of BSWAN bought for the _currencyValue\\n     */\\n    function estimateBuyValue(\\n        uint256 _currencyValue\\n    ) external view returns (uint256);\\n\\n    /** @notice Purchase BSWAN tokens with the given amount of currency.\\n     * @param _to The account to receive the BSWAN tokens from this purchase.\\n     * @param _currencyValue How much currency to spend in order to buy BSWAN.\\n     * @param _minTokensBought Buy at least this many BSWAN tokens or the transaction reverts.\\n     * @dev _minTokensBought is necessary as the price will change if some elses transaction mines after\\n     * yours was submitted.\\n     */\\n    function buy(\\n        address _to,\\n        uint256 _currencyValue,\\n        uint256 _minTokensBought\\n    ) external payable;\\n\\n    /// Pay\\n    function estimatePayValue(\\n        uint256 _currencyValue\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Pay the organization on-chain.\\n     * @param _to The account which receives tokens for the contribution. If this address\\n     * is not authorized to receive tokens then they will be sent to the beneficiary account instead.\\n     * @param _currencyValue How much currency which was paid.\\n     */\\n    function pay(address _to, uint _currencyValue) external payable;\\n\\n    /// @notice The address of the token used as reserve in the bonding curve\\n    /// (e.g. the DAI contract)\\n    function currency() external returns (IERC20);\\n}\\n\",\"keccak256\":\"0x5873c9d1f417e7fc1a3b0e790bfe7a6af8daeecc507709ed46e405dd5a315d01\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {IAccessControlEnumerable} from \\\"../imports/openzeppelin/contracts/IAccessControlEnumerable.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IProtocolConfigurator\\n * @author Blockswan\\n * @notice Defines the basic interface for the ProtocolConfigurator\\n **/\\ninterface IProtocolConfigurator {\\n    /**\\n     * @notice Retrieves the parameters when enterering the protocol as a buyer.\\n     * @return parameters The paramaters  when accessing the role status\\n     */\\n    function getBuyerEntryParams()\\n        external\\n        view\\n        returns (DataTypes.EntryParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getBuyerEntryParams(\\n        uint256 version\\n    ) external view returns (DataTypes.EntryParams memory);\\n\\n    /**\\n     * @notice Update the  parameters when enterering the protocol as as buyer.\\n     * @param newParams The new buyer entry paramaters\\n     */\\n    function updateBuyerEntryParams(\\n        DataTypes.EntryParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when enterering the protocol as a seller.\\n     * @return parameters The paramaters  when accessing the role status\\n     */\\n    function getSellerEntryParams()\\n        external\\n        view\\n        returns (DataTypes.EntryParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getSellerEntryParams(\\n        uint256 version\\n    ) external view returns (DataTypes.EntryParams memory);\\n\\n    /**\\n     * @notice Update the  parameters when enterering the protocol as as seller.\\n     * @param newParams The new buyer entry paramaters\\n     */\\n    function updateSellerEntryParams(\\n        DataTypes.EntryParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the retribution percentage values of the protocol.\\n     * @return retributions The retribution percentage values of the protocol.\\n     */\\n    function getRetributionParams()\\n        external\\n        view\\n        returns (DataTypes.RetributionParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getRetributionParams(\\n        uint256 version\\n    ) external view returns (DataTypes.RetributionParams memory);\\n\\n    /**\\n     * @notice Update the retributin  parameters of the protocol.\\n     * @param newParams The new retribution paramaters\\n     */\\n    function updateRetributionParams(\\n        DataTypes.RetributionParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when creating a gig.\\n     * @return parameters The parameters when creating a gig\\n     */\\n    function getGigCreationParams()\\n        external\\n        view\\n        returns (DataTypes.CreationParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getGigCreationParams(\\n        uint256 version\\n    ) external view returns (DataTypes.CreationParams memory);\\n\\n    /**\\n     * @notice Update the gig creation parameters of the protocol.\\n     * @param newParams The new gig creation paramaters\\n     */\\n    function updateGigCreationParams(\\n        DataTypes.CreationParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters when creating an order.\\n     * @return parameters The parameters when creating an order.\\n     */\\n    function getOrderCreationParams()\\n        external\\n        view\\n        returns (DataTypes.FeeParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getOrderCreationParams(\\n        uint256 version\\n    ) external view returns (DataTypes.FeeParams memory);\\n\\n    /**\\n     * @notice Update the order creation parameters of the protocol.\\n     * @param newParams The new order creation paramaters\\n     */\\n    function updateOrderCreationParams(\\n        DataTypes.FeeParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the parameters fees for the seller after an order.\\n     * @return parameters The seller parameters upon odder completion\\n     */\\n    function getSellerOrderFees()\\n        external\\n        view\\n        returns (DataTypes.FeeParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getSellerOrderFees(\\n        uint256 version\\n    ) external view returns (DataTypes.FeeParams memory);\\n\\n    /**\\n     * @notice Update the order creation parameters of the protocol applied to a seller.\\n     * @param newParams The new sellerr-applied order creation paramaters\\n     */\\n    function updateSellerOrderFees(\\n        DataTypes.FeeParams memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the protocol delay timestamp.\\n     * @return parameters The delay timestamp parametes\\n     */\\n    function getDelayTimestamp()\\n        external\\n        view\\n        returns (DataTypes.DelayTimestamp memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getDelayTimestamp(\\n        uint256 version\\n    ) external view returns (DataTypes.DelayTimestamp memory);\\n\\n    /**\\n     * @notice Update the delays timestamp parameters of the protocol.\\n     * @param newParams The new order creation paramaters\\n     */\\n    function updateDelayTimestamp(\\n        DataTypes.DelayTimestamp memory newParams\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the protocol dispute parameters.\\n     * @return parameters The dispute parameters\\n     */\\n    function getDisputeParams()\\n        external\\n        view\\n        returns (DataTypes.DisputeParams memory);\\n\\n    // extends the above function specifying a version to retrieve\\n    function getDisputeParams(\\n        uint256 version\\n    ) external view returns (DataTypes.DisputeParams memory);\\n\\n    /**\\n     * @notice Update the dispute parameters of the protocol.\\n     * @param newParams The new dispute paramaters\\n     */\\n    function updateDisputeParams(\\n        DataTypes.DisputeParams memory newParams\\n    ) external;\\n}\\n\",\"keccak256\":\"0x97695bcb476291c7b492bf16ba4bd98d15d21422031d6b66d620468547329203\",\"license\":\"MIT\"},\"contracts/interfaces/IProviderContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\n\\ninterface IProviderContract {\\n    /**\\n     * @notice set the provider address of the ProviderContract\\n     * @param _providerAddress The address of the AddressProvider\\n     */\\n    function setProvider(IAddressProvider _providerAddress) external;\\n\\n    /**\\n     * @notice fetch the contract address from the ADDRESSS_PROVIDER\\n     * @notice throws error if address === 0\\n     * @param _name the bytes32 name of the contract\\n     */\\n    function fetchContract(bytes32 _name) external view returns (address);\\n\\n    /**\\n     * @notice kill the current address provider, only callable by the AddressProvider\\n     */\\n    function kill() external;\\n\\n    /**\\n     * @notice Returns the contract address of the IAddressProvider\\n     * @return The address of the AddressProvider\\n     */\\n    function ADDRESSES_PROVIDER() external view returns (IAddressProvider);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the protocol_admin role\\n    //  * @return The id of the protocol_admin role\\n    //  */\\n    // function PROTOCOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the buyer role\\n    //  * @return The id of the buyer role\\n    //  */\\n    // function BUYER_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the seller role\\n    //  * @return The id of the seller role\\n    //  */\\n    // function SELLER_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the judge role\\n    //  * @return The id of the judge role\\n    //  */\\n    // function JUDGE_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the Blacklist role\\n    //  * @return The id of the Blacklist role\\n    //  */\\n    // function BLACKLIST_ROLE() external view returns (bytes32);\\n\\n    // /**\\n    //  * @notice Returns the identifier of the whitelist role\\n    //  * @return The id of the whitelist role\\n    //  */\\n    // function WHITELIST_ROLE() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6cc741ef0ed11936ec9063a404025b26990c8f07e56b31a48bb0df65aae914ee\",\"license\":\"MIT\"},\"contracts/interfaces/IProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title IProviderRegistry\\n * @author Blockswan\\n * @notice Defines the basic interface for an Blockswan Protocol Provider Registry.\\n **/\\ninterface IProviderRegistry {\\n    /**\\n     * @dev Emitted when a new AddressProvider is registered.\\n     * @param addressProvider The address of the registered AddressProvider\\n     * @param id The id of the registered AddressProvider\\n     */\\n    event AddressProviderRegistered(\\n        address indexed addressProvider,\\n        uint256 indexed id\\n    );\\n\\n    /**\\n     * @dev Emitted when an addressProvider is unregistered.\\n     * @param addressProvider The address of the unregistered AddressProvider\\n     * @param id The id of the unregistered AddressProvider\\n     */\\n    event AddressProviderUnregistered(\\n        address indexed addressProvider,\\n        uint256 indexed id\\n    );\\n\\n    /**\\n     * @notice Returns the list of registered addresses providers\\n     * @return The list of addresses providers\\n     **/\\n    function getAddressProvidersList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the id of a registered AddressProvider\\n     * @param addressProvider The address of the AddressProvider\\n     * @return The id of the AddressProvider or 0 if is not registered\\n     */\\n    function getAddressProviderIdByAddress(\\n        address addressProvider\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the address of a registered AddressProvider\\n     * @param id The id of the marketplace\\n     * @return The address of the AddressProvider with the given id or zero address if it is not registered\\n     */\\n    function getAddressProviderById(uint256 id) external view returns (address);\\n\\n    /**\\n     * @notice Registers an addresses provider\\n     * @dev The protocol AddressesProvider must not already be registered in the registry\\n     * @dev The id must not be used by an already registered protocol AddressesProvider\\n     * @param provider The address of the new protocol AddressesProvider\\n     * @param id The id for the new AddressesProvider, referring to the marketplace it belongs to\\n     **/\\n    function registerAddressProvider(address provider, uint256 id) external;\\n\\n    /**\\n     * @notice Removes an addresses provider from the list of registered addresses providers\\n     * @param provider The protocol AddressesProvider address\\n     **/\\n    function unregisterAddressProvider(address provider) external;\\n}\\n\",\"keccak256\":\"0x78703fc146685003cfc7675b1259047ff9dd0cfa7a436ac17c665f9568ec0ef8\",\"license\":\"MIT\"},\"contracts/interfaces/IUser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../protocol/libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../protocol/libraries/types/InputTypes.sol\\\";\\n\\n/**\\n * @title IUser\\n * @author Blockswan\\n * @notice Defines the basic interface for an blockswan user.\\n **/\\ninterface IUser {\\n    /**\\n     * @dev Emitted when a new user is created.\\n     * @param userId The id of the user\\n     * @param userAddress The wallet addresss of the user\\n     * @param userData The data associated with the user\\n     */\\n    event UserAdded(\\n        uint256 indexed userId,\\n        address indexed userAddress,\\n        InputTypes.CreateUserInput userData\\n    );\\n\\n    /**\\n     * @dev Emitted when an user is edited.\\n     * @param userId The id of the user\\n     * @param userAddress The wallet addresss of the user\\n     * @param userData The data associated with the user\\n     */\\n    event UserEdited(\\n        uint256 indexed userId,\\n        address indexed userAddress,\\n        OutputTypes.UserOutput userData\\n    );\\n\\n    /**\\n     * @notice Returns the user id from a given address.\\n     * @param account The address of the user\\n     * @return userId The userId associated to the account address\\n     **/\\n    function getIdByAddress(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user data.\\n     * @param userId The id of the user.\\n     * @return User The data associated to the user it\\n     **/\\n    function getUserById(\\n        uint256 userId\\n    ) external view returns (OutputTypes.UserOutput memory);\\n\\n    /**\\n     * @notice Returns the user for a given public key.\\n     * @param pubKey The address as parameter.\\n     * @return User the user linked to the public key\\n     **/\\n    function getUserByAddress(\\n        address pubKey\\n    ) external view returns (OutputTypes.UserOutput memory);\\n\\n    /**\\n     * @notice Returns the list of all initialized users.\\n     * @dev It does not include dropped users\\n     * @return A data array of the underlying user.\\n     **/\\n    function getUserList()\\n        external\\n        view\\n        returns (OutputTypes.UserOutput[] memory);\\n\\n    /**\\n     * @notice Returns the current revision of the contract\\n     * @return the current revision\\n     **/\\n    function getUsersCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user wallet address.\\n     * @param userId The id of the user.\\n     * @return userAddress the wallet of the user\\n     **/\\n    function getAddressById(uint256 userId) external view returns (address);\\n\\n    /**\\n     * @notice Create a new users with the msg.sender wallet\\n     * @param metadata the user related information\\n     * @param inviterId the userID of whom invited the newUser\\n     **/\\n    function createUser(string memory metadata, uint256 inviterId) external;\\n\\n    /**\\n     * @notice retrieves the inviters wallet for a given wallet account\\n     * @param account the wallet to get the inviters from\\n     * @return address the pubkey of inviter0\\n     * @return address the pubkey of inviter1\\n     **/\\n    function getInvitersByUserAddress(\\n        address account\\n    ) external view returns (address, address);\\n\\n    /**\\n     * @notice add the gig id to the user gigIds set.\\n     * @param caller the wallet creating the gig.\\n     * @param newGigId the new gig id.\\n     * @return success the relation has been addded.\\n     **/\\n    function createGig(\\n        address caller,\\n        uint256 newGigId\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice add the order id to the user buyerOrderIds set.\\n     * @param buyerId the id of the buyer\\n     * @param newOrderId the new gig orderId.\\n     * @return success the relation has been addded.\\n     **/\\n    function createBuyerOrder(\\n        uint256 buyerId,\\n        uint256 newOrderId\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice retrieves the inviters wallet for a given userId\\n     * @param userId the user id to get the inviters from\\n     * @return address the pubkey of inviter0\\n     * @return address the pubkey of inviter1\\n     **/\\n    function getInvitersById(\\n        uint256 userId\\n    ) external view returns (address, address);\\n\\n    /**\\n     * @notice return true if the gigId is owned by the given userId\\n     * @param userId the user id to check if he own the gig\\n     * @param gigId the gigId\\n     * @return bool if the gigId is owned by the given userId\\n     **/\\n    function isGigOwner(\\n        uint256 userId,\\n        uint256 gigId\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf35a757d1a4fd7344e769e884d95fe22cb33ac81283741b17f6241175d62d3aa\",\"license\":\"MIT\"},\"contracts/interfaces/IXP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IXP\\n * @author Blockswan\\n * @notice Defines the basic interface for the Experience\\n **/\\ninterface IXP is IERC20 {\\n    /**\\n     * @notice set the xp amount to earn for a bytes32 key action\\n     * @param xpKey The key associated to the xp to earn\\n     * @param xpToReceive the xp to earn for the key action\\n     */\\n    function setXpAmount(bytes32 xpKey, uint256 xpToReceive) external;\\n\\n    /**\\n     * @notice get the xp amount to earn for a bytes32 key action\\n     * @param xpKey The action key as bytes32\\n     * @return success There is an action matching the key\\n     * @return _amount the xp to earn for the key action\\n     */\\n    function getXpAmount(bytes32 xpKey) external returns (bool, uint256);\\n\\n    /**\\n     * @notice mint the xp amount to earn for a bytes32 key action\\n     * @param xpKey The action key as bytes32\\n     * @param to the addres receiving the XP\\n     */\\n    function mint(bytes32 xpKey, address to) external;\\n}\\n\",\"keccak256\":\"0x8876d54ea5e4d0471db8cec5f42e8387cafbe83b8ea1618abe8326b69c96f60a\",\"license\":\"MIT\"},\"contracts/protocol/configuration/ProtocolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {Ownable} from \\\"../../imports/openzeppelin/contracts/Ownable.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {EnumerableSet} from \\\"../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {RegistryKeys} from \\\"../libraries/helpers/RegistryKeys.sol\\\";\\nimport {RoleKeys} from \\\"../libraries/helpers/RoleKeys.sol\\\";\\nimport {IProviderRegistry} from \\\"../../interfaces/IProviderRegistry.sol\\\";\\nimport {IProtocolConfigurator} from \\\"../../interfaces/IProtocolConfigurator.sol\\\";\\nimport {IAddressProvider} from \\\"../../interfaces/IAddressProvider.sol\\\";\\n\\nimport {ProviderContract} from \\\"./ProviderContract.sol\\\";\\nimport {ParamsLogic} from \\\"../libraries/logics/ParamsLogic.sol\\\";\\n\\n/**\\n * @title Protocol Configurator\\n * @author Blockswan\\n * @notice Contains all the protocol configuration\\n **/\\n\\ncontract ProtocolConfigurator is ProviderContract {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using ParamsLogic for EnumerableSet.UintSet;\\n\\n    EnumerableSet.UintSet private _buyerEntryParamsVersions;\\n    mapping(uint256 => DataTypes.EntryParams) private _buyerEntryParamsHistory;\\n\\n    EnumerableSet.UintSet private _sellerEntryParamsVersions;\\n    mapping(uint256 => DataTypes.EntryParams) private _sellerEntryParamsHistory;\\n\\n    EnumerableSet.UintSet private _retributionParamsVersions;\\n    mapping(uint256 => DataTypes.RetributionParams)\\n        private _retributionParamsHistory;\\n\\n    EnumerableSet.UintSet private _gigCreationParamsVersions;\\n    mapping(uint256 => DataTypes.CreationParams)\\n        private _gigCreationParamsHistory;\\n\\n    EnumerableSet.UintSet private _orderCreationParamsVersions;\\n    mapping(uint256 => DataTypes.FeeParams) private _orderCreationParamsHistory;\\n\\n    EnumerableSet.UintSet private _sellerOrderFeesParamsVersions;\\n    mapping(uint256 => DataTypes.FeeParams)\\n        private _sellerOrderFeesParamsHistory;\\n\\n    EnumerableSet.UintSet private _delayTimestampVersions;\\n    mapping(uint256 => DataTypes.DelayTimestamp) private _delayTimestampHistory;\\n\\n    EnumerableSet.UintSet private _disputeParamsVersions;\\n    mapping(uint256 => DataTypes.DisputeParams) private _disputeParamsHistory;\\n\\n    constructor(IAddressProvider provider) ProviderContract(provider) {}\\n\\n    function getBuyerEntryParams()\\n        external\\n        view\\n        returns (DataTypes.EntryParams memory)\\n    {\\n        return\\n            _buyerEntryParamsVersions.getEntryParams(_buyerEntryParamsHistory);\\n    }\\n\\n    function getBuyerEntryParams(\\n        uint256 version\\n    ) external view returns (DataTypes.EntryParams memory) {\\n        return\\n            _buyerEntryParamsVersions.getEntryParams(\\n                _buyerEntryParamsHistory,\\n                version\\n            );\\n    }\\n\\n    function updateBuyerEntryParams(\\n        DataTypes.EntryParams memory newParams\\n    ) external onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        _buyerEntryParamsVersions.updateEntryParams(\\n            _buyerEntryParamsHistory,\\n            newParams\\n        );\\n    }\\n\\n    function getSellerEntryParams()\\n        external\\n        view\\n        returns (DataTypes.EntryParams memory)\\n    {\\n        return\\n            _sellerEntryParamsVersions.getEntryParams(\\n                _sellerEntryParamsHistory\\n            );\\n    }\\n\\n    function getSellerEntryParams(\\n        uint256 version\\n    ) external view returns (DataTypes.EntryParams memory) {\\n        return\\n            _sellerEntryParamsVersions.getEntryParams(\\n                _sellerEntryParamsHistory,\\n                version\\n            );\\n    }\\n\\n    function updateSellerEntryParams(\\n        DataTypes.EntryParams memory newParams\\n    ) external onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        _sellerEntryParamsVersions.updateEntryParams(\\n            _sellerEntryParamsHistory,\\n            newParams\\n        );\\n    }\\n\\n    function getRetributionParams()\\n        external\\n        view\\n        returns (DataTypes.RetributionParams memory)\\n    {\\n        return\\n            _retributionParamsVersions.getRetributionParams(\\n                _retributionParamsHistory\\n            );\\n    }\\n\\n    function getRetributionParams(\\n        uint256 version\\n    ) external view returns (DataTypes.RetributionParams memory) {\\n        return\\n            _retributionParamsVersions.getRetributionParams(\\n                _retributionParamsHistory,\\n                version\\n            );\\n    }\\n\\n    function updateRetributionParams(\\n        DataTypes.RetributionParams memory newParams\\n    ) external onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        _retributionParamsVersions.updateRetributionParams(\\n            _retributionParamsHistory,\\n            newParams\\n        );\\n    }\\n\\n    function getGigCreationParams()\\n        external\\n        view\\n        returns (DataTypes.CreationParams memory)\\n    {\\n        return\\n            _gigCreationParamsVersions.getCreationParams(\\n                _gigCreationParamsHistory\\n            );\\n    }\\n\\n    function getGigCreationParams(\\n        uint256 version\\n    ) external view returns (DataTypes.CreationParams memory) {\\n        return\\n            _gigCreationParamsVersions.getCreationParams(\\n                _gigCreationParamsHistory,\\n                version\\n            );\\n    }\\n\\n    function updateGigCreationParams(\\n        DataTypes.CreationParams memory newParams\\n    ) external onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        _gigCreationParamsVersions.updateCreationParams(\\n            _gigCreationParamsHistory,\\n            newParams\\n        );\\n    }\\n\\n    function getOrderCreationParams()\\n        external\\n        view\\n        returns (DataTypes.FeeParams memory)\\n    {\\n        return (\\n            _orderCreationParamsVersions.getFeeParams(\\n                _orderCreationParamsHistory\\n            )\\n        );\\n    }\\n\\n    function getOrderCreationParams(\\n        uint256 version\\n    ) external view returns (DataTypes.FeeParams memory) {\\n        return (\\n            _orderCreationParamsVersions.getFeeParams(\\n                _orderCreationParamsHistory,\\n                version\\n            )\\n        );\\n    }\\n\\n    function updateOrderCreationParams(\\n        DataTypes.FeeParams memory newParams\\n    ) external onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        _orderCreationParamsVersions.updateFeeParams(\\n            _orderCreationParamsHistory,\\n            newParams\\n        );\\n    }\\n\\n    function getSellerOrderFees()\\n        external\\n        view\\n        returns (DataTypes.FeeParams memory)\\n    {\\n        return\\n            _sellerOrderFeesParamsVersions.getFeeParams(\\n                _sellerOrderFeesParamsHistory\\n            );\\n    }\\n\\n    function getSellerOrderFees(\\n        uint256 version\\n    ) external view returns (DataTypes.FeeParams memory) {\\n        return\\n            _sellerOrderFeesParamsVersions.getFeeParams(\\n                _sellerOrderFeesParamsHistory,\\n                version\\n            );\\n    }\\n\\n    function updateSellerOrderFees(\\n        DataTypes.FeeParams memory newParams\\n    ) external onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        _sellerOrderFeesParamsVersions.updateFeeParams(\\n            _sellerOrderFeesParamsHistory,\\n            newParams\\n        );\\n    }\\n\\n    function getDelayTimestamp()\\n        external\\n        view\\n        returns (DataTypes.DelayTimestamp memory)\\n    {\\n        return\\n            _delayTimestampVersions.getDelayTimestamp(_delayTimestampHistory);\\n    }\\n\\n    function getDelayTimestamp(\\n        uint256 version\\n    ) external view returns (DataTypes.DelayTimestamp memory) {\\n        return\\n            _delayTimestampVersions.getDelayTimestamp(\\n                _delayTimestampHistory,\\n                version\\n            );\\n    }\\n\\n    function updateDelayTimestamp(\\n        DataTypes.DelayTimestamp memory newParams\\n    ) external onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        _delayTimestampVersions.updateDelayTimestamp(\\n            _delayTimestampHistory,\\n            newParams\\n        );\\n    }\\n\\n    function getDisputeParams()\\n        external\\n        view\\n        returns (DataTypes.DisputeParams memory)\\n    {\\n        return _disputeParamsVersions.getDisputeParams(_disputeParamsHistory);\\n    }\\n\\n    function getDisputeParams(\\n        uint256 version\\n    ) external view returns (DataTypes.DisputeParams memory) {\\n        return\\n            _disputeParamsVersions.getDisputeParams(\\n                _disputeParamsHistory,\\n                version\\n            );\\n    }\\n\\n    function updateDisputeParams(\\n        DataTypes.DisputeParams memory newParams\\n    ) external onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        _disputeParamsVersions.updateDisputeParams(\\n            _disputeParamsHistory,\\n            newParams\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x6c09d8951186ecb962ecd3168a67a29ec6ecb7a6e9885535495a43c96b72e809\",\"license\":\"MIT\"},\"contracts/protocol/configuration/ProviderContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {Ownable} from \\\"../../imports/openzeppelin/contracts/Ownable.sol\\\";\\nimport {IERC20} from \\\"../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {IAddressProvider} from \\\"../../interfaces/IAddressProvider.sol\\\";\\nimport {IProtocolConfigurator} from \\\"../../interfaces/IProtocolConfigurator.sol\\\";\\n\\nimport {IProviderContract} from \\\"../../interfaces/IProviderContract.sol\\\";\\nimport {IACLManager} from \\\"../../interfaces/IACLManager.sol\\\";\\nimport {IBSWAN} from \\\"../../interfaces/IBSWAN.sol\\\";\\nimport {IXP} from \\\"../../interfaces/IXP.sol\\\";\\nimport {IUser} from \\\"../../interfaces/IUser.sol\\\";\\nimport {InputTypes} from \\\"../libraries/types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {RegistryKeys} from \\\"../libraries/helpers/RegistryKeys.sol\\\";\\nimport {RoleKeys} from \\\"../libraries/helpers/RoleKeys.sol\\\";\\n\\n/**\\n * @title Parent class to all contracts used to check that a contract is registerable\\n * @notice ProviderContract is Ownable so the deployer can re-register it against new registries\\n * @dev The Provider uses this to talk to all contracts that inherit from this contract.\\n */\\n\\ncontract ProviderContract is Ownable, IProviderContract {\\n    using GPv2SafeERC20 for IERC20;\\n    IAddressProvider public ADDRESS_PROVIDER;\\n\\n    uint256 public MAX_UINT = 2 ** 256 - 1;\\n\\n    /// @notice all contracts that inherit from ProviderContract are automatically Ownable()\\n    /// @dev internal constructor makes ProviderContract abstract\\n    constructor(IAddressProvider provider) Ownable() {\\n        require(\\n            address(provider) != address(0x00),\\n            Errors.ZERO_ADDRESS_IS_INVALID\\n        );\\n\\n        ADDRESS_PROVIDER = IAddressProvider(provider);\\n    }\\n\\n    /// @notice only allow  contracts to be called by the respective agent.\\n    ///     i.e. GigStorage methods can only be invoked by GigFactory.\\n    modifier onlyProvider(bytes32 _name) {\\n        require(\\n            _msgSender() == fetchContract(_name),\\n            Errors.ONLY_PROVIDER_ALLOWED\\n        );\\n        _;\\n    }\\n\\n    /// @notice only allow function contracts to be called by the respective role.\\n    ///     i.e. GigStorage methods can only be invoked by BUYER_ROLE.\\n    modifier onlyProtocolRole(bytes32 _role) {\\n        require(\\n            hasProtocolRole(_role, _msgSender()),\\n            \\\"Requires msg.sender has role\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyStillBuyer() {\\n        require(isStillBuyer(_msgSender()), Errors.ONLY_BUYER);\\n        _;\\n    }\\n\\n    modifier onlyStillSeller() {\\n        require(isStillSeller(_msgSender()), Errors.ONLY_SELLER);\\n        _;\\n    }\\n\\n    function hasProtocolRole(\\n        bytes32 _role,\\n        address account\\n    ) public view returns (bool) {\\n        bool hasRole = IACLManager(fetchContract(RegistryKeys.ACL_MANAGER))\\n            .hasRole(_role, account);\\n        return hasRole;\\n    }\\n\\n    // function hasProtocolRoles(\\n    //     bytes32[] memory _roles,\\n    //     address account\\n    // ) public view returns (bool) {\\n    //     for (uint256 i; i < _roles.length; i++) {\\n    //         bool hasRole = IACLManager(fetchContract(RegistryKeys.ACL_MANAGER))\\n    //             .hasRole(_roles[i], account);\\n    //         if (hasRole) {\\n    //             return true;\\n    //         }\\n    //     }\\n    //     return false;\\n    // }\\n\\n    function isStillBuyer(address account) public view returns (bool) {\\n        return\\n            hasProtocolRole(RoleKeys.BUYER_ROLE, account) &&\\n            IUser(fetchContract(RegistryKeys.USER))\\n                .getUserByAddress(account)\\n                .buyerUntil >\\n            block.timestamp;\\n    }\\n\\n    function isStillSeller(address account) public view returns (bool) {\\n        return\\n            hasProtocolRole(RoleKeys.SELLER_ROLE, account) &&\\n            IUser(fetchContract(RegistryKeys.USER))\\n                .getUserByAddress(account)\\n                .sellerUntil >\\n            block.timestamp;\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function setProvider(IAddressProvider _providerAddress) public override {\\n        require(\\n            address(_providerAddress) == address(0x00) ||\\n                address(ADDRESS_PROVIDER) == msg.sender ||\\n                this.owner() == msg.sender,\\n            \\\"Can only be called if addressesProvider is empty, msg.sender or owner\\\"\\n        );\\n        ADDRESS_PROVIDER = _providerAddress;\\n    }\\n\\n    function fetchContract(\\n        bytes32 _name\\n    ) public view override returns (address) {\\n        return address(IAddressProvider(ADDRESS_PROVIDER).fetchContract(_name));\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function kill() external override {\\n        assert(msg.sender == address(ADDRESS_PROVIDER));\\n        selfdestruct(payable(address(ADDRESS_PROVIDER)));\\n    }\\n\\n    /// @inheritdoc IProviderContract\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        override\\n        returns (IAddressProvider)\\n    {\\n        return ADDRESS_PROVIDER;\\n    }\\n\\n    function grantProtocolRole(bytes32 _role, address account) internal {\\n        IACLManager(fetchContract(RegistryKeys.ACL_MANAGER)).grantRole(\\n            _role,\\n            account\\n        );\\n    }\\n\\n    function approve(\\n        address erc20\\n    ) public onlyProtocolRole(RoleKeys.PROTOCOL_ADMIN_ROLE) {\\n        address dat = fetchContract(RegistryKeys.DAT);\\n        IERC20(erc20).approve(dat, MAX_UINT);\\n    }\\n\\n    function _pay(\\n        InputTypes.ProcessPaymentInput memory params,\\n        IBSWAN dat\\n    ) internal {\\n        dat.pay(params.inviter0, params.inviter0Rewards);\\n        dat.pay(params.inviter1, params.inviter1Rewards);\\n        dat.pay(address(0), params.remainingRewards);\\n    }\\n\\n    function _processPayment(\\n        InputTypes.ProcessPaymentInput memory params\\n    ) internal {\\n        IBSWAN dat = IBSWAN(fetchContract(RegistryKeys.DAT));\\n        uint256 total = params.inviter0Rewards +\\n            params.inviter1Rewards +\\n            params.remainingRewards;\\n        IERC20(dat.currency()).safeTransferFrom(\\n            params.caller,\\n            address(this),\\n            total\\n        );\\n        _pay(params, dat);\\n    }\\n\\n    function _giveXP(bytes32 _key, address _to) internal {\\n        IXP(fetchContract(RegistryKeys.XP)).mint(_key, _to);\\n    }\\n\\n    function getProtocolRetributionParams()\\n        internal\\n        view\\n        returns (DataTypes.RetributionParams memory)\\n    {\\n        return\\n            IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            ).getRetributionParams();\\n    }\\n\\n    function getProtocolDelayTimestamp()\\n        internal\\n        view\\n        returns (DataTypes.DelayTimestamp memory)\\n    {\\n        return\\n            IProtocolConfigurator(\\n                fetchContract(RegistryKeys.PROTOCOL_CONFIGURATOR)\\n            ).getDelayTimestamp();\\n    }\\n\\n    function isGigOwner(\\n        uint256 userId,\\n        uint256 gigId,\\n        IUser UserContract\\n    ) public view returns (bool) {\\n        return UserContract.isGigOwner(userId, gigId);\\n    }\\n}\\n\",\"keccak256\":\"0x3797428e4012f90584916d0cbcae194627610db11936838aad90b8ed1b38df69\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Errors  library\\n * @author Blockswan\\n * @notice Defines the error messages emitted by the different contracts of the Blockswan protocol\\n */\\nlibrary Errors {\\n    string public constant INVALID_ADDRESS_PROVIDER_ID = \\\"1\\\"; // The addresses provider is not valid\\n    string public constant ADDRESS_PROVIDER_ALREADY_ADDED = \\\"2\\\"; // This addresses provider already exists\\n    string public constant ADDRESS_PROVIDER_NOT_REGISTERED = \\\"3\\\"; // 'This addresses provider is not registered'\\n    string public constant CONTRACT_NAME_ALREADY_USED = \\\"4\\\"; // 'Requires that given _name does not already have non-zero registered contract address'\\n    string public constant ZERO_ADDRESS_IS_INVALID = \\\"5\\\"; // the address provided is 0x00\\n    string public constant INDEX_OUT_OF_RANGE = \\\"6\\\"; // the index provided is out of range\\n    string public constant ADDRESS_ALREADY_USED = \\\"7\\\"; // 'The address provided has already been unsed to initialise an account'\\n    string public constant INVALID_USER_ID = \\\"8\\\"; // 'The userId is incorrect'\\n    string public constant RESTRICTED_TO_BUYER = \\\"9\\\"; // this function can't  be called by buyers\\n    string public constant INVALID_INVITER_ID = \\\"10\\\"; // The inviter ID provided is incorrect\\n    string public constant FAILED_BECOMING_BUYER = \\\"11\\\"; // The execution to becomeBuyer failed\\n    string public constant RESTRICTED_TO_SELLER = \\\"12\\\"; // this function can't  be called by sellers\\n    string public constant FAILED_BECOMING_SELLER = \\\"13\\\"; // The execution to becomeSeller failed\\n    string public constant NO_MATCHING_XP_KEY = \\\"14\\\"; // There is no xp value to give for this byte32\\n    string public constant GIG_ID_ALREADY_EXISING = \\\"15\\\"; // There is already an id for this gig.\\n    string public constant ONLY_SELLER = \\\"16\\\"; // Only account with the seller role can call the functions\\n    string public constant ONLY_BUYER = \\\"17\\\"; // Only buyers can call those functions.\\n    string public constant NOT_GIG_OWNER = \\\"18\\\"; // The id provided does not match with the gig owner id\\n    string public constant CALLER_NOT_SELLER_ID = \\\"19\\\"; // The seller id provided is not matching with the account address calling the function\\n    string public constant CALLER_NOT_BUYER_ID = \\\"20\\\"; // The buyer id provided is not matching with the account address calling the function\\n    string public constant NOT_ORDER_SELLER = \\\"21\\\"; // The id provided is not the order seller\\n    string public constant NOT_ORDER_BUYER = \\\"22\\\"; // The id provided is not the order buyer\\n    string public constant INVALID_ORDER_STATE = \\\"23\\\"; // The function can't be called under the current order state\\n    string public constant SELF_REFUND_DELAY_NOT_OVER = \\\"24\\\"; // The self refund delay is not over\\n    string public constant NOT_ORDER_ACTOR = \\\"25\\\"; // The account address calling the function is not matching with the buyerId nor sellerId.\\n    string public constant DISPUTE_NOT_CREATED = \\\"26\\\"; // The dispute has not been created yet\\n    string public constant JURY_STAKE_NOT_ENOUGH = \\\"27\\\"; // The jury stake is not enough\\n    string public constant FAILED_TO_STAKE_JURY = \\\"28\\\"; // The jury stake failed\\n    string public constant FAILED_TO_WITHDRAW_JURY = \\\"29\\\"; // The jury withdraw failed\\n    string public constant ROUND_EVIDENCE_ALREADY_SUBMITTED = \\\"30\\\"; // The evidence has already been submitted\\n    string public constant EVIDENCE_NOT_SUBMITTED = \\\"31\\\"; // The evidence has not been submitted\\n    string public constant DS_EVIDENCE_PERIOD_OVER = \\\"32\\\"; // The evidence period is over\\n    // string public constant DS_VOTING_PERIOD_OVER = \\\"33\\\"; // The voting period is over\\n    // string public constant DS_VOTING_PERIOD_NOT_OVER = \\\"34\\\"; // The voting period is not over\\n    // string public constant DS_VOTING_PERIOD_NOT_STARTED = \\\"35\\\"; // The voting period has not started yet\\n    string public constant ONLY_PROVIDER_ALLOWED = \\\"36\\\"; // Only the provider can call this function\\n    string public constant DS_EVIDENCE_SENDER_NOT_PARTY = \\\"37\\\"; // The sender is not a party of the dispute\\n    string public constant CALLER_NOT_USER = \\\"38\\\"; // The caller is not the user Id\\n    string public constant DS_EVIDENCE_ROLE_NOT_VALID = \\\"39\\\"; // The role is not valid\\n    string public constant RD_ROUND_DOES_NOT_EXIST = \\\"40\\\"; // The round does not exist\\n    string public constant DS_IN_EXECUTION_PERIOD = \\\"46\\\"; //     The dispute is in execution state\\n    string public constant VOTE_REVEAL_INCORRECT = \\\"47\\\"; //     The vote reveal is incorrect\\n    string public constant ROUND_VOTE_ALREADY_COMMITED = \\\"48\\\"; //     The vote has already been commited\\n    string public constant ROUND_VOTE_NOT_COMMITED = \\\"49\\\"; //     The vote has not been commited\\n    string public constant ROUND_VOTE_ALREADY_REVEALED = \\\"50\\\"; //     The vote has already been revealed\\n    string public constant RD_ACCOUNT_NOT_DRAWN_JUROR = \\\"51\\\"; //     The account is not a drawn juror\\n    string public constant DS_COMMIT_STATE_REQUIRED = \\\"52\\\"; //    The dispute is not in commit state\\n    string public constant DS_TIME_NOT_PASSED = \\\"53\\\"; //   The time has not passed\\n    string public constant DS_INVALID_STATE = \\\"54\\\"; //   The state is invalid\\n    string public constant VOTE_INVALID_CHOICE = \\\"55\\\"; //  The vote choice is invalid\\n    string public constant DS_NO_COMMITMENTS_MADE_FOR_ROUND = \\\"56\\\"; //  No commitments were made for the round\\n    string public constant DS_NO_VOTES_MADE_FOR_ROUND = \\\"57\\\"; //  No votes were made for the round\\n    string public constant RD_VOTE_NOT_FOUND = \\\"58\\\"; //  The vote was not found\\n    string public constant ROUND_NOT_CLOSED = \\\"59\\\"; //  The round is not closed\\n    string public constant VOTE_INCORRECT = \\\"60\\\"; //  The vote is incorrect\\n    string public constant ROUND_NOT_APPEALED = \\\"61\\\"; //  The round is not appealed\\n    string public constant ROUND_ID_INVALID = \\\"62\\\"; //  The round id is invalid\\n    string public constant CLAIM_NOT_ALLOWED = \\\"63\\\"; //  The claim is not allowed\\n    string public constant ROUND_IS_APPEALED = \\\"64\\\"; //  The round is appealed\\n    string public constant DS_DISPUTE_ALREADY_RULED = \\\"65\\\"; //  The dispute is already ruled\\n}\\n\",\"keccak256\":\"0x006a08fc9f61bb5b5f34aba81b29feff39671d8d23647e159b5aae7cd8755cc2\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/helpers/RegistryKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RegistryKeys {\\n    /// REGISTRY\\n    //  ----  CONTRACT ------\\n    bytes32 public constant GIG = \\\"GIG\\\";\\n    bytes32 public constant ORDER = \\\"ORDER\\\";\\n    bytes32 public constant USER = \\\"USER\\\";\\n    bytes32 public constant DISPUTE = \\\"DISPUTE\\\";\\n    bytes32 public constant JURY = \\\"JURY\\\";\\n    bytes32 public constant PROTOCOL_CONFIGURATOR = \\\"PROTOCOL_CONFIGURATOR\\\";\\n    bytes32 public constant DAT = \\\"DAT\\\";\\n    bytes32 public constant ACL_MANAGER = \\\"ACL_MANAGER\\\";\\n    bytes32 public constant DATA_PROVIDER = \\\"DATA_PROVIDER\\\";\\n    bytes32 public constant XP = \\\"XP\\\";\\n    // ---- NON CONTRACT ------\\n    bytes32 public constant ACL_ADMIN = \\\"ACL_ADMIN\\\";\\n\\n    bytes32 public constant TREE_KEY = \\\"Blockswan/SortitionSumTrees\\\";\\n}\\n\",\"keccak256\":\"0x10a9b72b3680e119c279cbd2196a8fbb5f985d4ea99a8ee1cbd599a83464f41d\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/RoleKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoleKeys {\\n    // ---- ADMIN ROLES  ------\\n    bytes32 public constant PROTOCOL_ADMIN_ROLE = \\\"PROTOCOL_ADMIN\\\";\\n    bytes32 public constant BUYER_ADMIN_ROLE = \\\"BUYER_ADMIN\\\";\\n    bytes32 public constant SELLER_ADMIN_ROLE = \\\"SELLER_ADMIN\\\";\\n    // ----  ROLES  ------\\n    bytes32 public constant BUYER_ROLE = \\\"BUYER\\\";\\n    bytes32 public constant SELLER_ROLE = \\\"SELLER\\\";\\n    bytes32 public constant JUDGE_ROLE = \\\"JUDGE\\\";\\n    bytes32 public constant BLACKLIST_ROLE = \\\"BLACKLIST\\\";\\n    bytes32 public constant WHITELIST_ROLE = \\\"WHITELIST\\\";\\n    bytes32 public constant XP_GIVER_ROLE = \\\"XP_GIVER\\\";\\n}\\n\",\"keccak256\":\"0xe8a691a194d701426456deeea9b7b85d815e8cbaaac4c2c7e623dbec9c7e9d91\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/ParamsLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title  Params logic library\\n * @author Blockswan\\n * @notice Implements the logic for protocol params functions\\n */\\nlibrary ParamsLogic {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function getEntryParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.EntryParams) storage history\\n    ) external view returns (DataTypes.EntryParams memory) {\\n        return history[params.at(params.length() - 1)];\\n    }\\n\\n    function getEntryParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.EntryParams) storage history,\\n        uint256 version\\n    ) external view returns (DataTypes.EntryParams memory) {\\n        return history[params.at(version)];\\n    }\\n\\n    function updateEntryParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.EntryParams) storage history,\\n        DataTypes.EntryParams memory newParams\\n    ) external {\\n        uint256 newParamId = params.length();\\n        params.add(newParamId);\\n        history[newParamId] = newParams;\\n    }\\n\\n    function getRetributionParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.RetributionParams) storage history\\n    ) external view returns (DataTypes.RetributionParams memory) {\\n        return history[params.at(params.length() - 1)];\\n    }\\n\\n    function getRetributionParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.RetributionParams) storage history,\\n        uint256 version\\n    ) external view returns (DataTypes.RetributionParams memory) {\\n        return history[params.at(version)];\\n    }\\n\\n    function updateRetributionParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.RetributionParams) storage history,\\n        DataTypes.RetributionParams memory newParams\\n    ) external {\\n        uint256 newParamId = params.length();\\n        params.add(newParamId);\\n        history[newParamId] = newParams;\\n    }\\n\\n    function getCreationParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.CreationParams) storage history\\n    ) external view returns (DataTypes.CreationParams memory) {\\n        return history[params.at(params.length() - 1)];\\n    }\\n\\n    function getCreationParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.CreationParams) storage history,\\n        uint256 version\\n    ) external view returns (DataTypes.CreationParams memory) {\\n        return history[params.at(version)];\\n    }\\n\\n    function updateCreationParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.CreationParams) storage history,\\n        DataTypes.CreationParams memory newParams\\n    ) external {\\n        uint256 newParamId = params.length();\\n        params.add(newParamId);\\n        history[newParamId] = newParams;\\n    }\\n\\n    function getFeeParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.FeeParams) storage history\\n    ) external view returns (DataTypes.FeeParams memory) {\\n        return history[params.at(params.length() - 1)];\\n    }\\n\\n    function getFeeParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.FeeParams) storage history,\\n        uint256 version\\n    ) external view returns (DataTypes.FeeParams memory) {\\n        return history[params.at(version)];\\n    }\\n\\n    function updateFeeParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.FeeParams) storage history,\\n        DataTypes.FeeParams memory newParams\\n    ) external {\\n        uint256 newParamId = params.length();\\n        params.add(newParamId);\\n        history[newParamId] = newParams;\\n    }\\n\\n    function getLatestVersion(\\n        EnumerableSet.UintSet storage versions\\n    ) external view returns (uint256) {\\n        return versions.length() - 1;\\n    }\\n\\n    function getDelayTimestamp(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.DelayTimestamp) storage history\\n    ) external view returns (DataTypes.DelayTimestamp memory) {\\n        return history[params.at(params.length() - 1)];\\n    }\\n\\n    function getDelayTimestamp(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.DelayTimestamp) storage history,\\n        uint256 version\\n    ) external view returns (DataTypes.DelayTimestamp memory) {\\n        return history[params.at(version)];\\n    }\\n\\n    function updateDelayTimestamp(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.DelayTimestamp) storage history,\\n        DataTypes.DelayTimestamp memory newParams\\n    ) external {\\n        uint256 newParamId = params.length();\\n        params.add(newParamId);\\n        history[newParamId] = newParams;\\n    }\\n\\n    function getDisputeParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.DisputeParams) storage history\\n    ) external view returns (DataTypes.DisputeParams memory) {\\n        return history[params.at(params.length() - 1)];\\n    }\\n\\n    function getDisputeParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.DisputeParams) storage history,\\n        uint256 version\\n    ) external view returns (DataTypes.DisputeParams memory) {\\n        return history[params.at(version)];\\n    }\\n\\n    function updateDisputeParams(\\n        EnumerableSet.UintSet storage params,\\n        mapping(uint256 => DataTypes.DisputeParams) storage history,\\n        DataTypes.DisputeParams memory newParams\\n    ) external {\\n        uint256 newParamId = params.length();\\n        params.add(newParamId);\\n        history[newParamId] = newParams;\\n    }\\n}\\n\",\"keccak256\":\"0xb7a76ae24c5fc1155c575411e691ba699fdb488aef1f64d967f3b1ce3e1263c8\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\n\\nlibrary DataTypes {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n\\n    enum OrderState {\\n        UNCONFIRMED,\\n        CONFIRMED,\\n        DISPUTED,\\n        DONE\\n    }\\n\\n    enum DisputeState {\\n        EVIDENCE,\\n        COMMIT,\\n        VOTE,\\n        APPEAL,\\n        EXECUTION\\n    }\\n\\n    struct DelayTimestamp {\\n        uint256 selfRefund;\\n        uint256 evidence;\\n        uint256 commit;\\n        uint256 vote;\\n        uint256 appeal;\\n    }\\n\\n    struct User {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        EnumerableSet.UintSet gigIds;\\n        EnumerableSet.UintSet offerIds;\\n        EnumerableSet.UintSet bidIds;\\n        EnumerableSet.UintSet buyerOrderIds;\\n        EnumerableSet.UintSet gigReviewsIds;\\n        EnumerableSet.UintSet userReviewsIds;\\n        EnumerableSet.UintSet reviewsIds;\\n    }\\n\\n    struct Package {\\n        uint256 price;\\n        uint256 timeDelivery;\\n    }\\n\\n    struct Gig {\\n        string metadata;\\n        uint256 createdAt;\\n        bool isPaused;\\n        EnumerableSet.UintSet reviewIds;\\n        EnumerableSet.UintSet orderIds;\\n        Counters.Counter successSell;\\n        Counters.Counter failedSell;\\n        Package[3] packages;\\n    }\\n\\n    struct Invoice {\\n        uint256 price;\\n        uint256 buyerFees;\\n        uint256 sellerFees;\\n        uint256 createdAt;\\n        IERC20 currency;\\n    }\\n\\n    struct Order {\\n        string metadata;\\n        string brief;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        uint256 disputeId;\\n        bool disputed;\\n        Invoice invoice;\\n        OrderState state;\\n        EnumerableSet.UintSet reviewIds;\\n    }\\n\\n    struct Evidence {\\n        uint256 userId;\\n        bytes32 role;\\n        string metadata;\\n    }\\n\\n    struct Vote {\\n        address account;\\n        bytes32 commit;\\n        uint256 choice;\\n        uint256 weight;\\n        string justification;\\n        bool hasVoted;\\n    }\\n\\n    struct Juror {\\n        uint256 stakedTokens;\\n        uint256 freezedTokens;\\n    }\\n\\n    struct Round {\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 appealFeeRewards;\\n        uint256 maxVotes;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 penalties;\\n        uint256 winningChoice;\\n        uint256 totalRepartitions;\\n        uint256 totalVoted;\\n        uint256 totalCommited;\\n        uint256 appealedBy;\\n        uint256[11] counts;\\n        EnumerableSet.UintSet evidenceSubmitters;\\n        EnumerableSet.AddressSet judgesClaimed;\\n        Vote[] votes;\\n        Evidence[] evidences;\\n        address[] drawnJurors;\\n        bool closed;\\n    }\\n\\n    struct Dispute {\\n        uint256 createdAt;\\n        uint256 orderId;\\n        uint256 ruling;\\n        uint256 ruledAt;\\n        uint256[] timestamps;\\n        DisputeState state;\\n        Round[] rounds;\\n    }\\n\\n    struct Review {\\n        uint256 authorId;\\n        string metadata;\\n    }\\n\\n    struct ServiceProvider {\\n        address wallet;\\n        string endpoint;\\n    }\\n\\n    struct EntryParams {\\n        uint256 currencyValue;\\n        uint256 timeAdded;\\n        uint256 xpEarned;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CreationParams {\\n        uint256 currencyValue;\\n        uint256 xpEarned;\\n    }\\n\\n    struct OrderPriceParams {\\n        uint256 trialFlat;\\n        uint256 trialPercent;\\n        uint256 proceedFlat;\\n        uint256 proceedPercent;\\n    }\\n\\n    struct FeeParams {\\n        uint256 flat;\\n        uint256 percent;\\n    }\\n\\n    struct RetributionParams {\\n        uint256 affiliate;\\n        uint256 lvl0AffiliateShare;\\n    }\\n\\n    struct DisputeParams {\\n        uint256 minStake;\\n        uint256 alpha;\\n        uint256 feePerJuror;\\n        uint256 maxVotes;\\n    }\\n}\\n\",\"keccak256\":\"0xcfaef75a0e523972dd8c603f9857cec50d6df304986b553e97374a1f5ea49ab4\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/InputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary InputTypes {\\n    struct CreateUserInput {\\n        uint256 newId;\\n        string metadata;\\n        uint256 inviterId;\\n        address wallet;\\n    }\\n\\n    struct CreateGigInput {\\n        uint256 newId;\\n        DataTypes.Package[3] packages;\\n        string metadata;\\n    }\\n\\n    struct OrderFeesInput {\\n        DataTypes.FeeParams buyerFees;\\n        DataTypes.FeeParams sellerFees;\\n    }\\n\\n    struct OrderRelationInput {\\n        uint256 newId;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n    }\\n\\n    struct CreateOrderInput {\\n        uint256 sellerId;\\n        uint256 buyerId;\\n        uint256 gigId;\\n        uint256 packageId;\\n        string brief;\\n    }\\n\\n    struct ExecuteCreateOrderInput {\\n        uint256 price;\\n        string metadata;\\n        string brief;\\n        OrderFeesInput fees;\\n        OrderRelationInput relations;\\n        IERC20 currency;\\n    }\\n\\n    struct ExecuteCreateDisputeInput {\\n        uint256 newId;\\n        uint256 orderId;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 maxVotes;\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 evidenceUntil;\\n        address[] drawnJurors;\\n    }\\n\\n    struct ExecuteNextRoundInput {\\n        uint256 evidenceUntil;\\n        uint256 maxVotes;\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        address[] drawnJurors;\\n    }\\n\\n    struct BecomeBuyerInput {\\n        address account;\\n        uint256 buyerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct BecomeSellerInput {\\n        address account;\\n        uint256 sellerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CalcInvitersRewardsInput {\\n        uint256 currencyValue;\\n        uint256 affiliateShare;\\n        uint256 lvl0AffiliateShare;\\n    }\\n\\n    struct ProcessPaymentInput {\\n        address caller;\\n        address inviter0;\\n        address inviter1;\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n\\n    struct AddRoundInput {\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 maxVotes;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        address[] drawnJurors;\\n    }\\n\\n    struct ClaimAsJudgeInput {\\n        address account;\\n        uint256 min;\\n        uint256 max;\\n        uint256 winningChoice;\\n        uint256 amountOfCorrectVotes;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 penalties;\\n    }\\n}\\n\",\"keccak256\":\"0x35530d36f783f74500f955dd636a712344d9abded4893c0233790072e22c5217\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/OutputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary OutputTypes {\\n    struct CalcInvitersRewardsOutput {\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n\\n    struct PrepareBecomeRoleOutput {\\n        address inviter0;\\n        address inviter1;\\n        DataTypes.EntryParams entryParams;\\n        DataTypes.RetributionParams retributionParams;\\n        CalcInvitersRewardsOutput rewards;\\n    }\\n\\n    struct GigOutput {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        uint256[] reviewIds;\\n        uint256[] orderIds;\\n        DataTypes.Package[3] packages;\\n    }\\n\\n    struct UserOutput {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 userId;\\n        address wallet;\\n        uint256[] gigIds;\\n        uint256[] offerIds;\\n        uint256[] bidIds;\\n        uint256[] buyerOrderIds;\\n        uint256[] gigReviewsIds;\\n        uint256[] userReviewsIds;\\n        uint256[] reviewsIds;\\n    }\\n\\n    struct OrderOutput {\\n        string metadata;\\n        string brief;\\n        uint256 orderId;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        uint256 disputeId;\\n        uint256[] reviewIds;\\n        bool disputed;\\n        DataTypes.Invoice invoice;\\n        DataTypes.OrderState state;\\n    }\\n\\n    struct RoundOutput {\\n        uint256 roundId;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 appealFeeRewards;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 maxVotes;\\n        uint256 penalties;\\n        uint256 winningChoice;\\n        uint256 totalRepartitions;\\n        uint256 totalVoted;\\n        uint256 totalCommited;\\n        uint256[11] counts;\\n        uint256[] evidenceSubmitters;\\n        uint256 appealedBy;\\n        DataTypes.Vote[] votes;\\n        DataTypes.Evidence[] evidences;\\n        address[] drawnJurors;\\n        address[] judgesClaimed;\\n        bool closed;\\n    }\\n\\n    struct DisputeOutput {\\n        uint256 createdAt;\\n        uint256 disputeId;\\n        uint256 orderId;\\n        uint256 ruling;\\n        uint256 ruledAt;\\n        uint256[] timestamps;\\n        DataTypes.DisputeState state;\\n        RoundOutput[] rounds;\\n    }\\n\\n    struct PopulatedGig {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        DataTypes.Review[] reviews;\\n        DataTypes.Package[] packages;\\n    }\\n\\n    struct CalcDisputeDelaysFromBlock {\\n        uint256 evidenceUntil;\\n        uint256 commitUntil;\\n        uint256 voteUntil;\\n        uint256 appealUntil;\\n    }\\n\\n    struct PopulatedUser {\\n        uint256 userId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 bswanBalance;\\n        uint256 usdcBalance;\\n        uint256 xpBalance;\\n        uint256[] gigIds;\\n        address wallet;\\n        bool isBuyer;\\n        bool isSeller;\\n        bool isJudge;\\n        UserOutput[] inviters;\\n    }\\n\\n    struct ExecuteClaimAsJudgeOutput {\\n        bool isVoteCorrect;\\n        bool isVoteInRange;\\n        uint256 amountFromDisputeFees;\\n        uint256 amountFromJurorsTokensAtStake;\\n        uint256 tokensAtStakePerJuror;\\n    }\\n}\\n\",\"keccak256\":\"0xa192ee71347e59a631ae11918bd24a1cfd96b8c55d0a7d982ec7e36e4006b2cc\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000196002553480156200001757600080fd5b50604051620022b8380380620022b88339810160408190526200003a9162000109565b806200004633620000b9565b6040805180820190915260018152603560f81b60208201526001600160a01b038216620000915760405162461bcd60e51b81526004016200008891906200013b565b60405180910390fd5b50600180546001600160a01b0319166001600160a01b03929092169190911790555062000193565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200011c57600080fd5b81516001600160a01b03811681146200013457600080fd5b9392505050565b600060208083528351808285015260005b818110156200016a578581018301518582016040015282016200014c565b818111156200017d576000604083870101525b50601f01601f1916929092016040019392505050565b61211580620001a36000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c806372633f9811610130578063a92eaa75116100b8578063e5b5019a1161007c578063e5b5019a14610497578063ea532d46146104ae578063ee203f11146104c1578063f2fde38b146104d4578063f73afd96146104e757600080fd5b8063a92eaa7514610443578063b817bcf714610456578063cfd8d6c014610469578063d618cc641461047c578063daea85c51461048457600080fd5b80638da5cb5b116100ff5780638da5cb5b146103f157806391af5b3414610402578063985fadc8146104155780639af1da48146104285780639b7a220d1461043057600080fd5b806372633f98146103b057806379a558e7146103c357806382db8b07146103d65780638504ce21146103de57600080fd5b80632c53f6c4116101be5780634169a7d3116101825780634169a7d31461036557806341c0e1b51461038557806357ddafd31461038d578063688c4b24146103a0578063715018a6146103a857600080fd5b80632c53f6c41461031a57806333327472146103225780633388aed9146103375780633e8b9f191461033f57806340717f431461035257600080fd5b80631848effa116102055780631848effa146102c457806319872f76146102d757806319d9603a146102ea5780631cb64705146102ff578063247713021461030757600080fd5b80630542975c146102375780630adf05d0146102615780630b3f0b541461028157806311e0c07b146102a1575b600080fd5b6001546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b61027461026f366004611812565b6104fa565b604051610258919061182b565b61029461028f366004611812565b6105c0565b6040516102589190611859565b6102b46102af3660046118a7565b610682565b6040519015158152602001610258565b600154610244906001600160a01b031681565b6102446102e5366004611812565b61070c565b6102fd6102f83660046119ea565b610789565b005b61029461084a565b6102fd6103153660046119ea565b61090b565b610274610993565b61032a610a4c565b6040516102589190611a0d565b61032a610ae8565b61032a61034d366004611812565b610b39565b6102fd610360366004611a33565b610bdc565b610378610373366004611812565b610c51565b6040516102589190611a7f565b6102fd610d0d565b61032a61039b366004611812565b610d35565b610274610d8d565b6102fd610dfa565b6102fd6103be366004611a33565b610e0e565b6102b46103d1366004611aaa565b610e83565b610378610f39565b6102fd6103ec3660046119ea565b610fee565b6000546001600160a01b0316610244565b61032a610410366004611812565b611076565b6102b4610423366004611ac7565b6110ce565b61032a611132565b6102fd61043e3660046119ea565b611183565b6102fd610451366004611af7565b61120b565b6102b4610464366004611aaa565b611280565b6102fd610477366004611aaa565b611337565b61032a611485565b6102fd610492366004611aaa565b6114d6565b6104a060025481565b604051908152602001610258565b6102746104bc366004611812565b6115ae565b6102fd6104cf366004611b3d565b611622565b6102fd6104e2366004611aaa565b611697565b61032a6104f5366004611812565b611710565b6105286040518060800160405280600081526020016000815260200160008152602001600060ff1681525090565b60405163038d39c160e11b815260036004820152600560248201526044810183905273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063071a7382906064015b60806040518083038186803b15801561058257600080fd5b505af4158015610596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba9190611b8d565b92915050565b6105f26040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60405162ac321b60e31b815260156004820152601760248201526044810183905273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063056190d89060640160a06040518083038186803b15801561064a57600080fd5b505af415801561065e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba9190611bcd565b60405163fbd2817f60e01b815260048101849052602481018390526000906001600160a01b0383169063fbd2817f9060440160206040518083038186803b1580156106cc57600080fd5b505afa1580156106e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107049190611c1d565b949350505050565b600154604051630cc397bb60e11b8152600481018390526000916001600160a01b0316906319872f769060240160206040518083038186803b15801561075157600080fd5b505afa158015610765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba9190611c4f565b6d282927aa27a1a7a62fa0a226a4a760911b6107a581336110ce565b6107ca5760405162461bcd60e51b81526004016107c190611c6c565b60405180910390fd5b604051635f000b3960e01b8152600c6004820152600e6024820152825160448201526020830151606482015273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c390635f000b39906084015b60006040518083038186803b15801561082e57600080fd5b505af4158015610842573d6000803e3d6000fd5b505050505050565b61087c6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040516315d9c37560e11b8152601560048201526017602482015273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c390632bb386ea9060440160a06040518083038186803b1580156108ce57600080fd5b505af41580156108e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190611bcd565b905090565b6d282927aa27a1a7a62fa0a226a4a760911b61092781336110ce565b6109435760405162461bcd60e51b81526004016107c190611c6c565b6040516305142c2f60e31b8152600f600482015260116024820152825160448201526020830151606482015273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c3906328a1617890608401610816565b6109c16040518060800160405280600081526020016000815260200160008152602001600060ff1681525090565b60405163a6b16b4360e01b8152600360048201526005602482015273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063a6b16b43906044015b60806040518083038186803b158015610a1457600080fd5b505af4158015610a28573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190611b8d565b60408051808201825260008082526020820152905163bfdb039960e01b8152600c6004820152600e602482015273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063bfdb0399906044015b604080518083038186803b158015610ab057600080fd5b505af4158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190611cd3565b60408051808201825260008082526020820152905163bb395b3d60e01b8152601260048201526014602482015273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063bb395b3d90604401610a99565b60408051808201825260008082526020820152905163907874e560e01b815260096004820152600b60248201526044810183905273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063907874e5906064015b604080518083038186803b158015610ba457600080fd5b505af4158015610bb8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba9190611cd3565b6d282927aa27a1a7a62fa0a226a4a760911b610bf881336110ce565b610c145760405162461bcd60e51b81526004016107c190611c6c565b60405163eecd53b160e01b815273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063eecd53b190610816906003906005908790600401611cef565b610c7c6040518060800160405280600081526020016000815260200160008152602001600081525090565b60405163bc57ade760e01b815260186004820152601a60248201526044810183905273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063bc57ade79060640160806040518083038186803b158015610cd557600080fd5b505af4158015610ce9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba9190611d2e565b6001546001600160a01b03163314610d2757610d27611d74565b6001546001600160a01b0316ff5b604080518082018252600080825260208201529051639bb062d360e01b8152600c6004820152600e60248201526044810183905273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c390639bb062d390606401610b8d565b610dbb6040518060800160405280600081526020016000815260200160008152602001600060ff1681525090565b60405163a6b16b4360e01b8152600660048201526008602482015273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063a6b16b43906044016109fc565b610e02611768565b610e0c60006117c2565b565b6d282927aa27a1a7a62fa0a226a4a760911b610e2a81336110ce565b610e465760405162461bcd60e51b81526004016107c190611c6c565b60405163eecd53b160e01b815273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063eecd53b190610816906006906008908790600401611cef565b6000610e9764212aaca2a960d91b836110ce565b80156105ba575042610eaf632aa9a2a960e11b61070c565b6040516334e1097b60e11b81526001600160a01b03858116600483015291909116906369c212f69060240160006040518083038186803b158015610ef257600080fd5b505afa158015610f06573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f2e9190810190611e96565b604001511192915050565b610f646040518060800160405280600081526020016000815260200160008152602001600081525090565b604051631dc6afd560e31b815260186004820152601a602482015273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063ee357ea89060440160806040518083038186803b158015610fb657600080fd5b505af4158015610fca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190611d2e565b6d282927aa27a1a7a62fa0a226a4a760911b61100a81336110ce565b6110265760405162461bcd60e51b81526004016107c190611c6c565b6040516305142c2f60e31b81526012600482015260146024820152825160448201526020830151606482015273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c3906328a1617890608401610816565b60408051808201825260008082526020820152905163ee999bd560e01b815260126004820152601460248201526044810183905273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063ee999bd590606401610b8d565b6000806110e86a20a1a62fa6a0a720a3a2a960a91b61070c565b604051632474521560e21b8152600481018690526001600160a01b03858116602483015291909116906391d148549060440160206040518083038186803b1580156106cc57600080fd5b604080518082018252600080825260208201529051632fe2848160e01b815260096004820152600b602482015273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c390632fe2848190604401610a99565b6d282927aa27a1a7a62fa0a226a4a760911b61119f81336110ce565b6111bb5760405162461bcd60e51b81526004016107c190611c6c565b6040516313a6a97b60e11b815260096004820152600b6024820152825160448201526020830151606482015273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063274d52f690608401610816565b6d282927aa27a1a7a62fa0a226a4a760911b61122781336110ce565b6112435760405162461bcd60e51b81526004016107c190611c6c565b604051630fda974d60e41b815273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063fda974d09061081690601890601a90879060040161205d565b60006112956529a2a62622a960d11b836110ce565b80156105ba5750426112ad632aa9a2a960e11b61070c565b6040516334e1097b60e11b81526001600160a01b03858116600483015291909116906369c212f69060240160006040518083038186803b1580156112f057600080fd5b505afa158015611304573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261132c9190810190611e96565b608001511192915050565b6001600160a01b038116158061135757506001546001600160a01b031633145b806113e35750336001600160a01b0316306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113a057600080fd5b505afa1580156113b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d89190611c4f565b6001600160a01b0316145b6114635760405162461bcd60e51b815260206004820152604560248201527f43616e206f6e6c792062652063616c6c6564206966206164647265737365735060448201527f726f766964657220697320656d7074792c206d73672e73656e646572206f722060648201526437bbb732b960d91b608482015260a4016107c1565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60408051808201825260008082526020820152905163bb395b3d60e01b8152600f60048201526011602482015273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063bb395b3d90604401610a99565b6d282927aa27a1a7a62fa0a226a4a760911b6114f281336110ce565b61150e5760405162461bcd60e51b81526004016107c190611c6c565b600061151f6211105560ea1b61070c565b60025460405163095ea7b360e01b81526001600160a01b038084166004830152602482019290925291925084169063095ea7b390604401602060405180830381600087803b15801561157057600080fd5b505af1158015611584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a89190611c1d565b50505050565b6115dc6040518060800160405280600081526020016000815260200160008152602001600060ff1681525090565b60405163038d39c160e11b815260066004820152600860248201526044810183905273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063071a73829060640161056a565b6d282927aa27a1a7a62fa0a226a4a760911b61163e81336110ce565b61165a5760405162461bcd60e51b81526004016107c190611c6c565b60405163d93df20360e01b815273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063d93df20390610816906015906017908790600401612099565b61169f611768565b6001600160a01b0381166117045760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107c1565b61170d816117c2565b50565b60408051808201825260008082526020820152905163ee999bd560e01b8152600f6004820152601160248201526044810183905273A9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c39063ee999bd590606401610b8d565b6000546001600160a01b03163314610e0c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561182457600080fd5b5035919050565b81518152602080830151908201526040808301519082015260608083015160ff1690820152608081016105ba565b60a081016105ba828480518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b6001600160a01b038116811461170d57600080fd5b6000806000606084860312156118bc57600080fd5b833592506020840135915060408401356118d581611892565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611919576119196118e0565b60405290565b6040516080810167ffffffffffffffff81118282101715611919576119196118e0565b60405160a0810167ffffffffffffffff81118282101715611919576119196118e0565b6040516101e0810167ffffffffffffffff81118282101715611919576119196118e0565b604051601f8201601f1916810167ffffffffffffffff811182821017156119b2576119b26118e0565b604052919050565b6000604082840312156119cc57600080fd5b6119d46118f6565b9050813581526020820135602082015292915050565b6000604082840312156119fc57600080fd5b611a0683836119ba565b9392505050565b8151815260208083015190820152604081016105ba565b60ff8116811461170d57600080fd5b600060808284031215611a4557600080fd5b611a4d61191f565b8235815260208301356020820152604083013560408201526060830135611a7381611a24565b60608201529392505050565b81518152602080830151908201526040808301519082015260608083015190820152608081016105ba565b600060208284031215611abc57600080fd5b8135611a0681611892565b60008060408385031215611ada57600080fd5b823591506020830135611aec81611892565b809150509250929050565b600060808284031215611b0957600080fd5b611b1161191f565b823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b600060a08284031215611b4f57600080fd5b611b57611942565b82358152602083013560208201526040830135604082015260608301356060820152608083013560808201528091505092915050565b600060808284031215611b9f57600080fd5b611ba761191f565b8251815260208301516020820152604083015160408201526060830151611a7381611a24565b600060a08284031215611bdf57600080fd5b611be7611942565b82518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b600060208284031215611c2f57600080fd5b81518015158114611a0657600080fd5b8051611c4a81611892565b919050565b600060208284031215611c6157600080fd5b8151611a0681611892565b6020808252601c908201527f5265717569726573206d73672e73656e6465722068617320726f6c6500000000604082015260600190565b600060408284031215611cb557600080fd5b611cbd6118f6565b9050815181526020820151602082015292915050565b600060408284031215611ce557600080fd5b611a068383611ca3565b8381526020810183905260c08101610704604083018480518252602081015160208301526040810151604083015260ff60608201511660608301525050565b600060808284031215611d4057600080fd5b611d4861191f565b825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b634e487b7160e01b600052600160045260246000fd5b600082601f830112611d9b57600080fd5b815167ffffffffffffffff811115611db557611db56118e0565b6020611dc9601f8301601f19168201611989565b8281528582848701011115611ddd57600080fd5b60005b83811015611dfb578581018301518282018401528201611de0565b83811115611e0c5760008385840101525b5095945050505050565b600082601f830112611e2757600080fd5b8151602067ffffffffffffffff821115611e4357611e436118e0565b8160051b611e52828201611989565b9283528481018201928281019087851115611e6c57600080fd5b83870192505b84831015611e8b57825182529183019190830190611e72565b979650505050505050565b600060208284031215611ea857600080fd5b815167ffffffffffffffff80821115611ec057600080fd5b908301906101e08286031215611ed557600080fd5b611edd611965565b825182811115611eec57600080fd5b611ef887828601611d8a565b8252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c0820152611f4360e08401611c3f565b60e08201526101008084015183811115611f5c57600080fd5b611f6888828701611e16565b8284015250506101208084015183811115611f8257600080fd5b611f8e88828701611e16565b8284015250506101408084015183811115611fa857600080fd5b611fb488828701611e16565b8284015250506101608084015183811115611fce57600080fd5b611fda88828701611e16565b8284015250506101808084015183811115611ff457600080fd5b61200088828701611e16565b8284015250506101a0808401518381111561201a57600080fd5b61202688828701611e16565b8284015250506101c0808401518381111561204057600080fd5b61204c88828701611e16565b918301919091525095945050505050565b8381526020810183905260c081016107046040830184805182526020810151602083015260408101516040830152606081015160608301525050565b8381526020810183905260e0810161070460408301848051825260208101516020830152604081015160408301526060810151606083015260808101516080830152505056fea2646970667358221220c45e7e88f01699deddc2cc84f42c7a4cab08e71374fa6cace85dd1694cf13e1564736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c806372633f9811610130578063a92eaa75116100b8578063e5b5019a1161007c578063e5b5019a14610497578063ea532d46146104ae578063ee203f11146104c1578063f2fde38b146104d4578063f73afd96146104e757600080fd5b8063a92eaa7514610443578063b817bcf714610456578063cfd8d6c014610469578063d618cc641461047c578063daea85c51461048457600080fd5b80638da5cb5b116100ff5780638da5cb5b146103f157806391af5b3414610402578063985fadc8146104155780639af1da48146104285780639b7a220d1461043057600080fd5b806372633f98146103b057806379a558e7146103c357806382db8b07146103d65780638504ce21146103de57600080fd5b80632c53f6c4116101be5780634169a7d3116101825780634169a7d31461036557806341c0e1b51461038557806357ddafd31461038d578063688c4b24146103a0578063715018a6146103a857600080fd5b80632c53f6c41461031a57806333327472146103225780633388aed9146103375780633e8b9f191461033f57806340717f431461035257600080fd5b80631848effa116102055780631848effa146102c457806319872f76146102d757806319d9603a146102ea5780631cb64705146102ff578063247713021461030757600080fd5b80630542975c146102375780630adf05d0146102615780630b3f0b541461028157806311e0c07b146102a1575b600080fd5b6001546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b61027461026f366004611812565b6104fa565b604051610258919061182b565b61029461028f366004611812565b6105c0565b6040516102589190611859565b6102b46102af3660046118a7565b610682565b6040519015158152602001610258565b600154610244906001600160a01b031681565b6102446102e5366004611812565b61070c565b6102fd6102f83660046119ea565b610789565b005b61029461084a565b6102fd6103153660046119ea565b61090b565b610274610993565b61032a610a4c565b6040516102589190611a0d565b61032a610ae8565b61032a61034d366004611812565b610b39565b6102fd610360366004611a33565b610bdc565b610378610373366004611812565b610c51565b6040516102589190611a7f565b6102fd610d0d565b61032a61039b366004611812565b610d35565b610274610d8d565b6102fd610dfa565b6102fd6103be366004611a33565b610e0e565b6102b46103d1366004611aaa565b610e83565b610378610f39565b6102fd6103ec3660046119ea565b610fee565b6000546001600160a01b0316610244565b61032a610410366004611812565b611076565b6102b4610423366004611ac7565b6110ce565b61032a611132565b6102fd61043e3660046119ea565b611183565b6102fd610451366004611af7565b61120b565b6102b4610464366004611aaa565b611280565b6102fd610477366004611aaa565b611337565b61032a611485565b6102fd610492366004611aaa565b6114d6565b6104a060025481565b604051908152602001610258565b6102746104bc366004611812565b6115ae565b6102fd6104cf366004611b3d565b611622565b6102fd6104e2366004611aaa565b611697565b61032a6104f5366004611812565b611710565b6105286040518060800160405280600081526020016000815260200160008152602001600060ff1681525090565b60405163038d39c160e11b815260036004820152600560248201526044810183905273__$60257ade2e9256c87b7577fd1b418be579$__9063071a7382906064015b60806040518083038186803b15801561058257600080fd5b505af4158015610596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba9190611b8d565b92915050565b6105f26040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60405162ac321b60e31b815260156004820152601760248201526044810183905273__$60257ade2e9256c87b7577fd1b418be579$__9063056190d89060640160a06040518083038186803b15801561064a57600080fd5b505af415801561065e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba9190611bcd565b60405163fbd2817f60e01b815260048101849052602481018390526000906001600160a01b0383169063fbd2817f9060440160206040518083038186803b1580156106cc57600080fd5b505afa1580156106e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107049190611c1d565b949350505050565b600154604051630cc397bb60e11b8152600481018390526000916001600160a01b0316906319872f769060240160206040518083038186803b15801561075157600080fd5b505afa158015610765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba9190611c4f565b6d282927aa27a1a7a62fa0a226a4a760911b6107a581336110ce565b6107ca5760405162461bcd60e51b81526004016107c190611c6c565b60405180910390fd5b604051635f000b3960e01b8152600c6004820152600e6024820152825160448201526020830151606482015273__$60257ade2e9256c87b7577fd1b418be579$__90635f000b39906084015b60006040518083038186803b15801561082e57600080fd5b505af4158015610842573d6000803e3d6000fd5b505050505050565b61087c6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040516315d9c37560e11b8152601560048201526017602482015273__$60257ade2e9256c87b7577fd1b418be579$__90632bb386ea9060440160a06040518083038186803b1580156108ce57600080fd5b505af41580156108e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190611bcd565b905090565b6d282927aa27a1a7a62fa0a226a4a760911b61092781336110ce565b6109435760405162461bcd60e51b81526004016107c190611c6c565b6040516305142c2f60e31b8152600f600482015260116024820152825160448201526020830151606482015273__$60257ade2e9256c87b7577fd1b418be579$__906328a1617890608401610816565b6109c16040518060800160405280600081526020016000815260200160008152602001600060ff1681525090565b60405163a6b16b4360e01b8152600360048201526005602482015273__$60257ade2e9256c87b7577fd1b418be579$__9063a6b16b43906044015b60806040518083038186803b158015610a1457600080fd5b505af4158015610a28573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190611b8d565b60408051808201825260008082526020820152905163bfdb039960e01b8152600c6004820152600e602482015273__$60257ade2e9256c87b7577fd1b418be579$__9063bfdb0399906044015b604080518083038186803b158015610ab057600080fd5b505af4158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190611cd3565b60408051808201825260008082526020820152905163bb395b3d60e01b8152601260048201526014602482015273__$60257ade2e9256c87b7577fd1b418be579$__9063bb395b3d90604401610a99565b60408051808201825260008082526020820152905163907874e560e01b815260096004820152600b60248201526044810183905273__$60257ade2e9256c87b7577fd1b418be579$__9063907874e5906064015b604080518083038186803b158015610ba457600080fd5b505af4158015610bb8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba9190611cd3565b6d282927aa27a1a7a62fa0a226a4a760911b610bf881336110ce565b610c145760405162461bcd60e51b81526004016107c190611c6c565b60405163eecd53b160e01b815273__$60257ade2e9256c87b7577fd1b418be579$__9063eecd53b190610816906003906005908790600401611cef565b610c7c6040518060800160405280600081526020016000815260200160008152602001600081525090565b60405163bc57ade760e01b815260186004820152601a60248201526044810183905273__$60257ade2e9256c87b7577fd1b418be579$__9063bc57ade79060640160806040518083038186803b158015610cd557600080fd5b505af4158015610ce9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba9190611d2e565b6001546001600160a01b03163314610d2757610d27611d74565b6001546001600160a01b0316ff5b604080518082018252600080825260208201529051639bb062d360e01b8152600c6004820152600e60248201526044810183905273__$60257ade2e9256c87b7577fd1b418be579$__90639bb062d390606401610b8d565b610dbb6040518060800160405280600081526020016000815260200160008152602001600060ff1681525090565b60405163a6b16b4360e01b8152600660048201526008602482015273__$60257ade2e9256c87b7577fd1b418be579$__9063a6b16b43906044016109fc565b610e02611768565b610e0c60006117c2565b565b6d282927aa27a1a7a62fa0a226a4a760911b610e2a81336110ce565b610e465760405162461bcd60e51b81526004016107c190611c6c565b60405163eecd53b160e01b815273__$60257ade2e9256c87b7577fd1b418be579$__9063eecd53b190610816906006906008908790600401611cef565b6000610e9764212aaca2a960d91b836110ce565b80156105ba575042610eaf632aa9a2a960e11b61070c565b6040516334e1097b60e11b81526001600160a01b03858116600483015291909116906369c212f69060240160006040518083038186803b158015610ef257600080fd5b505afa158015610f06573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f2e9190810190611e96565b604001511192915050565b610f646040518060800160405280600081526020016000815260200160008152602001600081525090565b604051631dc6afd560e31b815260186004820152601a602482015273__$60257ade2e9256c87b7577fd1b418be579$__9063ee357ea89060440160806040518083038186803b158015610fb657600080fd5b505af4158015610fca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190611d2e565b6d282927aa27a1a7a62fa0a226a4a760911b61100a81336110ce565b6110265760405162461bcd60e51b81526004016107c190611c6c565b6040516305142c2f60e31b81526012600482015260146024820152825160448201526020830151606482015273__$60257ade2e9256c87b7577fd1b418be579$__906328a1617890608401610816565b60408051808201825260008082526020820152905163ee999bd560e01b815260126004820152601460248201526044810183905273__$60257ade2e9256c87b7577fd1b418be579$__9063ee999bd590606401610b8d565b6000806110e86a20a1a62fa6a0a720a3a2a960a91b61070c565b604051632474521560e21b8152600481018690526001600160a01b03858116602483015291909116906391d148549060440160206040518083038186803b1580156106cc57600080fd5b604080518082018252600080825260208201529051632fe2848160e01b815260096004820152600b602482015273__$60257ade2e9256c87b7577fd1b418be579$__90632fe2848190604401610a99565b6d282927aa27a1a7a62fa0a226a4a760911b61119f81336110ce565b6111bb5760405162461bcd60e51b81526004016107c190611c6c565b6040516313a6a97b60e11b815260096004820152600b6024820152825160448201526020830151606482015273__$60257ade2e9256c87b7577fd1b418be579$__9063274d52f690608401610816565b6d282927aa27a1a7a62fa0a226a4a760911b61122781336110ce565b6112435760405162461bcd60e51b81526004016107c190611c6c565b604051630fda974d60e41b815273__$60257ade2e9256c87b7577fd1b418be579$__9063fda974d09061081690601890601a90879060040161205d565b60006112956529a2a62622a960d11b836110ce565b80156105ba5750426112ad632aa9a2a960e11b61070c565b6040516334e1097b60e11b81526001600160a01b03858116600483015291909116906369c212f69060240160006040518083038186803b1580156112f057600080fd5b505afa158015611304573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261132c9190810190611e96565b608001511192915050565b6001600160a01b038116158061135757506001546001600160a01b031633145b806113e35750336001600160a01b0316306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113a057600080fd5b505afa1580156113b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d89190611c4f565b6001600160a01b0316145b6114635760405162461bcd60e51b815260206004820152604560248201527f43616e206f6e6c792062652063616c6c6564206966206164647265737365735060448201527f726f766964657220697320656d7074792c206d73672e73656e646572206f722060648201526437bbb732b960d91b608482015260a4016107c1565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60408051808201825260008082526020820152905163bb395b3d60e01b8152600f60048201526011602482015273__$60257ade2e9256c87b7577fd1b418be579$__9063bb395b3d90604401610a99565b6d282927aa27a1a7a62fa0a226a4a760911b6114f281336110ce565b61150e5760405162461bcd60e51b81526004016107c190611c6c565b600061151f6211105560ea1b61070c565b60025460405163095ea7b360e01b81526001600160a01b038084166004830152602482019290925291925084169063095ea7b390604401602060405180830381600087803b15801561157057600080fd5b505af1158015611584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a89190611c1d565b50505050565b6115dc6040518060800160405280600081526020016000815260200160008152602001600060ff1681525090565b60405163038d39c160e11b815260066004820152600860248201526044810183905273__$60257ade2e9256c87b7577fd1b418be579$__9063071a73829060640161056a565b6d282927aa27a1a7a62fa0a226a4a760911b61163e81336110ce565b61165a5760405162461bcd60e51b81526004016107c190611c6c565b60405163d93df20360e01b815273__$60257ade2e9256c87b7577fd1b418be579$__9063d93df20390610816906015906017908790600401612099565b61169f611768565b6001600160a01b0381166117045760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107c1565b61170d816117c2565b50565b60408051808201825260008082526020820152905163ee999bd560e01b8152600f6004820152601160248201526044810183905273__$60257ade2e9256c87b7577fd1b418be579$__9063ee999bd590606401610b8d565b6000546001600160a01b03163314610e0c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561182457600080fd5b5035919050565b81518152602080830151908201526040808301519082015260608083015160ff1690820152608081016105ba565b60a081016105ba828480518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b6001600160a01b038116811461170d57600080fd5b6000806000606084860312156118bc57600080fd5b833592506020840135915060408401356118d581611892565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611919576119196118e0565b60405290565b6040516080810167ffffffffffffffff81118282101715611919576119196118e0565b60405160a0810167ffffffffffffffff81118282101715611919576119196118e0565b6040516101e0810167ffffffffffffffff81118282101715611919576119196118e0565b604051601f8201601f1916810167ffffffffffffffff811182821017156119b2576119b26118e0565b604052919050565b6000604082840312156119cc57600080fd5b6119d46118f6565b9050813581526020820135602082015292915050565b6000604082840312156119fc57600080fd5b611a0683836119ba565b9392505050565b8151815260208083015190820152604081016105ba565b60ff8116811461170d57600080fd5b600060808284031215611a4557600080fd5b611a4d61191f565b8235815260208301356020820152604083013560408201526060830135611a7381611a24565b60608201529392505050565b81518152602080830151908201526040808301519082015260608083015190820152608081016105ba565b600060208284031215611abc57600080fd5b8135611a0681611892565b60008060408385031215611ada57600080fd5b823591506020830135611aec81611892565b809150509250929050565b600060808284031215611b0957600080fd5b611b1161191f565b823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b600060a08284031215611b4f57600080fd5b611b57611942565b82358152602083013560208201526040830135604082015260608301356060820152608083013560808201528091505092915050565b600060808284031215611b9f57600080fd5b611ba761191f565b8251815260208301516020820152604083015160408201526060830151611a7381611a24565b600060a08284031215611bdf57600080fd5b611be7611942565b82518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b600060208284031215611c2f57600080fd5b81518015158114611a0657600080fd5b8051611c4a81611892565b919050565b600060208284031215611c6157600080fd5b8151611a0681611892565b6020808252601c908201527f5265717569726573206d73672e73656e6465722068617320726f6c6500000000604082015260600190565b600060408284031215611cb557600080fd5b611cbd6118f6565b9050815181526020820151602082015292915050565b600060408284031215611ce557600080fd5b611a068383611ca3565b8381526020810183905260c08101610704604083018480518252602081015160208301526040810151604083015260ff60608201511660608301525050565b600060808284031215611d4057600080fd5b611d4861191f565b825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b634e487b7160e01b600052600160045260246000fd5b600082601f830112611d9b57600080fd5b815167ffffffffffffffff811115611db557611db56118e0565b6020611dc9601f8301601f19168201611989565b8281528582848701011115611ddd57600080fd5b60005b83811015611dfb578581018301518282018401528201611de0565b83811115611e0c5760008385840101525b5095945050505050565b600082601f830112611e2757600080fd5b8151602067ffffffffffffffff821115611e4357611e436118e0565b8160051b611e52828201611989565b9283528481018201928281019087851115611e6c57600080fd5b83870192505b84831015611e8b57825182529183019190830190611e72565b979650505050505050565b600060208284031215611ea857600080fd5b815167ffffffffffffffff80821115611ec057600080fd5b908301906101e08286031215611ed557600080fd5b611edd611965565b825182811115611eec57600080fd5b611ef887828601611d8a565b8252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c0820152611f4360e08401611c3f565b60e08201526101008084015183811115611f5c57600080fd5b611f6888828701611e16565b8284015250506101208084015183811115611f8257600080fd5b611f8e88828701611e16565b8284015250506101408084015183811115611fa857600080fd5b611fb488828701611e16565b8284015250506101608084015183811115611fce57600080fd5b611fda88828701611e16565b8284015250506101808084015183811115611ff457600080fd5b61200088828701611e16565b8284015250506101a0808401518381111561201a57600080fd5b61202688828701611e16565b8284015250506101c0808401518381111561204057600080fd5b61204c88828701611e16565b918301919091525095945050505050565b8381526020810183905260c081016107046040830184805182526020810151602083015260408101516040830152606081015160608301525050565b8381526020810183905260e0810161070460408301848051825260208101516020830152604081015160408301526060810151606083015260808101516080830152505056fea2646970667358221220c45e7e88f01699deddc2cc84f42c7a4cab08e71374fa6cace85dd1694cf13e1564736f6c63430008090033",
  "libraries": {
    "ParamsLogic": "0xA9216eDb7A35437D0B8CbF1a2Cd9840821EDf7c3"
  },
  "devdoc": {
    "author": "Blockswan",
    "kind": "dev",
    "methods": {
      "ADDRESSES_PROVIDER()": {
        "returns": {
          "_0": "The address of the AddressProvider"
        }
      },
      "fetchContract(bytes32)": {
        "params": {
          "_name": "the bytes32 name of the contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setProvider(address)": {
        "params": {
          "_providerAddress": "The address of the AddressProvider"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Protocol Configurator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ADDRESSES_PROVIDER()": {
        "notice": "Returns the contract address of the IAddressProvider"
      },
      "fetchContract(bytes32)": {
        "notice": "fetch the contract address from the ADDRESSS_PROVIDERthrows error if address === 0"
      },
      "kill()": {
        "notice": "kill the current address provider, only callable by the AddressProvider"
      },
      "setProvider(address)": {
        "notice": "set the provider address of the ProviderContract"
      }
    },
    "notice": "Contains all the protocol configuration*",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5588,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9094,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "ADDRESS_PROVIDER",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAddressProvider)6093"
      },
      {
        "astId": 9101,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "MAX_UINT",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8615,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "_buyerEntryParamsVersions",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(UintSet)4200_storage"
      },
      {
        "astId": 8620,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "_buyerEntryParamsHistory",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(EntryParams)19341_storage)"
      },
      {
        "astId": 8623,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "_sellerEntryParamsVersions",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(UintSet)4200_storage"
      },
      {
        "astId": 8628,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "_sellerEntryParamsHistory",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(EntryParams)19341_storage)"
      },
      {
        "astId": 8631,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "_retributionParamsVersions",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(UintSet)4200_storage"
      },
      {
        "astId": 8636,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "_retributionParamsHistory",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(RetributionParams)19365_storage)"
      },
      {
        "astId": 8639,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "_gigCreationParamsVersions",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(UintSet)4200_storage"
      },
      {
        "astId": 8644,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "_gigCreationParamsHistory",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(CreationParams)19346_storage)"
      },
      {
        "astId": 8647,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "_orderCreationParamsVersions",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(UintSet)4200_storage"
      },
      {
        "astId": 8652,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "_orderCreationParamsHistory",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(FeeParams)19360_storage)"
      },
      {
        "astId": 8655,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "_sellerOrderFeesParamsVersions",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(UintSet)4200_storage"
      },
      {
        "astId": 8660,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "_sellerOrderFeesParamsHistory",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_struct(FeeParams)19360_storage)"
      },
      {
        "astId": 8663,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "_delayTimestampVersions",
        "offset": 0,
        "slot": "21",
        "type": "t_struct(UintSet)4200_storage"
      },
      {
        "astId": 8668,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "_delayTimestampHistory",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_struct(DelayTimestamp)19131_storage)"
      },
      {
        "astId": 8671,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "_disputeParamsVersions",
        "offset": 0,
        "slot": "24",
        "type": "t_struct(UintSet)4200_storage"
      },
      {
        "astId": 8676,
        "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
        "label": "_disputeParamsHistory",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_struct(DisputeParams)19374_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressProvider)6093": {
        "encoding": "inplace",
        "label": "contract IAddressProvider",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(CreationParams)19346_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.CreationParams)",
        "numberOfBytes": "32",
        "value": "t_struct(CreationParams)19346_storage"
      },
      "t_mapping(t_uint256,t_struct(DelayTimestamp)19131_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.DelayTimestamp)",
        "numberOfBytes": "32",
        "value": "t_struct(DelayTimestamp)19131_storage"
      },
      "t_mapping(t_uint256,t_struct(DisputeParams)19374_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.DisputeParams)",
        "numberOfBytes": "32",
        "value": "t_struct(DisputeParams)19374_storage"
      },
      "t_mapping(t_uint256,t_struct(EntryParams)19341_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.EntryParams)",
        "numberOfBytes": "32",
        "value": "t_struct(EntryParams)19341_storage"
      },
      "t_mapping(t_uint256,t_struct(FeeParams)19360_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.FeeParams)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeParams)19360_storage"
      },
      "t_mapping(t_uint256,t_struct(RetributionParams)19365_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.RetributionParams)",
        "numberOfBytes": "32",
        "value": "t_struct(RetributionParams)19365_storage"
      },
      "t_struct(CreationParams)19346_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.CreationParams",
        "members": [
          {
            "astId": 19343,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "currencyValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19345,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "xpEarned",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DelayTimestamp)19131_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.DelayTimestamp",
        "members": [
          {
            "astId": 19122,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "selfRefund",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19124,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "evidence",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19126,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "commit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19128,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "vote",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19130,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "appeal",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(DisputeParams)19374_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.DisputeParams",
        "members": [
          {
            "astId": 19367,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "minStake",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19369,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "alpha",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19371,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "feePerJuror",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19373,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "maxVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(EntryParams)19341_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.EntryParams",
        "members": [
          {
            "astId": 19334,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "currencyValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19336,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "timeAdded",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19338,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "xpEarned",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19340,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "invitationEarned",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(FeeParams)19360_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.FeeParams",
        "members": [
          {
            "astId": 19357,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "flat",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19359,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "percent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RetributionParams)19365_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.RetributionParams",
        "members": [
          {
            "astId": 19362,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "affiliate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19364,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "lvl0AffiliateShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3728_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3723,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3727,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)4200_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 4199,
            "contract": "contracts/protocol/configuration/ProtocolConfigurator.sol:ProtocolConfigurator",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3728_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}