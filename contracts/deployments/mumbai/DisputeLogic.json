{
  "address": "0x5bfD2cB87429f3187072A243fB76B6C97A00E495",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "evidenceUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commitUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "voteUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "appealUntil",
          "type": "uint256"
        }
      ],
      "name": "calcDisputeDelaysFromBlock",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "delays",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x246d35a0820395c805f593d59eb7fdd35ad4fbffdcf64789c5c4dd264d7182aa",
  "receipt": {
    "to": null,
    "from": "0x8D3BD47c94b340E0151376ABF9D76C74c471E213",
    "contractAddress": "0x5bfD2cB87429f3187072A243fB76B6C97A00E495",
    "transactionIndex": 1,
    "gasUsed": "3569117",
    "logsBloom": "0x
    "blockHash": "0xb47f1ddd0dfb964df298a82522cb3c5f0689ef0fac4e27d56a3069083cadce2f",
    "transactionHash": "0x246d35a0820395c805f593d59eb7fdd35ad4fbffdcf64789c5c4dd264d7182aa",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 32900042,
        "transactionHash": "0x246d35a0820395c805f593d59eb7fdd35ad4fbffdcf64789c5c4dd264d7182aa",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008d3bd47c94b340e0151376abf9d76c74c471e213",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000fd99dc2ab932230000000000000000000000000000000000000000000000001e46e9660764230c7000000000000000000000000000000000000000000000e4ec425fcec7c3062c0000000000000000000000000000000000000000000000001d494f89dcaaf0e97000000000000000000000000000000000000000000000e4ed3ff9aaf27c384f0",
        "logIndex": 2,
        "blockHash": "0xb47f1ddd0dfb964df298a82522cb3c5f0689ef0fac4e27d56a3069083cadce2f"
      }
    ],
    "blockNumber": 32900042,
    "cumulativeGasUsed": "3744081",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "540ab05e3117b642ab74c32eb85f094d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"evidenceUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appealUntil\",\"type\":\"uint256\"}],\"name\":\"calcDisputeDelaysFromBlock\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"delays\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Blockswan\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Dispute logic library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Implements the logic for dispute specific functions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/libraries/logics/DisputeLogic.sol\":\"DisputeLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/imports/aave/contracts/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/*^\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary PercentageMath {\\n    // Maximum percentage factor (100.00%)\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     **/\\n    function percentMul(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        assembly {\\n            if iszero(\\n                or(\\n                    iszero(percentage),\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\\n                PERCENTAGE_FACTOR\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     **/\\n    function percentDiv(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(\\n                                sub(not(0), div(percentage, 2)),\\n                                PERCENTAGE_FACTOR\\n                            )\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\\n                percentage\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x25d639d6a4c8aca57f987e5d94d761273dff9df8dcdeb7c8cefbb6250ecec927\",\"license\":\"BUSL-1.1\"},\"contracts/imports/gnosis/contracts/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../../openzeppelin/contracts/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developer^\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(from, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(freeMemoryPointer, 36),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTransferResult(\\n        IERC20 token\\n    ) private view returns (bool success) {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n            // Non-standard ERC20 transfer without return.\\n            case 0 {\\n                // NOTE: When the return data size is 0, verify that there\\n                // is code at the address. This is done in order to maintain\\n                // compatibility with Solidity calling conventions.\\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                if iszero(extcodesize(token)) {\\n                    revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                }\\n\\n                success := 1\\n            }\\n            // Standard ERC20 transfer returning boolean success value.\\n            case 32 {\\n                returndatacopy(0, 0, returndatasize())\\n\\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                // as `true` for a boolean. In order to stay compatible with\\n                // OpenZeppelin's `SafeERC20` library which is known to work\\n                // with the existing ERC20 implementation we care about,\\n                // make sure we return success for any non-zero return value\\n                // from the `transfer*` call.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            default {\\n                revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16a97de85622232442771b5974e025bbac9d4bb56fde737f58f3b363ac09ef5\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/imports/kleros/contracts/SortitionSumTreeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@epiqueras, @unknownunknown1]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8;\\n\\n/**\\n *  @title SortitionSumTreeFactory\\n *  @dev A factory of trees that keeps track of staked values for sortition. This is the updated version for 0.8 compiler.\\n */\\nlibrary SortitionSumTreeFactory {\\n    /* Structs */\\n\\n    struct SortitionSumTree {\\n        uint256 K; // The maximum number of childs per node.\\n        // We use this to keep track of vacant positions in the tree after removing a leaf. This is for keeping the tree as balanced as possible without spending gas on moving nodes around.\\n        uint256[] stack;\\n        uint256[] nodes;\\n        // Two-way mapping of IDs to node indexes. Note that node index 0 is reserved for the root node, and means the ID does not have a node.\\n        mapping(bytes32 => uint256) IDsToNodeIndexes;\\n        mapping(uint256 => bytes32) nodeIndexesToIDs;\\n    }\\n\\n    /* Storage */\\n\\n    struct SortitionSumTrees {\\n        mapping(bytes32 => SortitionSumTree) sortitionSumTrees;\\n    }\\n\\n    /* Public */\\n\\n    /**\\n     *  @dev Create a sortition sum tree at the specified key.\\n     *  @param _key The key of the new tree.\\n     *  @param _K The number of children each node in the tree should have.\\n     */\\n    function createTree(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint256 _K\\n    ) external {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        require(tree.K == 0, \\\"Tree already exists.\\\");\\n        require(_K > 1, \\\"K must be greater than one.\\\");\\n        tree.K = _K;\\n        tree.nodes.push(0);\\n    }\\n\\n    /**\\n     *  @dev Set a value of a tree.\\n     *  @param _key The key of the tree.\\n     *  @param _value The new value.\\n     *  @param _ID The ID of the value.\\n     *  `O(log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function set(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint256 _value,\\n        bytes32 _ID\\n    ) external {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint256 treeIndex = tree.IDsToNodeIndexes[_ID];\\n\\n        if (treeIndex == 0) {\\n            // No existing node.\\n            if (_value != 0) {\\n                // Non zero value.\\n                // Append.\\n                // Add node.\\n                if (tree.stack.length == 0) {\\n                    // No vacant spots.\\n                    // Get the index and append the value.\\n                    treeIndex = tree.nodes.length;\\n                    tree.nodes.push(_value);\\n\\n                    // Potentially append a new node and make the parent a sum node.\\n                    if (treeIndex != 1 && (treeIndex - 1) % tree.K == 0) {\\n                        // Is first child.\\n                        uint256 parentIndex = treeIndex / tree.K;\\n                        bytes32 parentID = tree.nodeIndexesToIDs[parentIndex];\\n                        uint256 newIndex = treeIndex + 1;\\n                        tree.nodes.push(tree.nodes[parentIndex]);\\n                        delete tree.nodeIndexesToIDs[parentIndex];\\n                        tree.IDsToNodeIndexes[parentID] = newIndex;\\n                        tree.nodeIndexesToIDs[newIndex] = parentID;\\n                    }\\n                } else {\\n                    // Some vacant spot.\\n                    // Pop the stack and append the value.\\n                    treeIndex = tree.stack[tree.stack.length - 1];\\n                    tree.stack.pop();\\n                    tree.nodes[treeIndex] = _value;\\n                }\\n\\n                // Add label.\\n                tree.IDsToNodeIndexes[_ID] = treeIndex;\\n                tree.nodeIndexesToIDs[treeIndex] = _ID;\\n\\n                updateParents(self, _key, treeIndex, true, _value);\\n            }\\n        } else {\\n            // Existing node.\\n            if (_value == 0) {\\n                // Zero value.\\n                // Remove.\\n                // Remember value and set to 0.\\n                uint256 value = tree.nodes[treeIndex];\\n                tree.nodes[treeIndex] = 0;\\n\\n                // Push to stack.\\n                tree.stack.push(treeIndex);\\n\\n                // Clear label.\\n                delete tree.IDsToNodeIndexes[_ID];\\n                delete tree.nodeIndexesToIDs[treeIndex];\\n\\n                updateParents(self, _key, treeIndex, false, value);\\n            } else if (_value != tree.nodes[treeIndex]) {\\n                // New, non zero value.\\n                // Set.\\n                bool plusOrMinus = tree.nodes[treeIndex] <= _value;\\n                uint256 plusOrMinusValue = plusOrMinus\\n                    ? _value - tree.nodes[treeIndex]\\n                    : tree.nodes[treeIndex] - _value;\\n                tree.nodes[treeIndex] = _value;\\n\\n                updateParents(self, _key, treeIndex, plusOrMinus, plusOrMinusValue);\\n            }\\n        }\\n    }\\n\\n    /* Public Views */\\n\\n    /**\\n     *  @dev Query the leaves of a tree. Note that if `startIndex == 0`, the tree is empty and the root node will be returned.\\n     *  @param _key The key of the tree to get the leaves from.\\n     *  @param _cursor The pagination cursor.\\n     *  @param _count The number of items to return.\\n     *  @return startIndex The index at which leaves start.\\n     *  @return values The values of the returned leaves.\\n     *  @return hasMore Whether there are more for pagination.\\n     *  `O(n)` where\\n     *  `n` is the maximum number of nodes ever appended.\\n     */\\n    function queryLeafs(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint256 _cursor,\\n        uint256 _count\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 startIndex,\\n            uint256[] memory values,\\n            bool hasMore\\n        )\\n    {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n\\n        // Find the start index.\\n        for (uint256 i = 0; i < tree.nodes.length; i++) {\\n            if ((tree.K * i) + 1 >= tree.nodes.length) {\\n                startIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // Get the values.\\n        uint256 loopStartIndex = startIndex + _cursor;\\n        values = new uint256[](\\n            loopStartIndex + _count > tree.nodes.length ? tree.nodes.length - loopStartIndex : _count\\n        );\\n        uint256 valuesIndex = 0;\\n        for (uint256 j = loopStartIndex; j < tree.nodes.length; j++) {\\n            if (valuesIndex < _count) {\\n                values[valuesIndex] = tree.nodes[j];\\n                valuesIndex++;\\n            } else {\\n                hasMore = true;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function draw(SortitionSumTrees storage self, bytes32 _key, uint _drawnNumber) internal view returns(bytes32 ID) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint treeIndex = 0;\\n        uint currentDrawnNumber = _drawnNumber % tree.nodes[0];\\n\\n        while ((tree.K * treeIndex) + 1 < tree.nodes.length)  // While it still has children.\\n            for (uint i = 1; i <= tree.K; i++) { // Loop over children.\\n                uint nodeIndex = (tree.K * treeIndex) + i;\\n                uint nodeValue = tree.nodes[nodeIndex];\\n\\n                if (currentDrawnNumber >= nodeValue) currentDrawnNumber -= nodeValue; // Go to the next child.\\n                else { // Pick this child.\\n                    treeIndex = nodeIndex;\\n                    break;\\n                }\\n            }\\n        \\n        ID = tree.nodeIndexesToIDs[treeIndex];\\n    }\\n\\n    function total(SortitionSumTrees storage self, bytes32 _key) internal view returns (uint) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        if (tree.nodes.length == 0) {\\n            return 0;\\n        } else {\\n            return tree.nodes[0];\\n        }\\n    }\\n\\n\\n    /** @dev Gets a specified ID's associated value.\\n     *  @param _key The key of the tree.\\n     *  @param _ID The ID of the value.\\n     *  @return value The associated value.\\n     */\\n    function stakeOf(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        bytes32 _ID\\n    ) external view returns (uint256 value) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint256 treeIndex = tree.IDsToNodeIndexes[_ID];\\n\\n        if (treeIndex == 0) value = 0;\\n        else value = tree.nodes[treeIndex];\\n    }\\n\\n    /* Private */\\n\\n    /**\\n     *  @dev Update all the parents of a node.\\n     *  @param _key The key of the tree to update.\\n     *  @param _treeIndex The index of the node to start from.\\n     *  @param _plusOrMinus Whether to add (true) or substract (false).\\n     *  @param _value The value to add or substract.\\n     *  `O(log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function updateParents(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint256 _treeIndex,\\n        bool _plusOrMinus,\\n        uint256 _value\\n    ) private {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n\\n        uint256 parentIndex = _treeIndex;\\n        while (parentIndex != 0) {\\n            parentIndex = (parentIndex - 1) / tree.K;\\n            tree.nodes[parentIndex] = _plusOrMinus\\n                ? tree.nodes[parentIndex] + _value\\n                : tree.nodes[parentIndex] - _value;\\n        }\\n    }\\n}\",\"keccak256\":\"0xbbee78df1db771d41161ac6e39d43d3a36ae69ce13ceee2b6e32e78007ffdb3a\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\",\"keccak256\":\"0x632d89cfbd5134bb48ab9f27f8acb3ef6230858240a06c01860523508cce9502\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n      \\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\",\"keccak256\":\"0xc70dcac795ccbf6d71c8749ad70836deef10bb12af9216d7c63399e11dd00186\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\",\"keccak256\":\"0xbe08f54c573afa66d30bddd5781ad651fa0ac388458375e4c4c3f04cf2baf6b1\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbe7e8c250bbebe46299f337b29c535ce00d67fe289eb03d84ebbd74934eec19f\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressProvider.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title The interface for contracts to interact with the Blockswan Address Provider contract\\ninterface IAddressProvider {\\n    /**\\n     * @dev Emitted when a new marketplaceId is set.\\n     * @param oldMarketplaceId The address of the old marketplaceId\\n     * @param newMarketplaceId The address of the new marketplaceId\\n     */\\n    event MarketplaceIdSet(\\n        string indexed oldMarketplaceId,\\n        string indexed newMarketplaceId\\n    );\\n\\n    /**\\n     * @dev Emitted when a new contract is added to the AddressProvider.\\n     * @param _name The name assigned in the AddressProvider.\\n     * @param _address The address of the new contract\\n     */\\n    event ContractAdded(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a new contract is removed from the AddressProvider.\\n     * @param _name The contract name removed in the AddressProvider.\\n     * @param _address The address of the removed contract\\n     */\\n    event ContractRemoved(bytes32 _name, address _address);\\n\\n    /**\\n     * @dev Emitted when a contract is upgraded in the AddressProvider.\\n     * @param _name The contract name upraded in the AddressProvider.\\n     * @param _oldAddress The old address prior upgrade\\n     * @param _newAddress The new address after upgrade\\n     */\\n    event ContractUpgraded(\\n        bytes32 _name,\\n        address _oldAddress,\\n        address _newAddress\\n    );\\n\\n    /**\\n     * @notice returns contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     * @return contractAddr - address of contract registered under given provider key\\n     */\\n    function getContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice overloaded getContract to return explicit version of contract */\\n    function getContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(bytes32 _name) external view returns (address);\\n\\n    /** @notice requires returned address !== 0 */\\n    function fetchContract(\\n        bytes32 _name,\\n        uint _version\\n    ) external view returns (address);\\n\\n    function getContractVersionCount(\\n        bytes32 _name\\n    ) external view returns (uint);\\n\\n    /**\\n     * @dev addContract does two things:\\n     *      1.) registers the address of given ProviderContract in the registry\\n     *      2.) sets the registry address in given ProviderContract so only\\n     *          the registry can call functions on given contract\\n     */\\n    function addContract(bytes32 _name, address _address) external;\\n\\n    /**\\n     * @dev removes contract address registered under given provider key\\n     * @param _name - registry key for lookup\\n     */\\n    function removeContract(bytes32 _name) external;\\n\\n    /**\\n     * @notice replaces contract address registered under given key with provided address\\n     * @param _name - registry key for lookup\\n     * @param _newAddress - new contract address to register under given key\\n     */\\n    function upgradeContract(bytes32 _name, address _newAddress) external;\\n}\\n\",\"keccak256\":\"0x46fd1f2889b6a5fbd60209f90b44ced918175d5ef3b05e7d8dd526a4afd77bdc\",\"license\":\"MIT\"},\"contracts/interfaces/IJury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAddressProvider} from \\\"./IAddressProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../protocol/libraries/types/OutputTypes.sol\\\";\\nimport {InputTypes} from \\\"../protocol/libraries/types/InputTypes.sol\\\";\\n\\n/**\\n * @title IJury\\n * @author Blockswan\\n * @notice Defines the basic interface for a blockswan jury contract.\\n **/\\ninterface IJury {\\n    /**\\n     * @notice Randomly draws X jurors from the jurors pool\\n     * using entropy made with the blockhash and the disputeId among other things.\\n     * @param numberOfJurors The number of jurors to draw\\n   \\n     * @return jurors The list of jurors address\\n     */\\n\\n    function drawJurors(\\n        uint256 numberOfJurors\\n    ) external view returns (address[] memory jurors);\\n\\n    /**\\n     *\\n     * @param accounts The list of jurors to freeze\\n     */\\n\\n    function freezeTokens(address[] memory accounts) external;\\n\\n    /**\\n     * @param amount The amount to unfreeze\\n     * @param account The juror to unfreeze\\n     */\\n\\n    function unfreezeTokens(uint256 amount, address account) external;\\n\\n    /**\\n     * @param amount The amount of tokens added to the stake\\n     * @param juror The juror to reward\\n     */\\n    function rewardJuror(uint256 amount, address juror) external;\\n}\\n\",\"keccak256\":\"0x231e99b4594fbc9617adc601b2f261468fb5be029ece5f38da8cb68575b2af3c\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/Choices.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Choices library\\n * @author Blockswan\\n * @notice Defines the choices available for a juror upon a dispute in the Blockswan protocol.\\n * The uint256 values chosen represents the % of the value in the order contract that the procecutor will receive.\\n * (eg. 0 = 0% of the value in the order contract)\\n * (eg. 1000000000000000000 = 100% of the value in the order contract)\\n */\\nlibrary Choices {\\n    uint256 public constant PERCENTAGE_FACTOR = 1e4;\\n    // ---- CHOICES ---- (in percentage from 0 to 100% with 10% incrementation - 100% = 1e4)\\n    uint256 public constant ZERO_PERCENT = 0;\\n    uint256 public constant TEN_PERCENT = 1e3;\\n    uint256 public constant TWENTY_PERCENT = 2e3;\\n    uint256 public constant THIRTY_PERCENT = 3e3;\\n    uint256 public constant FORTY_PERCENT = 4e3;\\n    uint256 public constant FIFTY_PERCENT = 5e3;\\n    uint256 public constant SIXTY_PERCENT = 6e3;\\n    uint256 public constant SEVENTY_PERCENT = 7e3;\\n    uint256 public constant EIGHTY_PERCENT = 8e3;\\n    uint256 public constant NINETY_PERCENT = 9e3;\\n    uint256 public constant ONE_HUNDRED_PERCENT = 1e4;\\n}\\n\",\"keccak256\":\"0xafff24df4cde70620cb142f8f46ccab692dd31c0761c949f3f0d9224411bae82\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors  library\\n * @author Blockswan\\n * @notice Defines the error messages emitted by the different contracts of the Blockswan protocol\\n */\\nlibrary Errors {\\n    string public constant INVALID_ADDRESS_PROVIDER_ID = \\\"1\\\"; // The addresses provider is not valid\\n    string public constant ADDRESS_PROVIDER_ALREADY_ADDED = \\\"2\\\"; // This addresses provider already exists\\n    string public constant ADDRESS_PROVIDER_NOT_REGISTERED = \\\"3\\\"; // 'This addresses provider is not registered'\\n    string public constant CONTRACT_NAME_ALREADY_USED = \\\"4\\\"; // 'Requires that given _name does not already have non-zero registered contract address'\\n    string public constant ZERO_ADDRESS_IS_INVALID = \\\"5\\\"; // the address provided is 0x00\\n    string public constant INDEX_OUT_OF_RANGE = \\\"6\\\"; // the index provided is out of range\\n    string public constant ADDRESS_ALREADY_USED = \\\"7\\\"; // 'The address provided has already been unsed to initialise an account'\\n    string public constant INVALID_USER_ID = \\\"8\\\"; // 'The userId is incorrect'\\n    string public constant RESTRICTED_TO_BUYER = \\\"9\\\"; // this function can't  be called by buyers\\n    string public constant INVALID_INVITER_ID = \\\"10\\\"; // The inviter ID provided is incorrect\\n    string public constant FAILED_BECOMING_BUYER = \\\"11\\\"; // The execution to becomeBuyer failed\\n    string public constant RESTRICTED_TO_SELLER = \\\"12\\\"; // this function can't  be called by sellers\\n    string public constant FAILED_BECOMING_SELLER = \\\"13\\\"; // The execution to becomeSeller failed\\n    string public constant NO_MATCHING_XP_KEY = \\\"14\\\"; // There is no xp value to give for this byte32\\n    string public constant GIG_ID_ALREADY_EXISING = \\\"15\\\"; // There is already an id for this gig.\\n    string public constant ONLY_SELLER = \\\"16\\\"; // Only account with the seller role can call the functions\\n    string public constant ONLY_BUYER = \\\"17\\\"; // Only buyers can call those functions.\\n    string public constant NOT_GIG_OWNER = \\\"18\\\"; // The id provided does not match with the gig owner id\\n    string public constant CALLER_NOT_SELLER_ID = \\\"19\\\"; // The seller id provided is not matching with the account address calling the function\\n    string public constant CALLER_NOT_BUYER_ID = \\\"20\\\"; // The buyer id provided is not matching with the account address calling the function\\n    string public constant NOT_ORDER_SELLER = \\\"21\\\"; // The id provided is not the order seller\\n    string public constant NOT_ORDER_BUYER = \\\"22\\\"; // The id provided is not the order buyer\\n    string public constant INVALID_ORDER_STATE = \\\"23\\\"; // The function can't be called under the current order state\\n    string public constant SELF_REFUND_DELAY_NOT_OVER = \\\"24\\\"; // The self refund delay is not over\\n    string public constant NOT_ORDER_ACTOR = \\\"25\\\"; // The account address calling the function is not matching with the buyerId nor sellerId.\\n    string public constant DISPUTE_NOT_CREATED = \\\"26\\\"; // The dispute has not been created yet\\n    string public constant JURY_STAKE_NOT_ENOUGH = \\\"27\\\"; // The jury stake is not enough\\n    string public constant FAILED_TO_STAKE_JURY = \\\"28\\\"; // The jury stake failed\\n    string public constant FAILED_TO_WITHDRAW_JURY = \\\"29\\\"; // The jury withdraw failed\\n    string public constant ROUND_EVIDENCE_ALREADY_SUBMITTED = \\\"30\\\"; // The evidence has already been submitted\\n    string public constant EVIDENCE_NOT_SUBMITTED = \\\"31\\\"; // The evidence has not been submitted\\n    string public constant DS_EVIDENCE_PERIOD_OVER = \\\"32\\\"; // The evidence period is over\\n    // string public constant DS_VOTING_PERIOD_OVER = \\\"33\\\"; // The voting period is over\\n    // string public constant DS_VOTING_PERIOD_NOT_OVER = \\\"34\\\"; // The voting period is not over\\n    // string public constant DS_VOTING_PERIOD_NOT_STARTED = \\\"35\\\"; // The voting period has not started yet\\n    string public constant ONLY_PROVIDER_ALLOWED = \\\"36\\\"; // Only the provider can call this function\\n    string public constant DS_EVIDENCE_SENDER_NOT_PARTY = \\\"37\\\"; // The sender is not a party of the dispute\\n    string public constant CALLER_NOT_USER = \\\"38\\\"; // The caller is not the user Id\\n    string public constant DS_EVIDENCE_ROLE_NOT_VALID = \\\"39\\\"; // The role is not valid\\n    string public constant RD_ROUND_DOES_NOT_EXIST = \\\"40\\\"; // The round does not exist\\n    string public constant DS_IN_EXECUTION_PERIOD = \\\"46\\\"; //     The dispute is in execution state\\n    string public constant VOTE_REVEAL_INCORRECT = \\\"47\\\"; //     The vote reveal is incorrect\\n    string public constant ROUND_VOTE_ALREADY_COMMITED = \\\"48\\\"; //     The vote has already been commited\\n    string public constant ROUND_VOTE_NOT_COMMITED = \\\"49\\\"; //     The vote has not been commited\\n    string public constant ROUND_VOTE_ALREADY_REVEALED = \\\"50\\\"; //     The vote has already been revealed\\n    string public constant RD_ACCOUNT_NOT_DRAWN_JUROR = \\\"51\\\"; //     The account is not a drawn juror\\n    string public constant DS_COMMIT_STATE_REQUIRED = \\\"52\\\"; //    The dispute is not in commit state\\n    string public constant DS_TIME_NOT_PASSED = \\\"53\\\"; //   The time has not passed\\n    string public constant DS_INVALID_STATE = \\\"54\\\"; //   The state is invalid\\n    string public constant VOTE_INVALID_CHOICE = \\\"55\\\"; //  The vote choice is invalid\\n    string public constant DS_NO_COMMITMENTS_MADE_FOR_ROUND = \\\"56\\\"; //  No commitments were made for the round\\n    string public constant DS_NO_VOTES_MADE_FOR_ROUND = \\\"57\\\"; //  No votes were made for the round\\n    string public constant RD_VOTE_NOT_FOUND = \\\"58\\\"; //  The vote was not found\\n    string public constant ROUND_NOT_CLOSED = \\\"59\\\"; //  The round is not closed\\n    string public constant VOTE_INCORRECT = \\\"60\\\"; //  The vote is incorrect\\n    string public constant ROUND_NOT_APPEALED = \\\"61\\\"; //  The round is not appealed\\n    string public constant ROUND_ID_INVALID = \\\"62\\\"; //  The round id is invalid\\n    string public constant CLAIM_NOT_ALLOWED = \\\"63\\\"; //  The claim is not allowed\\n    string public constant ROUND_IS_APPEALED = \\\"64\\\"; //  The round is appealed\\n    string public constant DS_DISPUTE_ALREADY_RULED = \\\"65\\\"; //  The dispute is already ruled\\n}\\n\",\"keccak256\":\"0x2fdca5575c0847027beb5918556b66679442a8bf7ac8119f9c06de7060ab4bb1\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/helpers/RoleKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary RoleKeys {\\n    // ---- ADMIN ROLES  ------\\n    bytes32 public constant PROTOCOL_ADMIN_ROLE = \\\"PROTOCOL_ADMIN\\\";\\n    bytes32 public constant BUYER_ADMIN_ROLE = \\\"BUYER_ADMIN\\\";\\n    bytes32 public constant SELLER_ADMIN_ROLE = \\\"SELLER_ADMIN\\\";\\n    // ----  ROLES  ------\\n    bytes32 public constant BUYER_ROLE = \\\"BUYER\\\";\\n    bytes32 public constant SELLER_ROLE = \\\"SELLER\\\";\\n    bytes32 public constant JUDGE_ROLE = \\\"JUDGE\\\";\\n    bytes32 public constant BLACKLIST_ROLE = \\\"BLACKLIST\\\";\\n    bytes32 public constant WHITELIST_ROLE = \\\"WHITELIST\\\";\\n    bytes32 public constant XP_GIVER_ROLE = \\\"XP_GIVER\\\";\\n}\\n\",\"keccak256\":\"0x96ba28ef5c4c14bc1ef86a62e3a2bb1ea859abda8a57d053e2d25a335c58aeae\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/DisputeDataLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title DisputeData logic library\\n * @author Blockswan\\n * @notice Implements the logic for dispute data specific functions\\n */\\n\\nlibrary DisputeDataLogic {\\n    using Counters for Counters.Counter;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function setCreated(\\n        DataTypes.Dispute storage dispute\\n    ) external returns (bool) {\\n        dispute.createdAt = block.timestamp;\\n        return true;\\n    }\\n\\n    function setOrderId(\\n        DataTypes.Dispute storage dispute,\\n        uint256 orderId\\n    ) external returns (bool) {\\n        dispute.orderId = orderId;\\n        return true;\\n    }\\n\\n    function setRuling(\\n        DataTypes.Dispute storage dispute,\\n        uint256 ruling\\n    ) external returns (bool) {\\n        dispute.ruling = ruling;\\n        dispute.ruledAt = block.timestamp;\\n        return true;\\n    }\\n\\n    function setState(\\n        DataTypes.Dispute storage dispute,\\n        DataTypes.DisputeState state\\n    ) external returns (bool) {\\n        dispute.state = state;\\n        return true;\\n    }\\n\\n    function addTimestamp(\\n        DataTypes.Dispute storage dispute,\\n        uint256 delay\\n    ) external returns (bool) {\\n        dispute.timestamps.push(block.timestamp + delay);\\n        return true;\\n    }\\n\\n    function deleteTimestamps(\\n        DataTypes.Dispute storage dispute\\n    ) external returns (bool) {\\n        delete dispute.timestamps;\\n        return true;\\n    }\\n\\n    function isState(\\n        DataTypes.Dispute storage dispute,\\n        DataTypes.DisputeState state\\n    ) external view returns (bool) {\\n        return (dispute.state == state);\\n    }\\n\\n    function getLatestRound(\\n        DataTypes.Dispute storage dispute\\n    ) external view returns (DataTypes.Round storage) {\\n        DataTypes.Round[] storage rounds = dispute.rounds;\\n        return rounds[rounds.length - 1];\\n    }\\n\\n    function getRound(\\n        DataTypes.Dispute storage dispute,\\n        uint256 roundId\\n    ) external view returns (DataTypes.Round storage) {\\n        return dispute.rounds[roundId];\\n    }\\n\\n    function isEvidencePeriod(\\n        DataTypes.Dispute storage dispute\\n    ) external view returns (bool) {\\n        return (block.timestamp < dispute.timestamps[0]);\\n    }\\n\\n    function isCommitPeriod(\\n        DataTypes.Dispute storage dispute\\n    ) external view returns (bool) {\\n        return (block.timestamp >= dispute.timestamps[0] &&\\n            block.timestamp < dispute.timestamps[1]);\\n    }\\n\\n    function isVotePeriod(\\n        DataTypes.Dispute storage dispute\\n    ) external view returns (bool) {\\n        return (block.timestamp >= dispute.timestamps[1] &&\\n            block.timestamp < dispute.timestamps[2]);\\n    }\\n\\n    function isAppealPeriod(\\n        DataTypes.Dispute storage dispute\\n    ) external view returns (bool) {\\n        return (block.timestamp >= dispute.timestamps[2] &&\\n            block.timestamp < dispute.timestamps[3]);\\n    }\\n}\\n\",\"keccak256\":\"0x111f4000f4efca6ea084b1abf39008cd0bb104695615043e2bc683be06a56104\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/DisputeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {PercentageMath} from \\\"../../../imports/aave/contracts/PercentageMath.sol\\\";\\nimport {RoundLogic} from \\\"./RoundLogic.sol\\\";\\nimport {DisputeDataLogic} from \\\"./DisputeDataLogic.sol\\\";\\nimport {SortitionSumTreeFactory} from \\\"../../../imports/kleros/contracts/SortitionSumTreeFactory.sol\\\";\\nimport {Choices} from \\\"../helpers/Choices.sol\\\";\\nimport {RoundDataLogic} from \\\"./RoundDataLogic.sol\\\";\\n\\n/**\\n * @title Dispute logic library\\n * @author Blockswan\\n * @notice Implements the logic for dispute specific functions\\n */\\nlibrary DisputeLogic {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using DisputeDataLogic for DataTypes.Dispute;\\n    using RoundDataLogic for DataTypes.Round;\\n    using RoundLogic for *;\\n    using Counters for Counters.Counter;\\n    using PercentageMath for uint256;\\n    using SortitionSumTreeFactory for SortitionSumTreeFactory.SortitionSumTrees;\\n\\n    modifier onlyIfTimeElapsed(uint256 timestamp) {\\n        require(block.timestamp >= timestamp, Errors.DS_TIME_NOT_PASSED);\\n        _;\\n    }\\n\\n    modifier onlyIfState(\\n        DataTypes.Dispute storage dispute,\\n        DataTypes.DisputeState state\\n    ) {\\n        require(dispute.state == state, Errors.DS_INVALID_STATE);\\n        _;\\n    }\\n\\n    modifier onlyIfAtLeastOneCommit(DataTypes.Dispute storage dispute) {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        require(\\n            round.totalCommited > 0,\\n            Errors.DS_NO_COMMITMENTS_MADE_FOR_ROUND\\n        );\\n        _;\\n    }\\n\\n    modifier onlyIfAtLeastOneVote(DataTypes.Dispute storage dispute) {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        require(round.totalVoted > 0, Errors.DS_NO_VOTES_MADE_FOR_ROUND);\\n        _;\\n    }\\n\\n    function getDisputeById(\\n        uint256 disputeId,\\n        mapping(uint256 => DataTypes.Dispute) storage disputes\\n    ) public view returns (DataTypes.Dispute storage) {\\n        return disputes[disputeId];\\n    }\\n\\n    function executeCreateDispute(\\n        EnumerableSet.UintSet storage disputeIds,\\n        mapping(uint256 => DataTypes.Dispute) storage disputes,\\n        InputTypes.ExecuteCreateDisputeInput memory params\\n    ) external returns (bool) {\\n        bool added = disputeIds.add(params.newId);\\n        DataTypes.Dispute storage newDispute = getDisputeById(\\n            params.newId,\\n            disputes\\n        );\\n        newDispute.addTimestamp(params.evidenceUntil);\\n        newDispute.rounds.addRound(\\n            InputTypes.AddRoundInput({\\n                maxVotes: params.maxVotes,\\n                totalFeesForJurors: params.totalFeesForJurors,\\n                tokensAtStakePerJuror: params.tokensAtStakePerJuror,\\n                procecutorId: params.procecutorId,\\n                defendantId: params.defendantId,\\n                drawnJurors: params.drawnJurors\\n            })\\n        );\\n        newDispute.setCreated();\\n        return added;\\n    }\\n\\n    function executeNextRound(\\n        DataTypes.Dispute storage dispute,\\n        InputTypes.ExecuteNextRoundInput memory params\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.EXECUTION)\\n        returns (bool)\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        require(round.isAppealed(), Errors.ROUND_NOT_APPEALED);\\n        dispute.setState(DataTypes.DisputeState.EVIDENCE);\\n        dispute.deleteTimestamps();\\n        dispute.addTimestamp(params.evidenceUntil);\\n        dispute.rounds.addRound(\\n            InputTypes.AddRoundInput({\\n                maxVotes: params.maxVotes,\\n                totalFeesForJurors: params.totalFeesForJurors,\\n                tokensAtStakePerJuror: params.tokensAtStakePerJuror,\\n                procecutorId: round.procecutorId,\\n                defendantId: round.defendantId,\\n                drawnJurors: params.drawnJurors\\n            })\\n        );\\n        return true;\\n    }\\n\\n    modifier onlyNotRuled(DataTypes.Dispute storage dispute) {\\n        require(dispute.ruledAt == 0, Errors.DS_DISPUTE_ALREADY_RULED);\\n        _;\\n    }\\n\\n    function executeSendEvidence(\\n        DataTypes.Dispute storage dispute,\\n        DataTypes.Evidence memory evidence\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.EVIDENCE)\\n        returns (bool)\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        round.submitEvidence(evidence);\\n        return true;\\n    }\\n\\n    function executeClaimRuling(\\n        DataTypes.Dispute storage dispute\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.EXECUTION)\\n        onlyNotRuled(dispute)\\n        returns (\\n            uint256 ruling,\\n            uint256 orderId,\\n            uint256 procecutorId,\\n            uint256 defendantId\\n        )\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        (ruling, procecutorId, defendantId) = round.claimRuling();\\n        orderId = dispute.orderId;\\n        dispute.setRuling(ruling);\\n    }\\n\\n    function calcDisputeDelaysFromBlock(\\n        uint256 evidenceUntil,\\n        uint256 commitUntil,\\n        uint256 voteUntil,\\n        uint256 appealUntil\\n    ) public view returns (uint256[] memory delays) {\\n        uint256 blockTimestamp = block.timestamp;\\n        delays = new uint256[](4);\\n        delays[0] = blockTimestamp + evidenceUntil;\\n        delays[1] = delays[0] + commitUntil;\\n        delays[2] = delays[1] + voteUntil;\\n        delays[3] = delays[2] + appealUntil;\\n    }\\n\\n    function format(\\n        DataTypes.Dispute storage dispute,\\n        uint256 id\\n    ) external view returns (OutputTypes.DisputeOutput memory) {\\n        return (\\n            OutputTypes.DisputeOutput({\\n                createdAt: dispute.createdAt,\\n                disputeId: id,\\n                orderId: dispute.orderId,\\n                ruling: dispute.ruling,\\n                ruledAt: dispute.ruledAt,\\n                timestamps: dispute.timestamps,\\n                state: dispute.state,\\n                rounds: RoundLogic.formatAll(dispute.rounds)\\n            })\\n        );\\n    }\\n\\n    function setEvidencePhase(DataTypes.Dispute storage dispute) external {}\\n\\n    function goCommitState(\\n        DataTypes.Dispute storage dispute,\\n        DataTypes.DelayTimestamp memory delayTimestamp\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.EVIDENCE)\\n        onlyIfTimeElapsed(dispute.timestamps[0])\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        if (round.areEvidencesSubmitted()) {\\n            dispute.addTimestamp(delayTimestamp.commit);\\n            dispute.setState(DataTypes.DisputeState.COMMIT);\\n        } else {\\n            dispute.addTimestamp(delayTimestamp.commit);\\n            dispute.addTimestamp(delayTimestamp.vote);\\n            dispute.addTimestamp(delayTimestamp.appeal);\\n            dispute.setState(DataTypes.DisputeState.APPEAL);\\n            round.setWinningChoice(Choices.ONE_HUNDRED_PERCENT);\\n        }\\n    }\\n\\n    function goVoteState(\\n        DataTypes.Dispute storage dispute,\\n        uint256 voteDelay\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.COMMIT)\\n        onlyIfTimeElapsed(dispute.timestamps[1])\\n        onlyIfAtLeastOneCommit(dispute)\\n    {\\n        dispute.addTimestamp(voteDelay);\\n        dispute.setState(DataTypes.DisputeState.VOTE);\\n    }\\n\\n    function goAppealState(\\n        DataTypes.Dispute storage dispute,\\n        uint256 appealDelay\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.VOTE)\\n        onlyIfTimeElapsed(dispute.timestamps[2])\\n        onlyIfAtLeastOneVote(dispute)\\n    {\\n        dispute.setState(DataTypes.DisputeState.APPEAL);\\n        dispute.addTimestamp(appealDelay);\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        round.setWinningChoice(round.getWinningChoice());\\n    }\\n\\n    function goExecutionState(\\n        DataTypes.Dispute storage dispute\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.APPEAL)\\n        onlyIfTimeElapsed(dispute.timestamps[3])\\n    {\\n        dispute.setState(DataTypes.DisputeState.EXECUTION);\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        uint256 winningChoice = round.winningChoice;\\n        (uint256 min, uint256 max) = RoundDataLogic.getRanges(winningChoice);\\n        round.setTotalPenalties(round.calcPenaltiesAmount(min, max));\\n        round.close();\\n    }\\n\\n    //function goNextRound() external {}\\n\\n    function executeCommitVote(\\n        DataTypes.Dispute storage dispute,\\n        uint256 choice,\\n        string memory salt,\\n        address account\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.COMMIT)\\n        returns (bool)\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        round.commitVote(account, choice, salt);\\n        return true;\\n    }\\n\\n    function executeRevealVote(\\n        DataTypes.Dispute storage dispute,\\n        uint256 choice,\\n        string memory salt,\\n        string memory justification,\\n        address account\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.VOTE)\\n        returns (bool)\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        round.revealVote(account, choice, salt, justification);\\n        return true;\\n    }\\n\\n    function executeAppeal(\\n        DataTypes.Dispute storage dispute,\\n        uint256 appealFeeRewards,\\n        uint256 procecutorId\\n    )\\n        external\\n        onlyIfState(dispute, DataTypes.DisputeState.APPEAL)\\n        returns (bool)\\n    {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        round.appeal(appealFeeRewards, procecutorId);\\n        return true;\\n    }\\n\\n    function executeClaimAsJudge(\\n        DataTypes.Dispute storage dispute,\\n        address account,\\n        uint256 roundId\\n    ) external returns (OutputTypes.ExecuteClaimAsJudgeOutput memory params) {\\n        DataTypes.Round storage round = dispute.getRound(roundId);\\n        uint256 winningChoice = round.winningChoice;\\n        uint256 amountOfCorrectVotes = round.getAmountOfCorrectVote(\\n            winningChoice\\n        );\\n\\n        (uint256 min, uint256 max) = RoundDataLogic.getRanges(winningChoice);\\n\\n        params = round.claimAsJudge(\\n            InputTypes.ClaimAsJudgeInput({\\n                account: account,\\n                min: min,\\n                max: max,\\n                winningChoice: winningChoice,\\n                amountOfCorrectVotes: amountOfCorrectVotes,\\n                tokensAtStakePerJuror: round.tokensAtStakePerJuror,\\n                totalFeesForJurors: round.totalFeesForJurors,\\n                penalties: round.penalties\\n            })\\n        );\\n    }\\n\\n    function executeClaimAppealFeeRewards(\\n        DataTypes.Dispute storage dispute,\\n        uint256 callerId,\\n        uint256 roundId\\n    ) external returns (uint256) {\\n        require(roundId > 0, Errors.ROUND_ID_INVALID);\\n        (uint256 appealFeeAmount, bool isClaimable) = RoundLogic\\n            .claimAppealFeeRewards(\\n                dispute.getRound(roundId),\\n                dispute.getRound(roundId - 1),\\n                callerId\\n            );\\n        require(isClaimable, Errors.CLAIM_NOT_ALLOWED);\\n        return appealFeeAmount;\\n    }\\n\\n    function calcAppealFees(\\n        DataTypes.Dispute storage dispute,\\n        uint256 feePerJuror\\n    ) public view returns (uint256) {\\n        DataTypes.Round storage round = dispute.getLatestRound();\\n        uint256 appealFee = feePerJuror * round.maxVotes * 2;\\n        return PercentageMath.percentMul(appealFee, 0.1e4);\\n    }\\n}\\n\",\"keccak256\":\"0xa78e36e6c18b81377f4cf8e3d6fddc5461b6ce58e590ac4446a63261dcadbcac\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/RoundDataLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title Round Data logic library\\n * @author Blockswan\\n * @notice Implements the logic for round data specific functions\\n */\\n\\nlibrary RoundDataLogic {\\n    using Counters for Counters.Counter;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    function setTokensAtStakePerJuror(\\n        DataTypes.Round storage round,\\n        uint256 tokensAtStakePerJuror\\n    ) external returns (bool) {\\n        round.tokensAtStakePerJuror = tokensAtStakePerJuror;\\n        return true;\\n    }\\n\\n    function setWinningChoice(\\n        DataTypes.Round storage round,\\n        uint256 winningChoice\\n    ) external returns (bool) {\\n        round.winningChoice = winningChoice;\\n        return true;\\n    }\\n\\n    function setTotalFeesForJurors(\\n        DataTypes.Round storage round,\\n        uint256 totalFeesForJurors\\n    ) external returns (bool) {\\n        round.totalFeesForJurors = totalFeesForJurors;\\n        return true;\\n    }\\n\\n    function setAppealFees(\\n        DataTypes.Round storage round,\\n        uint256 appealFeeRewards\\n    ) external returns (bool) {\\n        round.appealFeeRewards = appealFeeRewards;\\n        return true;\\n    }\\n\\n    function setMaxVotes(\\n        DataTypes.Round storage round,\\n        uint256 maxVotes\\n    ) external returns (bool) {\\n        round.maxVotes = maxVotes;\\n        return true;\\n    }\\n\\n    function setDrawnJurors(\\n        DataTypes.Round storage round,\\n        address[] memory drawnJurors\\n    ) external returns (bool) {\\n        for (uint256 i = 0; i < drawnJurors.length; i++) {\\n            round.drawnJurors.push(drawnJurors[i]);\\n        }\\n        return true;\\n    }\\n\\n    function getJurorWeight(\\n        DataTypes.Round storage round,\\n        address juror\\n    ) internal view returns (uint256 weight) {\\n        for (uint256 i = 0; i < round.drawnJurors.length; i++) {\\n            if (round.drawnJurors[i] == juror) {\\n                weight += 1;\\n            }\\n        }\\n    }\\n\\n    function addEvidence(\\n        DataTypes.Round storage round,\\n        DataTypes.Evidence memory evidence\\n    ) external returns (bool) {\\n        round.evidences.push(evidence);\\n        round.evidenceSubmitters.add(evidence.userId);\\n        return true;\\n    }\\n\\n    function setProcecutorId(\\n        DataTypes.Round storage round,\\n        uint256 procecutorId\\n    ) external returns (bool) {\\n        round.procecutorId = procecutorId;\\n        return true;\\n    }\\n\\n    function setDefendantId(\\n        DataTypes.Round storage round,\\n        uint256 defendantId\\n    ) external returns (bool) {\\n        round.defendantId = defendantId;\\n        return true;\\n    }\\n\\n    function isProcecutor(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) external view returns (bool) {\\n        return (round.procecutorId == userId);\\n    }\\n\\n    function isDefendant(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) external view returns (bool) {\\n        return (round.defendantId == userId);\\n    }\\n\\n    function isAppealed(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.appealFeeRewards > 0;\\n    }\\n\\n    function hasSubmittedEvidence(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) internal view returns (bool) {\\n        return round.evidenceSubmitters.contains(userId);\\n    }\\n\\n    function getEvidencesCount(\\n        DataTypes.Round storage round\\n    ) internal view returns (uint256) {\\n        return round.evidences.length;\\n    }\\n\\n    function setAppealedBy(\\n        DataTypes.Round storage round,\\n        uint256 appealedBy\\n    ) external returns (bool) {\\n        round.appealedBy = appealedBy;\\n        return true;\\n    }\\n\\n    function isJuror(\\n        DataTypes.Round storage round,\\n        address account\\n    ) external view returns (bool) {\\n        for (uint256 i = 0; i < round.maxVotes; i++) {\\n            if (round.drawnJurors[i] == account) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function hasRevealed(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (bool) {\\n        DataTypes.Vote memory vote = fetchVoteByAccount(round, account);\\n        return vote.hasVoted;\\n    }\\n\\n    function hasCommited(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (bool) {\\n        DataTypes.Vote memory vote = fetchVoteByAccount(round, account);\\n        return vote.commit != 0x0;\\n    }\\n\\n    function setTotalPenalties(\\n        DataTypes.Round storage round,\\n        uint256 penalties\\n    ) external returns (bool) {\\n        round.penalties = penalties;\\n        return true;\\n    }\\n\\n    function incrementTotalVoted(\\n        DataTypes.Round storage round,\\n        uint256 weight\\n    ) external returns (bool) {\\n        round.totalVoted += weight;\\n        return true;\\n    }\\n\\n    function incrementTotalCommited(\\n        DataTypes.Round storage round,\\n        uint256 weight\\n    ) external returns (bool) {\\n        round.totalCommited += weight;\\n        return true;\\n    }\\n\\n    function areAllVotesCommitted(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.totalCommited == round.maxVotes;\\n    }\\n\\n    function areAllVotesRevealed(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.totalVoted == round.maxVotes;\\n    }\\n\\n    function getVoteByAccount(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (DataTypes.Vote storage) {\\n        uint256 i = 0;\\n        for (i = 0; i < round.votes.length; i++) {\\n            if (round.votes[i].account == account) {\\n                return round.votes[i];\\n            }\\n        }\\n        return round.votes[i];\\n    }\\n\\n    function tryGetVoteByAccount(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (DataTypes.Vote storage, bool exists) {\\n        for (uint256 i = 0; i < round.votes.length; i++) {\\n            if (round.votes[i].account == account) {\\n                return (round.votes[i], true);\\n            }\\n        }\\n        return (round.votes[0], false);\\n    }\\n\\n    function incrementChoiceCount(\\n        DataTypes.Round storage round,\\n        uint256 choice,\\n        uint256 weight\\n    ) external {\\n        round.counts[choice] += weight;\\n    }\\n\\n    function fetchVoteByAccount(\\n        DataTypes.Round storage round,\\n        address account\\n    ) internal view returns (DataTypes.Vote memory) {\\n        uint256 length = round.votes.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (round.votes[i].account == account) {\\n                return round.votes[i];\\n            }\\n        }\\n        return\\n            DataTypes.Vote(\\n                account,\\n                0x0,\\n                0,\\n                getJurorWeight(round, account),\\n                \\\"\\\",\\n                false\\n            );\\n    }\\n\\n    function getWinningChoice(\\n        DataTypes.Round storage round\\n    ) internal view returns (uint256) {\\n        uint256 winningChoice = 0;\\n        uint256 winningCount = 0;\\n        for (uint256 i = 0; i < round.counts.length; i++) {\\n            if (round.counts[i] > winningCount) {\\n                winningChoice = i;\\n                winningCount = round.counts[i];\\n            }\\n        }\\n        return winningChoice;\\n    }\\n\\n    function getAmountNotVoted(\\n        DataTypes.Round storage round\\n    ) public view returns (uint256) {\\n        return round.maxVotes - round.totalVoted;\\n    }\\n\\n    function getMinRange(uint256 winningChoice) public pure returns (uint256) {\\n        return winningChoice == 0 ? 0 : winningChoice - 1;\\n    }\\n\\n    function getMaxRange(uint256 winningChoice) public pure returns (uint256) {\\n        return winningChoice == 10 ? 10 : winningChoice + 1;\\n    }\\n\\n    function getRanges(\\n        uint256 winningChoice\\n    ) public pure returns (uint256, uint256) {\\n        return (getMinRange(winningChoice), getMaxRange(winningChoice));\\n    }\\n\\n    function setAppealFeeRewards(\\n        DataTypes.Round storage round,\\n        uint256 appealFeeRewards\\n    ) external returns (bool) {\\n        round.appealFeeRewards = appealFeeRewards;\\n        return true;\\n    }\\n\\n    function setAppealFeeClaimed(\\n        DataTypes.Round storage round\\n    ) external returns (bool) {\\n        round.appealFeeRewards = 0;\\n        return true;\\n    }\\n\\n    function close(DataTypes.Round storage round) external returns (bool) {\\n        round.closed = true;\\n        return true;\\n    }\\n\\n    function isClosed(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.closed;\\n    }\\n\\n    function getAmountOfCorrectVote(\\n        DataTypes.Round storage round,\\n        uint256 winningChoice\\n    ) external view returns (uint256) {\\n        return round.counts[winningChoice];\\n    }\\n\\n    function getAmountOfIncorrectVote(\\n        DataTypes.Round storage round,\\n        uint256 min,\\n        uint256 max\\n    ) external view returns (uint256 incorrectVotes) {\\n        incorrectVotes = round.maxVotes - round.totalVoted;\\n        for (uint256 i = 0; i < round.counts.length; i++) {\\n            if (!(i >= min && i <= max)) {\\n                incorrectVotes += round.counts[i];\\n            }\\n        }\\n    }\\n\\n    function addJudgesClaimed(\\n        DataTypes.Round storage round,\\n        address account\\n    ) external returns (bool) {\\n        round.judgesClaimed.add(account);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xe2b09b674d8265b2875aaa1eb14c7ed3d79803a97de7837766151e1c1fc68319\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/RoundLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {RoleKeys} from \\\"../helpers/RoleKeys.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {PercentageMath} from \\\"../../../imports/aave/contracts/PercentageMath.sol\\\";\\nimport {RoundDataLogic} from \\\"./RoundDataLogic.sol\\\";\\nimport {VoteLogic} from \\\"./VoteLogic.sol\\\";\\n\\nimport {IJury} from \\\"../../../interfaces/IJury.sol\\\";\\n\\n/**\\n * @title Round logic library\\n * @author Blockswan\\n * @notice Implements the logic for round specific functions\\n */\\nlibrary RoundLogic {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Counters for Counters.Counter;\\n    using PercentageMath for uint256;\\n    using RoundDataLogic for DataTypes.Round;\\n    using VoteLogic for DataTypes.Vote;\\n\\n    modifier onlyJuror(DataTypes.Round storage round, address account) {\\n        require(round.isJuror(account), Errors.RD_ACCOUNT_NOT_DRAWN_JUROR);\\n        _;\\n    }\\n\\n    modifier onlyClosedRound(DataTypes.Round storage round) {\\n        require(round.isClosed(), Errors.ROUND_NOT_CLOSED);\\n        _;\\n    }\\n\\n    modifier onlyAppealedRound(DataTypes.Round storage round) {\\n        require(round.isAppealed(), Errors.ROUND_NOT_APPEALED);\\n        _;\\n    }\\n\\n    modifier onlyNotAppealedRound(DataTypes.Round storage round) {\\n        require(!round.isAppealed(), Errors.ROUND_IS_APPEALED);\\n        _;\\n    }\\n\\n    modifier onlyNotCommited(DataTypes.Round storage round, address account) {\\n        require(\\n            !round.hasCommited(account),\\n            Errors.ROUND_VOTE_ALREADY_COMMITED\\n        );\\n        _;\\n    }\\n\\n    modifier onlyNotSumbittedEvidence(\\n        DataTypes.Round storage round,\\n        uint256 userId\\n    ) {\\n        require(\\n            !round.hasSubmittedEvidence(userId),\\n            Errors.ROUND_EVIDENCE_ALREADY_SUBMITTED\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCommited(DataTypes.Round storage round, address account) {\\n        require(round.hasCommited(account), Errors.ROUND_VOTE_NOT_COMMITED);\\n        _;\\n    }\\n\\n    modifier onlyNotRevealed(DataTypes.Round storage round, address account) {\\n        require(\\n            !round.hasRevealed(account),\\n            Errors.ROUND_VOTE_ALREADY_REVEALED\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCorrectRole(bytes32 role) {\\n        require(\\n            role == RoleKeys.BUYER_ROLE || role == RoleKeys.SELLER_ROLE,\\n            Errors.DS_EVIDENCE_ROLE_NOT_VALID\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRoundActor(DataTypes.Round storage round, uint256 userId) {\\n        require(\\n            round.isProcecutor(userId) || round.isDefendant(userId),\\n            Errors.DS_EVIDENCE_SENDER_NOT_PARTY\\n        );\\n        _;\\n    }\\n\\n    // add a round\\n    function addRound(\\n        DataTypes.Round[] storage rounds,\\n        InputTypes.AddRoundInput memory params\\n    ) external returns (bool) {\\n        rounds.push();\\n        DataTypes.Round storage newRound = rounds[rounds.length - 1];\\n        newRound.setProcecutorId(params.procecutorId);\\n        newRound.setDefendantId(params.defendantId);\\n        newRound.setMaxVotes(params.maxVotes);\\n        newRound.setTotalFeesForJurors(params.totalFeesForJurors);\\n        newRound.setDrawnJurors(params.drawnJurors);\\n        newRound.setTokensAtStakePerJuror(params.tokensAtStakePerJuror);\\n        return true;\\n    }\\n\\n    function submitEvidence(\\n        DataTypes.Round storage round,\\n        DataTypes.Evidence memory evidence\\n    )\\n        external\\n        onlyRoundActor(round, evidence.userId)\\n        onlyNotSumbittedEvidence(round, evidence.userId)\\n        onlyCorrectRole(evidence.role)\\n        returns (bool)\\n    {\\n        if (round.getEvidencesCount() == 1) {\\n            require(\\n                evidence.role != round.evidences[0].role,\\n                Errors.DS_EVIDENCE_ROLE_NOT_VALID\\n            );\\n        }\\n        round.addEvidence(evidence);\\n        return true;\\n    }\\n\\n    function areEvidencesSubmitted(\\n        DataTypes.Round storage round\\n    ) external view returns (bool) {\\n        return round.getEvidencesCount() == 2;\\n    }\\n\\n    function commitVote(\\n        DataTypes.Round storage round,\\n        address account,\\n        uint256 choice,\\n        string memory salt\\n    )\\n        external\\n        onlyJuror(round, account)\\n        onlyNotCommited(round, account)\\n        returns (bool)\\n    {\\n        uint256 weight = round.getJurorWeight(account);\\n        DataTypes.Vote memory newVote = VoteLogic.commit(\\n            account,\\n            choice,\\n            weight,\\n            salt\\n        );\\n        round.votes.push(newVote);\\n        round.incrementTotalCommited(weight);\\n        return true;\\n    }\\n\\n    function revealVote(\\n        DataTypes.Round storage round,\\n        address account,\\n        uint256 choice,\\n        string memory salt,\\n        string memory justification\\n    )\\n        external\\n        onlyJuror(round, account)\\n        onlyCommited(round, account)\\n        onlyNotRevealed(round, account)\\n    {\\n        uint256 weight = round.getJurorWeight(account);\\n        round.incrementTotalVoted(weight);\\n        round.incrementChoiceCount(choice, weight);\\n        {\\n            (DataTypes.Vote storage vote, bool exists) = round\\n                .tryGetVoteByAccount(account);\\n            require(exists, Errors.RD_VOTE_NOT_FOUND);\\n            vote.reveal(choice, salt, justification);\\n        }\\n    }\\n\\n    function appeal(\\n        DataTypes.Round storage round,\\n        uint256 appealFeeRewards,\\n        uint256 procecutorId\\n    ) external onlyRoundActor(round, procecutorId) {\\n        round.setAppealFeeRewards(appealFeeRewards);\\n        round.setAppealedBy(procecutorId);\\n    }\\n\\n    function claimAsJudge(\\n        DataTypes.Round storage round,\\n        InputTypes.ClaimAsJudgeInput memory params\\n    )\\n        external\\n        onlyJuror(round, params.account)\\n        onlyClosedRound(round)\\n        returns (OutputTypes.ExecuteClaimAsJudgeOutput memory output)\\n    {\\n        DataTypes.Vote memory vote = round.fetchVoteByAccount(params.account);\\n        {\\n            output = OutputTypes.ExecuteClaimAsJudgeOutput({\\n                isVoteCorrect: vote.isVoteCorrect(params.winningChoice),\\n                isVoteInRange: vote.isBetweenRange(params.min, params.max),\\n                amountFromDisputeFees: calcEarnedFromDisputeFees(\\n                    vote.weight,\\n                    params.amountOfCorrectVotes,\\n                    params.totalFeesForJurors\\n                ),\\n                amountFromJurorsTokensAtStake: calcEarnedFromDisputeFees(\\n                    vote.weight,\\n                    params.amountOfCorrectVotes,\\n                    params.penalties\\n                ),\\n                tokensAtStakePerJuror: params.tokensAtStakePerJuror\\n            });\\n        }\\n        round.addJudgesClaimed(params.account);\\n    }\\n\\n    function claimAppealFeeRewards(\\n        DataTypes.Round storage round,\\n        DataTypes.Round storage previousRound,\\n        uint256 userId\\n    )\\n        external\\n        onlyRoundActor(previousRound, userId)\\n        onlyAppealedRound(previousRound)\\n        returns (uint256 appealFeeRewards, bool isClaimable)\\n    {\\n        appealFeeRewards = previousRound.appealFeeRewards;\\n        isClaimable = checkIfClaimAppealIsPossible(\\n            round.winningChoice,\\n            previousRound.winningChoice,\\n            round.isProcecutor(userId)\\n        );\\n        previousRound.setAppealFeeClaimed();\\n    }\\n\\n    function claimRuling(\\n        DataTypes.Round storage round\\n    )\\n        external\\n        view\\n        onlyNotAppealedRound(round)\\n        returns (uint256 ruling, uint256 procecutorId, uint256 defendantId)\\n    {\\n        ruling = round.winningChoice;\\n        procecutorId = round.procecutorId;\\n        defendantId = round.defendantId;\\n    }\\n\\n    function checkIfClaimAppealIsPossible(\\n        uint256 winningChoice,\\n        uint256 previousWinningChoice,\\n        bool calledByProcecutor\\n    ) internal pure returns (bool) {\\n        if (calledByProcecutor) {\\n            return winningChoice > previousWinningChoice;\\n        } else {\\n            return winningChoice <= previousWinningChoice;\\n        }\\n    }\\n\\n    function calcEarnedFromDisputeFees(\\n        uint256 jurorWeight,\\n        uint256 weightOfCorrectVotes,\\n        uint256 disputePrice\\n    ) public pure returns (uint256) {\\n        uint res = (disputePrice * jurorWeight) / weightOfCorrectVotes;\\n        return res;\\n    }\\n\\n    function calcPenaltiesAmount(\\n        DataTypes.Round storage round,\\n        uint256 min,\\n        uint256 max\\n    ) external view returns (uint256 penaltiesAmount) {\\n        uint256 amountOfIncorrectVotes = round.getAmountOfIncorrectVote(\\n            min,\\n            max\\n        );\\n        penaltiesAmount = amountOfIncorrectVotes * round.tokensAtStakePerJuror;\\n    }\\n\\n    function format(\\n        DataTypes.Round storage round,\\n        uint256 id\\n    ) public view returns (OutputTypes.RoundOutput memory) {\\n        return (\\n            OutputTypes.RoundOutput({\\n                roundId: id,\\n                procecutorId: round.procecutorId,\\n                defendantId: round.defendantId,\\n                appealFeeRewards: round.appealFeeRewards,\\n                tokensAtStakePerJuror: round.tokensAtStakePerJuror,\\n                totalFeesForJurors: round.totalFeesForJurors,\\n                maxVotes: round.maxVotes,\\n                penalties: round.penalties,\\n                winningChoice: round.winningChoice,\\n                totalRepartitions: round.totalRepartitions,\\n                totalVoted: round.totalVoted,\\n                totalCommited: round.totalCommited,\\n                counts: round.counts,\\n                evidenceSubmitters: round.evidenceSubmitters.values(),\\n                appealedBy: round.appealedBy,\\n                votes: round.votes,\\n                evidences: round.evidences,\\n                drawnJurors: round.drawnJurors,\\n                judgesClaimed: round.judgesClaimed.values(),\\n                closed: round.closed\\n            })\\n        );\\n    }\\n\\n    function formatAll(\\n        DataTypes.Round[] storage rounds\\n    ) external view returns (OutputTypes.RoundOutput[] memory) {\\n        OutputTypes.RoundOutput[] memory output = new OutputTypes.RoundOutput[](\\n            rounds.length\\n        );\\n        for (uint256 i = 0; i < rounds.length; i++) {\\n            output[i] = format(rounds[i], i);\\n        }\\n        return output;\\n    }\\n}\\n\",\"keccak256\":\"0xf6a72669f0634b624113bdc94638ad5d1313529391d3ffc66cb2eacdb3130c62\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/VoteDataLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\n\\n/**\\n * @title VoteData logic library\\n * @author Blockswan\\n * @notice Implements the logic for vote data specific functions\\n */\\nlibrary VoteDataLogic {\\n    function setJustification(\\n        DataTypes.Vote storage vote,\\n        string memory justification\\n    ) internal returns (bool) {\\n        vote.justification = justification;\\n        return true;\\n    }\\n\\n    function setCommit(\\n        DataTypes.Vote storage vote,\\n        bytes32 commitment\\n    ) internal returns (bool) {\\n        vote.commit = commitment;\\n        return true;\\n    }\\n\\n    function setChoice(\\n        DataTypes.Vote storage vote,\\n        uint256 choice\\n    ) internal returns (bool) {\\n        vote.choice = choice;\\n        return true;\\n    }\\n\\n    function setAccount(\\n        DataTypes.Vote storage vote,\\n        address account\\n    ) internal returns (bool) {\\n        vote.account = account;\\n        return true;\\n    }\\n\\n    function setVoted(DataTypes.Vote storage vote) internal returns (bool) {\\n        vote.hasVoted = true;\\n        return true;\\n    }\\n\\n    function setWeight(\\n        DataTypes.Vote storage vote,\\n        uint256 weight\\n    ) internal returns (bool) {\\n        vote.weight = weight;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xc1147da549f5811faab7374a04df9b5a06b1645afdf1ffd029dd9f328a4f4d81\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logics/VoteLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {InputTypes} from \\\"../types/InputTypes.sol\\\";\\nimport {OutputTypes} from \\\"../types/OutputTypes.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\nimport {VoteDataLogic} from \\\"./VoteDataLogic.sol\\\";\\n\\n/**\\n * @title Vote logic library\\n * @author Blockswan\\n * @notice Implements the logic for vote specific functions\\n */\\nlibrary VoteLogic {\\n    using VoteDataLogic for DataTypes.Vote;\\n\\n    modifier onlyValidChoice(uint256 choice) {\\n        require(choice >= 0 && choice <= 10, Errors.VOTE_INVALID_CHOICE);\\n        _;\\n    }\\n\\n    modifier onlyValidReveal(\\n        DataTypes.Vote storage vote,\\n        uint256 choice,\\n        string memory salt\\n    ) {\\n        require(\\n            isRevealCorrect(vote.account, choice, salt, vote.commit),\\n            Errors.VOTE_REVEAL_INCORRECT\\n        );\\n        _;\\n    }\\n\\n    function encodeChoice(\\n        address account,\\n        uint256 choice,\\n        string memory salt\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(account, choice, salt));\\n    }\\n\\n    function isRevealCorrect(\\n        address account,\\n        uint256 choice,\\n        string memory salt,\\n        bytes32 commitment\\n    ) internal pure returns (bool) {\\n        return encodeChoice(account, choice, salt) == commitment;\\n    }\\n\\n    function isVoteCorrect(\\n        DataTypes.Vote storage vote,\\n        uint256 choice\\n    ) internal view returns (bool) {\\n        return vote.choice == choice;\\n    }\\n\\n    function commit(\\n        address account,\\n        uint256 choice,\\n        uint256 weight,\\n        string memory salt\\n    ) external pure returns (DataTypes.Vote memory newVote) {\\n        newVote = DataTypes.Vote({\\n            account: account,\\n            choice: 0,\\n            justification: \\\"\\\",\\n            commit: encodeChoice(account, choice, salt),\\n            weight: weight,\\n            hasVoted: false\\n        });\\n    }\\n\\n    function reveal(\\n        DataTypes.Vote storage vote,\\n        uint256 choice,\\n        string memory salt,\\n        string memory justification\\n    )\\n        external\\n        onlyValidChoice(choice)\\n        onlyValidReveal(vote, choice, salt)\\n        returns (bool)\\n    {\\n        vote.setChoice(choice);\\n        vote.setJustification(justification);\\n        vote.setVoted();\\n        return true;\\n    }\\n\\n    function isBetweenRange(\\n        DataTypes.Vote memory vote,\\n        uint256 minRange,\\n        uint256 maxRange\\n    ) external pure returns (bool) {\\n        return vote.choice >= minRange && vote.choice <= maxRange;\\n    }\\n\\n    function isVoteCorrect(\\n        DataTypes.Vote memory vote,\\n        uint256 winningChoice\\n    ) external pure returns (bool) {\\n        return vote.choice == winningChoice;\\n    }\\n}\\n\",\"keccak256\":\"0x6660ed5831dd045732438ad40c9eac0574e7902068326642de43e94590b4daa9\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"../../../imports/openzeppelin/contracts/EnumerableSet.sol\\\";\\nimport {EnumerableMap} from \\\"../../../imports/openzeppelin/contracts/EnumerableMap.sol\\\";\\n\\nlibrary DataTypes {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n\\n    enum OrderState {\\n        UNCONFIRMED,\\n        CONFIRMED,\\n        DISPUTED,\\n        DONE\\n    }\\n\\n    enum DisputeState {\\n        EVIDENCE,\\n        COMMIT,\\n        VOTE,\\n        APPEAL,\\n        EXECUTION\\n    }\\n\\n    struct DelayTimestamp {\\n        uint256 selfRefund;\\n        uint256 evidence;\\n        uint256 commit;\\n        uint256 vote;\\n        uint256 appeal;\\n    }\\n\\n    struct User {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        EnumerableSet.UintSet gigIds;\\n        EnumerableSet.UintSet offerIds;\\n        EnumerableSet.UintSet bidIds;\\n        EnumerableSet.UintSet buyerOrderIds;\\n        EnumerableSet.UintSet gigReviewsIds;\\n        EnumerableSet.UintSet userReviewsIds;\\n        EnumerableSet.UintSet reviewsIds;\\n    }\\n\\n    struct Package {\\n        uint256 price;\\n        uint256 timeDelivery;\\n    }\\n\\n    struct Gig {\\n        string metadata;\\n        uint256 createdAt;\\n        bool isPaused;\\n        EnumerableSet.UintSet reviewIds;\\n        EnumerableSet.UintSet orderIds;\\n        Counters.Counter successSell;\\n        Counters.Counter failedSell;\\n        Package[3] packages;\\n    }\\n\\n    struct Invoice {\\n        uint256 price;\\n        uint256 buyerFees;\\n        uint256 sellerFees;\\n        uint256 createdAt;\\n        IERC20 currency;\\n    }\\n\\n    struct Order {\\n        string metadata;\\n        string brief;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        uint256 disputeId;\\n        bool disputed;\\n        Invoice invoice;\\n        OrderState state;\\n        EnumerableSet.UintSet reviewIds;\\n    }\\n\\n    struct Evidence {\\n        uint256 userId;\\n        bytes32 role;\\n        string metadata;\\n    }\\n\\n    struct Vote {\\n        address account;\\n        bytes32 commit;\\n        uint256 choice;\\n        uint256 weight;\\n        string justification;\\n        bool hasVoted;\\n    }\\n\\n    struct Juror {\\n        uint256 stakedTokens;\\n        uint256 freezedTokens;\\n    }\\n\\n    struct Round {\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 appealFeeRewards;\\n        uint256 maxVotes;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 penalties;\\n        uint256 winningChoice;\\n        uint256 totalRepartitions;\\n        uint256 totalVoted;\\n        uint256 totalCommited;\\n        uint256 appealedBy;\\n        uint256[11] counts;\\n        EnumerableSet.UintSet evidenceSubmitters;\\n        EnumerableSet.AddressSet judgesClaimed;\\n        Vote[] votes;\\n        Evidence[] evidences;\\n        address[] drawnJurors;\\n        bool closed;\\n    }\\n\\n    struct Dispute {\\n        uint256 createdAt;\\n        uint256 orderId;\\n        uint256 ruling;\\n        uint256 ruledAt;\\n        uint256[] timestamps;\\n        DisputeState state;\\n        Round[] rounds;\\n    }\\n\\n    struct Review {\\n        uint256 authorId;\\n        string metadata;\\n    }\\n\\n    struct ServiceProvider {\\n        address wallet;\\n        string endpoint;\\n    }\\n\\n    struct EntryParams {\\n        uint256 currencyValue;\\n        uint256 timeAdded;\\n        uint256 xpEarned;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CreationParams {\\n        uint256 currencyValue;\\n        uint256 xpEarned;\\n    }\\n\\n    struct OrderPriceParams {\\n        uint256 trialFlat;\\n        uint256 trialPercent;\\n        uint256 proceedFlat;\\n        uint256 proceedPercent;\\n    }\\n\\n    struct FeeParams {\\n        uint256 flat;\\n        uint256 percent;\\n    }\\n\\n    struct RetributionParams {\\n        uint256 affiliate;\\n        uint256 lvl0AffiliateShare;\\n    }\\n\\n    struct DisputeParams {\\n        uint256 minStake;\\n        uint256 alpha;\\n        uint256 feePerJuror;\\n        uint256 maxVotes;\\n    }\\n}\\n\",\"keccak256\":\"0x6e4e2c885030600a71149b4d83d2970b0f7ac310f89636734fa96fb2f12b9456\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/InputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary InputTypes {\\n    struct CreateUserInput {\\n        uint256 newId;\\n        string metadata;\\n        uint256 inviterId;\\n        address wallet;\\n    }\\n\\n    struct CreateGigInput {\\n        uint256 newId;\\n        DataTypes.Package[3] packages;\\n        string metadata;\\n    }\\n\\n    struct OrderFeesInput {\\n        DataTypes.FeeParams buyerFees;\\n        DataTypes.FeeParams sellerFees;\\n    }\\n\\n    struct OrderRelationInput {\\n        uint256 newId;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n    }\\n\\n    struct CreateOrderInput {\\n        uint256 sellerId;\\n        uint256 buyerId;\\n        uint256 gigId;\\n        uint256 packageId;\\n        string brief;\\n    }\\n\\n    struct ExecuteCreateOrderInput {\\n        uint256 price;\\n        string metadata;\\n        string brief;\\n        OrderFeesInput fees;\\n        OrderRelationInput relations;\\n        IERC20 currency;\\n    }\\n\\n    struct ExecuteCreateDisputeInput {\\n        uint256 newId;\\n        uint256 orderId;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 maxVotes;\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 evidenceUntil;\\n        address[] drawnJurors;\\n    }\\n\\n    struct ExecuteNextRoundInput {\\n        uint256 evidenceUntil;\\n        uint256 maxVotes;\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        address[] drawnJurors;\\n    }\\n\\n    struct BecomeBuyerInput {\\n        address account;\\n        uint256 buyerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct BecomeSellerInput {\\n        address account;\\n        uint256 sellerTimeAdded;\\n        uint8 invitationEarned;\\n    }\\n\\n    struct CalcInvitersRewardsInput {\\n        uint256 currencyValue;\\n        uint256 affiliateShare;\\n        uint256 lvl0AffiliateShare;\\n    }\\n\\n    struct ProcessPaymentInput {\\n        address caller;\\n        address inviter0;\\n        address inviter1;\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n\\n    struct AddRoundInput {\\n        uint256 totalFeesForJurors;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 maxVotes;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        address[] drawnJurors;\\n    }\\n\\n    struct ClaimAsJudgeInput {\\n        address account;\\n        uint256 min;\\n        uint256 max;\\n        uint256 winningChoice;\\n        uint256 amountOfCorrectVotes;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 penalties;\\n    }\\n}\\n\",\"keccak256\":\"0x1252a66975aff762ff5773cdc5cbfe9e95003a0cc6b2e9879ff119fbe60dcea4\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/OutputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n//import {Counters} from \\\"../../../imports/openzeppelin/contracts/Counters.sol\\\";\\nimport {IERC20} from \\\"../../../imports/openzeppelin/contracts/IERC20.sol\\\";\\nimport {GPv2SafeERC20} from \\\"../../../imports/gnosis/contracts/GPv2SafeERC20.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\nlibrary OutputTypes {\\n    struct CalcInvitersRewardsOutput {\\n        uint256 inviter0Rewards;\\n        uint256 inviter1Rewards;\\n        uint256 remainingRewards;\\n    }\\n\\n    struct PrepareBecomeRoleOutput {\\n        address inviter0;\\n        address inviter1;\\n        DataTypes.EntryParams entryParams;\\n        DataTypes.RetributionParams retributionParams;\\n        CalcInvitersRewardsOutput rewards;\\n    }\\n\\n    struct GigOutput {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        uint256[] reviewIds;\\n        uint256[] orderIds;\\n        DataTypes.Package[3] packages;\\n    }\\n\\n    struct UserOutput {\\n        string metadata;\\n        uint256 inviterId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 userId;\\n        address wallet;\\n        uint256[] gigIds;\\n        uint256[] offerIds;\\n        uint256[] bidIds;\\n        uint256[] buyerOrderIds;\\n        uint256[] gigReviewsIds;\\n        uint256[] userReviewsIds;\\n        uint256[] reviewsIds;\\n    }\\n\\n    struct OrderOutput {\\n        string metadata;\\n        string brief;\\n        uint256 orderId;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 gigId;\\n        uint256 disputeId;\\n        uint256[] reviewIds;\\n        bool disputed;\\n        DataTypes.Invoice invoice;\\n        DataTypes.OrderState state;\\n    }\\n\\n    struct RoundOutput {\\n        uint256 roundId;\\n        uint256 procecutorId;\\n        uint256 defendantId;\\n        uint256 appealFeeRewards;\\n        uint256 tokensAtStakePerJuror;\\n        uint256 totalFeesForJurors;\\n        uint256 maxVotes;\\n        uint256 penalties;\\n        uint256 winningChoice;\\n        uint256 totalRepartitions;\\n        uint256 totalVoted;\\n        uint256 totalCommited;\\n        uint256[11] counts;\\n        uint256[] evidenceSubmitters;\\n        uint256 appealedBy;\\n        DataTypes.Vote[] votes;\\n        DataTypes.Evidence[] evidences;\\n        address[] drawnJurors;\\n        address[] judgesClaimed;\\n        bool closed;\\n    }\\n\\n    struct DisputeOutput {\\n        uint256 createdAt;\\n        uint256 disputeId;\\n        uint256 orderId;\\n        uint256 ruling;\\n        uint256 ruledAt;\\n        uint256[] timestamps;\\n        DataTypes.DisputeState state;\\n        RoundOutput[] rounds;\\n    }\\n\\n    struct PopulatedGig {\\n        uint256 gigId;\\n        string metadata;\\n        uint256 createdAt;\\n        uint256 successSell;\\n        uint256 failedSell;\\n        DataTypes.Review[] reviews;\\n        DataTypes.Package[] packages;\\n    }\\n\\n    struct CalcDisputeDelaysFromBlock {\\n        uint256 evidenceUntil;\\n        uint256 commitUntil;\\n        uint256 voteUntil;\\n        uint256 appealUntil;\\n    }\\n\\n    struct PopulatedUser {\\n        uint256 userId;\\n        uint256 buyerUntil;\\n        uint256 buyerInvites;\\n        uint256 sellerUntil;\\n        uint256 sellerInvites;\\n        uint256 bswanBalance;\\n        uint256 usdcBalance;\\n        uint256 xpBalance;\\n        uint256[] gigIds;\\n        address wallet;\\n        bool isBuyer;\\n        bool isSeller;\\n        bool isJudge;\\n        UserOutput[] inviters;\\n    }\\n\\n    struct ExecuteClaimAsJudgeOutput {\\n        bool isVoteCorrect;\\n        bool isVoteInRange;\\n        uint256 amountFromDisputeFees;\\n        uint256 amountFromJurorsTokensAtStake;\\n        uint256 tokensAtStakePerJuror;\\n    }\\n}\\n\",\"keccak256\":\"0x0c0945bb78e9789cffdcd04fc3518ee653b826dbb948ffeaf6026f94309ac295\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x613f9861003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101205760003560e01c806390bc2a91116100ac578063a191f9b31161007b578063a191f9b3146102dd578063a59ae3a4146102fd578063d5a22c1e14610310578063e06f7e741461033d578063ebc3655d1461035d57610120565b806390bc2a911461025d578063987198041461027d5780639d403dc51461029d5780639e3918e6146102bd57610120565b8063425791c4116100f3578063425791c4146101bd5780634aac5052146101dd5780635f8fdbc5146101fd5780636a7809e51461021d5780637254894a1461023d57610120565b80630b4b3b1f14610125578063101ee79114610147578063115e1e5f1461017d578063369de64f1461019d575b600080fd5b81801561013157600080fd5b50610145610140366004613282565b61038d565b005b81801561015357600080fd5b5061016761016236600461335b565b610390565b6040516101749190613a66565b60405180910390f35b61019061018b3660046134af565b610523565b60405161017491906139f5565b8180156101a957600080fd5b506101676101b83660046134d0565b610538565b8180156101c957600080fd5b506101676101d83660046133fb565b6106c9565b6101f06101eb3660046137c5565b610a97565b6040516101749190613a53565b81801561020957600080fd5b506101456102183660046132d1565b610c20565b81801561022957600080fd5b50610145610238366004613282565b6111f0565b81801561024957600080fd5b506101676102583660046135b8565b611619565b81801561026957600080fd5b50610167610278366004613530565b611786565b81801561028957600080fd5b506101456102983660046134af565b6118f9565b8180156102a957600080fd5b506101676102b8366004613675565b611c7e565b8180156102c957600080fd5b506101456102d83660046134af565b611e9b565b6102f06102eb3660046134af565b61215c565b6040516101749190613a84565b61019061030b3660046134af565b6122bd565b81801561031c57600080fd5b5061033061032b36600461329a565b61237f565b6040516101749190613ca6565b81801561034957600080fd5b506101906103583660046135b8565b61261d565b81801561036957600080fd5b5061037d610378366004613282565b612843565b6040516101749493929190613dfe565b50565b6000828180600583015460ff1660048111156103bc57634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b815250906103ff5760405162461bcd60e51b81526004016103f69190613a71565b60405180910390fd5b5060405163db7e892160e01b81526000907319eF137F58a21bda3aa9a259cCf37cd6A0859CA69063db7e89219061043a9089906004016139f5565b60206040518083038186803b15801561045257600080fd5b505af4158015610466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048a919061365d565b6040516331d0395d60e11b8152909150736418479cc723c4121c86E0ECC459a73547C932e1906363a072ba906104c69084908990600401613dcf565b60206040518083038186803b1580156104de57600080fd5b505af41580156104f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105169190613268565b5060019695505050505050565b60008281526020829052604090205b92915050565b600084600180600583015460ff16600481111561056557634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b8152509061059f5760405162461bcd60e51b81526004016103f69190613a71565b5060405163db7e892160e01b81526000907319eF137F58a21bda3aa9a259cCf37cd6A0859CA69063db7e8921906105da908b906004016139f5565b60206040518083038186803b1580156105f257600080fd5b505af4158015610606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062a919061365d565b60405163ba30c1a760e01b8152909150736418479cc723c4121c86E0ECC459a73547C932e19063ba30c1a79061066a90849089908c908c90600401613ce4565b60206040518083038186803b15801561068257600080fd5b505af4158015610696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ba9190613268565b50600198975050505050505050565b600082600480600583015460ff1660048111156106f657634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b815250906107305760405162461bcd60e51b81526004016103f69190613a71565b5060405163db7e892160e01b81526000907319eF137F58a21bda3aa9a259cCf37cd6A0859CA69063db7e89219061076b9089906004016139f5565b60206040518083038186803b15801561078357600080fd5b505af4158015610797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bb919061365d565b60405163164ca46760e31b8152909150737481003653ea47b7889C8eAb8d7c2A0577aFbd129063b2652338906107f59084906004016139f5565b60206040518083038186803b15801561080d57600080fd5b505af4158015610821573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108459190613268565b60405180604001604052806002815260200161363160f01b8152509061087e5760405162461bcd60e51b81526004016103f69190613a71565b506040516345597be160e11b81527319eF137F58a21bda3aa9a259cCf37cd6A0859CA690638ab2f7c2906108b9908990600090600401613c84565b60206040518083038186803b1580156108d157600080fd5b505af41580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109099190613268565b50604051636377233f60e11b81527319eF137F58a21bda3aa9a259cCf37cd6A0859CA69063c6ee467e906109419089906004016139f5565b60206040518083038186803b15801561095957600080fd5b505af415801561096d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109919190613268565b50845160405163230ef19960e21b81527319eF137F58a21bda3aa9a259cCf37cd6A0859CA691638c3bc664916109cb918a91600401613c98565b60206040518083038186803b1580156109e357600080fd5b505af41580156109f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1b9190613268565b506040805160c08101825286820151815260608088015160208084019190915288015182840152835490820152600183015460808083019190915287015160a0820152905163365e702360e21b8152736418479cc723c4121c86E0ECC459a73547C932e19163d979c08c916104c69160068b01916004016139fe565b60408051600480825260a0820190925260609142919060208201608080368337019050509150610ac78682613e8c565b82600081518110610ae857634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508482600081518110610b1657634e487b7160e01b600052603260045260246000fd5b6020026020010151610b289190613e8c565b82600181518110610b4957634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508382600181518110610b7757634e487b7160e01b600052603260045260246000fd5b6020026020010151610b899190613e8c565b82600281518110610baa57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508282600281518110610bd857634e487b7160e01b600052603260045260246000fd5b6020026020010151610bea9190613e8c565b82600381518110610c0b57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505050949350505050565b81600080600583015460ff166004811115610c4b57634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b81525090610c855760405162461bcd60e51b81526004016103f69190613a71565b5083600401600081548110610caa57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548042101560405180604001604052806002815260200161353360f01b81525090610cf25760405162461bcd60e51b81526004016103f69190613a71565b5060405163db7e892160e01b81526000907319eF137F58a21bda3aa9a259cCf37cd6A0859CA69063db7e892190610d2d9089906004016139f5565b60206040518083038186803b158015610d4557600080fd5b505af4158015610d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7d919061365d565b60405163e6053cff60e01b8152909150736418479cc723c4121c86E0ECC459a73547C932e19063e6053cff90610db79084906004016139f5565b60206040518083038186803b158015610dcf57600080fd5b505af4158015610de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e079190613268565b15610f2957604080860151905163230ef19960e21b81527319eF137F58a21bda3aa9a259cCf37cd6A0859CA691638c3bc66491610e48918a91600401613c98565b60206040518083038186803b158015610e6057600080fd5b505af4158015610e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e989190613268565b506040516345597be160e11b81527319eF137F58a21bda3aa9a259cCf37cd6A0859CA690638ab2f7c290610ed3908990600190600401613c84565b60206040518083038186803b158015610eeb57600080fd5b505af4158015610eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f239190613268565b506111e8565b604080860151905163230ef19960e21b81527319eF137F58a21bda3aa9a259cCf37cd6A0859CA691638c3bc66491610f65918a91600401613c98565b60206040518083038186803b158015610f7d57600080fd5b505af4158015610f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb59190613268565b50606085015160405163230ef19960e21b81527319eF137F58a21bda3aa9a259cCf37cd6A0859CA691638c3bc66491610ff2918a91600401613c98565b60206040518083038186803b15801561100a57600080fd5b505af415801561101e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110429190613268565b50608085015160405163230ef19960e21b81527319eF137F58a21bda3aa9a259cCf37cd6A0859CA691638c3bc6649161107f918a91600401613c98565b60206040518083038186803b15801561109757600080fd5b505af41580156110ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cf9190613268565b506040516345597be160e11b81527319eF137F58a21bda3aa9a259cCf37cd6A0859CA690638ab2f7c29061110a908990600390600401613c84565b60206040518083038186803b15801561112257600080fd5b505af4158015611136573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115a9190613268565b5060405163764a60fb60e11b8152737481003653ea47b7889C8eAb8d7c2A0577aFbd129063ec94c1f69061119690849061271090600401613c98565b60206040518083038186803b1580156111ae57600080fd5b505af41580156111c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e69190613268565b505b505050505050565b80600380600583015460ff16600481111561121b57634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b815250906112555760405162461bcd60e51b81526004016103f69190613a71565b508260040160038154811061127a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548042101560405180604001604052806002815260200161353360f01b815250906112c25760405162461bcd60e51b81526004016103f69190613a71565b506040516345597be160e11b81527319eF137F58a21bda3aa9a259cCf37cd6A0859CA690638ab2f7c2906112fc9087906004908101613c84565b60206040518083038186803b15801561131457600080fd5b505af4158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190613268565b5060405163db7e892160e01b81526000907319eF137F58a21bda3aa9a259cCf37cd6A0859CA69063db7e8921906113879088906004016139f5565b60206040518083038186803b15801561139f57600080fd5b505af41580156113b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d7919061365d565b60078101546040516389e48ba160e01b8152919250906000908190737481003653ea47b7889C8eAb8d7c2A0577aFbd12906389e48ba19061141c9086906004016139f5565b604080518083038186803b15801561143357600080fd5b505af4158015611447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146b9190613775565b60405163c0b088f760e01b81529193509150737481003653ea47b7889C8eAb8d7c2A0577aFbd12906357d47234908690736418479cc723c4121c86E0ECC459a73547C932e19063c0b088f7906114c990849089908990600401613de8565b60206040518083038186803b1580156114e157600080fd5b505af41580156114f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611519919061365d565b6040518363ffffffff1660e01b8152600401611536929190613c98565b60206040518083038186803b15801561154e57600080fd5b505af4158015611562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115869190613268565b5060405163d1e1ddff60e01b8152737481003653ea47b7889C8eAb8d7c2A0577aFbd129063d1e1ddff906115be9087906004016139f5565b60206040518083038186803b1580156115d657600080fd5b505af41580156115ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160e9190613268565b505050505050505050565b600083600380600583015460ff16600481111561164657634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b815250906116805760405162461bcd60e51b81526004016103f69190613a71565b5060405163db7e892160e01b81526000907319eF137F58a21bda3aa9a259cCf37cd6A0859CA69063db7e8921906116bb908a906004016139f5565b60206040518083038186803b1580156116d357600080fd5b505af41580156116e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170b919061365d565b6040516317eb2c5b60e11b8152909150736418479cc723c4121c86E0ECC459a73547C932e190632fd658b6906117499084908a908a90600401613de8565b60006040518083038186803b15801561176157600080fd5b505af4158015611775573d6000803e3d6000fd5b5060019a9950505050505050505050565b600085600280600583015460ff1660048111156117b357634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b815250906117ed5760405162461bcd60e51b81526004016103f69190613a71565b5060405163db7e892160e01b81526000907319eF137F58a21bda3aa9a259cCf37cd6A0859CA69063db7e892190611828908c906004016139f5565b60206040518083038186803b15801561184057600080fd5b505af4158015611854573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611878919061365d565b604051635dd10b2960e11b8152909150736418479cc723c4121c86E0ECC459a73547C932e19063bba21652906118ba90849089908d908d908d90600401613d1b565b60006040518083038186803b1580156118d257600080fd5b505af41580156118e6573d6000803e3d6000fd5b5060019c9b505050505050505050505050565b81600280600583015460ff16600481111561192457634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b8152509061195e5760405162461bcd60e51b81526004016103f69190613a71565b508360040160028154811061198357634e487b7160e01b600052603260045260246000fd5b90600052602060002001548042101560405180604001604052806002815260200161353360f01b815250906119cb5760405162461bcd60e51b81526004016103f69190613a71565b5060405163db7e892160e01b815285906000907319eF137F58a21bda3aa9a259cCf37cd6A0859CA69063db7e892190611a089085906004016139f5565b60206040518083038186803b158015611a2057600080fd5b505af4158015611a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a58919061365d565b9050600081600901541160405180604001604052806002815260200161353760f01b81525090611a9b5760405162461bcd60e51b81526004016103f69190613a71565b506040516345597be160e11b81527319eF137F58a21bda3aa9a259cCf37cd6A0859CA690638ab2f7c290611ad6908a90600390600401613c84565b60206040518083038186803b158015611aee57600080fd5b505af4158015611b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b269190613268565b5060405163230ef19960e21b81527319eF137F58a21bda3aa9a259cCf37cd6A0859CA690638c3bc66490611b60908a908a90600401613c98565b60206040518083038186803b158015611b7857600080fd5b505af4158015611b8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb09190613268565b5060405163db7e892160e01b81526000907319eF137F58a21bda3aa9a259cCf37cd6A0859CA69063db7e892190611beb908b906004016139f5565b60206040518083038186803b158015611c0357600080fd5b505af4158015611c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3b919061365d565b9050737481003653ea47b7889C8eAb8d7c2A0577aFbd1263ec94c1f682611c6181612aa3565b6040518363ffffffff1660e01b81526004016115be929190613c98565b80516000908190611c90908690612b26565b90506000611ca2846000015186610523565b60e085015160405163230ef19960e21b81529192507319eF137F58a21bda3aa9a259cCf37cd6A0859CA691638c3bc66491611ce291859190600401613c98565b60206040518083038186803b158015611cfa57600080fd5b505af4158015611d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d329190613268565b5080600601736418479cc723c4121c86E0ECC459a73547C932e163d979c08c90916040518060c001604052808860a0015181526020018860c0015181526020018860800151815260200188604001518152602001886060015181526020018861010001518152506040518363ffffffff1660e01b8152600401611db69291906139fe565b60206040518083038186803b158015611dce57600080fd5b505af4158015611de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e069190613268565b5060405163218d0a6360e01b81527319eF137F58a21bda3aa9a259cCf37cd6A0859CA69063218d0a6390611e3e9084906004016139f5565b60206040518083038186803b158015611e5657600080fd5b505af4158015611e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8e9190613268565b50909150505b9392505050565b81600180600583015460ff166004811115611ec657634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b81525090611f005760405162461bcd60e51b81526004016103f69190613a71565b5083600401600181548110611f2557634e487b7160e01b600052603260045260246000fd5b90600052602060002001548042101560405180604001604052806002815260200161353360f01b81525090611f6d5760405162461bcd60e51b81526004016103f69190613a71565b5060405163db7e892160e01b815285906000907319eF137F58a21bda3aa9a259cCf37cd6A0859CA69063db7e892190611faa9085906004016139f5565b60206040518083038186803b158015611fc257600080fd5b505af4158015611fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffa919061365d565b9050600081600a015411604051806040016040528060028152602001611a9b60f11b8152509061203d5760405162461bcd60e51b81526004016103f69190613a71565b5060405163230ef19960e21b81527319eF137F58a21bda3aa9a259cCf37cd6A0859CA690638c3bc66490612077908a908a90600401613c98565b60206040518083038186803b15801561208f57600080fd5b505af41580156120a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c79190613268565b506040516345597be160e11b81527319eF137F58a21bda3aa9a259cCf37cd6A0859CA690638ab2f7c290612102908a90600290600401613c84565b60206040518083038186803b15801561211a57600080fd5b505af415801561212e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121529190613268565b5050505050505050565b612164612bba565b60405180610100016040528084600001548152602001838152602001846001015481526020018460020154815260200184600301548152602001846004018054806020026020016040519081016040528092919081815260200182805480156121ec57602002820191906000526020600020905b8154815260200190600101908083116121d8575b5050509183525050600585015460209091019060ff16600481111561222157634e487b7160e01b600052602160045260246000fd5b8152602001736418479cc723c4121c86E0ECC459a73547C932e163327d2e01866006016040518263ffffffff1660e01b815260040161226091906139f5565b60006040518083038186803b15801561227857600080fd5b505af415801561228c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122b49190810190613052565b90529392505050565b60405163db7e892160e01b815260009081907319eF137F58a21bda3aa9a259cCf37cd6A0859CA69063db7e8921906122f99087906004016139f5565b60206040518083038186803b15801561231157600080fd5b505af4158015612325573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612349919061365d565b9050600081600301548461235d9190613ea4565b612368906002613ea4565b9050612376816103e8612b32565b95945050505050565b612387612c1e565b60405163c466486960e01b81526000907319eF137F58a21bda3aa9a259cCf37cd6A0859CA69063c4664869906123c39088908790600401613c98565b60206040518083038186803b1580156123db57600080fd5b505af41580156123ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612413919061365d565b6007810154604051635f09024560e11b815291925090600090737481003653ea47b7889C8eAb8d7c2A0577aFbd129063be12048a906124589086908690600401613c98565b60206040518083038186803b15801561247057600080fd5b505af4158015612484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a8919061365d565b9050600080737481003653ea47b7889C8eAb8d7c2A0577aFbd126389e48ba1856040518263ffffffff1660e01b81526004016124e491906139f5565b604080518083038186803b1580156124fb57600080fd5b505af415801561250f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125339190613775565b9150915084736418479cc723c4121c86E0ECC459a73547C932e16301d84af590916040518061010001604052808c6001600160a01b03168152602001868152602001858152602001888152602001878152602001896004015481526020018960050154815260200189600601548152506040518363ffffffff1660e01b81526004016125c0929190613d66565b60a06040518083038186803b1580156125d857600080fd5b505af41580156125ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261091906135e3565b9998505050505050505050565b6000808211604051806040016040528060028152602001611b1960f11b8152509061265b5760405162461bcd60e51b81526004016103f69190613a71565b50600080736418479cc723c4121c86E0ECC459a73547C932e16304fb8e1a877319eF137F58a21bda3aa9a259cCf37cd6A0859CA663c46648699091886040518363ffffffff1660e01b81526004016126b4929190613c98565b60206040518083038186803b1580156126cc57600080fd5b505af41580156126e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612704919061365d565b7319eF137F58a21bda3aa9a259cCf37cd6A0859CA663c46648698a61272a60018b613ec3565b6040518363ffffffff1660e01b8152600401612747929190613c98565b60206040518083038186803b15801561275f57600080fd5b505af4158015612773573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612797919061365d565b886040518463ffffffff1660e01b81526004016127b693929190613de8565b604080518083038186803b1580156127cd57600080fd5b505af41580156127e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612805919061374a565b915091508060405180604001604052806002815260200161363360f01b81525090611e8e5760405162461bcd60e51b81526004016103f69190613a71565b600080808084600480600583015460ff16600481111561287357634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b815250906128ad5760405162461bcd60e51b81526004016103f69190613a71565b506003870154604080518082019091526002815261363560f01b60208201528891156128ec5760405162461bcd60e51b81526004016103f69190613a71565b5060405163db7e892160e01b81526000907319eF137F58a21bda3aa9a259cCf37cd6A0859CA69063db7e892190612927908c906004016139f5565b60206040518083038186803b15801561293f57600080fd5b505af4158015612953573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612977919061365d565b60405162ffd60560e01b8152909150736418479cc723c4121c86E0ECC459a73547C932e19062ffd605906129af9084906004016139f5565b60606040518083038186803b1580156129c757600080fd5b505af41580156129db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ff9190613798565b60018c01546040516305d5e26960e21b8152939b50995090975095507319eF137F58a21bda3aa9a259cCf37cd6A0859CA69063175789a490612a47908c908c90600401613c98565b60206040518083038186803b158015612a5f57600080fd5b505af4158015612a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a979190613268565b50505050509193509193565b60008080805b600b811015612b1b578185600c0182600b8110612ad657634e487b7160e01b600052603260045260246000fd5b01541115612b095780925084600c0181600b8110612b0457634e487b7160e01b600052603260045260246000fd5b015491505b80612b1381613f06565b915050612aa9565b50909150505b919050565b6000611e948383612b58565b600081156113881983900484111517612b4a57600080fd5b506127109102611388010490565b6000612b648383612ba2565b612b9a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610532565b506000610532565b60009081526001919091016020526040902054151590565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016060815260200160006004811115612c1157634e487b7160e01b600052602160045260246000fd5b8152602001606081525090565b6040518060a001604052806000151581526020016000151581526020016000815260200160008152602001600081525090565b8051612b2181613f4d565b600082601f830112612c6c578081fd5b81356020612c81612c7c83613e42565b613e19565b8281528181019085830183850287018401881015612c9d578586fd5b855b85811015612cc4578135612cb281613f4d565b84529284019290840190600101612c9f565b5090979650505050505050565b600082601f830112612ce1578081fd5b81516020612cf1612c7c83613e42565b8281528181019085830183850287018401881015612d0d578586fd5b855b85811015612cc4578151612d2281613f4d565b84529284019290840190600101612d0f565b600082601f830112612d44578081fd5b81516020612d54612c7c83613e42565b82815281810190858301855b85811015612cc45781518801606080601f19838d03011215612d80578889fd5b604080518281016001600160401b038282108183111715612da357612da3613f37565b818452858b0151835285840151838c0152938501519380851115612dc5578c8dfd5b5050612dd58d8a85870101613007565b91810191909152865250509284019290840190600101612d60565b600082601f830112612e00578081fd5b81516020612e10612c7c83613e42565b82815281810190858301855b85811015612cc4578151880160c080601f19838d03011215612e3c578889fd5b604080518281016001600160401b038282108183111715612e5f57612e5f613f37565b818452612e6d8b8701612c51565b8352838601518b8401526060860151848401526080860151606084015260a0935083860151915080821115612ea0578c8dfd5b50612eaf8e8b83880101613007565b608083015250612ec0838501612fab565b91810191909152865250509284019290840190600101612e1c565b600082601f830112612eeb578081fd5b6040516101608082018281106001600160401b0382111715612f0f57612f0f613f37565b6040528184828101871015612f22578485fd5b8492505b600b831015612f4657805182526001929092019160209182019101612f26565b509195945050505050565b600082601f830112612f61578081fd5b81516020612f71612c7c83613e42565b8281528181019085830183850287018401881015612f8d578586fd5b855b85811015612cc457815184529284019290840190600101612f8f565b80518015158114612b2157600080fd5b600082601f830112612fcb578081fd5b8135612fd9612c7c82613e65565b818152846020838601011115612fed578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112613017578081fd5b8151613025612c7c82613e65565b818152846020838601011115613039578283fd5b61304a826020830160208701613eda565b949350505050565b60006020808385031215613064578182fd5b82516001600160401b038082111561307a578384fd5b818501915085601f83011261308d578384fd5b815161309b612c7c82613e42565b81815284810190848601875b8481101561325957815187016103c0818d03601f190112156130c757898afd5b6130d2610280613e19565b89820151815260408201518a820152606082015160408201526080820151606082015260a0820151608082015260c082015160a082015260e082015160c08201526101008083015160e083015261012080840151828401526101409150818401518184015250610160808401518284015261018091508184015181840152506101a06131608f828601612edb565b82840152610300840151915089821115613178578c8dfd5b6131868f8d84870101612f51565b90830152506103208201516101c0820152610340820151888111156131a9578b8cfd5b6131b78e8c83860101612df0565b6101e083015250610360820151888111156131d0578b8cfd5b6131de8e8c83860101612d34565b61020083015250610380820151888111156131f7578b8cfd5b6132058e8c83860101612cd1565b610220830152506103a08201518881111561321e578b8cfd5b61322c8e8c83860101612cd1565b610240830152506132406103c08301612fab565b61026082015285525092870192908701906001016130a7565b50909998505050505050505050565b600060208284031215613279578081fd5b611e9482612fab565b600060208284031215613293578081fd5b5035919050565b6000806000606084860312156132ae578182fd5b8335925060208401356132c081613f4d565b929592945050506040919091013590565b60008082840360c08112156132e4578283fd5b8335925060a0601f19820112156132f9578182fd5b5060405160a081018181106001600160401b038211171561331c5761331c613f37565b80604052506020840135815260408401356020820152606084013560408201526080840135606082015260a08401356080820152809150509250929050565b6000806040838503121561336d578182fd5b8235915060208301356001600160401b038082111561338a578283fd5b908401906060828703121561339d578283fd5b6040516060810181811083821117156133b8576133b8613f37565b806040525082358152602083013560208201526040830135828111156133dc578485fd5b6133e888828601612fbb565b6040830152508093505050509250929050565b6000806040838503121561340d578182fd5b8235915060208301356001600160401b038082111561342a578283fd5b9084019060a0828703121561343d578283fd5b60405160a08101818110838211171561345857613458613f37565b806040525082358152602083013560208201526040830135604082015260608301356060820152608083013582811115613490578485fd5b61349c88828601612c5c565b6080830152508093505050509250929050565b600080604083850312156134c1578182fd5b50508035926020909101359150565b600080600080608085870312156134e5578182fd5b843593506020850135925060408501356001600160401b03811115613508578283fd5b61351487828801612fbb565b925050606085013561352581613f4d565b939692955090935050565b600080600080600060a08688031215613547578283fd5b853594506020860135935060408601356001600160401b038082111561356b578485fd5b61357789838a01612fbb565b9450606088013591508082111561358c578283fd5b5061359988828901612fbb565b92505060808601356135aa81613f4d565b809150509295509295909350565b6000806000606084860312156135cc578081fd5b505081359360208301359350604090920135919050565b600060a082840312156135f4578081fd5b60405160a081018181106001600160401b038211171561361657613616613f37565b60405261362283612fab565b815261363060208401612fab565b60208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b60006020828403121561366e578081fd5b5051919050565b600080600060608486031215613689578081fd5b833592506020840135915060408401356001600160401b03808211156136ad578283fd5b81860191506101208083890312156136c3578384fd5b6136cc81613e19565b9050823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358381111561372b578586fd5b6137378a828701612c5c565b8284015250508093505050509250925092565b6000806040838503121561375c578182fd5b8251915061376c60208401612fab565b90509250929050565b60008060408385031215613787578182fd5b505080516020909101519092909150565b6000806000606084860312156137ac578081fd5b8351925060208401519150604084015190509250925092565b600080600080608085870312156137da578182fd5b5050823594602084013594506040840135936060013592509050565b6000815180845260208085019450808401835b8381101561382e5781516001600160a01b031687529582019590820190600101613809565b509495945050505050565b6000815180845260208085018081965082840281019150828601855b8581101561387f57828403895261386d8483516139cc565b98850198935090840190600101613855565b5091979650505050505050565b6000815180845260208085018081965082840281019150828601855b8581101561387f578284038952815180516001600160a01b031685528581015186860152604080820151908601526060808201519086015260808082015160c082880181905291906138fc838901826139a0565b60a094850151151598909401979097525050988501989350908401906001016138a8565b8060005b600b811015613943578151845260209384019390910190600101613924565b50505050565b6000815180845260208085019450808401835b8381101561382e5781518752958201959082019060010161395c565b15159052565b6005811061399c57634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526139b8816020860160208601613eda565b601f01601f19169290920160200192915050565b6000815183526020820151602084015260408201516060604085015261304a60608501826139a0565b90815260200190565b600083825260406020830152825160408301526020830151606083015260408301516080830152606083015160a0830152608083015160c083015260a083015160c060e08401526123766101008401826137f6565b600060208252611e946020830184613949565b901515815260200190565b600060208252611e9460208301846139a0565b60006020808352610120845182850152818501516040818187015280870151915060608281880152808801519250608083818901528089015193508360a089015260a089015193506101008060c08a0152613ae1868a0186613949565b945060c08a0151613af560e08b018261397e565b5060e08a0151601f198a87038101838c0152815180885291890191898801908a810289018b018c5b82811015613c7157848b830301845285516103c0815184528e8201518f8501528b8201518c8501528a8201518b850152898201518a85015260a082015160a085015260c082015160c085015260e082015160e085015288820151898501528d8201518e85015261014080830151818601525061016080830151818601525061018080830151613bae82870182613920565b50506101a0820151816102e0860152613bc982860182613949565b9150506101c08201516103008501526101e0820151848203610320860152613bf1828261388c565b915050610200820151848203610340860152613c0d8282613839565b915050610220820151848203610360860152613c2982826137f6565b915050610240820151848203610380860152613c4582826137f6565b9150506102608201519150613c5e6103a0850183613978565b968e0196948e0194925050600101613b1d565b509e9d5050505050505050505050505050565b82815260408101611e94602083018461397e565b918252602082015260400190565b600060a08201905082511515825260208301511515602083015260408301516040830152606083015160608301526080830151608083015292915050565b600085825260018060a01b038516602083015283604083015260806060830152613d1160808301846139a0565b9695505050505050565b600086825260018060a01b038616602083015284604083015260a06060830152613d4860a08301856139a0565b8281036080840152613d5a81856139a0565b98975050505050505050565b60006101208201905083825260018060a01b038351166020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015160e083015260e08301516101008301529392505050565b60008382526040602083015261304a60408301846139cc565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b6040518181016001600160401b0381118282101715613e3a57613e3a613f37565b604052919050565b60006001600160401b03821115613e5b57613e5b613f37565b5060209081020190565b60006001600160401b03821115613e7e57613e7e613f37565b50601f01601f191660200190565b60008219821115613e9f57613e9f613f21565b500190565b6000816000190483118215151615613ebe57613ebe613f21565b500290565b600082821015613ed557613ed5613f21565b500390565b60005b83811015613ef5578181015183820152602001613edd565b838111156139435750506000910152565b6000600019821415613f1a57613f1a613f21565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461038d57600080fdfea264697066735822122046a2a8726e484139bbf8a92327e855b0e55f05d251cf620780cdd8bf3978d42a64736f6c63430008000033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101205760003560e01c806390bc2a91116100ac578063a191f9b31161007b578063a191f9b3146102dd578063a59ae3a4146102fd578063d5a22c1e14610310578063e06f7e741461033d578063ebc3655d1461035d57610120565b806390bc2a911461025d578063987198041461027d5780639d403dc51461029d5780639e3918e6146102bd57610120565b8063425791c4116100f3578063425791c4146101bd5780634aac5052146101dd5780635f8fdbc5146101fd5780636a7809e51461021d5780637254894a1461023d57610120565b80630b4b3b1f14610125578063101ee79114610147578063115e1e5f1461017d578063369de64f1461019d575b600080fd5b81801561013157600080fd5b50610145610140366004613282565b61038d565b005b81801561015357600080fd5b5061016761016236600461335b565b610390565b6040516101749190613a66565b60405180910390f35b61019061018b3660046134af565b610523565b60405161017491906139f5565b8180156101a957600080fd5b506101676101b83660046134d0565b610538565b8180156101c957600080fd5b506101676101d83660046133fb565b6106c9565b6101f06101eb3660046137c5565b610a97565b6040516101749190613a53565b81801561020957600080fd5b506101456102183660046132d1565b610c20565b81801561022957600080fd5b50610145610238366004613282565b6111f0565b81801561024957600080fd5b506101676102583660046135b8565b611619565b81801561026957600080fd5b50610167610278366004613530565b611786565b81801561028957600080fd5b506101456102983660046134af565b6118f9565b8180156102a957600080fd5b506101676102b8366004613675565b611c7e565b8180156102c957600080fd5b506101456102d83660046134af565b611e9b565b6102f06102eb3660046134af565b61215c565b6040516101749190613a84565b61019061030b3660046134af565b6122bd565b81801561031c57600080fd5b5061033061032b36600461329a565b61237f565b6040516101749190613ca6565b81801561034957600080fd5b506101906103583660046135b8565b61261d565b81801561036957600080fd5b5061037d610378366004613282565b612843565b6040516101749493929190613dfe565b50565b6000828180600583015460ff1660048111156103bc57634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b815250906103ff5760405162461bcd60e51b81526004016103f69190613a71565b60405180910390fd5b5060405163db7e892160e01b815260009073__$a30805314670aba7a268b004e381771f39$__9063db7e89219061043a9089906004016139f5565b60206040518083038186803b15801561045257600080fd5b505af4158015610466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048a919061365d565b6040516331d0395d60e11b815290915073__$81e31c3dd8ba021b250581ddc9f3365d5d$__906363a072ba906104c69084908990600401613dcf565b60206040518083038186803b1580156104de57600080fd5b505af41580156104f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105169190613268565b5060019695505050505050565b60008281526020829052604090205b92915050565b600084600180600583015460ff16600481111561056557634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b8152509061059f5760405162461bcd60e51b81526004016103f69190613a71565b5060405163db7e892160e01b815260009073__$a30805314670aba7a268b004e381771f39$__9063db7e8921906105da908b906004016139f5565b60206040518083038186803b1580156105f257600080fd5b505af4158015610606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062a919061365d565b60405163ba30c1a760e01b815290915073__$81e31c3dd8ba021b250581ddc9f3365d5d$__9063ba30c1a79061066a90849089908c908c90600401613ce4565b60206040518083038186803b15801561068257600080fd5b505af4158015610696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ba9190613268565b50600198975050505050505050565b600082600480600583015460ff1660048111156106f657634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b815250906107305760405162461bcd60e51b81526004016103f69190613a71565b5060405163db7e892160e01b815260009073__$a30805314670aba7a268b004e381771f39$__9063db7e89219061076b9089906004016139f5565b60206040518083038186803b15801561078357600080fd5b505af4158015610797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bb919061365d565b60405163164ca46760e31b815290915073__$af828e0c356433108d8dfb596a8a6763fb$__9063b2652338906107f59084906004016139f5565b60206040518083038186803b15801561080d57600080fd5b505af4158015610821573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108459190613268565b60405180604001604052806002815260200161363160f01b8152509061087e5760405162461bcd60e51b81526004016103f69190613a71565b506040516345597be160e11b815273__$a30805314670aba7a268b004e381771f39$__90638ab2f7c2906108b9908990600090600401613c84565b60206040518083038186803b1580156108d157600080fd5b505af41580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109099190613268565b50604051636377233f60e11b815273__$a30805314670aba7a268b004e381771f39$__9063c6ee467e906109419089906004016139f5565b60206040518083038186803b15801561095957600080fd5b505af415801561096d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109919190613268565b50845160405163230ef19960e21b815273__$a30805314670aba7a268b004e381771f39$__91638c3bc664916109cb918a91600401613c98565b60206040518083038186803b1580156109e357600080fd5b505af41580156109f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1b9190613268565b506040805160c08101825286820151815260608088015160208084019190915288015182840152835490820152600183015460808083019190915287015160a0820152905163365e702360e21b815273__$81e31c3dd8ba021b250581ddc9f3365d5d$__9163d979c08c916104c69160068b01916004016139fe565b60408051600480825260a0820190925260609142919060208201608080368337019050509150610ac78682613e8c565b82600081518110610ae857634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508482600081518110610b1657634e487b7160e01b600052603260045260246000fd5b6020026020010151610b289190613e8c565b82600181518110610b4957634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508382600181518110610b7757634e487b7160e01b600052603260045260246000fd5b6020026020010151610b899190613e8c565b82600281518110610baa57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508282600281518110610bd857634e487b7160e01b600052603260045260246000fd5b6020026020010151610bea9190613e8c565b82600381518110610c0b57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505050949350505050565b81600080600583015460ff166004811115610c4b57634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b81525090610c855760405162461bcd60e51b81526004016103f69190613a71565b5083600401600081548110610caa57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548042101560405180604001604052806002815260200161353360f01b81525090610cf25760405162461bcd60e51b81526004016103f69190613a71565b5060405163db7e892160e01b815260009073__$a30805314670aba7a268b004e381771f39$__9063db7e892190610d2d9089906004016139f5565b60206040518083038186803b158015610d4557600080fd5b505af4158015610d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7d919061365d565b60405163e6053cff60e01b815290915073__$81e31c3dd8ba021b250581ddc9f3365d5d$__9063e6053cff90610db79084906004016139f5565b60206040518083038186803b158015610dcf57600080fd5b505af4158015610de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e079190613268565b15610f2957604080860151905163230ef19960e21b815273__$a30805314670aba7a268b004e381771f39$__91638c3bc66491610e48918a91600401613c98565b60206040518083038186803b158015610e6057600080fd5b505af4158015610e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e989190613268565b506040516345597be160e11b815273__$a30805314670aba7a268b004e381771f39$__90638ab2f7c290610ed3908990600190600401613c84565b60206040518083038186803b158015610eeb57600080fd5b505af4158015610eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f239190613268565b506111e8565b604080860151905163230ef19960e21b815273__$a30805314670aba7a268b004e381771f39$__91638c3bc66491610f65918a91600401613c98565b60206040518083038186803b158015610f7d57600080fd5b505af4158015610f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb59190613268565b50606085015160405163230ef19960e21b815273__$a30805314670aba7a268b004e381771f39$__91638c3bc66491610ff2918a91600401613c98565b60206040518083038186803b15801561100a57600080fd5b505af415801561101e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110429190613268565b50608085015160405163230ef19960e21b815273__$a30805314670aba7a268b004e381771f39$__91638c3bc6649161107f918a91600401613c98565b60206040518083038186803b15801561109757600080fd5b505af41580156110ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cf9190613268565b506040516345597be160e11b815273__$a30805314670aba7a268b004e381771f39$__90638ab2f7c29061110a908990600390600401613c84565b60206040518083038186803b15801561112257600080fd5b505af4158015611136573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115a9190613268565b5060405163764a60fb60e11b815273__$af828e0c356433108d8dfb596a8a6763fb$__9063ec94c1f69061119690849061271090600401613c98565b60206040518083038186803b1580156111ae57600080fd5b505af41580156111c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e69190613268565b505b505050505050565b80600380600583015460ff16600481111561121b57634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b815250906112555760405162461bcd60e51b81526004016103f69190613a71565b508260040160038154811061127a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548042101560405180604001604052806002815260200161353360f01b815250906112c25760405162461bcd60e51b81526004016103f69190613a71565b506040516345597be160e11b815273__$a30805314670aba7a268b004e381771f39$__90638ab2f7c2906112fc9087906004908101613c84565b60206040518083038186803b15801561131457600080fd5b505af4158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190613268565b5060405163db7e892160e01b815260009073__$a30805314670aba7a268b004e381771f39$__9063db7e8921906113879088906004016139f5565b60206040518083038186803b15801561139f57600080fd5b505af41580156113b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d7919061365d565b60078101546040516389e48ba160e01b815291925090600090819073__$af828e0c356433108d8dfb596a8a6763fb$__906389e48ba19061141c9086906004016139f5565b604080518083038186803b15801561143357600080fd5b505af4158015611447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146b9190613775565b60405163c0b088f760e01b8152919350915073__$af828e0c356433108d8dfb596a8a6763fb$__906357d4723490869073__$81e31c3dd8ba021b250581ddc9f3365d5d$__9063c0b088f7906114c990849089908990600401613de8565b60206040518083038186803b1580156114e157600080fd5b505af41580156114f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611519919061365d565b6040518363ffffffff1660e01b8152600401611536929190613c98565b60206040518083038186803b15801561154e57600080fd5b505af4158015611562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115869190613268565b5060405163d1e1ddff60e01b815273__$af828e0c356433108d8dfb596a8a6763fb$__9063d1e1ddff906115be9087906004016139f5565b60206040518083038186803b1580156115d657600080fd5b505af41580156115ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160e9190613268565b505050505050505050565b600083600380600583015460ff16600481111561164657634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b815250906116805760405162461bcd60e51b81526004016103f69190613a71565b5060405163db7e892160e01b815260009073__$a30805314670aba7a268b004e381771f39$__9063db7e8921906116bb908a906004016139f5565b60206040518083038186803b1580156116d357600080fd5b505af41580156116e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170b919061365d565b6040516317eb2c5b60e11b815290915073__$81e31c3dd8ba021b250581ddc9f3365d5d$__90632fd658b6906117499084908a908a90600401613de8565b60006040518083038186803b15801561176157600080fd5b505af4158015611775573d6000803e3d6000fd5b5060019a9950505050505050505050565b600085600280600583015460ff1660048111156117b357634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b815250906117ed5760405162461bcd60e51b81526004016103f69190613a71565b5060405163db7e892160e01b815260009073__$a30805314670aba7a268b004e381771f39$__9063db7e892190611828908c906004016139f5565b60206040518083038186803b15801561184057600080fd5b505af4158015611854573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611878919061365d565b604051635dd10b2960e11b815290915073__$81e31c3dd8ba021b250581ddc9f3365d5d$__9063bba21652906118ba90849089908d908d908d90600401613d1b565b60006040518083038186803b1580156118d257600080fd5b505af41580156118e6573d6000803e3d6000fd5b5060019c9b505050505050505050505050565b81600280600583015460ff16600481111561192457634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b8152509061195e5760405162461bcd60e51b81526004016103f69190613a71565b508360040160028154811061198357634e487b7160e01b600052603260045260246000fd5b90600052602060002001548042101560405180604001604052806002815260200161353360f01b815250906119cb5760405162461bcd60e51b81526004016103f69190613a71565b5060405163db7e892160e01b8152859060009073__$a30805314670aba7a268b004e381771f39$__9063db7e892190611a089085906004016139f5565b60206040518083038186803b158015611a2057600080fd5b505af4158015611a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a58919061365d565b9050600081600901541160405180604001604052806002815260200161353760f01b81525090611a9b5760405162461bcd60e51b81526004016103f69190613a71565b506040516345597be160e11b815273__$a30805314670aba7a268b004e381771f39$__90638ab2f7c290611ad6908a90600390600401613c84565b60206040518083038186803b158015611aee57600080fd5b505af4158015611b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b269190613268565b5060405163230ef19960e21b815273__$a30805314670aba7a268b004e381771f39$__90638c3bc66490611b60908a908a90600401613c98565b60206040518083038186803b158015611b7857600080fd5b505af4158015611b8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb09190613268565b5060405163db7e892160e01b815260009073__$a30805314670aba7a268b004e381771f39$__9063db7e892190611beb908b906004016139f5565b60206040518083038186803b158015611c0357600080fd5b505af4158015611c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3b919061365d565b905073__$af828e0c356433108d8dfb596a8a6763fb$__63ec94c1f682611c6181612aa3565b6040518363ffffffff1660e01b81526004016115be929190613c98565b80516000908190611c90908690612b26565b90506000611ca2846000015186610523565b60e085015160405163230ef19960e21b815291925073__$a30805314670aba7a268b004e381771f39$__91638c3bc66491611ce291859190600401613c98565b60206040518083038186803b158015611cfa57600080fd5b505af4158015611d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d329190613268565b508060060173__$81e31c3dd8ba021b250581ddc9f3365d5d$__63d979c08c90916040518060c001604052808860a0015181526020018860c0015181526020018860800151815260200188604001518152602001886060015181526020018861010001518152506040518363ffffffff1660e01b8152600401611db69291906139fe565b60206040518083038186803b158015611dce57600080fd5b505af4158015611de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e069190613268565b5060405163218d0a6360e01b815273__$a30805314670aba7a268b004e381771f39$__9063218d0a6390611e3e9084906004016139f5565b60206040518083038186803b158015611e5657600080fd5b505af4158015611e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8e9190613268565b50909150505b9392505050565b81600180600583015460ff166004811115611ec657634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b81525090611f005760405162461bcd60e51b81526004016103f69190613a71565b5083600401600181548110611f2557634e487b7160e01b600052603260045260246000fd5b90600052602060002001548042101560405180604001604052806002815260200161353360f01b81525090611f6d5760405162461bcd60e51b81526004016103f69190613a71565b5060405163db7e892160e01b8152859060009073__$a30805314670aba7a268b004e381771f39$__9063db7e892190611faa9085906004016139f5565b60206040518083038186803b158015611fc257600080fd5b505af4158015611fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffa919061365d565b9050600081600a015411604051806040016040528060028152602001611a9b60f11b8152509061203d5760405162461bcd60e51b81526004016103f69190613a71565b5060405163230ef19960e21b815273__$a30805314670aba7a268b004e381771f39$__90638c3bc66490612077908a908a90600401613c98565b60206040518083038186803b15801561208f57600080fd5b505af41580156120a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c79190613268565b506040516345597be160e11b815273__$a30805314670aba7a268b004e381771f39$__90638ab2f7c290612102908a90600290600401613c84565b60206040518083038186803b15801561211a57600080fd5b505af415801561212e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121529190613268565b5050505050505050565b612164612bba565b60405180610100016040528084600001548152602001838152602001846001015481526020018460020154815260200184600301548152602001846004018054806020026020016040519081016040528092919081815260200182805480156121ec57602002820191906000526020600020905b8154815260200190600101908083116121d8575b5050509183525050600585015460209091019060ff16600481111561222157634e487b7160e01b600052602160045260246000fd5b815260200173__$81e31c3dd8ba021b250581ddc9f3365d5d$__63327d2e01866006016040518263ffffffff1660e01b815260040161226091906139f5565b60006040518083038186803b15801561227857600080fd5b505af415801561228c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122b49190810190613052565b90529392505050565b60405163db7e892160e01b8152600090819073__$a30805314670aba7a268b004e381771f39$__9063db7e8921906122f99087906004016139f5565b60206040518083038186803b15801561231157600080fd5b505af4158015612325573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612349919061365d565b9050600081600301548461235d9190613ea4565b612368906002613ea4565b9050612376816103e8612b32565b95945050505050565b612387612c1e565b60405163c466486960e01b815260009073__$a30805314670aba7a268b004e381771f39$__9063c4664869906123c39088908790600401613c98565b60206040518083038186803b1580156123db57600080fd5b505af41580156123ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612413919061365d565b6007810154604051635f09024560e11b81529192509060009073__$af828e0c356433108d8dfb596a8a6763fb$__9063be12048a906124589086908690600401613c98565b60206040518083038186803b15801561247057600080fd5b505af4158015612484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a8919061365d565b905060008073__$af828e0c356433108d8dfb596a8a6763fb$__6389e48ba1856040518263ffffffff1660e01b81526004016124e491906139f5565b604080518083038186803b1580156124fb57600080fd5b505af415801561250f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125339190613775565b915091508473__$81e31c3dd8ba021b250581ddc9f3365d5d$__6301d84af590916040518061010001604052808c6001600160a01b03168152602001868152602001858152602001888152602001878152602001896004015481526020018960050154815260200189600601548152506040518363ffffffff1660e01b81526004016125c0929190613d66565b60a06040518083038186803b1580156125d857600080fd5b505af41580156125ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261091906135e3565b9998505050505050505050565b6000808211604051806040016040528060028152602001611b1960f11b8152509061265b5760405162461bcd60e51b81526004016103f69190613a71565b5060008073__$81e31c3dd8ba021b250581ddc9f3365d5d$__6304fb8e1a8773__$a30805314670aba7a268b004e381771f39$__63c46648699091886040518363ffffffff1660e01b81526004016126b4929190613c98565b60206040518083038186803b1580156126cc57600080fd5b505af41580156126e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612704919061365d565b73__$a30805314670aba7a268b004e381771f39$__63c46648698a61272a60018b613ec3565b6040518363ffffffff1660e01b8152600401612747929190613c98565b60206040518083038186803b15801561275f57600080fd5b505af4158015612773573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612797919061365d565b886040518463ffffffff1660e01b81526004016127b693929190613de8565b604080518083038186803b1580156127cd57600080fd5b505af41580156127e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612805919061374a565b915091508060405180604001604052806002815260200161363360f01b81525090611e8e5760405162461bcd60e51b81526004016103f69190613a71565b600080808084600480600583015460ff16600481111561287357634e487b7160e01b600052602160045260246000fd5b14604051806040016040528060028152602001610d4d60f21b815250906128ad5760405162461bcd60e51b81526004016103f69190613a71565b506003870154604080518082019091526002815261363560f01b60208201528891156128ec5760405162461bcd60e51b81526004016103f69190613a71565b5060405163db7e892160e01b815260009073__$a30805314670aba7a268b004e381771f39$__9063db7e892190612927908c906004016139f5565b60206040518083038186803b15801561293f57600080fd5b505af4158015612953573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612977919061365d565b60405162ffd60560e01b815290915073__$81e31c3dd8ba021b250581ddc9f3365d5d$__9062ffd605906129af9084906004016139f5565b60606040518083038186803b1580156129c757600080fd5b505af41580156129db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ff9190613798565b60018c01546040516305d5e26960e21b8152939b509950909750955073__$a30805314670aba7a268b004e381771f39$__9063175789a490612a47908c908c90600401613c98565b60206040518083038186803b158015612a5f57600080fd5b505af4158015612a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a979190613268565b50505050509193509193565b60008080805b600b811015612b1b578185600c0182600b8110612ad657634e487b7160e01b600052603260045260246000fd5b01541115612b095780925084600c0181600b8110612b0457634e487b7160e01b600052603260045260246000fd5b015491505b80612b1381613f06565b915050612aa9565b50909150505b919050565b6000611e948383612b58565b600081156113881983900484111517612b4a57600080fd5b506127109102611388010490565b6000612b648383612ba2565b612b9a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610532565b506000610532565b60009081526001919091016020526040902054151590565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016060815260200160006004811115612c1157634e487b7160e01b600052602160045260246000fd5b8152602001606081525090565b6040518060a001604052806000151581526020016000151581526020016000815260200160008152602001600081525090565b8051612b2181613f4d565b600082601f830112612c6c578081fd5b81356020612c81612c7c83613e42565b613e19565b8281528181019085830183850287018401881015612c9d578586fd5b855b85811015612cc4578135612cb281613f4d565b84529284019290840190600101612c9f565b5090979650505050505050565b600082601f830112612ce1578081fd5b81516020612cf1612c7c83613e42565b8281528181019085830183850287018401881015612d0d578586fd5b855b85811015612cc4578151612d2281613f4d565b84529284019290840190600101612d0f565b600082601f830112612d44578081fd5b81516020612d54612c7c83613e42565b82815281810190858301855b85811015612cc45781518801606080601f19838d03011215612d80578889fd5b604080518281016001600160401b038282108183111715612da357612da3613f37565b818452858b0151835285840151838c0152938501519380851115612dc5578c8dfd5b5050612dd58d8a85870101613007565b91810191909152865250509284019290840190600101612d60565b600082601f830112612e00578081fd5b81516020612e10612c7c83613e42565b82815281810190858301855b85811015612cc4578151880160c080601f19838d03011215612e3c578889fd5b604080518281016001600160401b038282108183111715612e5f57612e5f613f37565b818452612e6d8b8701612c51565b8352838601518b8401526060860151848401526080860151606084015260a0935083860151915080821115612ea0578c8dfd5b50612eaf8e8b83880101613007565b608083015250612ec0838501612fab565b91810191909152865250509284019290840190600101612e1c565b600082601f830112612eeb578081fd5b6040516101608082018281106001600160401b0382111715612f0f57612f0f613f37565b6040528184828101871015612f22578485fd5b8492505b600b831015612f4657805182526001929092019160209182019101612f26565b509195945050505050565b600082601f830112612f61578081fd5b81516020612f71612c7c83613e42565b8281528181019085830183850287018401881015612f8d578586fd5b855b85811015612cc457815184529284019290840190600101612f8f565b80518015158114612b2157600080fd5b600082601f830112612fcb578081fd5b8135612fd9612c7c82613e65565b818152846020838601011115612fed578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112613017578081fd5b8151613025612c7c82613e65565b818152846020838601011115613039578283fd5b61304a826020830160208701613eda565b949350505050565b60006020808385031215613064578182fd5b82516001600160401b038082111561307a578384fd5b818501915085601f83011261308d578384fd5b815161309b612c7c82613e42565b81815284810190848601875b8481101561325957815187016103c0818d03601f190112156130c757898afd5b6130d2610280613e19565b89820151815260408201518a820152606082015160408201526080820151606082015260a0820151608082015260c082015160a082015260e082015160c08201526101008083015160e083015261012080840151828401526101409150818401518184015250610160808401518284015261018091508184015181840152506101a06131608f828601612edb565b82840152610300840151915089821115613178578c8dfd5b6131868f8d84870101612f51565b90830152506103208201516101c0820152610340820151888111156131a9578b8cfd5b6131b78e8c83860101612df0565b6101e083015250610360820151888111156131d0578b8cfd5b6131de8e8c83860101612d34565b61020083015250610380820151888111156131f7578b8cfd5b6132058e8c83860101612cd1565b610220830152506103a08201518881111561321e578b8cfd5b61322c8e8c83860101612cd1565b610240830152506132406103c08301612fab565b61026082015285525092870192908701906001016130a7565b50909998505050505050505050565b600060208284031215613279578081fd5b611e9482612fab565b600060208284031215613293578081fd5b5035919050565b6000806000606084860312156132ae578182fd5b8335925060208401356132c081613f4d565b929592945050506040919091013590565b60008082840360c08112156132e4578283fd5b8335925060a0601f19820112156132f9578182fd5b5060405160a081018181106001600160401b038211171561331c5761331c613f37565b80604052506020840135815260408401356020820152606084013560408201526080840135606082015260a08401356080820152809150509250929050565b6000806040838503121561336d578182fd5b8235915060208301356001600160401b038082111561338a578283fd5b908401906060828703121561339d578283fd5b6040516060810181811083821117156133b8576133b8613f37565b806040525082358152602083013560208201526040830135828111156133dc578485fd5b6133e888828601612fbb565b6040830152508093505050509250929050565b6000806040838503121561340d578182fd5b8235915060208301356001600160401b038082111561342a578283fd5b9084019060a0828703121561343d578283fd5b60405160a08101818110838211171561345857613458613f37565b806040525082358152602083013560208201526040830135604082015260608301356060820152608083013582811115613490578485fd5b61349c88828601612c5c565b6080830152508093505050509250929050565b600080604083850312156134c1578182fd5b50508035926020909101359150565b600080600080608085870312156134e5578182fd5b843593506020850135925060408501356001600160401b03811115613508578283fd5b61351487828801612fbb565b925050606085013561352581613f4d565b939692955090935050565b600080600080600060a08688031215613547578283fd5b853594506020860135935060408601356001600160401b038082111561356b578485fd5b61357789838a01612fbb565b9450606088013591508082111561358c578283fd5b5061359988828901612fbb565b92505060808601356135aa81613f4d565b809150509295509295909350565b6000806000606084860312156135cc578081fd5b505081359360208301359350604090920135919050565b600060a082840312156135f4578081fd5b60405160a081018181106001600160401b038211171561361657613616613f37565b60405261362283612fab565b815261363060208401612fab565b60208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b60006020828403121561366e578081fd5b5051919050565b600080600060608486031215613689578081fd5b833592506020840135915060408401356001600160401b03808211156136ad578283fd5b81860191506101208083890312156136c3578384fd5b6136cc81613e19565b9050823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358381111561372b578586fd5b6137378a828701612c5c565b8284015250508093505050509250925092565b6000806040838503121561375c578182fd5b8251915061376c60208401612fab565b90509250929050565b60008060408385031215613787578182fd5b505080516020909101519092909150565b6000806000606084860312156137ac578081fd5b8351925060208401519150604084015190509250925092565b600080600080608085870312156137da578182fd5b5050823594602084013594506040840135936060013592509050565b6000815180845260208085019450808401835b8381101561382e5781516001600160a01b031687529582019590820190600101613809565b509495945050505050565b6000815180845260208085018081965082840281019150828601855b8581101561387f57828403895261386d8483516139cc565b98850198935090840190600101613855565b5091979650505050505050565b6000815180845260208085018081965082840281019150828601855b8581101561387f578284038952815180516001600160a01b031685528581015186860152604080820151908601526060808201519086015260808082015160c082880181905291906138fc838901826139a0565b60a094850151151598909401979097525050988501989350908401906001016138a8565b8060005b600b811015613943578151845260209384019390910190600101613924565b50505050565b6000815180845260208085019450808401835b8381101561382e5781518752958201959082019060010161395c565b15159052565b6005811061399c57634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526139b8816020860160208601613eda565b601f01601f19169290920160200192915050565b6000815183526020820151602084015260408201516060604085015261304a60608501826139a0565b90815260200190565b600083825260406020830152825160408301526020830151606083015260408301516080830152606083015160a0830152608083015160c083015260a083015160c060e08401526123766101008401826137f6565b600060208252611e946020830184613949565b901515815260200190565b600060208252611e9460208301846139a0565b60006020808352610120845182850152818501516040818187015280870151915060608281880152808801519250608083818901528089015193508360a089015260a089015193506101008060c08a0152613ae1868a0186613949565b945060c08a0151613af560e08b018261397e565b5060e08a0151601f198a87038101838c0152815180885291890191898801908a810289018b018c5b82811015613c7157848b830301845285516103c0815184528e8201518f8501528b8201518c8501528a8201518b850152898201518a85015260a082015160a085015260c082015160c085015260e082015160e085015288820151898501528d8201518e85015261014080830151818601525061016080830151818601525061018080830151613bae82870182613920565b50506101a0820151816102e0860152613bc982860182613949565b9150506101c08201516103008501526101e0820151848203610320860152613bf1828261388c565b915050610200820151848203610340860152613c0d8282613839565b915050610220820151848203610360860152613c2982826137f6565b915050610240820151848203610380860152613c4582826137f6565b9150506102608201519150613c5e6103a0850183613978565b968e0196948e0194925050600101613b1d565b509e9d5050505050505050505050505050565b82815260408101611e94602083018461397e565b918252602082015260400190565b600060a08201905082511515825260208301511515602083015260408301516040830152606083015160608301526080830151608083015292915050565b600085825260018060a01b038516602083015283604083015260806060830152613d1160808301846139a0565b9695505050505050565b600086825260018060a01b038616602083015284604083015260a06060830152613d4860a08301856139a0565b8281036080840152613d5a81856139a0565b98975050505050505050565b60006101208201905083825260018060a01b038351166020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015160e083015260e08301516101008301529392505050565b60008382526040602083015261304a60408301846139cc565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b6040518181016001600160401b0381118282101715613e3a57613e3a613f37565b604052919050565b60006001600160401b03821115613e5b57613e5b613f37565b5060209081020190565b60006001600160401b03821115613e7e57613e7e613f37565b50601f01601f191660200190565b60008219821115613e9f57613e9f613f21565b500190565b6000816000190483118215151615613ebe57613ebe613f21565b500290565b600082821015613ed557613ed5613f21565b500390565b60005b83811015613ef5578181015183820152602001613edd565b838111156139435750506000910152565b6000600019821415613f1a57613f1a613f21565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461038d57600080fdfea264697066735822122046a2a8726e484139bbf8a92327e855b0e55f05d251cf620780cdd8bf3978d42a64736f6c63430008000033",
  "libraries": {
    "DisputeDataLogic": "0x19eF137F58a21bda3aa9a259cCf37cd6A0859CA6",
    "RoundLogic": "0x6418479cc723c4121c86E0ECC459a73547C932e1",
    "RoundDataLogic": "0x7481003653ea47b7889C8eAb8d7c2A0577aFbd12",
    "InviterLogic": "0x85F0Fe200F946f76fc92AD911b4D21c196D8b71B",
    "SortitionSumTreeFactory": "0x98a5eA2D890197043Ab890082ABDf3402c50E0d9"
  },
  "devdoc": {
    "author": "Blockswan",
    "kind": "dev",
    "methods": {},
    "title": "Dispute logic library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Implements the logic for dispute specific functions",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}