{
  "address": "0x92AaC6Af6E51d2e69e289e3BFD22a7cF4e453acD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addressProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "AddressProviderRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addressProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "AddressProviderUnregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getAddressProviderById",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addresses_provider",
          "type": "address"
        }
      ],
      "name": "getAddressProviderIdByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddressProvidersList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "registerAddressProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "unregisterAddressProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb102af55b62f706ca9839d8e98f3a9b62f36347589793835367dc284609349ef",
  "receipt": {
    "to": null,
    "from": "0x8D3BD47c94b340E0151376ABF9D76C74c471E213",
    "contractAddress": "0x92AaC6Af6E51d2e69e289e3BFD22a7cF4e453acD",
    "transactionIndex": 0,
    "gasUsed": "533494",
    "logsBloom": "0x
    "blockHash": "0x5ca3737ca0932faa4bdae44366fba36362cadf7b4dd95d1185a19ef50ea659ca",
    "transactionHash": "0xb102af55b62f706ca9839d8e98f3a9b62f36347589793835367dc284609349ef",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 33113334,
        "transactionHash": "0xb102af55b62f706ca9839d8e98f3a9b62f36347589793835367dc284609349ef",
        "address": "0x92AaC6Af6E51d2e69e289e3BFD22a7cF4e453acD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d3bd47c94b340e0151376abf9d76c74c471e213"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5ca3737ca0932faa4bdae44366fba36362cadf7b4dd95d1185a19ef50ea659ca"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 33113334,
        "transactionHash": "0xb102af55b62f706ca9839d8e98f3a9b62f36347589793835367dc284609349ef",
        "address": "0x92AaC6Af6E51d2e69e289e3BFD22a7cF4e453acD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000008d3bd47c94b340e0151376abf9d76c74c471e213",
          "0x0000000000000000000000008d3bd47c94b340e0151376abf9d76c74c471e213"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x5ca3737ca0932faa4bdae44366fba36362cadf7b4dd95d1185a19ef50ea659ca"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 33113334,
        "transactionHash": "0xb102af55b62f706ca9839d8e98f3a9b62f36347589793835367dc284609349ef",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008d3bd47c94b340e0151376abf9d76c74c471e213",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002f623fc8f6980a000000000000000000000000000000000000000000000000095d80f9a7e6010c7000000000000000000000000000000000000000000002eba400878a85e5b75b500000000000000000000000000000000000000000000000092e1eb9deef69027000000000000000000000000000000000000000000002eba42fe9ca4edc4f655",
        "logIndex": 2,
        "blockHash": "0x5ca3737ca0932faa4bdae44366fba36362cadf7b4dd95d1185a19ef50ea659ca"
      }
    ],
    "blockNumber": 33113334,
    "cumulativeGasUsed": "533494",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8D3BD47c94b340E0151376ABF9D76C74c471E213"
  ],
  "numDeployments": 2,
  "solcInputHash": "075f2457e796c8d70088564501ef535f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AddressProviderRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AddressProviderUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAddressProviderById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addresses_provider\",\"type\":\"address\"}],\"name\":\"getAddressProviderIdByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressProvidersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"registerAddressProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"unregisterAddressProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Blockswan\",\"details\":\"Used for indexing purposes of Blockswan protocol's marketplaces. The id assigned to an AddressesProvider refers to the market it is connected with, for example with `1` for the Blockswan main market and `2` for the next created.*\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"owner\":\"The owner address of this contract.\"}},\"getAddressProviderById(uint256)\":{\"params\":{\"id\":\"The id of the marketplace\"},\"returns\":{\"_0\":\"The address of the AddressProvider with the given id or zero address if it is not registered\"}},\"getAddressProviderIdByAddress(address)\":{\"params\":{\"addressProvider\":\"The address of the AddressProvider\"},\"returns\":{\"_0\":\"The id of the AddressProvider or 0 if is not registered\"}},\"getAddressProvidersList()\":{\"returns\":{\"_0\":\"The list of addresses providers*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerAddressProvider(address,uint256)\":{\"details\":\"The protocol AddressesProvider must not already be registered in the registryThe id must not be used by an already registered protocol AddressesProvider\",\"params\":{\"id\":\"The id for the new AddressesProvider, referring to the marketplace it belongs to*\",\"provider\":\"The address of the new protocol AddressesProvider\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unregisterAddressProvider(address)\":{\"params\":{\"provider\":\"The protocol AddressesProvider address*\"}}},\"title\":\"Provider Registry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAddressProviderById(uint256)\":{\"notice\":\"Returns the address of a registered AddressProvider\"},\"getAddressProviderIdByAddress(address)\":{\"notice\":\"Returns the id of a registered AddressProvider\"},\"getAddressProvidersList()\":{\"notice\":\"Returns the list of registered addresses providers\"},\"registerAddressProvider(address,uint256)\":{\"notice\":\"Registers an addresses provider\"},\"unregisterAddressProvider(address)\":{\"notice\":\"Removes an addresses provider from the list of registered addresses providers\"}},\"notice\":\"Main registry of Addresses_provider of Blockswan marketplaces.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/configuration/ProviderRegistry.sol\":\"ProviderRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/imports/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8f3397c899641ccd9640d0074d4619bd88c568dab2cd4ecdea402039286bd8b3\",\"license\":\"MIT\"},\"contracts/imports/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x29a6b2b2ea467be6d14ef8c6de3fc72e91578bbd19eb0978a5a80460f4271713\",\"license\":\"MIT\"},\"contracts/interfaces/IProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title IProviderRegistry\\n * @author Blockswan\\n * @notice Defines the basic interface for an Blockswan Protocol Provider Registry.\\n **/\\ninterface IProviderRegistry {\\n    /**\\n     * @dev Emitted when a new AddressProvider is registered.\\n     * @param addressProvider The address of the registered AddressProvider\\n     * @param id The id of the registered AddressProvider\\n     */\\n    event AddressProviderRegistered(\\n        address indexed addressProvider,\\n        uint256 indexed id\\n    );\\n\\n    /**\\n     * @dev Emitted when an addressProvider is unregistered.\\n     * @param addressProvider The address of the unregistered AddressProvider\\n     * @param id The id of the unregistered AddressProvider\\n     */\\n    event AddressProviderUnregistered(\\n        address indexed addressProvider,\\n        uint256 indexed id\\n    );\\n\\n    /**\\n     * @notice Returns the list of registered addresses providers\\n     * @return The list of addresses providers\\n     **/\\n    function getAddressProvidersList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the id of a registered AddressProvider\\n     * @param addressProvider The address of the AddressProvider\\n     * @return The id of the AddressProvider or 0 if is not registered\\n     */\\n    function getAddressProviderIdByAddress(\\n        address addressProvider\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the address of a registered AddressProvider\\n     * @param id The id of the marketplace\\n     * @return The address of the AddressProvider with the given id or zero address if it is not registered\\n     */\\n    function getAddressProviderById(uint256 id) external view returns (address);\\n\\n    /**\\n     * @notice Registers an addresses provider\\n     * @dev The protocol AddressesProvider must not already be registered in the registry\\n     * @dev The id must not be used by an already registered protocol AddressesProvider\\n     * @param provider The address of the new protocol AddressesProvider\\n     * @param id The id for the new AddressesProvider, referring to the marketplace it belongs to\\n     **/\\n    function registerAddressProvider(address provider, uint256 id) external;\\n\\n    /**\\n     * @notice Removes an addresses provider from the list of registered addresses providers\\n     * @param provider The protocol AddressesProvider address\\n     **/\\n    function unregisterAddressProvider(address provider) external;\\n}\\n\",\"keccak256\":\"0x78703fc146685003cfc7675b1259047ff9dd0cfa7a436ac17c665f9568ec0ef8\",\"license\":\"MIT\"},\"contracts/protocol/configuration/ProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Ownable} from \\\"../../imports/openzeppelin/contracts/Ownable.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {IProviderRegistry} from \\\"../../interfaces/IProviderRegistry.sol\\\";\\n\\n/**\\n * @title Provider Registry\\n * @author Blockswan\\n * @notice Main registry of Addresses_provider of Blockswan marketplaces.\\n * @dev Used for indexing purposes of Blockswan protocol's marketplaces. The id assigned to an AddressesProvider refers to the\\n * market it is connected with, for example with `1` for the Blockswan main market and `2` for the next created.\\n **/\\n\\ncontract ProviderRegistry is Ownable, IProviderRegistry {\\n    // List of addresses providers\\n    address[] private _addressProvidersList;\\n    // Map of address provider ids (addressProvider => id)\\n    mapping(address => uint256) private _addressProviderToId;\\n    // Map of id to address provider (id => addressProvider)\\n    mapping(uint256 => address) private _idToAddressProvider;\\n    // Map of address provider list indexes (addressProvider => indexInList)\\n    mapping(address => uint256) private _addressProvidersIndexes;\\n\\n    /**\\n     * @dev Constructor.\\n     * @param owner The owner address of this contract.\\n     */\\n    constructor(address owner) {\\n        transferOwnership(owner);\\n    }\\n\\n    /// @inheritdoc IProviderRegistry\\n    function getAddressProvidersList()\\n        external\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return _addressProvidersList;\\n    }\\n\\n    /// @inheritdoc IProviderRegistry\\n    function registerAddressProvider(\\n        address provider,\\n        uint256 id\\n    ) external override onlyOwner {\\n        require(id != 0, Errors.INVALID_ADDRESS_PROVIDER_ID);\\n        require(\\n            _idToAddressProvider[id] == address(0),\\n            Errors.INVALID_ADDRESS_PROVIDER_ID\\n        );\\n        require(\\n            _addressProviderToId[provider] == 0,\\n            Errors.ADDRESS_PROVIDER_ALREADY_ADDED\\n        );\\n\\n        _addressProviderToId[provider] = id;\\n        _idToAddressProvider[id] = provider;\\n\\n        _addToAddressProviderslist(provider);\\n        emit AddressProviderRegistered(provider, id);\\n    }\\n\\n    /// @inheritdoc IProviderRegistry\\n    function unregisterAddressProvider(\\n        address provider\\n    ) external override onlyOwner {\\n        require(\\n            _addressProviderToId[provider] != 0,\\n            Errors.ADDRESS_PROVIDER_NOT_REGISTERED\\n        );\\n        uint256 old_id = _addressProviderToId[provider];\\n        _idToAddressProvider[old_id] = address(0);\\n        _addressProviderToId[provider] = 0;\\n\\n        _removeFromAddressProvidersList(provider);\\n\\n        emit AddressProviderUnregistered(provider, old_id);\\n    }\\n\\n    /// @inheritdoc IProviderRegistry\\n    function getAddressProviderIdByAddress(\\n        address addresses_provider\\n    ) external view override returns (uint256) {\\n        return _addressProviderToId[addresses_provider];\\n    }\\n\\n    /// @inheritdoc IProviderRegistry\\n    function getAddressProviderById(\\n        uint256 id\\n    ) external view override returns (address) {\\n        return _idToAddressProvider[id];\\n    }\\n\\n    /**\\n     * @notice Adds the addresses provider address to the list.\\n     * @param provider The address of the protocol AddressesProvider\\n     */\\n    function _addToAddressProviderslist(address provider) internal {\\n        _addressProvidersIndexes[provider] = _addressProvidersList.length;\\n        _addressProvidersList.push(provider);\\n    }\\n\\n    /**\\n     * @notice Removes the addresses provider address from the list.\\n     * @param provider The address of the AddressesProvider\\n     */\\n    function _removeFromAddressProvidersList(address provider) internal {\\n        uint256 index = _addressProvidersIndexes[provider];\\n\\n        _addressProvidersIndexes[provider] = 0;\\n\\n        // Swap the index of the last addresses provider in the list with the index of the provider to remove\\n        uint256 last_index = _addressProvidersList.length - 1;\\n        if (index < last_index) {\\n            address last_provider = _addressProvidersList[last_index];\\n            _addressProvidersList[index] = last_provider;\\n            _addressProvidersIndexes[last_provider] = index;\\n        }\\n        _addressProvidersList.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x7fc81382c7f876498fdb99ace48235bc598f27c43d14352a2488008bca3d8e26\",\"license\":\"MIT\"},\"contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Errors  library\\n * @author Blockswan\\n * @notice Defines the error messages emitted by the different contracts of the Blockswan protocol\\n */\\nlibrary Errors {\\n    string public constant INVALID_ADDRESS_PROVIDER_ID = \\\"1\\\"; // The addresses provider is not valid\\n    string public constant ADDRESS_PROVIDER_ALREADY_ADDED = \\\"2\\\"; // This addresses provider already exists\\n    string public constant ADDRESS_PROVIDER_NOT_REGISTERED = \\\"3\\\"; // 'This addresses provider is not registered'\\n    string public constant CONTRACT_NAME_ALREADY_USED = \\\"4\\\"; // 'Requires that given _name does not already have non-zero registered contract address'\\n    string public constant ZERO_ADDRESS_IS_INVALID = \\\"5\\\"; // the address provided is 0x00\\n    string public constant INDEX_OUT_OF_RANGE = \\\"6\\\"; // the index provided is out of range\\n    string public constant ADDRESS_ALREADY_USED = \\\"7\\\"; // 'The address provided has already been unsed to initialise an account'\\n    string public constant INVALID_USER_ID = \\\"8\\\"; // 'The userId is incorrect'\\n    string public constant RESTRICTED_TO_BUYER = \\\"9\\\"; // this function can't  be called by buyers\\n    string public constant INVALID_INVITER_ID = \\\"10\\\"; // The inviter ID provided is incorrect\\n    string public constant FAILED_BECOMING_BUYER = \\\"11\\\"; // The execution to becomeBuyer failed\\n    string public constant RESTRICTED_TO_SELLER = \\\"12\\\"; // this function can't  be called by sellers\\n    string public constant FAILED_BECOMING_SELLER = \\\"13\\\"; // The execution to becomeSeller failed\\n    string public constant NO_MATCHING_XP_KEY = \\\"14\\\"; // There is no xp value to give for this byte32\\n    string public constant GIG_ID_ALREADY_EXISING = \\\"15\\\"; // There is already an id for this gig.\\n    string public constant ONLY_SELLER = \\\"16\\\"; // Only account with the seller role can call the functions\\n    string public constant ONLY_BUYER = \\\"17\\\"; // Only buyers can call those functions.\\n    string public constant NOT_GIG_OWNER = \\\"18\\\"; // The id provided does not match with the gig owner id\\n    string public constant CALLER_NOT_SELLER_ID = \\\"19\\\"; // The seller id provided is not matching with the account address calling the function\\n    string public constant CALLER_NOT_BUYER_ID = \\\"20\\\"; // The buyer id provided is not matching with the account address calling the function\\n    string public constant NOT_ORDER_SELLER = \\\"21\\\"; // The id provided is not the order seller\\n    string public constant NOT_ORDER_BUYER = \\\"22\\\"; // The id provided is not the order buyer\\n    string public constant INVALID_ORDER_STATE = \\\"23\\\"; // The function can't be called under the current order state\\n    string public constant SELF_REFUND_DELAY_NOT_OVER = \\\"24\\\"; // The self refund delay is not over\\n    string public constant NOT_ORDER_ACTOR = \\\"25\\\"; // The account address calling the function is not matching with the buyerId nor sellerId.\\n    string public constant DISPUTE_NOT_CREATED = \\\"26\\\"; // The dispute has not been created yet\\n    string public constant JURY_STAKE_NOT_ENOUGH = \\\"27\\\"; // The jury stake is not enough\\n    string public constant FAILED_TO_STAKE_JURY = \\\"28\\\"; // The jury stake failed\\n    string public constant FAILED_TO_WITHDRAW_JURY = \\\"29\\\"; // The jury withdraw failed\\n    string public constant ROUND_EVIDENCE_ALREADY_SUBMITTED = \\\"30\\\"; // The evidence has already been submitted\\n    string public constant EVIDENCE_NOT_SUBMITTED = \\\"31\\\"; // The evidence has not been submitted\\n    string public constant DS_EVIDENCE_PERIOD_OVER = \\\"32\\\"; // The evidence period is over\\n    // string public constant DS_VOTING_PERIOD_OVER = \\\"33\\\"; // The voting period is over\\n    // string public constant DS_VOTING_PERIOD_NOT_OVER = \\\"34\\\"; // The voting period is not over\\n    // string public constant DS_VOTING_PERIOD_NOT_STARTED = \\\"35\\\"; // The voting period has not started yet\\n    string public constant ONLY_PROVIDER_ALLOWED = \\\"36\\\"; // Only the provider can call this function\\n    string public constant DS_EVIDENCE_SENDER_NOT_PARTY = \\\"37\\\"; // The sender is not a party of the dispute\\n    string public constant CALLER_NOT_USER = \\\"38\\\"; // The caller is not the user Id\\n    string public constant DS_EVIDENCE_ROLE_NOT_VALID = \\\"39\\\"; // The role is not valid\\n    string public constant RD_ROUND_DOES_NOT_EXIST = \\\"40\\\"; // The round does not exist\\n    string public constant DS_IN_EXECUTION_PERIOD = \\\"46\\\"; //     The dispute is in execution state\\n    string public constant VOTE_REVEAL_INCORRECT = \\\"47\\\"; //     The vote reveal is incorrect\\n    string public constant ROUND_VOTE_ALREADY_COMMITED = \\\"48\\\"; //     The vote has already been commited\\n    string public constant ROUND_VOTE_NOT_COMMITED = \\\"49\\\"; //     The vote has not been commited\\n    string public constant ROUND_VOTE_ALREADY_REVEALED = \\\"50\\\"; //     The vote has already been revealed\\n    string public constant RD_ACCOUNT_NOT_DRAWN_JUROR = \\\"51\\\"; //     The account is not a drawn juror\\n    string public constant DS_COMMIT_STATE_REQUIRED = \\\"52\\\"; //    The dispute is not in commit state\\n    string public constant DS_TIME_NOT_PASSED = \\\"53\\\"; //   The time has not passed\\n    string public constant DS_INVALID_STATE = \\\"54\\\"; //   The state is invalid\\n    string public constant VOTE_INVALID_CHOICE = \\\"55\\\"; //  The vote choice is invalid\\n    string public constant DS_NO_COMMITMENTS_MADE_FOR_ROUND = \\\"56\\\"; //  No commitments were made for the round\\n    string public constant DS_NO_VOTES_MADE_FOR_ROUND = \\\"57\\\"; //  No votes were made for the round\\n    string public constant RD_VOTE_NOT_FOUND = \\\"58\\\"; //  The vote was not found\\n    string public constant ROUND_NOT_CLOSED = \\\"59\\\"; //  The round is not closed\\n    string public constant VOTE_INCORRECT = \\\"60\\\"; //  The vote is incorrect\\n    string public constant ROUND_NOT_APPEALED = \\\"61\\\"; //  The round is not appealed\\n    string public constant ROUND_ID_INVALID = \\\"62\\\"; //  The round id is invalid\\n    string public constant CLAIM_NOT_ALLOWED = \\\"63\\\"; //  The claim is not allowed\\n    string public constant ROUND_IS_APPEALED = \\\"64\\\"; //  The round is appealed\\n    string public constant DS_DISPUTE_ALREADY_RULED = \\\"65\\\"; //  The dispute is already ruled\\n}\\n\",\"keccak256\":\"0x006a08fc9f61bb5b5f34aba81b29feff39671d8d23647e159b5aae7cd8755cc2\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516109c93803806109c983398101604081905261002f91610171565b61003833610047565b61004181610097565b506101a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61009f610115565b6001600160a01b0381166101095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61011281610047565b50565b6000546001600160a01b0316331461016f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610100565b565b60006020828403121561018357600080fd5b81516001600160a01b038116811461019a57600080fd5b9392505050565b610819806101b06000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c4ea1e0d1161005b578063c4ea1e0d146100e7578063d1bb2da1146100fc578063f2e596b014610133578063f2fde38b1461015c57600080fd5b8063389140b81461008d578063715018a6146100a25780638da5cb5b146100aa5780639219d4f5146100d4575b600080fd5b6100a061009b36600461068b565b61016f565b005b6100a0610253565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100a06100e23660046106ad565b610267565b6100ef6103fa565b6040516100cb91906106d7565b61012561010a36600461068b565b6001600160a01b031660009081526002602052604090205490565b6040519081526020016100cb565b6100b7610141366004610724565b6000908152600360205260409020546001600160a01b031690565b6100a061016a36600461068b565b61045c565b6101776104d5565b6001600160a01b03811660009081526002602090815260409182902054825180840190935260018352603360f81b918301919091526101d25760405162461bcd60e51b81526004016101c9919061073d565b60405180910390fd5b506001600160a01b038116600081815260026020818152604080842080548086526003845291852080546001600160a01b031916905594845291905291556102198261052f565b60405181906001600160a01b038416907f3e06e57ffab5d06682097dfd2c8e17f93d2bbc7402a5c2f707aed83bac07524b90600090a35050565b61025b6104d5565b610265600061061f565b565b61026f6104d5565b6040805180820190915260018152603160f81b6020820152816102a55760405162461bcd60e51b81526004016101c9919061073d565b5060008181526003602090815260409182902054825180840190935260018352603160f81b918301919091526001600160a01b0316156102f85760405162461bcd60e51b81526004016101c9919061073d565b506001600160a01b03821660009081526002602090815260409182902054825180840190935260018352601960f91b918301919091521561034c5760405162461bcd60e51b81526004016101c9919061073d565b506001600160a01b03821660008181526002602090815260408083208590558483526003825280832080546001600160a01b03199081168617909155600180548686526004909452828520849055838101815584527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690920180549092168417909155518392917fa02a24d3ac97788fe126a9444ac70c0ec7f66c5021cec9f2c9d5682b142904cc91a35050565b6060600180548060200260200160405190810160405280929190818152602001828054801561045257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610434575b5050505050905090565b6104646104d5565b6001600160a01b0381166104c95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101c9565b6104d28161061f565b50565b6000546001600160a01b031633146102655760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c9565b6001600160a01b03811660009081526004602052604081208054908290556001805491929161055e9190610792565b9050808210156105e75760006001828154811061057d5761057d6107b7565b600091825260209091200154600180546001600160a01b0390921692508291859081106105ac576105ac6107b7565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559290911681526004909152604090208290555b60018054806105f8576105f86107cd565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461068657600080fd5b919050565b60006020828403121561069d57600080fd5b6106a68261066f565b9392505050565b600080604083850312156106c057600080fd5b6106c98361066f565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156107185783516001600160a01b0316835292840192918401916001016106f3565b50909695505050505050565b60006020828403121561073657600080fd5b5035919050565b600060208083528351808285015260005b8181101561076a5785810183015185820160400152820161074e565b8181111561077c576000604083870101525b50601f01601f1916929092016040019392505050565b6000828210156107b257634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212208e6e5a0c6e6f6140ba107c7c0f232c6ea616e23460d391e101537c51f2d16b3064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063c4ea1e0d1161005b578063c4ea1e0d146100e7578063d1bb2da1146100fc578063f2e596b014610133578063f2fde38b1461015c57600080fd5b8063389140b81461008d578063715018a6146100a25780638da5cb5b146100aa5780639219d4f5146100d4575b600080fd5b6100a061009b36600461068b565b61016f565b005b6100a0610253565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100a06100e23660046106ad565b610267565b6100ef6103fa565b6040516100cb91906106d7565b61012561010a36600461068b565b6001600160a01b031660009081526002602052604090205490565b6040519081526020016100cb565b6100b7610141366004610724565b6000908152600360205260409020546001600160a01b031690565b6100a061016a36600461068b565b61045c565b6101776104d5565b6001600160a01b03811660009081526002602090815260409182902054825180840190935260018352603360f81b918301919091526101d25760405162461bcd60e51b81526004016101c9919061073d565b60405180910390fd5b506001600160a01b038116600081815260026020818152604080842080548086526003845291852080546001600160a01b031916905594845291905291556102198261052f565b60405181906001600160a01b038416907f3e06e57ffab5d06682097dfd2c8e17f93d2bbc7402a5c2f707aed83bac07524b90600090a35050565b61025b6104d5565b610265600061061f565b565b61026f6104d5565b6040805180820190915260018152603160f81b6020820152816102a55760405162461bcd60e51b81526004016101c9919061073d565b5060008181526003602090815260409182902054825180840190935260018352603160f81b918301919091526001600160a01b0316156102f85760405162461bcd60e51b81526004016101c9919061073d565b506001600160a01b03821660009081526002602090815260409182902054825180840190935260018352601960f91b918301919091521561034c5760405162461bcd60e51b81526004016101c9919061073d565b506001600160a01b03821660008181526002602090815260408083208590558483526003825280832080546001600160a01b03199081168617909155600180548686526004909452828520849055838101815584527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690920180549092168417909155518392917fa02a24d3ac97788fe126a9444ac70c0ec7f66c5021cec9f2c9d5682b142904cc91a35050565b6060600180548060200260200160405190810160405280929190818152602001828054801561045257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610434575b5050505050905090565b6104646104d5565b6001600160a01b0381166104c95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101c9565b6104d28161061f565b50565b6000546001600160a01b031633146102655760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c9565b6001600160a01b03811660009081526004602052604081208054908290556001805491929161055e9190610792565b9050808210156105e75760006001828154811061057d5761057d6107b7565b600091825260209091200154600180546001600160a01b0390921692508291859081106105ac576105ac6107b7565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559290911681526004909152604090208290555b60018054806105f8576105f86107cd565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461068657600080fd5b919050565b60006020828403121561069d57600080fd5b6106a68261066f565b9392505050565b600080604083850312156106c057600080fd5b6106c98361066f565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156107185783516001600160a01b0316835292840192918401916001016106f3565b50909695505050505050565b60006020828403121561073657600080fd5b5035919050565b600060208083528351808285015260005b8181101561076a5785810183015185820160400152820161074e565b8181111561077c576000604083870101525b50601f01601f1916929092016040019392505050565b6000828210156107b257634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212208e6e5a0c6e6f6140ba107c7c0f232c6ea616e23460d391e101537c51f2d16b3064736f6c63430008090033",
  "devdoc": {
    "author": "Blockswan",
    "details": "Used for indexing purposes of Blockswan protocol's marketplaces. The id assigned to an AddressesProvider refers to the market it is connected with, for example with `1` for the Blockswan main market and `2` for the next created.*",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "owner": "The owner address of this contract."
        }
      },
      "getAddressProviderById(uint256)": {
        "params": {
          "id": "The id of the marketplace"
        },
        "returns": {
          "_0": "The address of the AddressProvider with the given id or zero address if it is not registered"
        }
      },
      "getAddressProviderIdByAddress(address)": {
        "params": {
          "addressProvider": "The address of the AddressProvider"
        },
        "returns": {
          "_0": "The id of the AddressProvider or 0 if is not registered"
        }
      },
      "getAddressProvidersList()": {
        "returns": {
          "_0": "The list of addresses providers*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerAddressProvider(address,uint256)": {
        "details": "The protocol AddressesProvider must not already be registered in the registryThe id must not be used by an already registered protocol AddressesProvider",
        "params": {
          "id": "The id for the new AddressesProvider, referring to the marketplace it belongs to*",
          "provider": "The address of the new protocol AddressesProvider"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unregisterAddressProvider(address)": {
        "params": {
          "provider": "The protocol AddressesProvider address*"
        }
      }
    },
    "title": "Provider Registry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAddressProviderById(uint256)": {
        "notice": "Returns the address of a registered AddressProvider"
      },
      "getAddressProviderIdByAddress(address)": {
        "notice": "Returns the id of a registered AddressProvider"
      },
      "getAddressProvidersList()": {
        "notice": "Returns the list of registered addresses providers"
      },
      "registerAddressProvider(address,uint256)": {
        "notice": "Registers an addresses provider"
      },
      "unregisterAddressProvider(address)": {
        "notice": "Removes an addresses provider from the list of registered addresses providers"
      }
    },
    "notice": "Main registry of Addresses_provider of Blockswan marketplaces.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5588,
        "contract": "contracts/protocol/configuration/ProviderRegistry.sol:ProviderRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9587,
        "contract": "contracts/protocol/configuration/ProviderRegistry.sol:ProviderRegistry",
        "label": "_addressProvidersList",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9591,
        "contract": "contracts/protocol/configuration/ProviderRegistry.sol:ProviderRegistry",
        "label": "_addressProviderToId",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9595,
        "contract": "contracts/protocol/configuration/ProviderRegistry.sol:ProviderRegistry",
        "label": "_idToAddressProvider",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 9599,
        "contract": "contracts/protocol/configuration/ProviderRegistry.sol:ProviderRegistry",
        "label": "_addressProvidersIndexes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}